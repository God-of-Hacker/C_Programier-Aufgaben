
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000e6e  00000f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00000f76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002480  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f83  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014dd  00000000  00000000  000045ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000678  00000000  00000000  00005adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d19  00000000  00000000  00006154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c2a  00000000  00000000  00006e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00008a97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	c9 c3       	rjmp	.+1938   	; 0x7f0 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 37       	cpi	r26, 0x74	; 116
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e7       	ldi	r26, 0x74	; 116
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3f       	cpi	r26, 0xF2	; 242
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	a4 c6       	rjmp	.+3400   	; 0xe6a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
    uint16_t temperatur_Led = 0;
    uint16_t heizstufe_Led = 0;
    uint16_t grossherd_Led = 0;
    
    //Initialisieren
    initBoard(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	e1 d1       	rcall	.+962    	; 0x4ea <initBoard>
    uint16_t temperaturSchalter = 0;
    uint16_t drehknopf = 0;
    uint16_t on_off_Led = 0;
    uint16_t temperatur_Led = 0;
    uint16_t heizstufe_Led = 0;
    uint16_t grossherd_Led = 0;
 128:	e1 2c       	mov	r14, r1
 12a:	f1 2c       	mov	r15, r1
        {
            temperatur_Led = OUT_TEMP_LED;
        }
        if (on_off_schalter)
        {
            on_off_Led = OUT_POWER_LED;         
 12c:	bb 24       	eor	r11, r11
 12e:	b3 94       	inc	r11
 130:	c1 2c       	mov	r12, r1
        drehknopf = switchReadAll() & IN_MASKE_SCHALTER_HEIZSTUFE;
        drehknopf = drehknopf >> IN_OFFSET_HEIZSZUFE;
        //Verarbeitung-------------------------------------------------------------
        if (temperaturSchalter)
        {
            temperatur_Led = OFF;
 132:	d1 2c       	mov	r13, r1
 134:	00 e0       	ldi	r16, 0x00	; 0
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE0;
          } 
          else if (on_off_schalter && (drehknopf >= 2) && (drehknopf <= 3)) 
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE1;
 136:	68 94       	set
 138:	77 24       	eor	r7, r7
 13a:	73 f8       	bld	r7, 3
 13c:	81 2c       	mov	r8, r1
          }
          else if (on_off_schalter && (drehknopf >= 4) && (drehknopf <= 5))
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE2;
 13e:	0f 2e       	mov	r0, r31
 140:	f8 e1       	ldi	r31, 0x18	; 24
 142:	5f 2e       	mov	r5, r31
 144:	f0 2d       	mov	r31, r0
 146:	61 2c       	mov	r6, r1
         {
             heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE3;
         }
          else if (on_off_schalter && (drehknopf >= 8) && (drehknopf <= 9))
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE4;
 148:	0f 2e       	mov	r0, r31
 14a:	f8 e7       	ldi	r31, 0x78	; 120
 14c:	3f 2e       	mov	r3, r31
 14e:	f0 2d       	mov	r31, r0
 150:	41 2c       	mov	r4, r1
          }
          else if (on_off_schalter && (drehknopf >= 10) && (drehknopf <= 15))
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE5;
 152:	21 2c       	mov	r2, r1
        {
            temperatur_Led = OFF;
        } 
        else
        {
            temperatur_Led = OUT_TEMP_LED;
 154:	68 94       	set
 156:	99 24       	eor	r9, r9
 158:	91 f8       	bld	r9, 1
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        schalter = switchReadAll();
 15a:	a1 2c       	mov	r10, r1
 15c:	6b d0       	rcall	.+214    	; 0x234 <switchReadAll>
 15e:	18 2f       	mov	r17, r24
        on_off_schalter = schalter & IN_MASKE_ON_OFF_SCHALTER;
 160:	81 70       	andi	r24, 0x01	; 1
 162:	c8 2f       	mov	r28, r24
 164:	80 e0       	ldi	r24, 0x00	; 0
        temperaturSchalter = schalter & IN_MASKE_TEMPERATURSENSOR;
        drehknopf = switchReadAll() & IN_MASKE_SCHALTER_HEIZSTUFE;
 166:	d8 2f       	mov	r29, r24
 168:	65 d0       	rcall	.+202    	; 0x234 <switchReadAll>
        drehknopf = drehknopf >> IN_OFFSET_HEIZSZUFE;
        //Verarbeitung-------------------------------------------------------------
        if (temperaturSchalter)
 16a:	11 fd       	sbrc	r17, 1
 16c:	4e c0       	rjmp	.+156    	; 0x20a <main+0xe6>
        {
            temperatur_Led = OUT_TEMP_LED;
        }
        if (on_off_schalter)
        {
            on_off_Led = OUT_POWER_LED;         
 16e:	2b 2d       	mov	r18, r11
 170:	9c 2d       	mov	r25, r12
 172:	20 97       	sbiw	r28, 0x00	; 0
 174:	11 f4       	brne	.+4      	; 0x17a <main+0x56>
 176:	2d 2d       	mov	r18, r13
 178:	90 2f       	mov	r25, r16
 17a:	42 2f       	mov	r20, r18
 17c:	59 2f       	mov	r21, r25
        } 
        else
        {
            on_off_Led = OFF;
        }
        if (on_off_schalter)
 17e:	cd 2b       	or	r28, r29
 180:	19 f1       	breq	.+70     	; 0x1c8 <main+0xa4>
        {
            temperatur_Led = OFF;
        } 
        else
        {
            temperatur_Led = OUT_TEMP_LED;
 182:	69 2d       	mov	r22, r9
 184:	7a 2d       	mov	r23, r10
 186:	02 c0       	rjmp	.+4      	; 0x18c <main+0x68>
        drehknopf = switchReadAll() & IN_MASKE_SCHALTER_HEIZSTUFE;
        drehknopf = drehknopf >> IN_OFFSET_HEIZSZUFE;
        //Verarbeitung-------------------------------------------------------------
        if (temperaturSchalter)
        {
            temperatur_Led = OFF;
 188:	6d 2d       	mov	r22, r13
 18a:	70 2f       	mov	r23, r16
    {
        //Eingabe------------------------------------------------------------------
        schalter = switchReadAll();
        on_off_schalter = schalter & IN_MASKE_ON_OFF_SCHALTER;
        temperaturSchalter = schalter & IN_MASKE_TEMPERATURSENSOR;
        drehknopf = switchReadAll() & IN_MASKE_SCHALTER_HEIZSTUFE;
 18c:	8c 73       	andi	r24, 0x3C	; 60
 18e:	90 e0       	ldi	r25, 0x00	; 0
        drehknopf = drehknopf >> IN_OFFSET_HEIZSZUFE;
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
        {
            on_off_Led = OFF;
        }
        if (on_off_schalter)
        {
          if (on_off_schalter && drehknopf <= 1)
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	91 05       	cpc	r25, r1
 19c:	e0 f0       	brcs	.+56     	; 0x1d6 <main+0xb2>
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE0;
          } 
          else if (on_off_schalter && (drehknopf >= 2) && (drehknopf <= 3)) 
 19e:	84 30       	cpi	r24, 0x04	; 4
 1a0:	91 05       	cpc	r25, r1
 1a2:	e0 f0       	brcs	.+56     	; 0x1dc <main+0xb8>
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE1;
          }
          else if (on_off_schalter && (drehknopf >= 4) && (drehknopf <= 5))
 1a4:	86 30       	cpi	r24, 0x06	; 6
 1a6:	91 05       	cpc	r25, r1
 1a8:	e0 f0       	brcs	.+56     	; 0x1e2 <main+0xbe>
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE2;
          }
         else if (on_off_schalter && (drehknopf >= 6) && (drehknopf <= 7))
 1aa:	88 30       	cpi	r24, 0x08	; 8
 1ac:	91 05       	cpc	r25, r1
 1ae:	e0 f0       	brcs	.+56     	; 0x1e8 <main+0xc4>
         {
             heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE3;
         }
          else if (on_off_schalter && (drehknopf >= 8) && (drehknopf <= 9))
 1b0:	8a 30       	cpi	r24, 0x0A	; 10
 1b2:	91 05       	cpc	r25, r1
 1b4:	e0 f0       	brcs	.+56     	; 0x1ee <main+0xca>
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE4;
          }
          else if (on_off_schalter && (drehknopf >= 10) && (drehknopf <= 15))
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE5;
             if (on_off_schalter && drehknopf >= 15)
 1b6:	0f 97       	sbiw	r24, 0x0f	; 15
 1b8:	e8 f0       	brcs	.+58     	; 0x1f4 <main+0xd0>
             {
                 grossherd_Led = OUT_GROSSE_KOCHFELD;
 1ba:	68 94       	set
 1bc:	ee 24       	eor	r14, r14
 1be:	e2 f8       	bld	r14, 2
 1c0:	f1 2c       	mov	r15, r1
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE4;
          }
          else if (on_off_schalter && (drehknopf >= 10) && (drehknopf <= 15))
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE5;
 1c2:	28 ef       	ldi	r18, 0xF8	; 248
 1c4:	32 2d       	mov	r19, r2
 1c6:	18 c0       	rjmp	.+48     	; 0x1f8 <main+0xd4>
        {
            temperatur_Led = OFF;
        } 
        else
        {
            temperatur_Led = OUT_TEMP_LED;
 1c8:	69 2d       	mov	r22, r9
 1ca:	7a 2d       	mov	r23, r10
        } 
        
        else
        {
            heizstufe_Led = OFF;
            grossherd_Led = OFF;
 1cc:	ed 2c       	mov	r14, r13
 1ce:	f0 2e       	mov	r15, r16
          }
        } 
        
        else
        {
            heizstufe_Led = OFF;
 1d0:	2d 2d       	mov	r18, r13
 1d2:	30 2f       	mov	r19, r16
 1d4:	11 c0       	rjmp	.+34     	; 0x1f8 <main+0xd4>
        }
        if (on_off_schalter)
        {
          if (on_off_schalter && drehknopf <= 1)
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE0;
 1d6:	2d 2d       	mov	r18, r13
 1d8:	30 2f       	mov	r19, r16
 1da:	0e c0       	rjmp	.+28     	; 0x1f8 <main+0xd4>
          } 
          else if (on_off_schalter && (drehknopf >= 2) && (drehknopf <= 3)) 
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE1;
 1dc:	27 2d       	mov	r18, r7
 1de:	38 2d       	mov	r19, r8
 1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <main+0xd4>
          }
          else if (on_off_schalter && (drehknopf >= 4) && (drehknopf <= 5))
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE2;
 1e2:	25 2d       	mov	r18, r5
 1e4:	36 2d       	mov	r19, r6
 1e6:	08 c0       	rjmp	.+16     	; 0x1f8 <main+0xd4>
          }
         else if (on_off_schalter && (drehknopf >= 6) && (drehknopf <= 7))
         {
             heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE3;
 1e8:	28 e3       	ldi	r18, 0x38	; 56
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <main+0xd4>
         }
          else if (on_off_schalter && (drehknopf >= 8) && (drehknopf <= 9))
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE4;
 1ee:	23 2d       	mov	r18, r3
 1f0:	34 2d       	mov	r19, r4
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <main+0xd4>
          }
          else if (on_off_schalter && (drehknopf >= 10) && (drehknopf <= 15))
          {
              heizstufe_Led = OUT_ANZEIGE_HEIZSTUFE5;
 1f4:	28 ef       	ldi	r18, 0xF8	; 248
 1f6:	32 2d       	mov	r19, r2
            grossherd_Led = OFF;
        }
        
        
        //Ausgabe------------------------------------------------------------------
        ledWriteAll(on_off_Led | temperatur_Led | heizstufe_Led | grossherd_Led);
 1f8:	2e 29       	or	r18, r14
 1fa:	3f 29       	or	r19, r15
 1fc:	c9 01       	movw	r24, r18
 1fe:	86 2b       	or	r24, r22
 200:	97 2b       	or	r25, r23
 202:	84 2b       	or	r24, r20
 204:	95 2b       	or	r25, r21
 206:	13 d0       	rcall	.+38     	; 0x22e <ledWriteAll>
        
    }
 208:	a9 cf       	rjmp	.-174    	; 0x15c <main+0x38>
        {
            temperatur_Led = OUT_TEMP_LED;
        }
        if (on_off_schalter)
        {
            on_off_Led = OUT_POWER_LED;         
 20a:	2b 2d       	mov	r18, r11
 20c:	9c 2d       	mov	r25, r12
 20e:	20 97       	sbiw	r28, 0x00	; 0
 210:	11 f4       	brne	.+4      	; 0x216 <main+0xf2>
 212:	2d 2d       	mov	r18, r13
 214:	90 2f       	mov	r25, r16
 216:	42 2f       	mov	r20, r18
 218:	59 2f       	mov	r21, r25
        } 
        else
        {
            on_off_Led = OFF;
        }
        if (on_off_schalter)
 21a:	cd 2b       	or	r28, r29
 21c:	09 f0       	breq	.+2      	; 0x220 <main+0xfc>
 21e:	b4 cf       	rjmp	.-152    	; 0x188 <main+0x64>
        drehknopf = switchReadAll() & IN_MASKE_SCHALTER_HEIZSTUFE;
        drehknopf = drehknopf >> IN_OFFSET_HEIZSZUFE;
        //Verarbeitung-------------------------------------------------------------
        if (temperaturSchalter)
        {
            temperatur_Led = OFF;
 220:	6d 2d       	mov	r22, r13
 222:	70 2f       	mov	r23, r16
        } 
        
        else
        {
            heizstufe_Led = OFF;
            grossherd_Led = OFF;
 224:	ed 2c       	mov	r14, r13
 226:	f0 2e       	mov	r15, r16
          }
        } 
        
        else
        {
            heizstufe_Led = OFF;
 228:	2d 2d       	mov	r18, r13
 22a:	30 2f       	mov	r19, r16
 22c:	e5 cf       	rjmp	.-54     	; 0x1f8 <main+0xd4>

0000022e <ledWriteAll>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 22e:	82 b9       	out	0x02, r24	; 2
 230:	95 b9       	out	0x05, r25	; 5
 232:	08 95       	ret

00000234 <switchReadAll>:
 234:	86 b1       	in	r24, 0x06	; 6
 236:	08 95       	ret

00000238 <startSystemTimeMs>:
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	84 bd       	out	0x24, r24	; 36
 23c:	8b e0       	ldi	r24, 0x0B	; 11
 23e:	85 bd       	out	0x25, r24	; 37
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 246:	89 ef       	ldi	r24, 0xF9	; 249
 248:	87 bd       	out	0x27, r24	; 39
 24a:	08 95       	ret

0000024c <initAdc>:
 24c:	11 ba       	out	0x11, r1	; 17
 24e:	10 ba       	out	0x10, r1	; 16
 250:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 254:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 26a:	ea e7       	ldi	r30, 0x7A	; 122
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	87 ea       	ldi	r24, 0xA7	; 167
 270:	80 83       	st	Z, r24
 272:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 276:	80 81       	ld	r24, Z
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	80 83       	st	Z, r24
 27c:	80 81       	ld	r24, Z
 27e:	84 ff       	sbrs	r24, 4
 280:	fd cf       	rjmp	.-6      	; 0x27c <initAdc+0x30>
 282:	ea e7       	ldi	r30, 0x7A	; 122
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	8f 7e       	andi	r24, 0xEF	; 239
 28a:	80 83       	st	Z, r24
 28c:	08 95       	ret

0000028e <rgbWrite>:
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	33 e0       	ldi	r19, 0x03	; 3
 292:	f9 01       	movw	r30, r18
 294:	e8 1b       	sub	r30, r24
 296:	f9 0b       	sbc	r31, r25
 298:	c9 01       	movw	r24, r18
 29a:	86 1b       	sub	r24, r22
 29c:	97 0b       	sbc	r25, r23
 29e:	24 1b       	sub	r18, r20
 2a0:	35 0b       	sbc	r19, r21
 2a2:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 2a6:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 2aa:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 2ae:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 2b2:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 2b6:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 2ba:	08 95       	ret

000002bc <initRgb>:
 2bc:	8e ef       	ldi	r24, 0xFE	; 254
 2be:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 2c2:	8b e1       	ldi	r24, 0x1B	; 27
 2c4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	d6 cf       	rjmp	.-84     	; 0x28e <rgbWrite>
 2e2:	08 95       	ret

000002e4 <lcdSid>:
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <lcdSid+0x8>
 2e8:	a0 9a       	sbi	0x14, 0	; 20
 2ea:	08 95       	ret
 2ec:	a0 98       	cbi	0x14, 0	; 20
 2ee:	08 95       	ret

000002f0 <lcdSclk>:
 2f0:	88 23       	and	r24, r24
 2f2:	11 f0       	breq	.+4      	; 0x2f8 <lcdSclk+0x8>
 2f4:	a1 9a       	sbi	0x14, 1	; 20
 2f6:	08 95       	ret
 2f8:	a1 98       	cbi	0x14, 1	; 20
 2fa:	08 95       	ret

000002fc <lcdLight>:
 2fc:	81 11       	cpse	r24, r1
 2fe:	04 c0       	rjmp	.+8      	; 0x308 <lcdLight+0xc>
 300:	84 b5       	in	r24, 0x24	; 36
 302:	8f 7d       	andi	r24, 0xDF	; 223
 304:	84 bd       	out	0x24, r24	; 36
 306:	08 95       	ret
 308:	94 b5       	in	r25, 0x24	; 36
 30a:	90 62       	ori	r25, 0x20	; 32
 30c:	94 bd       	out	0x24, r25	; 36
 30e:	88 bd       	out	0x28, r24	; 40
 310:	08 95       	ret

00000312 <writeLcdF>:
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	7c 01       	movw	r14, r24
 320:	eb 01       	movw	r28, r22
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	df df       	rcall	.-66     	; 0x2e4 <lcdSid>
 326:	05 e0       	ldi	r16, 0x05	; 5
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	e1 df       	rcall	.-62     	; 0x2f0 <lcdSclk>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	df df       	rcall	.-66     	; 0x2f0 <lcdSclk>
 332:	01 50       	subi	r16, 0x01	; 1
 334:	11 09       	sbc	r17, r1
 336:	c9 f7       	brne	.-14     	; 0x32a <writeLcdF+0x18>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	d4 df       	rcall	.-88     	; 0x2e4 <lcdSid>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	d8 df       	rcall	.-80     	; 0x2f0 <lcdSclk>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	d6 df       	rcall	.-84     	; 0x2f0 <lcdSclk>
 344:	83 e4       	ldi	r24, 0x43	; 67
 346:	e8 16       	cp	r14, r24
 348:	f1 04       	cpc	r15, r1
 34a:	19 f4       	brne	.+6      	; 0x352 <writeLcdF+0x40>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	ca df       	rcall	.-108    	; 0x2e4 <lcdSid>
 350:	02 c0       	rjmp	.+4      	; 0x356 <writeLcdF+0x44>
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	c7 df       	rcall	.-114    	; 0x2e4 <lcdSid>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	cb df       	rcall	.-106    	; 0x2f0 <lcdSclk>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	c9 df       	rcall	.-110    	; 0x2f0 <lcdSclk>
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	c1 df       	rcall	.-126    	; 0x2e4 <lcdSid>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	c5 df       	rcall	.-118    	; 0x2f0 <lcdSclk>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	c3 df       	rcall	.-122    	; 0x2f0 <lcdSclk>
 36a:	04 e0       	ldi	r16, 0x04	; 4
 36c:	10 e0       	ldi	r17, 0x00	; 0
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	bf df       	rcall	.-130    	; 0x2f0 <lcdSclk>
 372:	c0 ff       	sbrs	r28, 0
 374:	03 c0       	rjmp	.+6      	; 0x37c <writeLcdF+0x6a>
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	b5 df       	rcall	.-150    	; 0x2e4 <lcdSid>
 37a:	02 c0       	rjmp	.+4      	; 0x380 <writeLcdF+0x6e>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	b2 df       	rcall	.-156    	; 0x2e4 <lcdSid>
 380:	d6 95       	lsr	r29
 382:	c7 95       	ror	r28
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	b4 df       	rcall	.-152    	; 0x2f0 <lcdSclk>
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	b2 df       	rcall	.-156    	; 0x2f0 <lcdSclk>
 38c:	01 50       	subi	r16, 0x01	; 1
 38e:	11 09       	sbc	r17, r1
 390:	71 f7       	brne	.-36     	; 0x36e <writeLcdF+0x5c>
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	a7 df       	rcall	.-178    	; 0x2e4 <lcdSid>
 396:	04 e0       	ldi	r16, 0x04	; 4
 398:	10 e0       	ldi	r17, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	a9 df       	rcall	.-174    	; 0x2f0 <lcdSclk>
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	a7 df       	rcall	.-178    	; 0x2f0 <lcdSclk>
 3a2:	01 50       	subi	r16, 0x01	; 1
 3a4:	11 09       	sbc	r17, r1
 3a6:	c9 f7       	brne	.-14     	; 0x39a <writeLcdF+0x88>
 3a8:	04 e0       	ldi	r16, 0x04	; 4
 3aa:	10 e0       	ldi	r17, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	a0 df       	rcall	.-192    	; 0x2f0 <lcdSclk>
 3b0:	c0 ff       	sbrs	r28, 0
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <writeLcdF+0xa8>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	96 df       	rcall	.-212    	; 0x2e4 <lcdSid>
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <writeLcdF+0xac>
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	93 df       	rcall	.-218    	; 0x2e4 <lcdSid>
 3be:	d6 95       	lsr	r29
 3c0:	c7 95       	ror	r28
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	95 df       	rcall	.-214    	; 0x2f0 <lcdSclk>
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	93 df       	rcall	.-218    	; 0x2f0 <lcdSclk>
 3ca:	01 50       	subi	r16, 0x01	; 1
 3cc:	11 09       	sbc	r17, r1
 3ce:	71 f7       	brne	.-36     	; 0x3ac <writeLcdF+0x9a>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	88 df       	rcall	.-240    	; 0x2e4 <lcdSid>
 3d4:	c4 e0       	ldi	r28, 0x04	; 4
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	8a df       	rcall	.-236    	; 0x2f0 <lcdSclk>
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	88 df       	rcall	.-240    	; 0x2f0 <lcdSclk>
 3e0:	21 97       	sbiw	r28, 0x01	; 1
 3e2:	d1 f7       	brne	.-12     	; 0x3d8 <writeLcdF+0xc6>
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	7e df       	rcall	.-260    	; 0x2e4 <lcdSid>
 3e8:	87 ec       	ldi	r24, 0xC7	; 199
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <writeLcdF+0xda>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <writeLcdF+0xe0>
 3f2:	00 00       	nop
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	08 95       	ret

00000402 <lcdWriteText>:
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	65 97       	sbiw	r28, 0x15	; 21
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	9e 01       	movw	r18, r28
 41a:	20 5e       	subi	r18, 0xE0	; 224
 41c:	3f 4f       	sbci	r19, 0xFF	; 255
 41e:	4e 8d       	ldd	r20, Y+30	; 0x1e
 420:	5f 8d       	ldd	r21, Y+31	; 0x1f
 422:	65 e1       	ldi	r22, 0x15	; 21
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	3a d2       	rcall	.+1140   	; 0x8a0 <vsnprintf>
 42c:	6d 8d       	ldd	r22, Y+29	; 0x1d
 42e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 430:	90 e2       	ldi	r25, 0x20	; 32
 432:	89 9f       	mul	r24, r25
 434:	60 0d       	add	r22, r0
 436:	11 24       	eor	r1, r1
 438:	60 68       	ori	r22, 0x80	; 128
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	83 e4       	ldi	r24, 0x43	; 67
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	68 df       	rcall	.-304    	; 0x312 <writeLcdF>
 442:	69 81       	ldd	r22, Y+1	; 0x01
 444:	66 23       	and	r22, r22
 446:	79 f0       	breq	.+30     	; 0x466 <lcdWriteText+0x64>
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	1f 5f       	subi	r17, 0xFF	; 255
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	84 e4       	ldi	r24, 0x44	; 68
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	5f df       	rcall	.-322    	; 0x312 <writeLcdF>
 454:	e1 e0       	ldi	r30, 0x01	; 1
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	ec 0f       	add	r30, r28
 45a:	fd 1f       	adc	r31, r29
 45c:	e1 0f       	add	r30, r17
 45e:	f1 1d       	adc	r31, r1
 460:	60 81       	ld	r22, Z
 462:	61 11       	cpse	r22, r1
 464:	f2 cf       	rjmp	.-28     	; 0x44a <lcdWriteText+0x48>
 466:	65 96       	adiw	r28, 0x15	; 21
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	08 95       	ret

0000047a <lcdClear>:
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	83 e4       	ldi	r24, 0x43	; 67
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	47 df       	rcall	.-370    	; 0x312 <writeLcdF>
 484:	8f e3       	ldi	r24, 0x3F	; 63
 486:	9f e1       	ldi	r25, 0x1F	; 31
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <lcdClear+0xe>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <lcdClear+0x14>
 48e:	00 00       	nop
 490:	80 e3       	ldi	r24, 0x30	; 48
 492:	92 e0       	ldi	r25, 0x02	; 2
 494:	9f 93       	push	r25
 496:	8f 93       	push	r24
 498:	1f 92       	push	r1
 49a:	1f 92       	push	r1
 49c:	b2 df       	rcall	.-156    	; 0x402 <lcdWriteText>
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	08 95       	ret

000004a8 <initLcd>:
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	22 df       	rcall	.-444    	; 0x2f0 <lcdSclk>
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	1a df       	rcall	.-460    	; 0x2e4 <lcdSid>
 4b0:	64 e3       	ldi	r22, 0x34	; 52
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	83 e4       	ldi	r24, 0x43	; 67
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	2c df       	rcall	.-424    	; 0x312 <writeLcdF>
 4ba:	69 e0       	ldi	r22, 0x09	; 9
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	83 e4       	ldi	r24, 0x43	; 67
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	27 df       	rcall	.-434    	; 0x312 <writeLcdF>
 4c4:	60 e3       	ldi	r22, 0x30	; 48
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	83 e4       	ldi	r24, 0x43	; 67
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	22 df       	rcall	.-444    	; 0x312 <writeLcdF>
 4ce:	6c e0       	ldi	r22, 0x0C	; 12
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	83 e4       	ldi	r24, 0x43	; 67
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	1d df       	rcall	.-454    	; 0x312 <writeLcdF>
 4d8:	d0 df       	rcall	.-96     	; 0x47a <lcdClear>
 4da:	67 e0       	ldi	r22, 0x07	; 7
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	83 e4       	ldi	r24, 0x43	; 67
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	17 df       	rcall	.-466    	; 0x312 <writeLcdF>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0a cf       	rjmp	.-492    	; 0x2fc <lcdLight>
 4e8:	08 95       	ret

000004ea <initBoard>:
 4ea:	4f 92       	push	r4
 4ec:	5f 92       	push	r5
 4ee:	6f 92       	push	r6
 4f0:	7f 92       	push	r7
 4f2:	8f 92       	push	r8
 4f4:	9f 92       	push	r9
 4f6:	af 92       	push	r10
 4f8:	bf 92       	push	r11
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	c8 2f       	mov	r28, r24
 50c:	85 b7       	in	r24, 0x35	; 53
 50e:	85 bf       	out	0x35, r24	; 53
 510:	12 b8       	out	0x02, r1	; 2
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	81 b9       	out	0x01, r24	; 1
 516:	15 b8       	out	0x05, r1	; 5
 518:	84 b9       	out	0x04, r24	; 4
 51a:	88 b9       	out	0x08, r24	; 8
 51c:	17 b8       	out	0x07, r1	; 7
 51e:	8b b9       	out	0x0b, r24	; 11
 520:	1a b8       	out	0x0a, r1	; 10
 522:	8e b9       	out	0x0e, r24	; 14
 524:	1d b8       	out	0x0d, r1	; 13
 526:	72 98       	cbi	0x0e, 2	; 14
 528:	11 ba       	out	0x11, r1	; 17
 52a:	10 ba       	out	0x10, r1	; 16
 52c:	94 e0       	ldi	r25, 0x04	; 4
 52e:	94 bb       	out	0x14, r25	; 20
 530:	93 b3       	in	r25, 0x13	; 19
 532:	93 60       	ori	r25, 0x03	; 3
 534:	93 bb       	out	0x13, r25	; 19
 536:	9d 9a       	sbi	0x13, 5	; 19
 538:	97 ec       	ldi	r25, 0xC7	; 199
 53a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 53e:	98 e3       	ldi	r25, 0x38	; 56
 540:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 544:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 548:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 54c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 550:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 554:	8c e3       	ldi	r24, 0x3C	; 60
 556:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 55a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 55e:	78 94       	sei
 560:	6b de       	rcall	.-810    	; 0x238 <startSystemTimeMs>
 562:	a2 df       	rcall	.-188    	; 0x4a8 <initLcd>
 564:	73 de       	rcall	.-794    	; 0x24c <initAdc>
 566:	aa de       	rcall	.-684    	; 0x2bc <initRgb>
 568:	cc 23       	and	r28, r28
 56a:	09 f4       	brne	.+2      	; 0x56e <initBoard+0x84>
 56c:	b8 c0       	rjmp	.+368    	; 0x6de <initBoard+0x1f4>
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	c5 de       	rcall	.-630    	; 0x2fc <lcdLight>
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	6f ef       	ldi	r22, 0xFF	; 255
 578:	73 e0       	ldi	r23, 0x03	; 3
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	87 de       	rcall	.-754    	; 0x28e <rgbWrite>
 580:	8d e1       	ldi	r24, 0x1D	; 29
 582:	92 e0       	ldi	r25, 0x02	; 2
 584:	9f 93       	push	r25
 586:	8f 93       	push	r24
 588:	1f 92       	push	r1
 58a:	1f 92       	push	r1
 58c:	3a df       	rcall	.-396    	; 0x402 <lcdWriteText>
 58e:	82 e3       	ldi	r24, 0x32	; 50
 590:	92 e0       	ldi	r25, 0x02	; 2
 592:	9f 93       	push	r25
 594:	8f 93       	push	r24
 596:	1f 92       	push	r1
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	8f 93       	push	r24
 59c:	32 df       	rcall	.-412    	; 0x402 <lcdWriteText>
 59e:	88 e0       	ldi	r24, 0x08	; 8
 5a0:	92 e0       	ldi	r25, 0x02	; 2
 5a2:	9f 93       	push	r25
 5a4:	8f 93       	push	r24
 5a6:	1f 92       	push	r1
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	8f 93       	push	r24
 5ac:	2a df       	rcall	.-428    	; 0x402 <lcdWriteText>
 5ae:	87 e4       	ldi	r24, 0x47	; 71
 5b0:	92 e0       	ldi	r25, 0x02	; 2
 5b2:	9f 93       	push	r25
 5b4:	8f 93       	push	r24
 5b6:	1f 92       	push	r1
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	8f 93       	push	r24
 5bc:	22 df       	rcall	.-444    	; 0x402 <lcdWriteText>
 5be:	8d b7       	in	r24, 0x3d	; 61
 5c0:	9e b7       	in	r25, 0x3e	; 62
 5c2:	40 96       	adiw	r24, 0x10	; 16
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	9e bf       	out	0x3e, r25	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	8d bf       	out	0x3d, r24	; 61
 5ce:	88 24       	eor	r8, r8
 5d0:	83 94       	inc	r8
 5d2:	c0 e0       	ldi	r28, 0x00	; 0
 5d4:	71 2c       	mov	r7, r1
 5d6:	99 24       	eor	r9, r9
 5d8:	93 94       	inc	r9
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	cc 24       	eor	r12, r12
 5de:	c3 94       	inc	r12
 5e0:	d1 2c       	mov	r13, r1
 5e2:	e1 2c       	mov	r14, r1
 5e4:	68 94       	set
 5e6:	ff 24       	eor	r15, r15
 5e8:	f7 f8       	bld	r15, 7
 5ea:	66 24       	eor	r6, r6
 5ec:	63 94       	inc	r6
 5ee:	51 2c       	mov	r5, r1
 5f0:	09 e0       	ldi	r16, 0x09	; 9
 5f2:	11 e0       	ldi	r17, 0x01	; 1
 5f4:	0f 2e       	mov	r0, r31
 5f6:	fc e5       	ldi	r31, 0x5C	; 92
 5f8:	af 2e       	mov	r10, r31
 5fa:	f2 e0       	ldi	r31, 0x02	; 2
 5fc:	bf 2e       	mov	r11, r31
 5fe:	f0 2d       	mov	r31, r0
 600:	0f 2e       	mov	r0, r31
 602:	f3 e0       	ldi	r31, 0x03	; 3
 604:	4f 2e       	mov	r4, r31
 606:	f0 2d       	mov	r31, r0
 608:	99 20       	and	r9, r9
 60a:	49 f0       	breq	.+18     	; 0x61e <initBoard+0x134>
 60c:	c7 01       	movw	r24, r14
 60e:	0d 2e       	mov	r0, r29
 610:	02 c0       	rjmp	.+4      	; 0x616 <initBoard+0x12c>
 612:	96 95       	lsr	r25
 614:	87 95       	ror	r24
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <initBoard+0x128>
 61a:	09 de       	rcall	.-1006   	; 0x22e <ledWriteAll>
 61c:	08 c0       	rjmp	.+16     	; 0x62e <initBoard+0x144>
 61e:	c6 01       	movw	r24, r12
 620:	0d 2e       	mov	r0, r29
 622:	02 c0       	rjmp	.+4      	; 0x628 <initBoard+0x13e>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	0a 94       	dec	r0
 62a:	e2 f7       	brpl	.-8      	; 0x624 <initBoard+0x13a>
 62c:	00 de       	rcall	.-1024   	; 0x22e <ledWriteAll>
 62e:	df 5f       	subi	r29, 0xFF	; 255
 630:	d1 31       	cpi	r29, 0x11	; 17
 632:	28 f0       	brcs	.+10     	; 0x63e <initBoard+0x154>
 634:	86 2d       	mov	r24, r6
 636:	91 10       	cpse	r9, r1
 638:	85 2d       	mov	r24, r5
 63a:	98 2e       	mov	r9, r24
 63c:	d0 e0       	ldi	r29, 0x00	; 0
 63e:	88 20       	and	r8, r8
 640:	11 f0       	breq	.+4      	; 0x646 <initBoard+0x15c>
 642:	ce 5f       	subi	r28, 0xFE	; 254
 644:	01 c0       	rjmp	.+2      	; 0x648 <initBoard+0x15e>
 646:	c2 50       	subi	r28, 0x02	; 2
 648:	8c 2f       	mov	r24, r28
 64a:	58 de       	rcall	.-848    	; 0x2fc <lcdLight>
 64c:	ce 3f       	cpi	r28, 0xFE	; 254
 64e:	21 f0       	breq	.+8      	; 0x658 <initBoard+0x16e>
 650:	c8 37       	cpi	r28, 0x78	; 120
 652:	19 f4       	brne	.+6      	; 0x65a <initBoard+0x170>
 654:	86 2c       	mov	r8, r6
 656:	01 c0       	rjmp	.+2      	; 0x65a <initBoard+0x170>
 658:	85 2c       	mov	r8, r5
 65a:	71 10       	cpse	r7, r1
 65c:	3b c0       	rjmp	.+118    	; 0x6d4 <initBoard+0x1ea>
 65e:	f8 01       	movw	r30, r16
 660:	80 81       	ld	r24, Z
 662:	83 7c       	andi	r24, 0xC3	; 195
 664:	91 f0       	breq	.+36     	; 0x68a <initBoard+0x1a0>
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	50 e0       	ldi	r21, 0x00	; 0
 66a:	66 e2       	ldi	r22, 0x26	; 38
 66c:	72 e0       	ldi	r23, 0x02	; 2
 66e:	8f ef       	ldi	r24, 0xFF	; 255
 670:	93 e0       	ldi	r25, 0x03	; 3
 672:	0d de       	rcall	.-998    	; 0x28e <rgbWrite>
 674:	bf 92       	push	r11
 676:	af 92       	push	r10
 678:	1f 92       	push	r1
 67a:	4f 92       	push	r4
 67c:	c2 de       	rcall	.-636    	; 0x402 <lcdWriteText>
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	76 2c       	mov	r7, r6
 688:	25 c0       	rjmp	.+74     	; 0x6d4 <initBoard+0x1ea>
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	9c e7       	ldi	r25, 0x7C	; 124
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <initBoard+0x1a4>
 692:	00 c0       	rjmp	.+0      	; 0x694 <initBoard+0x1aa>
 694:	00 00       	nop
 696:	b8 cf       	rjmp	.-144    	; 0x608 <initBoard+0x11e>
 698:	f0 de       	rcall	.-544    	; 0x47a <lcdClear>
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	2f de       	rcall	.-930    	; 0x2fc <lcdLight>
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	c5 dd       	rcall	.-1142   	; 0x22e <ledWriteAll>
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	ee dd       	rcall	.-1060   	; 0x28e <rgbWrite>
 6b2:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
 6b6:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
 6ba:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
 6be:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
 6c2:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
 6c6:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
 6ca:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
 6ce:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <initBoard+0x1f4>
 6d4:	f8 01       	movw	r30, r16
 6d6:	80 81       	ld	r24, Z
 6d8:	83 7c       	andi	r24, 0xC3	; 195
 6da:	b9 f6       	brne	.-82     	; 0x68a <initBoard+0x1a0>
 6dc:	dd cf       	rjmp	.-70     	; 0x698 <initBoard+0x1ae>
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	bf 90       	pop	r11
 6f0:	af 90       	pop	r10
 6f2:	9f 90       	pop	r9
 6f4:	8f 90       	pop	r8
 6f6:	7f 90       	pop	r7
 6f8:	6f 90       	pop	r6
 6fa:	5f 90       	pop	r5
 6fc:	4f 90       	pop	r4
 6fe:	08 95       	ret

00000700 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	cd b7       	in	r28, 0x3d	; 61
 706:	de b7       	in	r29, 0x3e	; 62
 708:	28 97       	sbiw	r28, 0x08	; 8
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 714:	88 e0       	ldi	r24, 0x08	; 8
 716:	e0 e0       	ldi	r30, 0x00	; 0
 718:	f2 e0       	ldi	r31, 0x02	; 2
 71a:	de 01       	movw	r26, r28
 71c:	11 96       	adiw	r26, 0x01	; 1
 71e:	01 90       	ld	r0, Z+
 720:	0d 92       	st	X+, r0
 722:	8a 95       	dec	r24
 724:	e1 f7       	brne	.-8      	; 0x71e <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 726:	e5 e0       	ldi	r30, 0x05	; 5
 728:	f1 e0       	ldi	r31, 0x01	; 1
 72a:	80 81       	ld	r24, Z
 72c:	8f 7b       	andi	r24, 0xBF	; 191
 72e:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 730:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 734:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	8c 0f       	add	r24, r28
 73e:	9d 1f       	adc	r25, r29
 740:	e8 0f       	add	r30, r24
 742:	f9 1f       	adc	r31, r25
 744:	80 81       	ld	r24, Z
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
 74c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
 750:	a2 ef       	ldi	r26, 0xF2	; 242
 752:	b2 e0       	ldi	r27, 0x02	; 2
 754:	22 e8       	ldi	r18, 0x82	; 130
 756:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 758:	e5 e0       	ldi	r30, 0x05	; 5
 75a:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 75c:	5e 91       	ld	r21, -X
 75e:	4e 91       	ld	r20, -X
 760:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
 764:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
 768:	84 23       	and	r24, r20
 76a:	95 23       	and	r25, r21
 76c:	89 2b       	or	r24, r25
 76e:	21 f0       	breq	.+8      	; 0x778 <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 770:	80 81       	ld	r24, Z
 772:	80 62       	ori	r24, 0x20	; 32
 774:	80 83       	st	Z, r24
 776:	03 c0       	rjmp	.+6      	; 0x77e <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 778:	80 81       	ld	r24, Z
 77a:	8f 7d       	andi	r24, 0xDF	; 223
 77c:	80 83       	st	Z, r24
        }
        CLOCK_1;
 77e:	80 81       	ld	r24, Z
 780:	80 61       	ori	r24, 0x10	; 16
 782:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 784:	80 81       	ld	r24, Z
 786:	8f 7e       	andi	r24, 0xEF	; 239
 788:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 78a:	a2 17       	cp	r26, r18
 78c:	b3 07       	cpc	r27, r19
 78e:	31 f7       	brne	.-52     	; 0x75c <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 790:	e5 e0       	ldi	r30, 0x05	; 5
 792:	f1 e0       	ldi	r31, 0x01	; 1
 794:	80 81       	ld	r24, Z
 796:	87 7f       	andi	r24, 0xF7	; 247
 798:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 79a:	80 81       	ld	r24, Z
 79c:	88 7f       	andi	r24, 0xF8	; 248
 79e:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 7a0:	90 81       	ld	r25, Z
 7a2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 7a6:	89 2b       	or	r24, r25
 7a8:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 7aa:	80 81       	ld	r24, Z
 7ac:	80 64       	ori	r24, 0x40	; 64
 7ae:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 7b0:	80 81       	ld	r24, Z
 7b2:	88 60       	ori	r24, 0x08	; 8
 7b4:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 7b6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 7ba:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 7be:	87 30       	cpi	r24, 0x07	; 7
 7c0:	91 05       	cpc	r25, r1
 7c2:	30 f4       	brcc	.+12     	; 0x7d0 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
 7c4:	01 96       	adiw	r24, 0x01	; 1
 7c6:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2731+0x1>
 7ca:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2731>
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
 7d0:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2731+0x1>
 7d4:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2731>
        writeTextFinished = 1;
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
 7de:	28 96       	adiw	r28, 0x08	; 8
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	f8 94       	cli
 7e4:	de bf       	out	0x3e, r29	; 62
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	cd bf       	out	0x3d, r28	; 61
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	08 95       	ret

000007f0 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 7f0:	1f 92       	push	r1
 7f2:	0f 92       	push	r0
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	0f 92       	push	r0
 7f8:	11 24       	eor	r1, r1
 7fa:	0b b6       	in	r0, 0x3b	; 59
 7fc:	0f 92       	push	r0
 7fe:	2f 93       	push	r18
 800:	3f 93       	push	r19
 802:	4f 93       	push	r20
 804:	5f 93       	push	r21
 806:	6f 93       	push	r22
 808:	7f 93       	push	r23
 80a:	8f 93       	push	r24
 80c:	9f 93       	push	r25
 80e:	af 93       	push	r26
 810:	bf 93       	push	r27
 812:	ef 93       	push	r30
 814:	ff 93       	push	r31
    systemTimeMs += 1;
 816:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
 81a:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
 81e:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
 822:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
 826:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
 82a:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
 82e:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
 832:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
 836:	a1 e0       	ldi	r26, 0x01	; 1
 838:	27 d0       	rcall	.+78     	; 0x888 <__adddi3_s8>
 83a:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
 83e:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
 842:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
 846:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
 84a:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
 84e:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
 852:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
 856:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 85a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
 85e:	81 11       	cpse	r24, r1
 860:	4f df       	rcall	.-354    	; 0x700 <matrixWriteNextLine>
}
 862:	ff 91       	pop	r31
 864:	ef 91       	pop	r30
 866:	bf 91       	pop	r27
 868:	af 91       	pop	r26
 86a:	9f 91       	pop	r25
 86c:	8f 91       	pop	r24
 86e:	7f 91       	pop	r23
 870:	6f 91       	pop	r22
 872:	5f 91       	pop	r21
 874:	4f 91       	pop	r20
 876:	3f 91       	pop	r19
 878:	2f 91       	pop	r18
 87a:	0f 90       	pop	r0
 87c:	0b be       	out	0x3b, r0	; 59
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <__adddi3_s8>:
 888:	00 24       	eor	r0, r0
 88a:	a7 fd       	sbrc	r26, 7
 88c:	00 94       	com	r0
 88e:	2a 0f       	add	r18, r26
 890:	30 1d       	adc	r19, r0
 892:	40 1d       	adc	r20, r0
 894:	50 1d       	adc	r21, r0
 896:	60 1d       	adc	r22, r0
 898:	70 1d       	adc	r23, r0
 89a:	80 1d       	adc	r24, r0
 89c:	90 1d       	adc	r25, r0
 89e:	08 95       	ret

000008a0 <vsnprintf>:
 8a0:	0f 93       	push	r16
 8a2:	1f 93       	push	r17
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	cd b7       	in	r28, 0x3d	; 61
 8aa:	de b7       	in	r29, 0x3e	; 62
 8ac:	2e 97       	sbiw	r28, 0x0e	; 14
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	f8 94       	cli
 8b2:	de bf       	out	0x3e, r29	; 62
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	cd bf       	out	0x3d, r28	; 61
 8b8:	8c 01       	movw	r16, r24
 8ba:	fa 01       	movw	r30, r20
 8bc:	86 e0       	ldi	r24, 0x06	; 6
 8be:	8c 83       	std	Y+4, r24	; 0x04
 8c0:	1a 83       	std	Y+2, r17	; 0x02
 8c2:	09 83       	std	Y+1, r16	; 0x01
 8c4:	77 ff       	sbrs	r23, 7
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <vsnprintf+0x2c>
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	70 e8       	ldi	r23, 0x80	; 128
 8cc:	cb 01       	movw	r24, r22
 8ce:	01 97       	sbiw	r24, 0x01	; 1
 8d0:	9e 83       	std	Y+6, r25	; 0x06
 8d2:	8d 83       	std	Y+5, r24	; 0x05
 8d4:	a9 01       	movw	r20, r18
 8d6:	bf 01       	movw	r22, r30
 8d8:	ce 01       	movw	r24, r28
 8da:	01 96       	adiw	r24, 0x01	; 1
 8dc:	19 d0       	rcall	.+50     	; 0x910 <vfprintf>
 8de:	4d 81       	ldd	r20, Y+5	; 0x05
 8e0:	5e 81       	ldd	r21, Y+6	; 0x06
 8e2:	57 fd       	sbrc	r21, 7
 8e4:	0a c0       	rjmp	.+20     	; 0x8fa <vsnprintf+0x5a>
 8e6:	2f 81       	ldd	r18, Y+7	; 0x07
 8e8:	38 85       	ldd	r19, Y+8	; 0x08
 8ea:	42 17       	cp	r20, r18
 8ec:	53 07       	cpc	r21, r19
 8ee:	0c f4       	brge	.+2      	; 0x8f2 <vsnprintf+0x52>
 8f0:	9a 01       	movw	r18, r20
 8f2:	f8 01       	movw	r30, r16
 8f4:	e2 0f       	add	r30, r18
 8f6:	f3 1f       	adc	r31, r19
 8f8:	10 82       	st	Z, r1
 8fa:	2e 96       	adiw	r28, 0x0e	; 14
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	f8 94       	cli
 900:	de bf       	out	0x3e, r29	; 62
 902:	0f be       	out	0x3f, r0	; 63
 904:	cd bf       	out	0x3d, r28	; 61
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	1f 91       	pop	r17
 90c:	0f 91       	pop	r16
 90e:	08 95       	ret

00000910 <vfprintf>:
 910:	2f 92       	push	r2
 912:	3f 92       	push	r3
 914:	4f 92       	push	r4
 916:	5f 92       	push	r5
 918:	6f 92       	push	r6
 91a:	7f 92       	push	r7
 91c:	8f 92       	push	r8
 91e:	9f 92       	push	r9
 920:	af 92       	push	r10
 922:	bf 92       	push	r11
 924:	cf 92       	push	r12
 926:	df 92       	push	r13
 928:	ef 92       	push	r14
 92a:	ff 92       	push	r15
 92c:	0f 93       	push	r16
 92e:	1f 93       	push	r17
 930:	cf 93       	push	r28
 932:	df 93       	push	r29
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	2b 97       	sbiw	r28, 0x0b	; 11
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	f8 94       	cli
 93e:	de bf       	out	0x3e, r29	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	cd bf       	out	0x3d, r28	; 61
 944:	6c 01       	movw	r12, r24
 946:	7b 01       	movw	r14, r22
 948:	8a 01       	movw	r16, r20
 94a:	fc 01       	movw	r30, r24
 94c:	17 82       	std	Z+7, r1	; 0x07
 94e:	16 82       	std	Z+6, r1	; 0x06
 950:	83 81       	ldd	r24, Z+3	; 0x03
 952:	81 ff       	sbrs	r24, 1
 954:	bf c1       	rjmp	.+894    	; 0xcd4 <vfprintf+0x3c4>
 956:	ce 01       	movw	r24, r28
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	3c 01       	movw	r6, r24
 95c:	f6 01       	movw	r30, r12
 95e:	93 81       	ldd	r25, Z+3	; 0x03
 960:	f7 01       	movw	r30, r14
 962:	93 fd       	sbrc	r25, 3
 964:	85 91       	lpm	r24, Z+
 966:	93 ff       	sbrs	r25, 3
 968:	81 91       	ld	r24, Z+
 96a:	7f 01       	movw	r14, r30
 96c:	88 23       	and	r24, r24
 96e:	09 f4       	brne	.+2      	; 0x972 <vfprintf+0x62>
 970:	ad c1       	rjmp	.+858    	; 0xccc <vfprintf+0x3bc>
 972:	85 32       	cpi	r24, 0x25	; 37
 974:	39 f4       	brne	.+14     	; 0x984 <vfprintf+0x74>
 976:	93 fd       	sbrc	r25, 3
 978:	85 91       	lpm	r24, Z+
 97a:	93 ff       	sbrs	r25, 3
 97c:	81 91       	ld	r24, Z+
 97e:	7f 01       	movw	r14, r30
 980:	85 32       	cpi	r24, 0x25	; 37
 982:	21 f4       	brne	.+8      	; 0x98c <vfprintf+0x7c>
 984:	b6 01       	movw	r22, r12
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	d6 d1       	rcall	.+940    	; 0xd36 <fputc>
 98a:	e8 cf       	rjmp	.-48     	; 0x95c <vfprintf+0x4c>
 98c:	91 2c       	mov	r9, r1
 98e:	21 2c       	mov	r2, r1
 990:	31 2c       	mov	r3, r1
 992:	ff e1       	ldi	r31, 0x1F	; 31
 994:	f3 15       	cp	r31, r3
 996:	d8 f0       	brcs	.+54     	; 0x9ce <vfprintf+0xbe>
 998:	8b 32       	cpi	r24, 0x2B	; 43
 99a:	79 f0       	breq	.+30     	; 0x9ba <vfprintf+0xaa>
 99c:	38 f4       	brcc	.+14     	; 0x9ac <vfprintf+0x9c>
 99e:	80 32       	cpi	r24, 0x20	; 32
 9a0:	79 f0       	breq	.+30     	; 0x9c0 <vfprintf+0xb0>
 9a2:	83 32       	cpi	r24, 0x23	; 35
 9a4:	a1 f4       	brne	.+40     	; 0x9ce <vfprintf+0xbe>
 9a6:	23 2d       	mov	r18, r3
 9a8:	20 61       	ori	r18, 0x10	; 16
 9aa:	1d c0       	rjmp	.+58     	; 0x9e6 <vfprintf+0xd6>
 9ac:	8d 32       	cpi	r24, 0x2D	; 45
 9ae:	61 f0       	breq	.+24     	; 0x9c8 <vfprintf+0xb8>
 9b0:	80 33       	cpi	r24, 0x30	; 48
 9b2:	69 f4       	brne	.+26     	; 0x9ce <vfprintf+0xbe>
 9b4:	23 2d       	mov	r18, r3
 9b6:	21 60       	ori	r18, 0x01	; 1
 9b8:	16 c0       	rjmp	.+44     	; 0x9e6 <vfprintf+0xd6>
 9ba:	83 2d       	mov	r24, r3
 9bc:	82 60       	ori	r24, 0x02	; 2
 9be:	38 2e       	mov	r3, r24
 9c0:	e3 2d       	mov	r30, r3
 9c2:	e4 60       	ori	r30, 0x04	; 4
 9c4:	3e 2e       	mov	r3, r30
 9c6:	2a c0       	rjmp	.+84     	; 0xa1c <vfprintf+0x10c>
 9c8:	f3 2d       	mov	r31, r3
 9ca:	f8 60       	ori	r31, 0x08	; 8
 9cc:	1d c0       	rjmp	.+58     	; 0xa08 <vfprintf+0xf8>
 9ce:	37 fc       	sbrc	r3, 7
 9d0:	2d c0       	rjmp	.+90     	; 0xa2c <vfprintf+0x11c>
 9d2:	20 ed       	ldi	r18, 0xD0	; 208
 9d4:	28 0f       	add	r18, r24
 9d6:	2a 30       	cpi	r18, 0x0A	; 10
 9d8:	40 f0       	brcs	.+16     	; 0x9ea <vfprintf+0xda>
 9da:	8e 32       	cpi	r24, 0x2E	; 46
 9dc:	b9 f4       	brne	.+46     	; 0xa0c <vfprintf+0xfc>
 9de:	36 fc       	sbrc	r3, 6
 9e0:	75 c1       	rjmp	.+746    	; 0xccc <vfprintf+0x3bc>
 9e2:	23 2d       	mov	r18, r3
 9e4:	20 64       	ori	r18, 0x40	; 64
 9e6:	32 2e       	mov	r3, r18
 9e8:	19 c0       	rjmp	.+50     	; 0xa1c <vfprintf+0x10c>
 9ea:	36 fe       	sbrs	r3, 6
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <vfprintf+0xea>
 9ee:	8a e0       	ldi	r24, 0x0A	; 10
 9f0:	98 9e       	mul	r9, r24
 9f2:	20 0d       	add	r18, r0
 9f4:	11 24       	eor	r1, r1
 9f6:	92 2e       	mov	r9, r18
 9f8:	11 c0       	rjmp	.+34     	; 0xa1c <vfprintf+0x10c>
 9fa:	ea e0       	ldi	r30, 0x0A	; 10
 9fc:	2e 9e       	mul	r2, r30
 9fe:	20 0d       	add	r18, r0
 a00:	11 24       	eor	r1, r1
 a02:	22 2e       	mov	r2, r18
 a04:	f3 2d       	mov	r31, r3
 a06:	f0 62       	ori	r31, 0x20	; 32
 a08:	3f 2e       	mov	r3, r31
 a0a:	08 c0       	rjmp	.+16     	; 0xa1c <vfprintf+0x10c>
 a0c:	8c 36       	cpi	r24, 0x6C	; 108
 a0e:	21 f4       	brne	.+8      	; 0xa18 <vfprintf+0x108>
 a10:	83 2d       	mov	r24, r3
 a12:	80 68       	ori	r24, 0x80	; 128
 a14:	38 2e       	mov	r3, r24
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <vfprintf+0x10c>
 a18:	88 36       	cpi	r24, 0x68	; 104
 a1a:	41 f4       	brne	.+16     	; 0xa2c <vfprintf+0x11c>
 a1c:	f7 01       	movw	r30, r14
 a1e:	93 fd       	sbrc	r25, 3
 a20:	85 91       	lpm	r24, Z+
 a22:	93 ff       	sbrs	r25, 3
 a24:	81 91       	ld	r24, Z+
 a26:	7f 01       	movw	r14, r30
 a28:	81 11       	cpse	r24, r1
 a2a:	b3 cf       	rjmp	.-154    	; 0x992 <vfprintf+0x82>
 a2c:	98 2f       	mov	r25, r24
 a2e:	9f 7d       	andi	r25, 0xDF	; 223
 a30:	95 54       	subi	r25, 0x45	; 69
 a32:	93 30       	cpi	r25, 0x03	; 3
 a34:	28 f4       	brcc	.+10     	; 0xa40 <vfprintf+0x130>
 a36:	0c 5f       	subi	r16, 0xFC	; 252
 a38:	1f 4f       	sbci	r17, 0xFF	; 255
 a3a:	9f e3       	ldi	r25, 0x3F	; 63
 a3c:	99 83       	std	Y+1, r25	; 0x01
 a3e:	0d c0       	rjmp	.+26     	; 0xa5a <vfprintf+0x14a>
 a40:	83 36       	cpi	r24, 0x63	; 99
 a42:	31 f0       	breq	.+12     	; 0xa50 <vfprintf+0x140>
 a44:	83 37       	cpi	r24, 0x73	; 115
 a46:	71 f0       	breq	.+28     	; 0xa64 <vfprintf+0x154>
 a48:	83 35       	cpi	r24, 0x53	; 83
 a4a:	09 f0       	breq	.+2      	; 0xa4e <vfprintf+0x13e>
 a4c:	55 c0       	rjmp	.+170    	; 0xaf8 <vfprintf+0x1e8>
 a4e:	20 c0       	rjmp	.+64     	; 0xa90 <vfprintf+0x180>
 a50:	f8 01       	movw	r30, r16
 a52:	80 81       	ld	r24, Z
 a54:	89 83       	std	Y+1, r24	; 0x01
 a56:	0e 5f       	subi	r16, 0xFE	; 254
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	88 24       	eor	r8, r8
 a5c:	83 94       	inc	r8
 a5e:	91 2c       	mov	r9, r1
 a60:	53 01       	movw	r10, r6
 a62:	12 c0       	rjmp	.+36     	; 0xa88 <vfprintf+0x178>
 a64:	28 01       	movw	r4, r16
 a66:	f2 e0       	ldi	r31, 0x02	; 2
 a68:	4f 0e       	add	r4, r31
 a6a:	51 1c       	adc	r5, r1
 a6c:	f8 01       	movw	r30, r16
 a6e:	a0 80       	ld	r10, Z
 a70:	b1 80       	ldd	r11, Z+1	; 0x01
 a72:	36 fe       	sbrs	r3, 6
 a74:	03 c0       	rjmp	.+6      	; 0xa7c <vfprintf+0x16c>
 a76:	69 2d       	mov	r22, r9
 a78:	70 e0       	ldi	r23, 0x00	; 0
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <vfprintf+0x170>
 a7c:	6f ef       	ldi	r22, 0xFF	; 255
 a7e:	7f ef       	ldi	r23, 0xFF	; 255
 a80:	c5 01       	movw	r24, r10
 a82:	4e d1       	rcall	.+668    	; 0xd20 <strnlen>
 a84:	4c 01       	movw	r8, r24
 a86:	82 01       	movw	r16, r4
 a88:	f3 2d       	mov	r31, r3
 a8a:	ff 77       	andi	r31, 0x7F	; 127
 a8c:	3f 2e       	mov	r3, r31
 a8e:	15 c0       	rjmp	.+42     	; 0xaba <vfprintf+0x1aa>
 a90:	28 01       	movw	r4, r16
 a92:	22 e0       	ldi	r18, 0x02	; 2
 a94:	42 0e       	add	r4, r18
 a96:	51 1c       	adc	r5, r1
 a98:	f8 01       	movw	r30, r16
 a9a:	a0 80       	ld	r10, Z
 a9c:	b1 80       	ldd	r11, Z+1	; 0x01
 a9e:	36 fe       	sbrs	r3, 6
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <vfprintf+0x198>
 aa2:	69 2d       	mov	r22, r9
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <vfprintf+0x19c>
 aa8:	6f ef       	ldi	r22, 0xFF	; 255
 aaa:	7f ef       	ldi	r23, 0xFF	; 255
 aac:	c5 01       	movw	r24, r10
 aae:	2d d1       	rcall	.+602    	; 0xd0a <strnlen_P>
 ab0:	4c 01       	movw	r8, r24
 ab2:	f3 2d       	mov	r31, r3
 ab4:	f0 68       	ori	r31, 0x80	; 128
 ab6:	3f 2e       	mov	r3, r31
 ab8:	82 01       	movw	r16, r4
 aba:	33 fc       	sbrc	r3, 3
 abc:	19 c0       	rjmp	.+50     	; 0xaf0 <vfprintf+0x1e0>
 abe:	82 2d       	mov	r24, r2
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	88 16       	cp	r8, r24
 ac4:	99 06       	cpc	r9, r25
 ac6:	a0 f4       	brcc	.+40     	; 0xaf0 <vfprintf+0x1e0>
 ac8:	b6 01       	movw	r22, r12
 aca:	80 e2       	ldi	r24, 0x20	; 32
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	33 d1       	rcall	.+614    	; 0xd36 <fputc>
 ad0:	2a 94       	dec	r2
 ad2:	f5 cf       	rjmp	.-22     	; 0xabe <vfprintf+0x1ae>
 ad4:	f5 01       	movw	r30, r10
 ad6:	37 fc       	sbrc	r3, 7
 ad8:	85 91       	lpm	r24, Z+
 ada:	37 fe       	sbrs	r3, 7
 adc:	81 91       	ld	r24, Z+
 ade:	5f 01       	movw	r10, r30
 ae0:	b6 01       	movw	r22, r12
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	28 d1       	rcall	.+592    	; 0xd36 <fputc>
 ae6:	21 10       	cpse	r2, r1
 ae8:	2a 94       	dec	r2
 aea:	21 e0       	ldi	r18, 0x01	; 1
 aec:	82 1a       	sub	r8, r18
 aee:	91 08       	sbc	r9, r1
 af0:	81 14       	cp	r8, r1
 af2:	91 04       	cpc	r9, r1
 af4:	79 f7       	brne	.-34     	; 0xad4 <vfprintf+0x1c4>
 af6:	e1 c0       	rjmp	.+450    	; 0xcba <vfprintf+0x3aa>
 af8:	84 36       	cpi	r24, 0x64	; 100
 afa:	11 f0       	breq	.+4      	; 0xb00 <vfprintf+0x1f0>
 afc:	89 36       	cpi	r24, 0x69	; 105
 afe:	39 f5       	brne	.+78     	; 0xb4e <vfprintf+0x23e>
 b00:	f8 01       	movw	r30, r16
 b02:	37 fe       	sbrs	r3, 7
 b04:	07 c0       	rjmp	.+14     	; 0xb14 <vfprintf+0x204>
 b06:	60 81       	ld	r22, Z
 b08:	71 81       	ldd	r23, Z+1	; 0x01
 b0a:	82 81       	ldd	r24, Z+2	; 0x02
 b0c:	93 81       	ldd	r25, Z+3	; 0x03
 b0e:	0c 5f       	subi	r16, 0xFC	; 252
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	08 c0       	rjmp	.+16     	; 0xb24 <vfprintf+0x214>
 b14:	60 81       	ld	r22, Z
 b16:	71 81       	ldd	r23, Z+1	; 0x01
 b18:	07 2e       	mov	r0, r23
 b1a:	00 0c       	add	r0, r0
 b1c:	88 0b       	sbc	r24, r24
 b1e:	99 0b       	sbc	r25, r25
 b20:	0e 5f       	subi	r16, 0xFE	; 254
 b22:	1f 4f       	sbci	r17, 0xFF	; 255
 b24:	f3 2d       	mov	r31, r3
 b26:	ff 76       	andi	r31, 0x6F	; 111
 b28:	3f 2e       	mov	r3, r31
 b2a:	97 ff       	sbrs	r25, 7
 b2c:	09 c0       	rjmp	.+18     	; 0xb40 <vfprintf+0x230>
 b2e:	90 95       	com	r25
 b30:	80 95       	com	r24
 b32:	70 95       	com	r23
 b34:	61 95       	neg	r22
 b36:	7f 4f       	sbci	r23, 0xFF	; 255
 b38:	8f 4f       	sbci	r24, 0xFF	; 255
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	f0 68       	ori	r31, 0x80	; 128
 b3e:	3f 2e       	mov	r3, r31
 b40:	2a e0       	ldi	r18, 0x0A	; 10
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	a3 01       	movw	r20, r6
 b46:	33 d1       	rcall	.+614    	; 0xdae <__ultoa_invert>
 b48:	88 2e       	mov	r8, r24
 b4a:	86 18       	sub	r8, r6
 b4c:	44 c0       	rjmp	.+136    	; 0xbd6 <vfprintf+0x2c6>
 b4e:	85 37       	cpi	r24, 0x75	; 117
 b50:	31 f4       	brne	.+12     	; 0xb5e <vfprintf+0x24e>
 b52:	23 2d       	mov	r18, r3
 b54:	2f 7e       	andi	r18, 0xEF	; 239
 b56:	b2 2e       	mov	r11, r18
 b58:	2a e0       	ldi	r18, 0x0A	; 10
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	25 c0       	rjmp	.+74     	; 0xba8 <vfprintf+0x298>
 b5e:	93 2d       	mov	r25, r3
 b60:	99 7f       	andi	r25, 0xF9	; 249
 b62:	b9 2e       	mov	r11, r25
 b64:	8f 36       	cpi	r24, 0x6F	; 111
 b66:	c1 f0       	breq	.+48     	; 0xb98 <vfprintf+0x288>
 b68:	18 f4       	brcc	.+6      	; 0xb70 <vfprintf+0x260>
 b6a:	88 35       	cpi	r24, 0x58	; 88
 b6c:	79 f0       	breq	.+30     	; 0xb8c <vfprintf+0x27c>
 b6e:	ae c0       	rjmp	.+348    	; 0xccc <vfprintf+0x3bc>
 b70:	80 37       	cpi	r24, 0x70	; 112
 b72:	19 f0       	breq	.+6      	; 0xb7a <vfprintf+0x26a>
 b74:	88 37       	cpi	r24, 0x78	; 120
 b76:	21 f0       	breq	.+8      	; 0xb80 <vfprintf+0x270>
 b78:	a9 c0       	rjmp	.+338    	; 0xccc <vfprintf+0x3bc>
 b7a:	e9 2f       	mov	r30, r25
 b7c:	e0 61       	ori	r30, 0x10	; 16
 b7e:	be 2e       	mov	r11, r30
 b80:	b4 fe       	sbrs	r11, 4
 b82:	0d c0       	rjmp	.+26     	; 0xb9e <vfprintf+0x28e>
 b84:	fb 2d       	mov	r31, r11
 b86:	f4 60       	ori	r31, 0x04	; 4
 b88:	bf 2e       	mov	r11, r31
 b8a:	09 c0       	rjmp	.+18     	; 0xb9e <vfprintf+0x28e>
 b8c:	34 fe       	sbrs	r3, 4
 b8e:	0a c0       	rjmp	.+20     	; 0xba4 <vfprintf+0x294>
 b90:	29 2f       	mov	r18, r25
 b92:	26 60       	ori	r18, 0x06	; 6
 b94:	b2 2e       	mov	r11, r18
 b96:	06 c0       	rjmp	.+12     	; 0xba4 <vfprintf+0x294>
 b98:	28 e0       	ldi	r18, 0x08	; 8
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	05 c0       	rjmp	.+10     	; 0xba8 <vfprintf+0x298>
 b9e:	20 e1       	ldi	r18, 0x10	; 16
 ba0:	30 e0       	ldi	r19, 0x00	; 0
 ba2:	02 c0       	rjmp	.+4      	; 0xba8 <vfprintf+0x298>
 ba4:	20 e1       	ldi	r18, 0x10	; 16
 ba6:	32 e0       	ldi	r19, 0x02	; 2
 ba8:	f8 01       	movw	r30, r16
 baa:	b7 fe       	sbrs	r11, 7
 bac:	07 c0       	rjmp	.+14     	; 0xbbc <vfprintf+0x2ac>
 bae:	60 81       	ld	r22, Z
 bb0:	71 81       	ldd	r23, Z+1	; 0x01
 bb2:	82 81       	ldd	r24, Z+2	; 0x02
 bb4:	93 81       	ldd	r25, Z+3	; 0x03
 bb6:	0c 5f       	subi	r16, 0xFC	; 252
 bb8:	1f 4f       	sbci	r17, 0xFF	; 255
 bba:	06 c0       	rjmp	.+12     	; 0xbc8 <vfprintf+0x2b8>
 bbc:	60 81       	ld	r22, Z
 bbe:	71 81       	ldd	r23, Z+1	; 0x01
 bc0:	80 e0       	ldi	r24, 0x00	; 0
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	0e 5f       	subi	r16, 0xFE	; 254
 bc6:	1f 4f       	sbci	r17, 0xFF	; 255
 bc8:	a3 01       	movw	r20, r6
 bca:	f1 d0       	rcall	.+482    	; 0xdae <__ultoa_invert>
 bcc:	88 2e       	mov	r8, r24
 bce:	86 18       	sub	r8, r6
 bd0:	fb 2d       	mov	r31, r11
 bd2:	ff 77       	andi	r31, 0x7F	; 127
 bd4:	3f 2e       	mov	r3, r31
 bd6:	36 fe       	sbrs	r3, 6
 bd8:	0d c0       	rjmp	.+26     	; 0xbf4 <vfprintf+0x2e4>
 bda:	23 2d       	mov	r18, r3
 bdc:	2e 7f       	andi	r18, 0xFE	; 254
 bde:	a2 2e       	mov	r10, r18
 be0:	89 14       	cp	r8, r9
 be2:	58 f4       	brcc	.+22     	; 0xbfa <vfprintf+0x2ea>
 be4:	34 fe       	sbrs	r3, 4
 be6:	0b c0       	rjmp	.+22     	; 0xbfe <vfprintf+0x2ee>
 be8:	32 fc       	sbrc	r3, 2
 bea:	09 c0       	rjmp	.+18     	; 0xbfe <vfprintf+0x2ee>
 bec:	83 2d       	mov	r24, r3
 bee:	8e 7e       	andi	r24, 0xEE	; 238
 bf0:	a8 2e       	mov	r10, r24
 bf2:	05 c0       	rjmp	.+10     	; 0xbfe <vfprintf+0x2ee>
 bf4:	b8 2c       	mov	r11, r8
 bf6:	a3 2c       	mov	r10, r3
 bf8:	03 c0       	rjmp	.+6      	; 0xc00 <vfprintf+0x2f0>
 bfa:	b8 2c       	mov	r11, r8
 bfc:	01 c0       	rjmp	.+2      	; 0xc00 <vfprintf+0x2f0>
 bfe:	b9 2c       	mov	r11, r9
 c00:	a4 fe       	sbrs	r10, 4
 c02:	0f c0       	rjmp	.+30     	; 0xc22 <vfprintf+0x312>
 c04:	fe 01       	movw	r30, r28
 c06:	e8 0d       	add	r30, r8
 c08:	f1 1d       	adc	r31, r1
 c0a:	80 81       	ld	r24, Z
 c0c:	80 33       	cpi	r24, 0x30	; 48
 c0e:	21 f4       	brne	.+8      	; 0xc18 <vfprintf+0x308>
 c10:	9a 2d       	mov	r25, r10
 c12:	99 7e       	andi	r25, 0xE9	; 233
 c14:	a9 2e       	mov	r10, r25
 c16:	09 c0       	rjmp	.+18     	; 0xc2a <vfprintf+0x31a>
 c18:	a2 fe       	sbrs	r10, 2
 c1a:	06 c0       	rjmp	.+12     	; 0xc28 <vfprintf+0x318>
 c1c:	b3 94       	inc	r11
 c1e:	b3 94       	inc	r11
 c20:	04 c0       	rjmp	.+8      	; 0xc2a <vfprintf+0x31a>
 c22:	8a 2d       	mov	r24, r10
 c24:	86 78       	andi	r24, 0x86	; 134
 c26:	09 f0       	breq	.+2      	; 0xc2a <vfprintf+0x31a>
 c28:	b3 94       	inc	r11
 c2a:	a3 fc       	sbrc	r10, 3
 c2c:	10 c0       	rjmp	.+32     	; 0xc4e <vfprintf+0x33e>
 c2e:	a0 fe       	sbrs	r10, 0
 c30:	06 c0       	rjmp	.+12     	; 0xc3e <vfprintf+0x32e>
 c32:	b2 14       	cp	r11, r2
 c34:	80 f4       	brcc	.+32     	; 0xc56 <vfprintf+0x346>
 c36:	28 0c       	add	r2, r8
 c38:	92 2c       	mov	r9, r2
 c3a:	9b 18       	sub	r9, r11
 c3c:	0d c0       	rjmp	.+26     	; 0xc58 <vfprintf+0x348>
 c3e:	b2 14       	cp	r11, r2
 c40:	58 f4       	brcc	.+22     	; 0xc58 <vfprintf+0x348>
 c42:	b6 01       	movw	r22, r12
 c44:	80 e2       	ldi	r24, 0x20	; 32
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	76 d0       	rcall	.+236    	; 0xd36 <fputc>
 c4a:	b3 94       	inc	r11
 c4c:	f8 cf       	rjmp	.-16     	; 0xc3e <vfprintf+0x32e>
 c4e:	b2 14       	cp	r11, r2
 c50:	18 f4       	brcc	.+6      	; 0xc58 <vfprintf+0x348>
 c52:	2b 18       	sub	r2, r11
 c54:	02 c0       	rjmp	.+4      	; 0xc5a <vfprintf+0x34a>
 c56:	98 2c       	mov	r9, r8
 c58:	21 2c       	mov	r2, r1
 c5a:	a4 fe       	sbrs	r10, 4
 c5c:	0f c0       	rjmp	.+30     	; 0xc7c <vfprintf+0x36c>
 c5e:	b6 01       	movw	r22, r12
 c60:	80 e3       	ldi	r24, 0x30	; 48
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	68 d0       	rcall	.+208    	; 0xd36 <fputc>
 c66:	a2 fe       	sbrs	r10, 2
 c68:	16 c0       	rjmp	.+44     	; 0xc96 <vfprintf+0x386>
 c6a:	a1 fc       	sbrc	r10, 1
 c6c:	03 c0       	rjmp	.+6      	; 0xc74 <vfprintf+0x364>
 c6e:	88 e7       	ldi	r24, 0x78	; 120
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	02 c0       	rjmp	.+4      	; 0xc78 <vfprintf+0x368>
 c74:	88 e5       	ldi	r24, 0x58	; 88
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	b6 01       	movw	r22, r12
 c7a:	0c c0       	rjmp	.+24     	; 0xc94 <vfprintf+0x384>
 c7c:	8a 2d       	mov	r24, r10
 c7e:	86 78       	andi	r24, 0x86	; 134
 c80:	51 f0       	breq	.+20     	; 0xc96 <vfprintf+0x386>
 c82:	a1 fe       	sbrs	r10, 1
 c84:	02 c0       	rjmp	.+4      	; 0xc8a <vfprintf+0x37a>
 c86:	8b e2       	ldi	r24, 0x2B	; 43
 c88:	01 c0       	rjmp	.+2      	; 0xc8c <vfprintf+0x37c>
 c8a:	80 e2       	ldi	r24, 0x20	; 32
 c8c:	a7 fc       	sbrc	r10, 7
 c8e:	8d e2       	ldi	r24, 0x2D	; 45
 c90:	b6 01       	movw	r22, r12
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	50 d0       	rcall	.+160    	; 0xd36 <fputc>
 c96:	89 14       	cp	r8, r9
 c98:	30 f4       	brcc	.+12     	; 0xca6 <vfprintf+0x396>
 c9a:	b6 01       	movw	r22, r12
 c9c:	80 e3       	ldi	r24, 0x30	; 48
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	4a d0       	rcall	.+148    	; 0xd36 <fputc>
 ca2:	9a 94       	dec	r9
 ca4:	f8 cf       	rjmp	.-16     	; 0xc96 <vfprintf+0x386>
 ca6:	8a 94       	dec	r8
 ca8:	f3 01       	movw	r30, r6
 caa:	e8 0d       	add	r30, r8
 cac:	f1 1d       	adc	r31, r1
 cae:	80 81       	ld	r24, Z
 cb0:	b6 01       	movw	r22, r12
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	40 d0       	rcall	.+128    	; 0xd36 <fputc>
 cb6:	81 10       	cpse	r8, r1
 cb8:	f6 cf       	rjmp	.-20     	; 0xca6 <vfprintf+0x396>
 cba:	22 20       	and	r2, r2
 cbc:	09 f4       	brne	.+2      	; 0xcc0 <vfprintf+0x3b0>
 cbe:	4e ce       	rjmp	.-868    	; 0x95c <vfprintf+0x4c>
 cc0:	b6 01       	movw	r22, r12
 cc2:	80 e2       	ldi	r24, 0x20	; 32
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	37 d0       	rcall	.+110    	; 0xd36 <fputc>
 cc8:	2a 94       	dec	r2
 cca:	f7 cf       	rjmp	.-18     	; 0xcba <vfprintf+0x3aa>
 ccc:	f6 01       	movw	r30, r12
 cce:	86 81       	ldd	r24, Z+6	; 0x06
 cd0:	97 81       	ldd	r25, Z+7	; 0x07
 cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <vfprintf+0x3c8>
 cd4:	8f ef       	ldi	r24, 0xFF	; 255
 cd6:	9f ef       	ldi	r25, 0xFF	; 255
 cd8:	2b 96       	adiw	r28, 0x0b	; 11
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	f8 94       	cli
 cde:	de bf       	out	0x3e, r29	; 62
 ce0:	0f be       	out	0x3f, r0	; 63
 ce2:	cd bf       	out	0x3d, r28	; 61
 ce4:	df 91       	pop	r29
 ce6:	cf 91       	pop	r28
 ce8:	1f 91       	pop	r17
 cea:	0f 91       	pop	r16
 cec:	ff 90       	pop	r15
 cee:	ef 90       	pop	r14
 cf0:	df 90       	pop	r13
 cf2:	cf 90       	pop	r12
 cf4:	bf 90       	pop	r11
 cf6:	af 90       	pop	r10
 cf8:	9f 90       	pop	r9
 cfa:	8f 90       	pop	r8
 cfc:	7f 90       	pop	r7
 cfe:	6f 90       	pop	r6
 d00:	5f 90       	pop	r5
 d02:	4f 90       	pop	r4
 d04:	3f 90       	pop	r3
 d06:	2f 90       	pop	r2
 d08:	08 95       	ret

00000d0a <strnlen_P>:
 d0a:	fc 01       	movw	r30, r24
 d0c:	05 90       	lpm	r0, Z+
 d0e:	61 50       	subi	r22, 0x01	; 1
 d10:	70 40       	sbci	r23, 0x00	; 0
 d12:	01 10       	cpse	r0, r1
 d14:	d8 f7       	brcc	.-10     	; 0xd0c <strnlen_P+0x2>
 d16:	80 95       	com	r24
 d18:	90 95       	com	r25
 d1a:	8e 0f       	add	r24, r30
 d1c:	9f 1f       	adc	r25, r31
 d1e:	08 95       	ret

00000d20 <strnlen>:
 d20:	fc 01       	movw	r30, r24
 d22:	61 50       	subi	r22, 0x01	; 1
 d24:	70 40       	sbci	r23, 0x00	; 0
 d26:	01 90       	ld	r0, Z+
 d28:	01 10       	cpse	r0, r1
 d2a:	d8 f7       	brcc	.-10     	; 0xd22 <strnlen+0x2>
 d2c:	80 95       	com	r24
 d2e:	90 95       	com	r25
 d30:	8e 0f       	add	r24, r30
 d32:	9f 1f       	adc	r25, r31
 d34:	08 95       	ret

00000d36 <fputc>:
 d36:	0f 93       	push	r16
 d38:	1f 93       	push	r17
 d3a:	cf 93       	push	r28
 d3c:	df 93       	push	r29
 d3e:	fb 01       	movw	r30, r22
 d40:	23 81       	ldd	r18, Z+3	; 0x03
 d42:	21 fd       	sbrc	r18, 1
 d44:	03 c0       	rjmp	.+6      	; 0xd4c <fputc+0x16>
 d46:	8f ef       	ldi	r24, 0xFF	; 255
 d48:	9f ef       	ldi	r25, 0xFF	; 255
 d4a:	2c c0       	rjmp	.+88     	; 0xda4 <fputc+0x6e>
 d4c:	22 ff       	sbrs	r18, 2
 d4e:	16 c0       	rjmp	.+44     	; 0xd7c <fputc+0x46>
 d50:	46 81       	ldd	r20, Z+6	; 0x06
 d52:	57 81       	ldd	r21, Z+7	; 0x07
 d54:	24 81       	ldd	r18, Z+4	; 0x04
 d56:	35 81       	ldd	r19, Z+5	; 0x05
 d58:	42 17       	cp	r20, r18
 d5a:	53 07       	cpc	r21, r19
 d5c:	44 f4       	brge	.+16     	; 0xd6e <fputc+0x38>
 d5e:	a0 81       	ld	r26, Z
 d60:	b1 81       	ldd	r27, Z+1	; 0x01
 d62:	9d 01       	movw	r18, r26
 d64:	2f 5f       	subi	r18, 0xFF	; 255
 d66:	3f 4f       	sbci	r19, 0xFF	; 255
 d68:	31 83       	std	Z+1, r19	; 0x01
 d6a:	20 83       	st	Z, r18
 d6c:	8c 93       	st	X, r24
 d6e:	26 81       	ldd	r18, Z+6	; 0x06
 d70:	37 81       	ldd	r19, Z+7	; 0x07
 d72:	2f 5f       	subi	r18, 0xFF	; 255
 d74:	3f 4f       	sbci	r19, 0xFF	; 255
 d76:	37 83       	std	Z+7, r19	; 0x07
 d78:	26 83       	std	Z+6, r18	; 0x06
 d7a:	14 c0       	rjmp	.+40     	; 0xda4 <fputc+0x6e>
 d7c:	8b 01       	movw	r16, r22
 d7e:	ec 01       	movw	r28, r24
 d80:	fb 01       	movw	r30, r22
 d82:	00 84       	ldd	r0, Z+8	; 0x08
 d84:	f1 85       	ldd	r31, Z+9	; 0x09
 d86:	e0 2d       	mov	r30, r0
 d88:	19 95       	eicall
 d8a:	89 2b       	or	r24, r25
 d8c:	e1 f6       	brne	.-72     	; 0xd46 <fputc+0x10>
 d8e:	d8 01       	movw	r26, r16
 d90:	16 96       	adiw	r26, 0x06	; 6
 d92:	8d 91       	ld	r24, X+
 d94:	9c 91       	ld	r25, X
 d96:	17 97       	sbiw	r26, 0x07	; 7
 d98:	01 96       	adiw	r24, 0x01	; 1
 d9a:	17 96       	adiw	r26, 0x07	; 7
 d9c:	9c 93       	st	X, r25
 d9e:	8e 93       	st	-X, r24
 da0:	16 97       	sbiw	r26, 0x06	; 6
 da2:	ce 01       	movw	r24, r28
 da4:	df 91       	pop	r29
 da6:	cf 91       	pop	r28
 da8:	1f 91       	pop	r17
 daa:	0f 91       	pop	r16
 dac:	08 95       	ret

00000dae <__ultoa_invert>:
 dae:	fa 01       	movw	r30, r20
 db0:	aa 27       	eor	r26, r26
 db2:	28 30       	cpi	r18, 0x08	; 8
 db4:	51 f1       	breq	.+84     	; 0xe0a <__ultoa_invert+0x5c>
 db6:	20 31       	cpi	r18, 0x10	; 16
 db8:	81 f1       	breq	.+96     	; 0xe1a <__ultoa_invert+0x6c>
 dba:	e8 94       	clt
 dbc:	6f 93       	push	r22
 dbe:	6e 7f       	andi	r22, 0xFE	; 254
 dc0:	6e 5f       	subi	r22, 0xFE	; 254
 dc2:	7f 4f       	sbci	r23, 0xFF	; 255
 dc4:	8f 4f       	sbci	r24, 0xFF	; 255
 dc6:	9f 4f       	sbci	r25, 0xFF	; 255
 dc8:	af 4f       	sbci	r26, 0xFF	; 255
 dca:	b1 e0       	ldi	r27, 0x01	; 1
 dcc:	3e d0       	rcall	.+124    	; 0xe4a <__ultoa_invert+0x9c>
 dce:	b4 e0       	ldi	r27, 0x04	; 4
 dd0:	3c d0       	rcall	.+120    	; 0xe4a <__ultoa_invert+0x9c>
 dd2:	67 0f       	add	r22, r23
 dd4:	78 1f       	adc	r23, r24
 dd6:	89 1f       	adc	r24, r25
 dd8:	9a 1f       	adc	r25, r26
 dda:	a1 1d       	adc	r26, r1
 ddc:	68 0f       	add	r22, r24
 dde:	79 1f       	adc	r23, r25
 de0:	8a 1f       	adc	r24, r26
 de2:	91 1d       	adc	r25, r1
 de4:	a1 1d       	adc	r26, r1
 de6:	6a 0f       	add	r22, r26
 de8:	71 1d       	adc	r23, r1
 dea:	81 1d       	adc	r24, r1
 dec:	91 1d       	adc	r25, r1
 dee:	a1 1d       	adc	r26, r1
 df0:	20 d0       	rcall	.+64     	; 0xe32 <__ultoa_invert+0x84>
 df2:	09 f4       	brne	.+2      	; 0xdf6 <__ultoa_invert+0x48>
 df4:	68 94       	set
 df6:	3f 91       	pop	r19
 df8:	2a e0       	ldi	r18, 0x0A	; 10
 dfa:	26 9f       	mul	r18, r22
 dfc:	11 24       	eor	r1, r1
 dfe:	30 19       	sub	r19, r0
 e00:	30 5d       	subi	r19, 0xD0	; 208
 e02:	31 93       	st	Z+, r19
 e04:	de f6       	brtc	.-74     	; 0xdbc <__ultoa_invert+0xe>
 e06:	cf 01       	movw	r24, r30
 e08:	08 95       	ret
 e0a:	46 2f       	mov	r20, r22
 e0c:	47 70       	andi	r20, 0x07	; 7
 e0e:	40 5d       	subi	r20, 0xD0	; 208
 e10:	41 93       	st	Z+, r20
 e12:	b3 e0       	ldi	r27, 0x03	; 3
 e14:	0f d0       	rcall	.+30     	; 0xe34 <__ultoa_invert+0x86>
 e16:	c9 f7       	brne	.-14     	; 0xe0a <__ultoa_invert+0x5c>
 e18:	f6 cf       	rjmp	.-20     	; 0xe06 <__ultoa_invert+0x58>
 e1a:	46 2f       	mov	r20, r22
 e1c:	4f 70       	andi	r20, 0x0F	; 15
 e1e:	40 5d       	subi	r20, 0xD0	; 208
 e20:	4a 33       	cpi	r20, 0x3A	; 58
 e22:	18 f0       	brcs	.+6      	; 0xe2a <__ultoa_invert+0x7c>
 e24:	49 5d       	subi	r20, 0xD9	; 217
 e26:	31 fd       	sbrc	r19, 1
 e28:	40 52       	subi	r20, 0x20	; 32
 e2a:	41 93       	st	Z+, r20
 e2c:	02 d0       	rcall	.+4      	; 0xe32 <__ultoa_invert+0x84>
 e2e:	a9 f7       	brne	.-22     	; 0xe1a <__ultoa_invert+0x6c>
 e30:	ea cf       	rjmp	.-44     	; 0xe06 <__ultoa_invert+0x58>
 e32:	b4 e0       	ldi	r27, 0x04	; 4
 e34:	a6 95       	lsr	r26
 e36:	97 95       	ror	r25
 e38:	87 95       	ror	r24
 e3a:	77 95       	ror	r23
 e3c:	67 95       	ror	r22
 e3e:	ba 95       	dec	r27
 e40:	c9 f7       	brne	.-14     	; 0xe34 <__ultoa_invert+0x86>
 e42:	00 97       	sbiw	r24, 0x00	; 0
 e44:	61 05       	cpc	r22, r1
 e46:	71 05       	cpc	r23, r1
 e48:	08 95       	ret
 e4a:	9b 01       	movw	r18, r22
 e4c:	ac 01       	movw	r20, r24
 e4e:	0a 2e       	mov	r0, r26
 e50:	06 94       	lsr	r0
 e52:	57 95       	ror	r21
 e54:	47 95       	ror	r20
 e56:	37 95       	ror	r19
 e58:	27 95       	ror	r18
 e5a:	ba 95       	dec	r27
 e5c:	c9 f7       	brne	.-14     	; 0xe50 <__ultoa_invert+0xa2>
 e5e:	62 0f       	add	r22, r18
 e60:	73 1f       	adc	r23, r19
 e62:	84 1f       	adc	r24, r20
 e64:	95 1f       	adc	r25, r21
 e66:	a0 1d       	adc	r26, r0
 e68:	08 95       	ret

00000e6a <_exit>:
 e6a:	f8 94       	cli

00000e6c <__stop_program>:
 e6c:	ff cf       	rjmp	.-2      	; 0xe6c <__stop_program>
