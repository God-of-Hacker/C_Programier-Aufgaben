
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000eb2  00000f46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00000fba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001018  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002584  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000feb  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155d  00000000  00000000  000047af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00005d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e13  00000000  00000000  00006394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d9d  00000000  00000000  000071a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00008f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	eb c3       	rjmp	.+2006   	; 0x834 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 eb       	ldi	r30, 0xB2	; 178
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 37       	cpi	r26, 0x74	; 116
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e7       	ldi	r26, 0x74	; 116
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3f       	cpi	r26, 0xF2	; 242
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	c6 c6       	rjmp	.+3468   	; 0xeae <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:

#define PERIODE_PREAZISIONSMODUS_MS      200 
#define EIN_ZEIT_PREAZISIONSMODUS_MS     160
//Hauptprogramm
int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <main+0x6>
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
    uint16_t stoppuhrSchnellfeuer = 0;
    uint16_t stoppuhrPreazisionsmoduns = 0;
    
    
    //Initialisieren
    initBoard(1);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	fd d1       	rcall	.+1018   	; 0x52e <initBoard>
    
    uint16_t blinkenSchnellfeuerAktiviert = 0;
    uint16_t blinkenPreazisionsmodunsAktiviert = 0;
    
    uint16_t stoppuhrSchnellfeuer = 0;
    uint16_t stoppuhrPreazisionsmoduns = 0;
 134:	e1 2c       	mov	r14, r1
 136:	f1 2c       	mov	r15, r1
    uint16_t outBeleuchtungScrollradLED = 0;
    
    uint16_t blinkenSchnellfeuerAktiviert = 0;
    uint16_t blinkenPreazisionsmodunsAktiviert = 0;
    
    uint16_t stoppuhrSchnellfeuer = 0;
 138:	1c 82       	std	Y+4, r1	; 0x04
 13a:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t outBeleuchtungTastaturLED = 0;
    uint16_t outAnzeigeGeschwindigkeitLED = 0;
    uint16_t outBeleuchtungScrollradLED = 0;
    
    uint16_t blinkenSchnellfeuerAktiviert = 0;
    uint16_t blinkenPreazisionsmodunsAktiviert = 0;
 13c:	a1 2c       	mov	r10, r1
 13e:	b1 2c       	mov	r11, r1
    uint16_t outBeleuchtungLogorotLED = 0;
    uint16_t outBeleuchtungTastaturLED = 0;
    uint16_t outAnzeigeGeschwindigkeitLED = 0;
    uint16_t outBeleuchtungScrollradLED = 0;
    
    uint16_t blinkenSchnellfeuerAktiviert = 0;
 140:	c1 2c       	mov	r12, r1
 142:	d1 2c       	mov	r13, r1
    uint8_t preazisionsmodunsSchalter = 0;

    uint16_t outBeleuchtungLogoblauLED = 0;
    uint16_t outBeleuchtungLogorotLED = 0;
    uint16_t outBeleuchtungTastaturLED = 0;
    uint16_t outAnzeigeGeschwindigkeitLED = 0;
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	10 e0       	ldi	r17, 0x00	; 0
            {
                blinkenSchnellfeuerAktiviert = 0;
                outBeleuchtungScrollradLED = OUT_MASKE_BELEUCHTUNG_SCROLLRAD;
            }
            
            outAnzeigeGeschwindigkeitLED = (OUT_MASKE_BALKEN_GESCHWINDIGKEIT>>(BALKENGROESSE_LEDS-Geschwindigkeitschalter))&OUT_MASKE_BALKEN_GESCHWINDIGKEIT;      
 148:	68 94       	set
 14a:	88 24       	eor	r8, r8
 14c:	82 f8       	bld	r8, 2
 14e:	91 2c       	mov	r9, r1
 150:	0f 2e       	mov	r0, r31
 152:	f0 ef       	ldi	r31, 0xF0	; 240
 154:	6f 2e       	mov	r6, r31
 156:	71 2c       	mov	r7, r1
 158:	f0 2d       	mov	r31, r0
            else
            {
                blinkenPreazisionsmodunsAktiviert = 0;
                
            }
           outBeleuchtungLogorotLED = OFF; 
 15a:	21 2c       	mov	r2, r1
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        StandbySchalter = switchReadAll() & IN_MASKE_COMPUTER_STANDBY;
 15c:	31 2c       	mov	r3, r1
 15e:	8c d0       	rcall	.+280    	; 0x278 <switchReadAll>
        SchnellfeuerSchalter = switchReadAll() & IN_MASKE_SCHNELFEUER_AKTIVIERT;  
 160:	48 2e       	mov	r4, r24
 162:	8a d0       	rcall	.+276    	; 0x278 <switchReadAll>
        Geschwindigkeitschalter = (switchReadAll() & IN_MASKE_GESCHWINDIGKEIT)>> OFFSET_GESCHWINDIGKEIT;
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	88 d0       	rcall	.+272    	; 0x278 <switchReadAll>
        bewegungSchalter = switchReadAll() & IN_MASKE_BEWEGUNG_ERKANNT;
 168:	58 2e       	mov	r5, r24
 16a:	86 d0       	rcall	.+268    	; 0x278 <switchReadAll>
 16c:	8a 83       	std	Y+2, r24	; 0x02
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
 16e:	84 d0       	rcall	.+264    	; 0x278 <switchReadAll>
 170:	40 fe       	sbrs	r4, 0
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
 172:	0c c0       	rjmp	.+24     	; 0x18c <main+0x68>
 174:	8a 81       	ldd	r24, Y+2	; 0x02
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
            outBeleuchtungLogoblauLED = OFF;
          if (bewegungSchalter)
 176:	81 fd       	sbrc	r24, 1
 178:	30 c0       	rjmp	.+96     	; 0x1da <main+0xb6>
 17a:	22 2d       	mov	r18, r2
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
 17c:	33 2d       	mov	r19, r3
 17e:	82 2d       	mov	r24, r2
        bewegungSchalter = switchReadAll() & IN_MASKE_BEWEGUNG_ERKANNT;
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
 180:	93 2d       	mov	r25, r3
 182:	42 2d       	mov	r20, r2
          {
              outBeleuchtungLogorotLED = OUT_MASKE_BELEUCHTUNG_LOGO_ROT;
          } 
          else
          { 
              outBeleuchtungLogorotLED = OFF;
 184:	53 2d       	mov	r21, r3
 186:	62 2d       	mov	r22, r2
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
            outBeleuchtungLogoblauLED = OFF;
 188:	73 2d       	mov	r23, r3
 18a:	2f c0       	rjmp	.+94     	; 0x1ea <main+0xc6>
 18c:	99 81       	ldd	r25, Y+1	; 0x01
        else
        {
            outBeleuchtungTastaturLED = OUT_MASKE_BELEUCHTUNG_TASTATUR;
            outBeleuchtungLogoblauLED = OUT_MASKE_BELEUCHTUNG_LOGO_BLAU;
            
            if (SchnellfeuerSchalter)
 18e:	92 fd       	sbrc	r25, 2
 190:	05 c0       	rjmp	.+10     	; 0x19c <main+0x78>
 192:	c2 2c       	mov	r12, r2
                blinkenSchnellfeuerAktiviert = 1;
                outBeleuchtungScrollradLED = OFF;
            } 
            else
            {
                blinkenSchnellfeuerAktiviert = 0;
 194:	d3 2c       	mov	r13, r3
 196:	28 e0       	ldi	r18, 0x08	; 8
                outBeleuchtungScrollradLED = OUT_MASKE_BELEUCHTUNG_SCROLLRAD;
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <main+0x82>
 19c:	cc 24       	eor	r12, r12
            outBeleuchtungTastaturLED = OUT_MASKE_BELEUCHTUNG_TASTATUR;
            outBeleuchtungLogoblauLED = OUT_MASKE_BELEUCHTUNG_LOGO_BLAU;
            
            if (SchnellfeuerSchalter)
            {
                blinkenSchnellfeuerAktiviert = 1;
 19e:	c3 94       	inc	r12
 1a0:	d1 2c       	mov	r13, r1
 1a2:	22 2d       	mov	r18, r2
                outBeleuchtungScrollradLED = OFF;
 1a4:	33 2d       	mov	r19, r3
 1a6:	56 94       	lsr	r5
            {
                blinkenSchnellfeuerAktiviert = 0;
                outBeleuchtungScrollradLED = OUT_MASKE_BELEUCHTUNG_SCROLLRAD;
            }
            
            outAnzeigeGeschwindigkeitLED = (OUT_MASKE_BALKEN_GESCHWINDIGKEIT>>(BALKENGROESSE_LEDS-Geschwindigkeitschalter))&OUT_MASKE_BALKEN_GESCHWINDIGKEIT;      
 1a8:	56 94       	lsr	r5
 1aa:	56 94       	lsr	r5
 1ac:	56 94       	lsr	r5
 1ae:	56 94       	lsr	r5
 1b0:	a4 01       	movw	r20, r8
 1b2:	45 19       	sub	r20, r5
 1b4:	51 09       	sbc	r21, r1
 1b6:	83 01       	movw	r16, r6
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <main+0x9a>
 1ba:	15 95       	asr	r17
 1bc:	07 95       	ror	r16
 1be:	4a 95       	dec	r20
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <main+0x96>
 1c2:	00 7f       	andi	r16, 0xF0	; 240
 1c4:	11 27       	eor	r17, r17
 1c6:	83 fb       	bst	r24, 3
            {
                blinkenPreazisionsmodunsAktiviert = 1;
            } 
            else
            {
                blinkenPreazisionsmodunsAktiviert = 0;
 1c8:	aa 24       	eor	r10, r10
 1ca:	a0 f8       	bld	r10, 0
 1cc:	b1 2c       	mov	r11, r1
 1ce:	c4 01       	movw	r24, r8
              outBeleuchtungLogorotLED = OFF;
          }
        } 
        else
        {
            outBeleuchtungTastaturLED = OUT_MASKE_BELEUCHTUNG_TASTATUR;
 1d0:	42 2d       	mov	r20, r2
            else
            {
                blinkenPreazisionsmodunsAktiviert = 0;
                
            }
           outBeleuchtungLogorotLED = OFF; 
 1d2:	53 2d       	mov	r21, r3
 1d4:	61 e0       	ldi	r22, 0x01	; 1
          }
        } 
        else
        {
            outBeleuchtungTastaturLED = OUT_MASKE_BELEUCHTUNG_TASTATUR;
            outBeleuchtungLogoblauLED = OUT_MASKE_BELEUCHTUNG_LOGO_BLAU;
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <main+0xc6>
 1da:	22 2d       	mov	r18, r2
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
 1dc:	33 2d       	mov	r19, r3
 1de:	82 2d       	mov	r24, r2
        bewegungSchalter = switchReadAll() & IN_MASKE_BEWEGUNG_ERKANNT;
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
 1e0:	93 2d       	mov	r25, r3
 1e2:	42 e0       	ldi	r20, 0x02	; 2
            outBeleuchtungScrollradLED = OFF;
            outBeleuchtungLogoblauLED = OFF;
          if (bewegungSchalter)
          {
              outBeleuchtungLogorotLED = OUT_MASKE_BELEUCHTUNG_LOGO_ROT;
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	62 2d       	mov	r22, r2
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
            outBeleuchtungLogoblauLED = OFF;
 1e8:	73 2d       	mov	r23, r3
 1ea:	c1 14       	cp	r12, r1
           outBeleuchtungLogorotLED = OFF; 
        }
        
        
        //Ausgabe------------------------------------------------------------------
        if (blinkenSchnellfeuerAktiviert)
 1ec:	d1 04       	cpc	r13, r1
 1ee:	81 f0       	breq	.+32     	; 0x210 <main+0xec>
 1f0:	eb 81       	ldd	r30, Y+3	; 0x03
        {
            if (stoppuhrSchnellfeuer >= PERIODE_EIN_SCHNELFEUER_MS )
 1f2:	fc 81       	ldd	r31, Y+4	; 0x04
 1f4:	3a 97       	sbiw	r30, 0x0a	; 10
 1f6:	10 f0       	brcs	.+4      	; 0x1fc <main+0xd8>
 1f8:	22 2d       	mov	r18, r2
            {
                outBeleuchtungScrollradLED = OFF;
 1fa:	33 2d       	mov	r19, r3
 1fc:	eb 81       	ldd	r30, Y+3	; 0x03
            }
            if (stoppuhrSchnellfeuer >= PERIOD)
 1fe:	fc 81       	ldd	r31, Y+4	; 0x04
 200:	e4 36       	cpi	r30, 0x64	; 100
 202:	f1 05       	cpc	r31, r1
 204:	48 f0       	brcs	.+18     	; 0x218 <main+0xf4>
 206:	1c 82       	std	Y+4, r1	; 0x04
            {
                outBeleuchtungScrollradLED = OUT_MASKE_BELEUCHTUNG_SCROLLRAD;
                stoppuhrSchnellfeuer = 0;
 208:	1b 82       	std	Y+3, r1	; 0x03
 20a:	28 e0       	ldi	r18, 0x08	; 8
            {
                outBeleuchtungScrollradLED = OFF;
            }
            if (stoppuhrSchnellfeuer >= PERIOD)
            {
                outBeleuchtungScrollradLED = OUT_MASKE_BELEUCHTUNG_SCROLLRAD;
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	04 c0       	rjmp	.+8      	; 0x218 <main+0xf4>
 210:	e4 e6       	ldi	r30, 0x64	; 100
                stoppuhrSchnellfeuer = 0;
            }
        } 
        else
        {
            stoppuhrSchnellfeuer = PERIOD;
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	fc 83       	std	Y+4, r31	; 0x04
 216:	eb 83       	std	Y+3, r30	; 0x03
 218:	a1 14       	cp	r10, r1
        }
        
        if (blinkenPreazisionsmodunsAktiviert)
 21a:	b1 04       	cpc	r11, r1
 21c:	71 f0       	breq	.+28     	; 0x23a <main+0x116>
 21e:	f0 ea       	ldi	r31, 0xA0	; 160
        {
            if (stoppuhrPreazisionsmoduns >= EIN_ZEIT_PREAZISIONSMODUS_MS )
 220:	ef 16       	cp	r14, r31
 222:	f1 04       	cpc	r15, r1
 224:	10 f0       	brcs	.+4      	; 0x22a <main+0x106>
 226:	02 2d       	mov	r16, r2
            {
                outAnzeigeGeschwindigkeitLED = 0;
 228:	13 2d       	mov	r17, r3
 22a:	e8 ec       	ldi	r30, 0xC8	; 200
            }
            if (stoppuhrPreazisionsmoduns >= PERIODE_PREAZISIONSMODUS_MS)
 22c:	ee 16       	cp	r14, r30
 22e:	f1 04       	cpc	r15, r1
 230:	40 f0       	brcs	.+16     	; 0x242 <main+0x11e>
 232:	e1 2c       	mov	r14, r1
            {
                outAnzeigeGeschwindigkeitLED = OUT_MASKE_BALKEN_GESCHWINDIGKEIT;
                stoppuhrPreazisionsmoduns = 0;
 234:	f1 2c       	mov	r15, r1
 236:	83 01       	movw	r16, r6
            {
                outAnzeigeGeschwindigkeitLED = 0;
            }
            if (stoppuhrPreazisionsmoduns >= PERIODE_PREAZISIONSMODUS_MS)
            {
                outAnzeigeGeschwindigkeitLED = OUT_MASKE_BALKEN_GESCHWINDIGKEIT;
 238:	04 c0       	rjmp	.+8      	; 0x242 <main+0x11e>
 23a:	e8 ec       	ldi	r30, 0xC8	; 200
                stoppuhrPreazisionsmoduns = 0;
            }
        }
        else
        {
            stoppuhrSchnellfeuer = PERIODE_PREAZISIONSMODUS_MS;
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	fc 83       	std	Y+4, r31	; 0x04
 240:	eb 83       	std	Y+3, r30	; 0x03
 242:	46 2b       	or	r20, r22
        }
        
        
        ledWriteAll(outBeleuchtungLogoblauLED | outBeleuchtungLogorotLED | outBeleuchtungTastaturLED | outAnzeigeGeschwindigkeitLED | outBeleuchtungScrollradLED );
 244:	57 2b       	or	r21, r23
 246:	84 2b       	or	r24, r20
 248:	95 2b       	or	r25, r21
 24a:	82 2b       	or	r24, r18
 24c:	93 2b       	or	r25, r19
 24e:	80 2b       	or	r24, r16
 250:	91 2b       	or	r25, r17
 252:	0f d0       	rcall	.+30     	; 0x272 <ledWriteAll>
 254:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	9c e9       	ldi	r25, 0x9C	; 156
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x134>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x13a>
 25e:	00 00       	nop
 260:	eb 81       	ldd	r30, Y+3	; 0x03
        
        //Warten------------------------------------------------------------------
        _delay_ms(PROGRAMMTAKT_MS);
        stoppuhrSchnellfeuer = stoppuhrSchnellfeuer + PROGRAMMTAKT_MS;
 262:	fc 81       	ldd	r31, Y+4	; 0x04
 264:	3a 96       	adiw	r30, 0x0a	; 10
 266:	fc 83       	std	Y+4, r31	; 0x04
 268:	eb 83       	std	Y+3, r30	; 0x03
 26a:	fa e0       	ldi	r31, 0x0A	; 10
        stoppuhrPreazisionsmoduns = stoppuhrPreazisionsmoduns + PROGRAMMTAKT_MS;
 26c:	ef 0e       	add	r14, r31
 26e:	f1 1c       	adc	r15, r1
 270:	76 cf       	rjmp	.-276    	; 0x15e <main+0x3a>

00000272 <ledWriteAll>:
    }
 272:	82 b9       	out	0x02, r24	; 2
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 274:	95 b9       	out	0x05, r25	; 5
 276:	08 95       	ret

00000278 <switchReadAll>:
 278:	86 b1       	in	r24, 0x06	; 6
 27a:	08 95       	ret

0000027c <startSystemTimeMs>:
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	84 bd       	out	0x24, r24	; 36
 280:	8b e0       	ldi	r24, 0x0B	; 11
 282:	85 bd       	out	0x25, r24	; 37
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 28a:	89 ef       	ldi	r24, 0xF9	; 249
 28c:	87 bd       	out	0x27, r24	; 39
 28e:	08 95       	ret

00000290 <initAdc>:
 290:	11 ba       	out	0x11, r1	; 17
 292:	10 ba       	out	0x10, r1	; 16
 294:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 298:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 29c:	80 e4       	ldi	r24, 0x40	; 64
 29e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 2a2:	8f e0       	ldi	r24, 0x0F	; 15
 2a4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 2ae:	ea e7       	ldi	r30, 0x7A	; 122
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	87 ea       	ldi	r24, 0xA7	; 167
 2b4:	80 83       	st	Z, r24
 2b6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 2ba:	80 81       	ld	r24, Z
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	80 83       	st	Z, r24
 2c0:	80 81       	ld	r24, Z
 2c2:	84 ff       	sbrs	r24, 4
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <initAdc+0x30>
 2c6:	ea e7       	ldi	r30, 0x7A	; 122
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	8f 7e       	andi	r24, 0xEF	; 239
 2ce:	80 83       	st	Z, r24
 2d0:	08 95       	ret

000002d2 <rgbWrite>:
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	33 e0       	ldi	r19, 0x03	; 3
 2d6:	f9 01       	movw	r30, r18
 2d8:	e8 1b       	sub	r30, r24
 2da:	f9 0b       	sbc	r31, r25
 2dc:	c9 01       	movw	r24, r18
 2de:	86 1b       	sub	r24, r22
 2e0:	97 0b       	sbc	r25, r23
 2e2:	24 1b       	sub	r18, r20
 2e4:	35 0b       	sbc	r19, r21
 2e6:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 2ea:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 2ee:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 2f2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 2f6:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 2fa:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 2fe:	08 95       	ret

00000300 <initRgb>:
 300:	8e ef       	ldi	r24, 0xFE	; 254
 302:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 306:	8b e1       	ldi	r24, 0x1B	; 27
 308:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	d6 cf       	rjmp	.-84     	; 0x2d2 <rgbWrite>
 326:	08 95       	ret

00000328 <lcdSid>:
 328:	88 23       	and	r24, r24
 32a:	11 f0       	breq	.+4      	; 0x330 <lcdSid+0x8>
 32c:	a0 9a       	sbi	0x14, 0	; 20
 32e:	08 95       	ret
 330:	a0 98       	cbi	0x14, 0	; 20
 332:	08 95       	ret

00000334 <lcdSclk>:
 334:	88 23       	and	r24, r24
 336:	11 f0       	breq	.+4      	; 0x33c <lcdSclk+0x8>
 338:	a1 9a       	sbi	0x14, 1	; 20
 33a:	08 95       	ret
 33c:	a1 98       	cbi	0x14, 1	; 20
 33e:	08 95       	ret

00000340 <lcdLight>:
 340:	81 11       	cpse	r24, r1
 342:	04 c0       	rjmp	.+8      	; 0x34c <lcdLight+0xc>
 344:	84 b5       	in	r24, 0x24	; 36
 346:	8f 7d       	andi	r24, 0xDF	; 223
 348:	84 bd       	out	0x24, r24	; 36
 34a:	08 95       	ret
 34c:	94 b5       	in	r25, 0x24	; 36
 34e:	90 62       	ori	r25, 0x20	; 32
 350:	94 bd       	out	0x24, r25	; 36
 352:	88 bd       	out	0x28, r24	; 40
 354:	08 95       	ret

00000356 <writeLcdF>:
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	7c 01       	movw	r14, r24
 364:	eb 01       	movw	r28, r22
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	df df       	rcall	.-66     	; 0x328 <lcdSid>
 36a:	05 e0       	ldi	r16, 0x05	; 5
 36c:	10 e0       	ldi	r17, 0x00	; 0
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	e1 df       	rcall	.-62     	; 0x334 <lcdSclk>
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	df df       	rcall	.-66     	; 0x334 <lcdSclk>
 376:	01 50       	subi	r16, 0x01	; 1
 378:	11 09       	sbc	r17, r1
 37a:	c9 f7       	brne	.-14     	; 0x36e <writeLcdF+0x18>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	d4 df       	rcall	.-88     	; 0x328 <lcdSid>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	d8 df       	rcall	.-80     	; 0x334 <lcdSclk>
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	d6 df       	rcall	.-84     	; 0x334 <lcdSclk>
 388:	83 e4       	ldi	r24, 0x43	; 67
 38a:	e8 16       	cp	r14, r24
 38c:	f1 04       	cpc	r15, r1
 38e:	19 f4       	brne	.+6      	; 0x396 <writeLcdF+0x40>
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	ca df       	rcall	.-108    	; 0x328 <lcdSid>
 394:	02 c0       	rjmp	.+4      	; 0x39a <writeLcdF+0x44>
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	c7 df       	rcall	.-114    	; 0x328 <lcdSid>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	cb df       	rcall	.-106    	; 0x334 <lcdSclk>
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	c9 df       	rcall	.-110    	; 0x334 <lcdSclk>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	c1 df       	rcall	.-126    	; 0x328 <lcdSid>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	c5 df       	rcall	.-118    	; 0x334 <lcdSclk>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	c3 df       	rcall	.-122    	; 0x334 <lcdSclk>
 3ae:	04 e0       	ldi	r16, 0x04	; 4
 3b0:	10 e0       	ldi	r17, 0x00	; 0
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	bf df       	rcall	.-130    	; 0x334 <lcdSclk>
 3b6:	c0 ff       	sbrs	r28, 0
 3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <writeLcdF+0x6a>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	b5 df       	rcall	.-150    	; 0x328 <lcdSid>
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <writeLcdF+0x6e>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	b2 df       	rcall	.-156    	; 0x328 <lcdSid>
 3c4:	d6 95       	lsr	r29
 3c6:	c7 95       	ror	r28
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	b4 df       	rcall	.-152    	; 0x334 <lcdSclk>
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	b2 df       	rcall	.-156    	; 0x334 <lcdSclk>
 3d0:	01 50       	subi	r16, 0x01	; 1
 3d2:	11 09       	sbc	r17, r1
 3d4:	71 f7       	brne	.-36     	; 0x3b2 <writeLcdF+0x5c>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	a7 df       	rcall	.-178    	; 0x328 <lcdSid>
 3da:	04 e0       	ldi	r16, 0x04	; 4
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	a9 df       	rcall	.-174    	; 0x334 <lcdSclk>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	a7 df       	rcall	.-178    	; 0x334 <lcdSclk>
 3e6:	01 50       	subi	r16, 0x01	; 1
 3e8:	11 09       	sbc	r17, r1
 3ea:	c9 f7       	brne	.-14     	; 0x3de <writeLcdF+0x88>
 3ec:	04 e0       	ldi	r16, 0x04	; 4
 3ee:	10 e0       	ldi	r17, 0x00	; 0
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	a0 df       	rcall	.-192    	; 0x334 <lcdSclk>
 3f4:	c0 ff       	sbrs	r28, 0
 3f6:	03 c0       	rjmp	.+6      	; 0x3fe <writeLcdF+0xa8>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	96 df       	rcall	.-212    	; 0x328 <lcdSid>
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	93 df       	rcall	.-218    	; 0x328 <lcdSid>
 402:	d6 95       	lsr	r29
 404:	c7 95       	ror	r28
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	95 df       	rcall	.-214    	; 0x334 <lcdSclk>
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	93 df       	rcall	.-218    	; 0x334 <lcdSclk>
 40e:	01 50       	subi	r16, 0x01	; 1
 410:	11 09       	sbc	r17, r1
 412:	71 f7       	brne	.-36     	; 0x3f0 <writeLcdF+0x9a>
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	88 df       	rcall	.-240    	; 0x328 <lcdSid>
 418:	c4 e0       	ldi	r28, 0x04	; 4
 41a:	d0 e0       	ldi	r29, 0x00	; 0
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	8a df       	rcall	.-236    	; 0x334 <lcdSclk>
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	88 df       	rcall	.-240    	; 0x334 <lcdSclk>
 424:	21 97       	sbiw	r28, 0x01	; 1
 426:	d1 f7       	brne	.-12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	7e df       	rcall	.-260    	; 0x328 <lcdSid>
 42c:	87 ec       	ldi	r24, 0xC7	; 199
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	08 95       	ret

00000446 <lcdWriteText>:
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	65 97       	sbiw	r28, 0x15	; 21
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	f8 94       	cli
 456:	de bf       	out	0x3e, r29	; 62
 458:	0f be       	out	0x3f, r0	; 63
 45a:	cd bf       	out	0x3d, r28	; 61
 45c:	9e 01       	movw	r18, r28
 45e:	20 5e       	subi	r18, 0xE0	; 224
 460:	3f 4f       	sbci	r19, 0xFF	; 255
 462:	4e 8d       	ldd	r20, Y+30	; 0x1e
 464:	5f 8d       	ldd	r21, Y+31	; 0x1f
 466:	65 e1       	ldi	r22, 0x15	; 21
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	ce 01       	movw	r24, r28
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	3a d2       	rcall	.+1140   	; 0x8e4 <vsnprintf>
 470:	6d 8d       	ldd	r22, Y+29	; 0x1d
 472:	8c 8d       	ldd	r24, Y+28	; 0x1c
 474:	90 e2       	ldi	r25, 0x20	; 32
 476:	89 9f       	mul	r24, r25
 478:	60 0d       	add	r22, r0
 47a:	11 24       	eor	r1, r1
 47c:	60 68       	ori	r22, 0x80	; 128
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	83 e4       	ldi	r24, 0x43	; 67
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	68 df       	rcall	.-304    	; 0x356 <writeLcdF>
 486:	69 81       	ldd	r22, Y+1	; 0x01
 488:	66 23       	and	r22, r22
 48a:	79 f0       	breq	.+30     	; 0x4aa <lcdWriteText+0x64>
 48c:	10 e0       	ldi	r17, 0x00	; 0
 48e:	1f 5f       	subi	r17, 0xFF	; 255
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	84 e4       	ldi	r24, 0x44	; 68
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	5f df       	rcall	.-322    	; 0x356 <writeLcdF>
 498:	e1 e0       	ldi	r30, 0x01	; 1
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	ec 0f       	add	r30, r28
 49e:	fd 1f       	adc	r31, r29
 4a0:	e1 0f       	add	r30, r17
 4a2:	f1 1d       	adc	r31, r1
 4a4:	60 81       	ld	r22, Z
 4a6:	61 11       	cpse	r22, r1
 4a8:	f2 cf       	rjmp	.-28     	; 0x48e <lcdWriteText+0x48>
 4aa:	65 96       	adiw	r28, 0x15	; 21
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	08 95       	ret

000004be <lcdClear>:
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	83 e4       	ldi	r24, 0x43	; 67
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	47 df       	rcall	.-370    	; 0x356 <writeLcdF>
 4c8:	8f e3       	ldi	r24, 0x3F	; 63
 4ca:	9f e1       	ldi	r25, 0x1F	; 31
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <lcdClear+0xe>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <lcdClear+0x14>
 4d2:	00 00       	nop
 4d4:	80 e3       	ldi	r24, 0x30	; 48
 4d6:	92 e0       	ldi	r25, 0x02	; 2
 4d8:	9f 93       	push	r25
 4da:	8f 93       	push	r24
 4dc:	1f 92       	push	r1
 4de:	1f 92       	push	r1
 4e0:	b2 df       	rcall	.-156    	; 0x446 <lcdWriteText>
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	08 95       	ret

000004ec <initLcd>:
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	22 df       	rcall	.-444    	; 0x334 <lcdSclk>
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	1a df       	rcall	.-460    	; 0x328 <lcdSid>
 4f4:	64 e3       	ldi	r22, 0x34	; 52
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	83 e4       	ldi	r24, 0x43	; 67
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	2c df       	rcall	.-424    	; 0x356 <writeLcdF>
 4fe:	69 e0       	ldi	r22, 0x09	; 9
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	83 e4       	ldi	r24, 0x43	; 67
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	27 df       	rcall	.-434    	; 0x356 <writeLcdF>
 508:	60 e3       	ldi	r22, 0x30	; 48
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	83 e4       	ldi	r24, 0x43	; 67
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	22 df       	rcall	.-444    	; 0x356 <writeLcdF>
 512:	6c e0       	ldi	r22, 0x0C	; 12
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	83 e4       	ldi	r24, 0x43	; 67
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	1d df       	rcall	.-454    	; 0x356 <writeLcdF>
 51c:	d0 df       	rcall	.-96     	; 0x4be <lcdClear>
 51e:	67 e0       	ldi	r22, 0x07	; 7
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	83 e4       	ldi	r24, 0x43	; 67
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	17 df       	rcall	.-466    	; 0x356 <writeLcdF>
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	0a cf       	rjmp	.-492    	; 0x340 <lcdLight>
 52c:	08 95       	ret

0000052e <initBoard>:
 52e:	4f 92       	push	r4
 530:	5f 92       	push	r5
 532:	6f 92       	push	r6
 534:	7f 92       	push	r7
 536:	8f 92       	push	r8
 538:	9f 92       	push	r9
 53a:	af 92       	push	r10
 53c:	bf 92       	push	r11
 53e:	cf 92       	push	r12
 540:	df 92       	push	r13
 542:	ef 92       	push	r14
 544:	ff 92       	push	r15
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	c8 2f       	mov	r28, r24
 550:	85 b7       	in	r24, 0x35	; 53
 552:	85 bf       	out	0x35, r24	; 53
 554:	12 b8       	out	0x02, r1	; 2
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	81 b9       	out	0x01, r24	; 1
 55a:	15 b8       	out	0x05, r1	; 5
 55c:	84 b9       	out	0x04, r24	; 4
 55e:	88 b9       	out	0x08, r24	; 8
 560:	17 b8       	out	0x07, r1	; 7
 562:	8b b9       	out	0x0b, r24	; 11
 564:	1a b8       	out	0x0a, r1	; 10
 566:	8e b9       	out	0x0e, r24	; 14
 568:	1d b8       	out	0x0d, r1	; 13
 56a:	72 98       	cbi	0x0e, 2	; 14
 56c:	11 ba       	out	0x11, r1	; 17
 56e:	10 ba       	out	0x10, r1	; 16
 570:	94 e0       	ldi	r25, 0x04	; 4
 572:	94 bb       	out	0x14, r25	; 20
 574:	93 b3       	in	r25, 0x13	; 19
 576:	93 60       	ori	r25, 0x03	; 3
 578:	93 bb       	out	0x13, r25	; 19
 57a:	9d 9a       	sbi	0x13, 5	; 19
 57c:	97 ec       	ldi	r25, 0xC7	; 199
 57e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 582:	98 e3       	ldi	r25, 0x38	; 56
 584:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 588:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 58c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 590:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 594:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 598:	8c e3       	ldi	r24, 0x3C	; 60
 59a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 59e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 5a2:	78 94       	sei
 5a4:	6b de       	rcall	.-810    	; 0x27c <startSystemTimeMs>
 5a6:	a2 df       	rcall	.-188    	; 0x4ec <initLcd>
 5a8:	73 de       	rcall	.-794    	; 0x290 <initAdc>
 5aa:	aa de       	rcall	.-684    	; 0x300 <initRgb>
 5ac:	cc 23       	and	r28, r28
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <initBoard+0x84>
 5b0:	b8 c0       	rjmp	.+368    	; 0x722 <initBoard+0x1f4>
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
 5b4:	c5 de       	rcall	.-630    	; 0x340 <lcdLight>
 5b6:	40 e0       	ldi	r20, 0x00	; 0
 5b8:	50 e0       	ldi	r21, 0x00	; 0
 5ba:	6f ef       	ldi	r22, 0xFF	; 255
 5bc:	73 e0       	ldi	r23, 0x03	; 3
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	87 de       	rcall	.-754    	; 0x2d2 <rgbWrite>
 5c4:	8d e1       	ldi	r24, 0x1D	; 29
 5c6:	92 e0       	ldi	r25, 0x02	; 2
 5c8:	9f 93       	push	r25
 5ca:	8f 93       	push	r24
 5cc:	1f 92       	push	r1
 5ce:	1f 92       	push	r1
 5d0:	3a df       	rcall	.-396    	; 0x446 <lcdWriteText>
 5d2:	82 e3       	ldi	r24, 0x32	; 50
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	9f 93       	push	r25
 5d8:	8f 93       	push	r24
 5da:	1f 92       	push	r1
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	8f 93       	push	r24
 5e0:	32 df       	rcall	.-412    	; 0x446 <lcdWriteText>
 5e2:	88 e0       	ldi	r24, 0x08	; 8
 5e4:	92 e0       	ldi	r25, 0x02	; 2
 5e6:	9f 93       	push	r25
 5e8:	8f 93       	push	r24
 5ea:	1f 92       	push	r1
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	8f 93       	push	r24
 5f0:	2a df       	rcall	.-428    	; 0x446 <lcdWriteText>
 5f2:	87 e4       	ldi	r24, 0x47	; 71
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	9f 93       	push	r25
 5f8:	8f 93       	push	r24
 5fa:	1f 92       	push	r1
 5fc:	83 e0       	ldi	r24, 0x03	; 3
 5fe:	8f 93       	push	r24
 600:	22 df       	rcall	.-444    	; 0x446 <lcdWriteText>
 602:	8d b7       	in	r24, 0x3d	; 61
 604:	9e b7       	in	r25, 0x3e	; 62
 606:	40 96       	adiw	r24, 0x10	; 16
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	f8 94       	cli
 60c:	9e bf       	out	0x3e, r25	; 62
 60e:	0f be       	out	0x3f, r0	; 63
 610:	8d bf       	out	0x3d, r24	; 61
 612:	88 24       	eor	r8, r8
 614:	83 94       	inc	r8
 616:	c0 e0       	ldi	r28, 0x00	; 0
 618:	71 2c       	mov	r7, r1
 61a:	99 24       	eor	r9, r9
 61c:	93 94       	inc	r9
 61e:	d0 e0       	ldi	r29, 0x00	; 0
 620:	cc 24       	eor	r12, r12
 622:	c3 94       	inc	r12
 624:	d1 2c       	mov	r13, r1
 626:	e1 2c       	mov	r14, r1
 628:	68 94       	set
 62a:	ff 24       	eor	r15, r15
 62c:	f7 f8       	bld	r15, 7
 62e:	66 24       	eor	r6, r6
 630:	63 94       	inc	r6
 632:	51 2c       	mov	r5, r1
 634:	09 e0       	ldi	r16, 0x09	; 9
 636:	11 e0       	ldi	r17, 0x01	; 1
 638:	0f 2e       	mov	r0, r31
 63a:	fc e5       	ldi	r31, 0x5C	; 92
 63c:	af 2e       	mov	r10, r31
 63e:	f2 e0       	ldi	r31, 0x02	; 2
 640:	bf 2e       	mov	r11, r31
 642:	f0 2d       	mov	r31, r0
 644:	0f 2e       	mov	r0, r31
 646:	f3 e0       	ldi	r31, 0x03	; 3
 648:	4f 2e       	mov	r4, r31
 64a:	f0 2d       	mov	r31, r0
 64c:	99 20       	and	r9, r9
 64e:	49 f0       	breq	.+18     	; 0x662 <initBoard+0x134>
 650:	c7 01       	movw	r24, r14
 652:	0d 2e       	mov	r0, r29
 654:	02 c0       	rjmp	.+4      	; 0x65a <initBoard+0x12c>
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <initBoard+0x128>
 65e:	09 de       	rcall	.-1006   	; 0x272 <ledWriteAll>
 660:	08 c0       	rjmp	.+16     	; 0x672 <initBoard+0x144>
 662:	c6 01       	movw	r24, r12
 664:	0d 2e       	mov	r0, r29
 666:	02 c0       	rjmp	.+4      	; 0x66c <initBoard+0x13e>
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	0a 94       	dec	r0
 66e:	e2 f7       	brpl	.-8      	; 0x668 <initBoard+0x13a>
 670:	00 de       	rcall	.-1024   	; 0x272 <ledWriteAll>
 672:	df 5f       	subi	r29, 0xFF	; 255
 674:	d1 31       	cpi	r29, 0x11	; 17
 676:	28 f0       	brcs	.+10     	; 0x682 <initBoard+0x154>
 678:	86 2d       	mov	r24, r6
 67a:	91 10       	cpse	r9, r1
 67c:	85 2d       	mov	r24, r5
 67e:	98 2e       	mov	r9, r24
 680:	d0 e0       	ldi	r29, 0x00	; 0
 682:	88 20       	and	r8, r8
 684:	11 f0       	breq	.+4      	; 0x68a <initBoard+0x15c>
 686:	ce 5f       	subi	r28, 0xFE	; 254
 688:	01 c0       	rjmp	.+2      	; 0x68c <initBoard+0x15e>
 68a:	c2 50       	subi	r28, 0x02	; 2
 68c:	8c 2f       	mov	r24, r28
 68e:	58 de       	rcall	.-848    	; 0x340 <lcdLight>
 690:	ce 3f       	cpi	r28, 0xFE	; 254
 692:	21 f0       	breq	.+8      	; 0x69c <initBoard+0x16e>
 694:	c8 37       	cpi	r28, 0x78	; 120
 696:	19 f4       	brne	.+6      	; 0x69e <initBoard+0x170>
 698:	86 2c       	mov	r8, r6
 69a:	01 c0       	rjmp	.+2      	; 0x69e <initBoard+0x170>
 69c:	85 2c       	mov	r8, r5
 69e:	71 10       	cpse	r7, r1
 6a0:	3b c0       	rjmp	.+118    	; 0x718 <initBoard+0x1ea>
 6a2:	f8 01       	movw	r30, r16
 6a4:	80 81       	ld	r24, Z
 6a6:	83 7c       	andi	r24, 0xC3	; 195
 6a8:	91 f0       	breq	.+36     	; 0x6ce <initBoard+0x1a0>
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	66 e2       	ldi	r22, 0x26	; 38
 6b0:	72 e0       	ldi	r23, 0x02	; 2
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	93 e0       	ldi	r25, 0x03	; 3
 6b6:	0d de       	rcall	.-998    	; 0x2d2 <rgbWrite>
 6b8:	bf 92       	push	r11
 6ba:	af 92       	push	r10
 6bc:	1f 92       	push	r1
 6be:	4f 92       	push	r4
 6c0:	c2 de       	rcall	.-636    	; 0x446 <lcdWriteText>
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	76 2c       	mov	r7, r6
 6cc:	25 c0       	rjmp	.+74     	; 0x718 <initBoard+0x1ea>
 6ce:	8f ef       	ldi	r24, 0xFF	; 255
 6d0:	9c e7       	ldi	r25, 0x7C	; 124
 6d2:	01 97       	sbiw	r24, 0x01	; 1
 6d4:	f1 f7       	brne	.-4      	; 0x6d2 <initBoard+0x1a4>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <initBoard+0x1aa>
 6d8:	00 00       	nop
 6da:	b8 cf       	rjmp	.-144    	; 0x64c <initBoard+0x11e>
 6dc:	f0 de       	rcall	.-544    	; 0x4be <lcdClear>
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	2f de       	rcall	.-930    	; 0x340 <lcdLight>
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	c5 dd       	rcall	.-1142   	; 0x272 <ledWriteAll>
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	ee dd       	rcall	.-1060   	; 0x2d2 <rgbWrite>
 6f6:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
 6fa:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
 6fe:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
 702:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
 706:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
 70a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
 70e:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
 712:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
 716:	05 c0       	rjmp	.+10     	; 0x722 <initBoard+0x1f4>
 718:	f8 01       	movw	r30, r16
 71a:	80 81       	ld	r24, Z
 71c:	83 7c       	andi	r24, 0xC3	; 195
 71e:	b9 f6       	brne	.-82     	; 0x6ce <initBoard+0x1a0>
 720:	dd cf       	rjmp	.-70     	; 0x6dc <initBoard+0x1ae>
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	ff 90       	pop	r15
 72c:	ef 90       	pop	r14
 72e:	df 90       	pop	r13
 730:	cf 90       	pop	r12
 732:	bf 90       	pop	r11
 734:	af 90       	pop	r10
 736:	9f 90       	pop	r9
 738:	8f 90       	pop	r8
 73a:	7f 90       	pop	r7
 73c:	6f 90       	pop	r6
 73e:	5f 90       	pop	r5
 740:	4f 90       	pop	r4
 742:	08 95       	ret

00000744 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	28 97       	sbiw	r28, 0x08	; 8
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 758:	88 e0       	ldi	r24, 0x08	; 8
 75a:	e0 e0       	ldi	r30, 0x00	; 0
 75c:	f2 e0       	ldi	r31, 0x02	; 2
 75e:	de 01       	movw	r26, r28
 760:	11 96       	adiw	r26, 0x01	; 1
 762:	01 90       	ld	r0, Z+
 764:	0d 92       	st	X+, r0
 766:	8a 95       	dec	r24
 768:	e1 f7       	brne	.-8      	; 0x762 <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 76a:	e5 e0       	ldi	r30, 0x05	; 5
 76c:	f1 e0       	ldi	r31, 0x01	; 1
 76e:	80 81       	ld	r24, Z
 770:	8f 7b       	andi	r24, 0xBF	; 191
 772:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 774:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 778:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	8c 0f       	add	r24, r28
 782:	9d 1f       	adc	r25, r29
 784:	e8 0f       	add	r30, r24
 786:	f9 1f       	adc	r31, r25
 788:	80 81       	ld	r24, Z
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
 790:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
 794:	a2 ef       	ldi	r26, 0xF2	; 242
 796:	b2 e0       	ldi	r27, 0x02	; 2
 798:	22 e8       	ldi	r18, 0x82	; 130
 79a:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 79c:	e5 e0       	ldi	r30, 0x05	; 5
 79e:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 7a0:	5e 91       	ld	r21, -X
 7a2:	4e 91       	ld	r20, -X
 7a4:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
 7a8:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
 7ac:	84 23       	and	r24, r20
 7ae:	95 23       	and	r25, r21
 7b0:	89 2b       	or	r24, r25
 7b2:	21 f0       	breq	.+8      	; 0x7bc <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 7b4:	80 81       	ld	r24, Z
 7b6:	80 62       	ori	r24, 0x20	; 32
 7b8:	80 83       	st	Z, r24
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 7bc:	80 81       	ld	r24, Z
 7be:	8f 7d       	andi	r24, 0xDF	; 223
 7c0:	80 83       	st	Z, r24
        }
        CLOCK_1;
 7c2:	80 81       	ld	r24, Z
 7c4:	80 61       	ori	r24, 0x10	; 16
 7c6:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 7c8:	80 81       	ld	r24, Z
 7ca:	8f 7e       	andi	r24, 0xEF	; 239
 7cc:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 7ce:	a2 17       	cp	r26, r18
 7d0:	b3 07       	cpc	r27, r19
 7d2:	31 f7       	brne	.-52     	; 0x7a0 <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 7d4:	e5 e0       	ldi	r30, 0x05	; 5
 7d6:	f1 e0       	ldi	r31, 0x01	; 1
 7d8:	80 81       	ld	r24, Z
 7da:	87 7f       	andi	r24, 0xF7	; 247
 7dc:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 7de:	80 81       	ld	r24, Z
 7e0:	88 7f       	andi	r24, 0xF8	; 248
 7e2:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 7e4:	90 81       	ld	r25, Z
 7e6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 7ea:	89 2b       	or	r24, r25
 7ec:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 7ee:	80 81       	ld	r24, Z
 7f0:	80 64       	ori	r24, 0x40	; 64
 7f2:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 7f4:	80 81       	ld	r24, Z
 7f6:	88 60       	ori	r24, 0x08	; 8
 7f8:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 7fa:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 7fe:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 802:	87 30       	cpi	r24, 0x07	; 7
 804:	91 05       	cpc	r25, r1
 806:	30 f4       	brcc	.+12     	; 0x814 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2731+0x1>
 80e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2731>
 812:	07 c0       	rjmp	.+14     	; 0x822 <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
 814:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2731+0x1>
 818:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2731>
        writeTextFinished = 1;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
 822:	28 96       	adiw	r28, 0x08	; 8
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	f8 94       	cli
 828:	de bf       	out	0x3e, r29	; 62
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	cd bf       	out	0x3d, r28	; 61
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	0b b6       	in	r0, 0x3b	; 59
 840:	0f 92       	push	r0
 842:	2f 93       	push	r18
 844:	3f 93       	push	r19
 846:	4f 93       	push	r20
 848:	5f 93       	push	r21
 84a:	6f 93       	push	r22
 84c:	7f 93       	push	r23
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	af 93       	push	r26
 854:	bf 93       	push	r27
 856:	ef 93       	push	r30
 858:	ff 93       	push	r31
    systemTimeMs += 1;
 85a:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
 85e:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
 862:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
 866:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
 86a:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
 86e:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
 872:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
 876:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
 87a:	a1 e0       	ldi	r26, 0x01	; 1
 87c:	27 d0       	rcall	.+78     	; 0x8cc <__adddi3_s8>
 87e:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
 882:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
 886:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
 88a:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
 88e:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
 892:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
 896:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
 89a:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 89e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
 8a2:	81 11       	cpse	r24, r1
 8a4:	4f df       	rcall	.-354    	; 0x744 <matrixWriteNextLine>
}
 8a6:	ff 91       	pop	r31
 8a8:	ef 91       	pop	r30
 8aa:	bf 91       	pop	r27
 8ac:	af 91       	pop	r26
 8ae:	9f 91       	pop	r25
 8b0:	8f 91       	pop	r24
 8b2:	7f 91       	pop	r23
 8b4:	6f 91       	pop	r22
 8b6:	5f 91       	pop	r21
 8b8:	4f 91       	pop	r20
 8ba:	3f 91       	pop	r19
 8bc:	2f 91       	pop	r18
 8be:	0f 90       	pop	r0
 8c0:	0b be       	out	0x3b, r0	; 59
 8c2:	0f 90       	pop	r0
 8c4:	0f be       	out	0x3f, r0	; 63
 8c6:	0f 90       	pop	r0
 8c8:	1f 90       	pop	r1
 8ca:	18 95       	reti

000008cc <__adddi3_s8>:
 8cc:	00 24       	eor	r0, r0
 8ce:	a7 fd       	sbrc	r26, 7
 8d0:	00 94       	com	r0
 8d2:	2a 0f       	add	r18, r26
 8d4:	30 1d       	adc	r19, r0
 8d6:	40 1d       	adc	r20, r0
 8d8:	50 1d       	adc	r21, r0
 8da:	60 1d       	adc	r22, r0
 8dc:	70 1d       	adc	r23, r0
 8de:	80 1d       	adc	r24, r0
 8e0:	90 1d       	adc	r25, r0
 8e2:	08 95       	ret

000008e4 <vsnprintf>:
 8e4:	0f 93       	push	r16
 8e6:	1f 93       	push	r17
 8e8:	cf 93       	push	r28
 8ea:	df 93       	push	r29
 8ec:	cd b7       	in	r28, 0x3d	; 61
 8ee:	de b7       	in	r29, 0x3e	; 62
 8f0:	2e 97       	sbiw	r28, 0x0e	; 14
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	f8 94       	cli
 8f6:	de bf       	out	0x3e, r29	; 62
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	cd bf       	out	0x3d, r28	; 61
 8fc:	8c 01       	movw	r16, r24
 8fe:	fa 01       	movw	r30, r20
 900:	86 e0       	ldi	r24, 0x06	; 6
 902:	8c 83       	std	Y+4, r24	; 0x04
 904:	1a 83       	std	Y+2, r17	; 0x02
 906:	09 83       	std	Y+1, r16	; 0x01
 908:	77 ff       	sbrs	r23, 7
 90a:	02 c0       	rjmp	.+4      	; 0x910 <vsnprintf+0x2c>
 90c:	60 e0       	ldi	r22, 0x00	; 0
 90e:	70 e8       	ldi	r23, 0x80	; 128
 910:	cb 01       	movw	r24, r22
 912:	01 97       	sbiw	r24, 0x01	; 1
 914:	9e 83       	std	Y+6, r25	; 0x06
 916:	8d 83       	std	Y+5, r24	; 0x05
 918:	a9 01       	movw	r20, r18
 91a:	bf 01       	movw	r22, r30
 91c:	ce 01       	movw	r24, r28
 91e:	01 96       	adiw	r24, 0x01	; 1
 920:	19 d0       	rcall	.+50     	; 0x954 <vfprintf>
 922:	4d 81       	ldd	r20, Y+5	; 0x05
 924:	5e 81       	ldd	r21, Y+6	; 0x06
 926:	57 fd       	sbrc	r21, 7
 928:	0a c0       	rjmp	.+20     	; 0x93e <vsnprintf+0x5a>
 92a:	2f 81       	ldd	r18, Y+7	; 0x07
 92c:	38 85       	ldd	r19, Y+8	; 0x08
 92e:	42 17       	cp	r20, r18
 930:	53 07       	cpc	r21, r19
 932:	0c f4       	brge	.+2      	; 0x936 <vsnprintf+0x52>
 934:	9a 01       	movw	r18, r20
 936:	f8 01       	movw	r30, r16
 938:	e2 0f       	add	r30, r18
 93a:	f3 1f       	adc	r31, r19
 93c:	10 82       	st	Z, r1
 93e:	2e 96       	adiw	r28, 0x0e	; 14
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	0f 91       	pop	r16
 952:	08 95       	ret

00000954 <vfprintf>:
 954:	2f 92       	push	r2
 956:	3f 92       	push	r3
 958:	4f 92       	push	r4
 95a:	5f 92       	push	r5
 95c:	6f 92       	push	r6
 95e:	7f 92       	push	r7
 960:	8f 92       	push	r8
 962:	9f 92       	push	r9
 964:	af 92       	push	r10
 966:	bf 92       	push	r11
 968:	cf 92       	push	r12
 96a:	df 92       	push	r13
 96c:	ef 92       	push	r14
 96e:	ff 92       	push	r15
 970:	0f 93       	push	r16
 972:	1f 93       	push	r17
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	cd b7       	in	r28, 0x3d	; 61
 97a:	de b7       	in	r29, 0x3e	; 62
 97c:	2b 97       	sbiw	r28, 0x0b	; 11
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	f8 94       	cli
 982:	de bf       	out	0x3e, r29	; 62
 984:	0f be       	out	0x3f, r0	; 63
 986:	cd bf       	out	0x3d, r28	; 61
 988:	6c 01       	movw	r12, r24
 98a:	7b 01       	movw	r14, r22
 98c:	8a 01       	movw	r16, r20
 98e:	fc 01       	movw	r30, r24
 990:	17 82       	std	Z+7, r1	; 0x07
 992:	16 82       	std	Z+6, r1	; 0x06
 994:	83 81       	ldd	r24, Z+3	; 0x03
 996:	81 ff       	sbrs	r24, 1
 998:	bf c1       	rjmp	.+894    	; 0xd18 <vfprintf+0x3c4>
 99a:	ce 01       	movw	r24, r28
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	3c 01       	movw	r6, r24
 9a0:	f6 01       	movw	r30, r12
 9a2:	93 81       	ldd	r25, Z+3	; 0x03
 9a4:	f7 01       	movw	r30, r14
 9a6:	93 fd       	sbrc	r25, 3
 9a8:	85 91       	lpm	r24, Z+
 9aa:	93 ff       	sbrs	r25, 3
 9ac:	81 91       	ld	r24, Z+
 9ae:	7f 01       	movw	r14, r30
 9b0:	88 23       	and	r24, r24
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <vfprintf+0x62>
 9b4:	ad c1       	rjmp	.+858    	; 0xd10 <vfprintf+0x3bc>
 9b6:	85 32       	cpi	r24, 0x25	; 37
 9b8:	39 f4       	brne	.+14     	; 0x9c8 <vfprintf+0x74>
 9ba:	93 fd       	sbrc	r25, 3
 9bc:	85 91       	lpm	r24, Z+
 9be:	93 ff       	sbrs	r25, 3
 9c0:	81 91       	ld	r24, Z+
 9c2:	7f 01       	movw	r14, r30
 9c4:	85 32       	cpi	r24, 0x25	; 37
 9c6:	21 f4       	brne	.+8      	; 0x9d0 <vfprintf+0x7c>
 9c8:	b6 01       	movw	r22, r12
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	d6 d1       	rcall	.+940    	; 0xd7a <fputc>
 9ce:	e8 cf       	rjmp	.-48     	; 0x9a0 <vfprintf+0x4c>
 9d0:	91 2c       	mov	r9, r1
 9d2:	21 2c       	mov	r2, r1
 9d4:	31 2c       	mov	r3, r1
 9d6:	ff e1       	ldi	r31, 0x1F	; 31
 9d8:	f3 15       	cp	r31, r3
 9da:	d8 f0       	brcs	.+54     	; 0xa12 <vfprintf+0xbe>
 9dc:	8b 32       	cpi	r24, 0x2B	; 43
 9de:	79 f0       	breq	.+30     	; 0x9fe <vfprintf+0xaa>
 9e0:	38 f4       	brcc	.+14     	; 0x9f0 <vfprintf+0x9c>
 9e2:	80 32       	cpi	r24, 0x20	; 32
 9e4:	79 f0       	breq	.+30     	; 0xa04 <vfprintf+0xb0>
 9e6:	83 32       	cpi	r24, 0x23	; 35
 9e8:	a1 f4       	brne	.+40     	; 0xa12 <vfprintf+0xbe>
 9ea:	23 2d       	mov	r18, r3
 9ec:	20 61       	ori	r18, 0x10	; 16
 9ee:	1d c0       	rjmp	.+58     	; 0xa2a <vfprintf+0xd6>
 9f0:	8d 32       	cpi	r24, 0x2D	; 45
 9f2:	61 f0       	breq	.+24     	; 0xa0c <vfprintf+0xb8>
 9f4:	80 33       	cpi	r24, 0x30	; 48
 9f6:	69 f4       	brne	.+26     	; 0xa12 <vfprintf+0xbe>
 9f8:	23 2d       	mov	r18, r3
 9fa:	21 60       	ori	r18, 0x01	; 1
 9fc:	16 c0       	rjmp	.+44     	; 0xa2a <vfprintf+0xd6>
 9fe:	83 2d       	mov	r24, r3
 a00:	82 60       	ori	r24, 0x02	; 2
 a02:	38 2e       	mov	r3, r24
 a04:	e3 2d       	mov	r30, r3
 a06:	e4 60       	ori	r30, 0x04	; 4
 a08:	3e 2e       	mov	r3, r30
 a0a:	2a c0       	rjmp	.+84     	; 0xa60 <vfprintf+0x10c>
 a0c:	f3 2d       	mov	r31, r3
 a0e:	f8 60       	ori	r31, 0x08	; 8
 a10:	1d c0       	rjmp	.+58     	; 0xa4c <vfprintf+0xf8>
 a12:	37 fc       	sbrc	r3, 7
 a14:	2d c0       	rjmp	.+90     	; 0xa70 <vfprintf+0x11c>
 a16:	20 ed       	ldi	r18, 0xD0	; 208
 a18:	28 0f       	add	r18, r24
 a1a:	2a 30       	cpi	r18, 0x0A	; 10
 a1c:	40 f0       	brcs	.+16     	; 0xa2e <vfprintf+0xda>
 a1e:	8e 32       	cpi	r24, 0x2E	; 46
 a20:	b9 f4       	brne	.+46     	; 0xa50 <vfprintf+0xfc>
 a22:	36 fc       	sbrc	r3, 6
 a24:	75 c1       	rjmp	.+746    	; 0xd10 <vfprintf+0x3bc>
 a26:	23 2d       	mov	r18, r3
 a28:	20 64       	ori	r18, 0x40	; 64
 a2a:	32 2e       	mov	r3, r18
 a2c:	19 c0       	rjmp	.+50     	; 0xa60 <vfprintf+0x10c>
 a2e:	36 fe       	sbrs	r3, 6
 a30:	06 c0       	rjmp	.+12     	; 0xa3e <vfprintf+0xea>
 a32:	8a e0       	ldi	r24, 0x0A	; 10
 a34:	98 9e       	mul	r9, r24
 a36:	20 0d       	add	r18, r0
 a38:	11 24       	eor	r1, r1
 a3a:	92 2e       	mov	r9, r18
 a3c:	11 c0       	rjmp	.+34     	; 0xa60 <vfprintf+0x10c>
 a3e:	ea e0       	ldi	r30, 0x0A	; 10
 a40:	2e 9e       	mul	r2, r30
 a42:	20 0d       	add	r18, r0
 a44:	11 24       	eor	r1, r1
 a46:	22 2e       	mov	r2, r18
 a48:	f3 2d       	mov	r31, r3
 a4a:	f0 62       	ori	r31, 0x20	; 32
 a4c:	3f 2e       	mov	r3, r31
 a4e:	08 c0       	rjmp	.+16     	; 0xa60 <vfprintf+0x10c>
 a50:	8c 36       	cpi	r24, 0x6C	; 108
 a52:	21 f4       	brne	.+8      	; 0xa5c <vfprintf+0x108>
 a54:	83 2d       	mov	r24, r3
 a56:	80 68       	ori	r24, 0x80	; 128
 a58:	38 2e       	mov	r3, r24
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <vfprintf+0x10c>
 a5c:	88 36       	cpi	r24, 0x68	; 104
 a5e:	41 f4       	brne	.+16     	; 0xa70 <vfprintf+0x11c>
 a60:	f7 01       	movw	r30, r14
 a62:	93 fd       	sbrc	r25, 3
 a64:	85 91       	lpm	r24, Z+
 a66:	93 ff       	sbrs	r25, 3
 a68:	81 91       	ld	r24, Z+
 a6a:	7f 01       	movw	r14, r30
 a6c:	81 11       	cpse	r24, r1
 a6e:	b3 cf       	rjmp	.-154    	; 0x9d6 <vfprintf+0x82>
 a70:	98 2f       	mov	r25, r24
 a72:	9f 7d       	andi	r25, 0xDF	; 223
 a74:	95 54       	subi	r25, 0x45	; 69
 a76:	93 30       	cpi	r25, 0x03	; 3
 a78:	28 f4       	brcc	.+10     	; 0xa84 <vfprintf+0x130>
 a7a:	0c 5f       	subi	r16, 0xFC	; 252
 a7c:	1f 4f       	sbci	r17, 0xFF	; 255
 a7e:	9f e3       	ldi	r25, 0x3F	; 63
 a80:	99 83       	std	Y+1, r25	; 0x01
 a82:	0d c0       	rjmp	.+26     	; 0xa9e <vfprintf+0x14a>
 a84:	83 36       	cpi	r24, 0x63	; 99
 a86:	31 f0       	breq	.+12     	; 0xa94 <vfprintf+0x140>
 a88:	83 37       	cpi	r24, 0x73	; 115
 a8a:	71 f0       	breq	.+28     	; 0xaa8 <vfprintf+0x154>
 a8c:	83 35       	cpi	r24, 0x53	; 83
 a8e:	09 f0       	breq	.+2      	; 0xa92 <vfprintf+0x13e>
 a90:	55 c0       	rjmp	.+170    	; 0xb3c <vfprintf+0x1e8>
 a92:	20 c0       	rjmp	.+64     	; 0xad4 <vfprintf+0x180>
 a94:	f8 01       	movw	r30, r16
 a96:	80 81       	ld	r24, Z
 a98:	89 83       	std	Y+1, r24	; 0x01
 a9a:	0e 5f       	subi	r16, 0xFE	; 254
 a9c:	1f 4f       	sbci	r17, 0xFF	; 255
 a9e:	88 24       	eor	r8, r8
 aa0:	83 94       	inc	r8
 aa2:	91 2c       	mov	r9, r1
 aa4:	53 01       	movw	r10, r6
 aa6:	12 c0       	rjmp	.+36     	; 0xacc <vfprintf+0x178>
 aa8:	28 01       	movw	r4, r16
 aaa:	f2 e0       	ldi	r31, 0x02	; 2
 aac:	4f 0e       	add	r4, r31
 aae:	51 1c       	adc	r5, r1
 ab0:	f8 01       	movw	r30, r16
 ab2:	a0 80       	ld	r10, Z
 ab4:	b1 80       	ldd	r11, Z+1	; 0x01
 ab6:	36 fe       	sbrs	r3, 6
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <vfprintf+0x16c>
 aba:	69 2d       	mov	r22, r9
 abc:	70 e0       	ldi	r23, 0x00	; 0
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <vfprintf+0x170>
 ac0:	6f ef       	ldi	r22, 0xFF	; 255
 ac2:	7f ef       	ldi	r23, 0xFF	; 255
 ac4:	c5 01       	movw	r24, r10
 ac6:	4e d1       	rcall	.+668    	; 0xd64 <strnlen>
 ac8:	4c 01       	movw	r8, r24
 aca:	82 01       	movw	r16, r4
 acc:	f3 2d       	mov	r31, r3
 ace:	ff 77       	andi	r31, 0x7F	; 127
 ad0:	3f 2e       	mov	r3, r31
 ad2:	15 c0       	rjmp	.+42     	; 0xafe <vfprintf+0x1aa>
 ad4:	28 01       	movw	r4, r16
 ad6:	22 e0       	ldi	r18, 0x02	; 2
 ad8:	42 0e       	add	r4, r18
 ada:	51 1c       	adc	r5, r1
 adc:	f8 01       	movw	r30, r16
 ade:	a0 80       	ld	r10, Z
 ae0:	b1 80       	ldd	r11, Z+1	; 0x01
 ae2:	36 fe       	sbrs	r3, 6
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <vfprintf+0x198>
 ae6:	69 2d       	mov	r22, r9
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <vfprintf+0x19c>
 aec:	6f ef       	ldi	r22, 0xFF	; 255
 aee:	7f ef       	ldi	r23, 0xFF	; 255
 af0:	c5 01       	movw	r24, r10
 af2:	2d d1       	rcall	.+602    	; 0xd4e <strnlen_P>
 af4:	4c 01       	movw	r8, r24
 af6:	f3 2d       	mov	r31, r3
 af8:	f0 68       	ori	r31, 0x80	; 128
 afa:	3f 2e       	mov	r3, r31
 afc:	82 01       	movw	r16, r4
 afe:	33 fc       	sbrc	r3, 3
 b00:	19 c0       	rjmp	.+50     	; 0xb34 <vfprintf+0x1e0>
 b02:	82 2d       	mov	r24, r2
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	88 16       	cp	r8, r24
 b08:	99 06       	cpc	r9, r25
 b0a:	a0 f4       	brcc	.+40     	; 0xb34 <vfprintf+0x1e0>
 b0c:	b6 01       	movw	r22, r12
 b0e:	80 e2       	ldi	r24, 0x20	; 32
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	33 d1       	rcall	.+614    	; 0xd7a <fputc>
 b14:	2a 94       	dec	r2
 b16:	f5 cf       	rjmp	.-22     	; 0xb02 <vfprintf+0x1ae>
 b18:	f5 01       	movw	r30, r10
 b1a:	37 fc       	sbrc	r3, 7
 b1c:	85 91       	lpm	r24, Z+
 b1e:	37 fe       	sbrs	r3, 7
 b20:	81 91       	ld	r24, Z+
 b22:	5f 01       	movw	r10, r30
 b24:	b6 01       	movw	r22, r12
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	28 d1       	rcall	.+592    	; 0xd7a <fputc>
 b2a:	21 10       	cpse	r2, r1
 b2c:	2a 94       	dec	r2
 b2e:	21 e0       	ldi	r18, 0x01	; 1
 b30:	82 1a       	sub	r8, r18
 b32:	91 08       	sbc	r9, r1
 b34:	81 14       	cp	r8, r1
 b36:	91 04       	cpc	r9, r1
 b38:	79 f7       	brne	.-34     	; 0xb18 <vfprintf+0x1c4>
 b3a:	e1 c0       	rjmp	.+450    	; 0xcfe <vfprintf+0x3aa>
 b3c:	84 36       	cpi	r24, 0x64	; 100
 b3e:	11 f0       	breq	.+4      	; 0xb44 <vfprintf+0x1f0>
 b40:	89 36       	cpi	r24, 0x69	; 105
 b42:	39 f5       	brne	.+78     	; 0xb92 <vfprintf+0x23e>
 b44:	f8 01       	movw	r30, r16
 b46:	37 fe       	sbrs	r3, 7
 b48:	07 c0       	rjmp	.+14     	; 0xb58 <vfprintf+0x204>
 b4a:	60 81       	ld	r22, Z
 b4c:	71 81       	ldd	r23, Z+1	; 0x01
 b4e:	82 81       	ldd	r24, Z+2	; 0x02
 b50:	93 81       	ldd	r25, Z+3	; 0x03
 b52:	0c 5f       	subi	r16, 0xFC	; 252
 b54:	1f 4f       	sbci	r17, 0xFF	; 255
 b56:	08 c0       	rjmp	.+16     	; 0xb68 <vfprintf+0x214>
 b58:	60 81       	ld	r22, Z
 b5a:	71 81       	ldd	r23, Z+1	; 0x01
 b5c:	07 2e       	mov	r0, r23
 b5e:	00 0c       	add	r0, r0
 b60:	88 0b       	sbc	r24, r24
 b62:	99 0b       	sbc	r25, r25
 b64:	0e 5f       	subi	r16, 0xFE	; 254
 b66:	1f 4f       	sbci	r17, 0xFF	; 255
 b68:	f3 2d       	mov	r31, r3
 b6a:	ff 76       	andi	r31, 0x6F	; 111
 b6c:	3f 2e       	mov	r3, r31
 b6e:	97 ff       	sbrs	r25, 7
 b70:	09 c0       	rjmp	.+18     	; 0xb84 <vfprintf+0x230>
 b72:	90 95       	com	r25
 b74:	80 95       	com	r24
 b76:	70 95       	com	r23
 b78:	61 95       	neg	r22
 b7a:	7f 4f       	sbci	r23, 0xFF	; 255
 b7c:	8f 4f       	sbci	r24, 0xFF	; 255
 b7e:	9f 4f       	sbci	r25, 0xFF	; 255
 b80:	f0 68       	ori	r31, 0x80	; 128
 b82:	3f 2e       	mov	r3, r31
 b84:	2a e0       	ldi	r18, 0x0A	; 10
 b86:	30 e0       	ldi	r19, 0x00	; 0
 b88:	a3 01       	movw	r20, r6
 b8a:	33 d1       	rcall	.+614    	; 0xdf2 <__ultoa_invert>
 b8c:	88 2e       	mov	r8, r24
 b8e:	86 18       	sub	r8, r6
 b90:	44 c0       	rjmp	.+136    	; 0xc1a <vfprintf+0x2c6>
 b92:	85 37       	cpi	r24, 0x75	; 117
 b94:	31 f4       	brne	.+12     	; 0xba2 <vfprintf+0x24e>
 b96:	23 2d       	mov	r18, r3
 b98:	2f 7e       	andi	r18, 0xEF	; 239
 b9a:	b2 2e       	mov	r11, r18
 b9c:	2a e0       	ldi	r18, 0x0A	; 10
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	25 c0       	rjmp	.+74     	; 0xbec <vfprintf+0x298>
 ba2:	93 2d       	mov	r25, r3
 ba4:	99 7f       	andi	r25, 0xF9	; 249
 ba6:	b9 2e       	mov	r11, r25
 ba8:	8f 36       	cpi	r24, 0x6F	; 111
 baa:	c1 f0       	breq	.+48     	; 0xbdc <vfprintf+0x288>
 bac:	18 f4       	brcc	.+6      	; 0xbb4 <vfprintf+0x260>
 bae:	88 35       	cpi	r24, 0x58	; 88
 bb0:	79 f0       	breq	.+30     	; 0xbd0 <vfprintf+0x27c>
 bb2:	ae c0       	rjmp	.+348    	; 0xd10 <vfprintf+0x3bc>
 bb4:	80 37       	cpi	r24, 0x70	; 112
 bb6:	19 f0       	breq	.+6      	; 0xbbe <vfprintf+0x26a>
 bb8:	88 37       	cpi	r24, 0x78	; 120
 bba:	21 f0       	breq	.+8      	; 0xbc4 <vfprintf+0x270>
 bbc:	a9 c0       	rjmp	.+338    	; 0xd10 <vfprintf+0x3bc>
 bbe:	e9 2f       	mov	r30, r25
 bc0:	e0 61       	ori	r30, 0x10	; 16
 bc2:	be 2e       	mov	r11, r30
 bc4:	b4 fe       	sbrs	r11, 4
 bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <vfprintf+0x28e>
 bc8:	fb 2d       	mov	r31, r11
 bca:	f4 60       	ori	r31, 0x04	; 4
 bcc:	bf 2e       	mov	r11, r31
 bce:	09 c0       	rjmp	.+18     	; 0xbe2 <vfprintf+0x28e>
 bd0:	34 fe       	sbrs	r3, 4
 bd2:	0a c0       	rjmp	.+20     	; 0xbe8 <vfprintf+0x294>
 bd4:	29 2f       	mov	r18, r25
 bd6:	26 60       	ori	r18, 0x06	; 6
 bd8:	b2 2e       	mov	r11, r18
 bda:	06 c0       	rjmp	.+12     	; 0xbe8 <vfprintf+0x294>
 bdc:	28 e0       	ldi	r18, 0x08	; 8
 bde:	30 e0       	ldi	r19, 0x00	; 0
 be0:	05 c0       	rjmp	.+10     	; 0xbec <vfprintf+0x298>
 be2:	20 e1       	ldi	r18, 0x10	; 16
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	02 c0       	rjmp	.+4      	; 0xbec <vfprintf+0x298>
 be8:	20 e1       	ldi	r18, 0x10	; 16
 bea:	32 e0       	ldi	r19, 0x02	; 2
 bec:	f8 01       	movw	r30, r16
 bee:	b7 fe       	sbrs	r11, 7
 bf0:	07 c0       	rjmp	.+14     	; 0xc00 <vfprintf+0x2ac>
 bf2:	60 81       	ld	r22, Z
 bf4:	71 81       	ldd	r23, Z+1	; 0x01
 bf6:	82 81       	ldd	r24, Z+2	; 0x02
 bf8:	93 81       	ldd	r25, Z+3	; 0x03
 bfa:	0c 5f       	subi	r16, 0xFC	; 252
 bfc:	1f 4f       	sbci	r17, 0xFF	; 255
 bfe:	06 c0       	rjmp	.+12     	; 0xc0c <vfprintf+0x2b8>
 c00:	60 81       	ld	r22, Z
 c02:	71 81       	ldd	r23, Z+1	; 0x01
 c04:	80 e0       	ldi	r24, 0x00	; 0
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	0e 5f       	subi	r16, 0xFE	; 254
 c0a:	1f 4f       	sbci	r17, 0xFF	; 255
 c0c:	a3 01       	movw	r20, r6
 c0e:	f1 d0       	rcall	.+482    	; 0xdf2 <__ultoa_invert>
 c10:	88 2e       	mov	r8, r24
 c12:	86 18       	sub	r8, r6
 c14:	fb 2d       	mov	r31, r11
 c16:	ff 77       	andi	r31, 0x7F	; 127
 c18:	3f 2e       	mov	r3, r31
 c1a:	36 fe       	sbrs	r3, 6
 c1c:	0d c0       	rjmp	.+26     	; 0xc38 <vfprintf+0x2e4>
 c1e:	23 2d       	mov	r18, r3
 c20:	2e 7f       	andi	r18, 0xFE	; 254
 c22:	a2 2e       	mov	r10, r18
 c24:	89 14       	cp	r8, r9
 c26:	58 f4       	brcc	.+22     	; 0xc3e <vfprintf+0x2ea>
 c28:	34 fe       	sbrs	r3, 4
 c2a:	0b c0       	rjmp	.+22     	; 0xc42 <vfprintf+0x2ee>
 c2c:	32 fc       	sbrc	r3, 2
 c2e:	09 c0       	rjmp	.+18     	; 0xc42 <vfprintf+0x2ee>
 c30:	83 2d       	mov	r24, r3
 c32:	8e 7e       	andi	r24, 0xEE	; 238
 c34:	a8 2e       	mov	r10, r24
 c36:	05 c0       	rjmp	.+10     	; 0xc42 <vfprintf+0x2ee>
 c38:	b8 2c       	mov	r11, r8
 c3a:	a3 2c       	mov	r10, r3
 c3c:	03 c0       	rjmp	.+6      	; 0xc44 <vfprintf+0x2f0>
 c3e:	b8 2c       	mov	r11, r8
 c40:	01 c0       	rjmp	.+2      	; 0xc44 <vfprintf+0x2f0>
 c42:	b9 2c       	mov	r11, r9
 c44:	a4 fe       	sbrs	r10, 4
 c46:	0f c0       	rjmp	.+30     	; 0xc66 <vfprintf+0x312>
 c48:	fe 01       	movw	r30, r28
 c4a:	e8 0d       	add	r30, r8
 c4c:	f1 1d       	adc	r31, r1
 c4e:	80 81       	ld	r24, Z
 c50:	80 33       	cpi	r24, 0x30	; 48
 c52:	21 f4       	brne	.+8      	; 0xc5c <vfprintf+0x308>
 c54:	9a 2d       	mov	r25, r10
 c56:	99 7e       	andi	r25, 0xE9	; 233
 c58:	a9 2e       	mov	r10, r25
 c5a:	09 c0       	rjmp	.+18     	; 0xc6e <vfprintf+0x31a>
 c5c:	a2 fe       	sbrs	r10, 2
 c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0x318>
 c60:	b3 94       	inc	r11
 c62:	b3 94       	inc	r11
 c64:	04 c0       	rjmp	.+8      	; 0xc6e <vfprintf+0x31a>
 c66:	8a 2d       	mov	r24, r10
 c68:	86 78       	andi	r24, 0x86	; 134
 c6a:	09 f0       	breq	.+2      	; 0xc6e <vfprintf+0x31a>
 c6c:	b3 94       	inc	r11
 c6e:	a3 fc       	sbrc	r10, 3
 c70:	10 c0       	rjmp	.+32     	; 0xc92 <vfprintf+0x33e>
 c72:	a0 fe       	sbrs	r10, 0
 c74:	06 c0       	rjmp	.+12     	; 0xc82 <vfprintf+0x32e>
 c76:	b2 14       	cp	r11, r2
 c78:	80 f4       	brcc	.+32     	; 0xc9a <vfprintf+0x346>
 c7a:	28 0c       	add	r2, r8
 c7c:	92 2c       	mov	r9, r2
 c7e:	9b 18       	sub	r9, r11
 c80:	0d c0       	rjmp	.+26     	; 0xc9c <vfprintf+0x348>
 c82:	b2 14       	cp	r11, r2
 c84:	58 f4       	brcc	.+22     	; 0xc9c <vfprintf+0x348>
 c86:	b6 01       	movw	r22, r12
 c88:	80 e2       	ldi	r24, 0x20	; 32
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	76 d0       	rcall	.+236    	; 0xd7a <fputc>
 c8e:	b3 94       	inc	r11
 c90:	f8 cf       	rjmp	.-16     	; 0xc82 <vfprintf+0x32e>
 c92:	b2 14       	cp	r11, r2
 c94:	18 f4       	brcc	.+6      	; 0xc9c <vfprintf+0x348>
 c96:	2b 18       	sub	r2, r11
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <vfprintf+0x34a>
 c9a:	98 2c       	mov	r9, r8
 c9c:	21 2c       	mov	r2, r1
 c9e:	a4 fe       	sbrs	r10, 4
 ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <vfprintf+0x36c>
 ca2:	b6 01       	movw	r22, r12
 ca4:	80 e3       	ldi	r24, 0x30	; 48
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	68 d0       	rcall	.+208    	; 0xd7a <fputc>
 caa:	a2 fe       	sbrs	r10, 2
 cac:	16 c0       	rjmp	.+44     	; 0xcda <vfprintf+0x386>
 cae:	a1 fc       	sbrc	r10, 1
 cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <vfprintf+0x364>
 cb2:	88 e7       	ldi	r24, 0x78	; 120
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0x368>
 cb8:	88 e5       	ldi	r24, 0x58	; 88
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	b6 01       	movw	r22, r12
 cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <vfprintf+0x384>
 cc0:	8a 2d       	mov	r24, r10
 cc2:	86 78       	andi	r24, 0x86	; 134
 cc4:	51 f0       	breq	.+20     	; 0xcda <vfprintf+0x386>
 cc6:	a1 fe       	sbrs	r10, 1
 cc8:	02 c0       	rjmp	.+4      	; 0xcce <vfprintf+0x37a>
 cca:	8b e2       	ldi	r24, 0x2B	; 43
 ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <vfprintf+0x37c>
 cce:	80 e2       	ldi	r24, 0x20	; 32
 cd0:	a7 fc       	sbrc	r10, 7
 cd2:	8d e2       	ldi	r24, 0x2D	; 45
 cd4:	b6 01       	movw	r22, r12
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	50 d0       	rcall	.+160    	; 0xd7a <fputc>
 cda:	89 14       	cp	r8, r9
 cdc:	30 f4       	brcc	.+12     	; 0xcea <vfprintf+0x396>
 cde:	b6 01       	movw	r22, r12
 ce0:	80 e3       	ldi	r24, 0x30	; 48
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	4a d0       	rcall	.+148    	; 0xd7a <fputc>
 ce6:	9a 94       	dec	r9
 ce8:	f8 cf       	rjmp	.-16     	; 0xcda <vfprintf+0x386>
 cea:	8a 94       	dec	r8
 cec:	f3 01       	movw	r30, r6
 cee:	e8 0d       	add	r30, r8
 cf0:	f1 1d       	adc	r31, r1
 cf2:	80 81       	ld	r24, Z
 cf4:	b6 01       	movw	r22, r12
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	40 d0       	rcall	.+128    	; 0xd7a <fputc>
 cfa:	81 10       	cpse	r8, r1
 cfc:	f6 cf       	rjmp	.-20     	; 0xcea <vfprintf+0x396>
 cfe:	22 20       	and	r2, r2
 d00:	09 f4       	brne	.+2      	; 0xd04 <vfprintf+0x3b0>
 d02:	4e ce       	rjmp	.-868    	; 0x9a0 <vfprintf+0x4c>
 d04:	b6 01       	movw	r22, r12
 d06:	80 e2       	ldi	r24, 0x20	; 32
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	37 d0       	rcall	.+110    	; 0xd7a <fputc>
 d0c:	2a 94       	dec	r2
 d0e:	f7 cf       	rjmp	.-18     	; 0xcfe <vfprintf+0x3aa>
 d10:	f6 01       	movw	r30, r12
 d12:	86 81       	ldd	r24, Z+6	; 0x06
 d14:	97 81       	ldd	r25, Z+7	; 0x07
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <vfprintf+0x3c8>
 d18:	8f ef       	ldi	r24, 0xFF	; 255
 d1a:	9f ef       	ldi	r25, 0xFF	; 255
 d1c:	2b 96       	adiw	r28, 0x0b	; 11
 d1e:	0f b6       	in	r0, 0x3f	; 63
 d20:	f8 94       	cli
 d22:	de bf       	out	0x3e, r29	; 62
 d24:	0f be       	out	0x3f, r0	; 63
 d26:	cd bf       	out	0x3d, r28	; 61
 d28:	df 91       	pop	r29
 d2a:	cf 91       	pop	r28
 d2c:	1f 91       	pop	r17
 d2e:	0f 91       	pop	r16
 d30:	ff 90       	pop	r15
 d32:	ef 90       	pop	r14
 d34:	df 90       	pop	r13
 d36:	cf 90       	pop	r12
 d38:	bf 90       	pop	r11
 d3a:	af 90       	pop	r10
 d3c:	9f 90       	pop	r9
 d3e:	8f 90       	pop	r8
 d40:	7f 90       	pop	r7
 d42:	6f 90       	pop	r6
 d44:	5f 90       	pop	r5
 d46:	4f 90       	pop	r4
 d48:	3f 90       	pop	r3
 d4a:	2f 90       	pop	r2
 d4c:	08 95       	ret

00000d4e <strnlen_P>:
 d4e:	fc 01       	movw	r30, r24
 d50:	05 90       	lpm	r0, Z+
 d52:	61 50       	subi	r22, 0x01	; 1
 d54:	70 40       	sbci	r23, 0x00	; 0
 d56:	01 10       	cpse	r0, r1
 d58:	d8 f7       	brcc	.-10     	; 0xd50 <strnlen_P+0x2>
 d5a:	80 95       	com	r24
 d5c:	90 95       	com	r25
 d5e:	8e 0f       	add	r24, r30
 d60:	9f 1f       	adc	r25, r31
 d62:	08 95       	ret

00000d64 <strnlen>:
 d64:	fc 01       	movw	r30, r24
 d66:	61 50       	subi	r22, 0x01	; 1
 d68:	70 40       	sbci	r23, 0x00	; 0
 d6a:	01 90       	ld	r0, Z+
 d6c:	01 10       	cpse	r0, r1
 d6e:	d8 f7       	brcc	.-10     	; 0xd66 <strnlen+0x2>
 d70:	80 95       	com	r24
 d72:	90 95       	com	r25
 d74:	8e 0f       	add	r24, r30
 d76:	9f 1f       	adc	r25, r31
 d78:	08 95       	ret

00000d7a <fputc>:
 d7a:	0f 93       	push	r16
 d7c:	1f 93       	push	r17
 d7e:	cf 93       	push	r28
 d80:	df 93       	push	r29
 d82:	fb 01       	movw	r30, r22
 d84:	23 81       	ldd	r18, Z+3	; 0x03
 d86:	21 fd       	sbrc	r18, 1
 d88:	03 c0       	rjmp	.+6      	; 0xd90 <fputc+0x16>
 d8a:	8f ef       	ldi	r24, 0xFF	; 255
 d8c:	9f ef       	ldi	r25, 0xFF	; 255
 d8e:	2c c0       	rjmp	.+88     	; 0xde8 <fputc+0x6e>
 d90:	22 ff       	sbrs	r18, 2
 d92:	16 c0       	rjmp	.+44     	; 0xdc0 <fputc+0x46>
 d94:	46 81       	ldd	r20, Z+6	; 0x06
 d96:	57 81       	ldd	r21, Z+7	; 0x07
 d98:	24 81       	ldd	r18, Z+4	; 0x04
 d9a:	35 81       	ldd	r19, Z+5	; 0x05
 d9c:	42 17       	cp	r20, r18
 d9e:	53 07       	cpc	r21, r19
 da0:	44 f4       	brge	.+16     	; 0xdb2 <fputc+0x38>
 da2:	a0 81       	ld	r26, Z
 da4:	b1 81       	ldd	r27, Z+1	; 0x01
 da6:	9d 01       	movw	r18, r26
 da8:	2f 5f       	subi	r18, 0xFF	; 255
 daa:	3f 4f       	sbci	r19, 0xFF	; 255
 dac:	31 83       	std	Z+1, r19	; 0x01
 dae:	20 83       	st	Z, r18
 db0:	8c 93       	st	X, r24
 db2:	26 81       	ldd	r18, Z+6	; 0x06
 db4:	37 81       	ldd	r19, Z+7	; 0x07
 db6:	2f 5f       	subi	r18, 0xFF	; 255
 db8:	3f 4f       	sbci	r19, 0xFF	; 255
 dba:	37 83       	std	Z+7, r19	; 0x07
 dbc:	26 83       	std	Z+6, r18	; 0x06
 dbe:	14 c0       	rjmp	.+40     	; 0xde8 <fputc+0x6e>
 dc0:	8b 01       	movw	r16, r22
 dc2:	ec 01       	movw	r28, r24
 dc4:	fb 01       	movw	r30, r22
 dc6:	00 84       	ldd	r0, Z+8	; 0x08
 dc8:	f1 85       	ldd	r31, Z+9	; 0x09
 dca:	e0 2d       	mov	r30, r0
 dcc:	19 95       	eicall
 dce:	89 2b       	or	r24, r25
 dd0:	e1 f6       	brne	.-72     	; 0xd8a <fputc+0x10>
 dd2:	d8 01       	movw	r26, r16
 dd4:	16 96       	adiw	r26, 0x06	; 6
 dd6:	8d 91       	ld	r24, X+
 dd8:	9c 91       	ld	r25, X
 dda:	17 97       	sbiw	r26, 0x07	; 7
 ddc:	01 96       	adiw	r24, 0x01	; 1
 dde:	17 96       	adiw	r26, 0x07	; 7
 de0:	9c 93       	st	X, r25
 de2:	8e 93       	st	-X, r24
 de4:	16 97       	sbiw	r26, 0x06	; 6
 de6:	ce 01       	movw	r24, r28
 de8:	df 91       	pop	r29
 dea:	cf 91       	pop	r28
 dec:	1f 91       	pop	r17
 dee:	0f 91       	pop	r16
 df0:	08 95       	ret

00000df2 <__ultoa_invert>:
 df2:	fa 01       	movw	r30, r20
 df4:	aa 27       	eor	r26, r26
 df6:	28 30       	cpi	r18, 0x08	; 8
 df8:	51 f1       	breq	.+84     	; 0xe4e <__ultoa_invert+0x5c>
 dfa:	20 31       	cpi	r18, 0x10	; 16
 dfc:	81 f1       	breq	.+96     	; 0xe5e <__ultoa_invert+0x6c>
 dfe:	e8 94       	clt
 e00:	6f 93       	push	r22
 e02:	6e 7f       	andi	r22, 0xFE	; 254
 e04:	6e 5f       	subi	r22, 0xFE	; 254
 e06:	7f 4f       	sbci	r23, 0xFF	; 255
 e08:	8f 4f       	sbci	r24, 0xFF	; 255
 e0a:	9f 4f       	sbci	r25, 0xFF	; 255
 e0c:	af 4f       	sbci	r26, 0xFF	; 255
 e0e:	b1 e0       	ldi	r27, 0x01	; 1
 e10:	3e d0       	rcall	.+124    	; 0xe8e <__ultoa_invert+0x9c>
 e12:	b4 e0       	ldi	r27, 0x04	; 4
 e14:	3c d0       	rcall	.+120    	; 0xe8e <__ultoa_invert+0x9c>
 e16:	67 0f       	add	r22, r23
 e18:	78 1f       	adc	r23, r24
 e1a:	89 1f       	adc	r24, r25
 e1c:	9a 1f       	adc	r25, r26
 e1e:	a1 1d       	adc	r26, r1
 e20:	68 0f       	add	r22, r24
 e22:	79 1f       	adc	r23, r25
 e24:	8a 1f       	adc	r24, r26
 e26:	91 1d       	adc	r25, r1
 e28:	a1 1d       	adc	r26, r1
 e2a:	6a 0f       	add	r22, r26
 e2c:	71 1d       	adc	r23, r1
 e2e:	81 1d       	adc	r24, r1
 e30:	91 1d       	adc	r25, r1
 e32:	a1 1d       	adc	r26, r1
 e34:	20 d0       	rcall	.+64     	; 0xe76 <__ultoa_invert+0x84>
 e36:	09 f4       	brne	.+2      	; 0xe3a <__ultoa_invert+0x48>
 e38:	68 94       	set
 e3a:	3f 91       	pop	r19
 e3c:	2a e0       	ldi	r18, 0x0A	; 10
 e3e:	26 9f       	mul	r18, r22
 e40:	11 24       	eor	r1, r1
 e42:	30 19       	sub	r19, r0
 e44:	30 5d       	subi	r19, 0xD0	; 208
 e46:	31 93       	st	Z+, r19
 e48:	de f6       	brtc	.-74     	; 0xe00 <__ultoa_invert+0xe>
 e4a:	cf 01       	movw	r24, r30
 e4c:	08 95       	ret
 e4e:	46 2f       	mov	r20, r22
 e50:	47 70       	andi	r20, 0x07	; 7
 e52:	40 5d       	subi	r20, 0xD0	; 208
 e54:	41 93       	st	Z+, r20
 e56:	b3 e0       	ldi	r27, 0x03	; 3
 e58:	0f d0       	rcall	.+30     	; 0xe78 <__ultoa_invert+0x86>
 e5a:	c9 f7       	brne	.-14     	; 0xe4e <__ultoa_invert+0x5c>
 e5c:	f6 cf       	rjmp	.-20     	; 0xe4a <__ultoa_invert+0x58>
 e5e:	46 2f       	mov	r20, r22
 e60:	4f 70       	andi	r20, 0x0F	; 15
 e62:	40 5d       	subi	r20, 0xD0	; 208
 e64:	4a 33       	cpi	r20, 0x3A	; 58
 e66:	18 f0       	brcs	.+6      	; 0xe6e <__ultoa_invert+0x7c>
 e68:	49 5d       	subi	r20, 0xD9	; 217
 e6a:	31 fd       	sbrc	r19, 1
 e6c:	40 52       	subi	r20, 0x20	; 32
 e6e:	41 93       	st	Z+, r20
 e70:	02 d0       	rcall	.+4      	; 0xe76 <__ultoa_invert+0x84>
 e72:	a9 f7       	brne	.-22     	; 0xe5e <__ultoa_invert+0x6c>
 e74:	ea cf       	rjmp	.-44     	; 0xe4a <__ultoa_invert+0x58>
 e76:	b4 e0       	ldi	r27, 0x04	; 4
 e78:	a6 95       	lsr	r26
 e7a:	97 95       	ror	r25
 e7c:	87 95       	ror	r24
 e7e:	77 95       	ror	r23
 e80:	67 95       	ror	r22
 e82:	ba 95       	dec	r27
 e84:	c9 f7       	brne	.-14     	; 0xe78 <__ultoa_invert+0x86>
 e86:	00 97       	sbiw	r24, 0x00	; 0
 e88:	61 05       	cpc	r22, r1
 e8a:	71 05       	cpc	r23, r1
 e8c:	08 95       	ret
 e8e:	9b 01       	movw	r18, r22
 e90:	ac 01       	movw	r20, r24
 e92:	0a 2e       	mov	r0, r26
 e94:	06 94       	lsr	r0
 e96:	57 95       	ror	r21
 e98:	47 95       	ror	r20
 e9a:	37 95       	ror	r19
 e9c:	27 95       	ror	r18
 e9e:	ba 95       	dec	r27
 ea0:	c9 f7       	brne	.-14     	; 0xe94 <__ultoa_invert+0xa2>
 ea2:	62 0f       	add	r22, r18
 ea4:	73 1f       	adc	r23, r19
 ea6:	84 1f       	adc	r24, r20
 ea8:	95 1f       	adc	r25, r21
 eaa:	a0 1d       	adc	r26, r0
 eac:	08 95       	ret

00000eae <_exit>:
 eae:	f8 94       	cli

00000eb0 <__stop_program>:
 eb0:	ff cf       	rjmp	.-2      	; 0xeb0 <__stop_program>
