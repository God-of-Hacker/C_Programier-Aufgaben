
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000e92  00000f26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00000f9a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002584  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000feb  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001563  00000000  00000000  0000478f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000678  00000000  00000000  00005cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e13  00000000  00000000  0000636c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d3a  00000000  00000000  0000717f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00008eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	db c3       	rjmp	.+1974   	; 0x814 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e9       	ldi	r30, 0x92	; 146
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 37       	cpi	r26, 0x74	; 116
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e7       	ldi	r26, 0x74	; 116
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3f       	cpi	r26, 0xF2	; 242
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	b6 c6       	rjmp	.+3436   	; 0xe8e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
    uint16_t stoppuhrSchnellfeuer = 0;
    uint16_t stoppuhrPreazisionsmoduns = 0;
    
    
    //Initialisieren
    initBoard(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	f3 d1       	rcall	.+998    	; 0x50e <initBoard>
    
    uint16_t blinkenSchnellfeuerAktiviert = 0;
    uint16_t blinkenPreazisionsmodunsAktiviert = 0;
    
    uint16_t stoppuhrSchnellfeuer = 0;
    uint16_t stoppuhrPreazisionsmoduns = 0;
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t outBeleuchtungScrollradLED = 0;
    
    uint16_t blinkenSchnellfeuerAktiviert = 0;
    uint16_t blinkenPreazisionsmodunsAktiviert = 0;
    
    uint16_t stoppuhrSchnellfeuer = 0;
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
    uint16_t outBeleuchtungTastaturLED = 0;
    uint16_t outAnzeigeGeschwindigkeitLED = 0;
    uint16_t outBeleuchtungScrollradLED = 0;
    
    uint16_t blinkenSchnellfeuerAktiviert = 0;
    uint16_t blinkenPreazisionsmodunsAktiviert = 0;
 130:	a1 2c       	mov	r10, r1
 132:	b1 2c       	mov	r11, r1
    uint16_t outBeleuchtungLogorotLED = 0;
    uint16_t outBeleuchtungTastaturLED = 0;
    uint16_t outAnzeigeGeschwindigkeitLED = 0;
    uint16_t outBeleuchtungScrollradLED = 0;
    
    uint16_t blinkenSchnellfeuerAktiviert = 0;
 134:	c1 2c       	mov	r12, r1
 136:	d1 2c       	mov	r13, r1
    uint8_t preazisionsmodunsSchalter = 0;

    uint16_t outBeleuchtungLogoblauLED = 0;
    uint16_t outBeleuchtungLogorotLED = 0;
    uint16_t outBeleuchtungTastaturLED = 0;
    uint16_t outAnzeigeGeschwindigkeitLED = 0;
 138:	e1 2c       	mov	r14, r1
 13a:	f1 2c       	mov	r15, r1
                outBeleuchtungLogorotLED = OFF;
            }
        }
        else
        {
            outBeleuchtungTastaturLED = OUT_MASKE_BELEUCHTUNG_TASTATUR;
 13c:	68 94       	set
 13e:	88 24       	eor	r8, r8
 140:	82 f8       	bld	r8, 2
 142:	91 2c       	mov	r9, r1
            else
            {
                blinkenPreazisionsmodunsAktiviert = 0;
                
            }
            outBeleuchtungLogorotLED = OFF;
 144:	61 2c       	mov	r6, r1
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        StandbySchalter = switchReadAll() & IN_MASKE_COMPUTER_STANDBY;
 146:	71 2c       	mov	r7, r1
 148:	87 d0       	rcall	.+270    	; 0x258 <switchReadAll>
        SchnellfeuerSchalter = switchReadAll() & IN_MASKE_SCHNELFEUER_AKTIVIERT;
 14a:	58 2e       	mov	r5, r24
 14c:	85 d0       	rcall	.+266    	; 0x258 <switchReadAll>
        Geschwindigkeitschalter = (switchReadAll() & IN_MASKE_GESCHWINDIGKEIT)>> OFFSET_GESCHWINDIGKEIT;
 14e:	38 2e       	mov	r3, r24
 150:	83 d0       	rcall	.+262    	; 0x258 <switchReadAll>
        bewegungSchalter = switchReadAll() & IN_MASKE_BEWEGUNG_ERKANNT;
 152:	48 2e       	mov	r4, r24
 154:	81 d0       	rcall	.+258    	; 0x258 <switchReadAll>
 156:	28 2e       	mov	r2, r24
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
 158:	7f d0       	rcall	.+254    	; 0x258 <switchReadAll>
 15a:	50 fe       	sbrs	r5, 0
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
 15c:	0b c0       	rjmp	.+22     	; 0x174 <main+0x50>
 15e:	21 fc       	sbrc	r2, 1
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
            outBeleuchtungLogoblauLED = OFF;
            if (bewegungSchalter)
 160:	36 c0       	rjmp	.+108    	; 0x1ce <main+0xaa>
 162:	26 2d       	mov	r18, r6
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
 164:	37 2d       	mov	r19, r7
 166:	86 2d       	mov	r24, r6
        bewegungSchalter = switchReadAll() & IN_MASKE_BEWEGUNG_ERKANNT;
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
 168:	97 2d       	mov	r25, r7
 16a:	46 2d       	mov	r20, r6
            {
                outBeleuchtungLogorotLED = OUT_MASKE_BELEUCHTUNG_LOGO_ROT;
            }
            else
            {
                outBeleuchtungLogorotLED = OFF;
 16c:	57 2d       	mov	r21, r7
 16e:	66 2d       	mov	r22, r6
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
            outBeleuchtungLogoblauLED = OFF;
 170:	77 2d       	mov	r23, r7
 172:	35 c0       	rjmp	.+106    	; 0x1de <main+0xba>
 174:	32 fc       	sbrc	r3, 2
        else
        {
            outBeleuchtungTastaturLED = OUT_MASKE_BELEUCHTUNG_TASTATUR;
            outBeleuchtungLogoblauLED = OUT_MASKE_BELEUCHTUNG_LOGO_BLAU;
            
            if (SchnellfeuerSchalter)
 176:	05 c0       	rjmp	.+10     	; 0x182 <main+0x5e>
 178:	c6 2c       	mov	r12, r6
                blinkenSchnellfeuerAktiviert = 1;
                outBeleuchtungScrollradLED = OFF;
            }
            else
            {
                blinkenSchnellfeuerAktiviert = 0;
 17a:	d7 2c       	mov	r13, r7
 17c:	28 e0       	ldi	r18, 0x08	; 8
                outBeleuchtungScrollradLED = OUT_MASKE_BELEUCHTUNG_SCROLLRAD;
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	05 c0       	rjmp	.+10     	; 0x18c <main+0x68>
 182:	cc 24       	eor	r12, r12
            outBeleuchtungTastaturLED = OUT_MASKE_BELEUCHTUNG_TASTATUR;
            outBeleuchtungLogoblauLED = OUT_MASKE_BELEUCHTUNG_LOGO_BLAU;
            
            if (SchnellfeuerSchalter)
            {
                blinkenSchnellfeuerAktiviert = 1;
 184:	c3 94       	inc	r12
 186:	d1 2c       	mov	r13, r1
 188:	26 2d       	mov	r18, r6
                outBeleuchtungScrollradLED = OFF;
 18a:	37 2d       	mov	r19, r7
 18c:	ab 28       	or	r10, r11
            {
                blinkenSchnellfeuerAktiviert = 0;
                outBeleuchtungScrollradLED = OUT_MASKE_BELEUCHTUNG_SCROLLRAD;
            }
            
            if (!blinkenPreazisionsmodunsAktiviert)
 18e:	a9 f4       	brne	.+42     	; 0x1ba <main+0x96>
 190:	46 94       	lsr	r4
            {
              outAnzeigeGeschwindigkeitLED = (OUT_MASKE_BALKEN_GESCHWINDIGKEIT>>(BALKENGROESSE_LEDS-Geschwindigkeitschalter))&OUT_MASKE_BALKEN_GESCHWINDIGKEIT;  
 192:	46 94       	lsr	r4
 194:	46 94       	lsr	r4
 196:	46 94       	lsr	r4
 198:	46 94       	lsr	r4
 19a:	a4 01       	movw	r20, r8
 19c:	44 19       	sub	r20, r4
 19e:	51 09       	sbc	r21, r1
 1a0:	0f 2e       	mov	r0, r31
 1a2:	f0 ef       	ldi	r31, 0xF0	; 240
 1a4:	ef 2e       	mov	r14, r31
 1a6:	f1 2c       	mov	r15, r1
 1a8:	f0 2d       	mov	r31, r0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <main+0x8c>
 1ac:	f5 94       	asr	r15
 1ae:	e7 94       	ror	r14
 1b0:	4a 95       	dec	r20
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <main+0x88>
 1b4:	90 ef       	ldi	r25, 0xF0	; 240
 1b6:	e9 22       	and	r14, r25
 1b8:	ff 24       	eor	r15, r15
 1ba:	83 fb       	bst	r24, 3
            {
                blinkenPreazisionsmodunsAktiviert = 1;
            }
            else
            {
                blinkenPreazisionsmodunsAktiviert = 0;
 1bc:	aa 24       	eor	r10, r10
 1be:	a0 f8       	bld	r10, 0
 1c0:	b1 2c       	mov	r11, r1
 1c2:	c4 01       	movw	r24, r8
                outBeleuchtungLogorotLED = OFF;
            }
        }
        else
        {
            outBeleuchtungTastaturLED = OUT_MASKE_BELEUCHTUNG_TASTATUR;
 1c4:	46 2d       	mov	r20, r6
            else
            {
                blinkenPreazisionsmodunsAktiviert = 0;
                
            }
            outBeleuchtungLogorotLED = OFF;
 1c6:	57 2d       	mov	r21, r7
 1c8:	61 e0       	ldi	r22, 0x01	; 1
            }
        }
        else
        {
            outBeleuchtungTastaturLED = OUT_MASKE_BELEUCHTUNG_TASTATUR;
            outBeleuchtungLogoblauLED = OUT_MASKE_BELEUCHTUNG_LOGO_BLAU;
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	08 c0       	rjmp	.+16     	; 0x1de <main+0xba>
 1ce:	26 2d       	mov	r18, r6
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
 1d0:	37 2d       	mov	r19, r7
 1d2:	86 2d       	mov	r24, r6
        bewegungSchalter = switchReadAll() & IN_MASKE_BEWEGUNG_ERKANNT;
        preazisionsmodunsSchalter = switchReadAll() & IN_MASKE_PREAZISIONSMODUS_AKTIVIERT;
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
 1d4:	97 2d       	mov	r25, r7
 1d6:	42 e0       	ldi	r20, 0x02	; 2
            outBeleuchtungScrollradLED = OFF;
            outBeleuchtungLogoblauLED = OFF;
            if (bewegungSchalter)
            {
                outBeleuchtungLogorotLED = OUT_MASKE_BELEUCHTUNG_LOGO_ROT;
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	66 2d       	mov	r22, r6
        //Verarbeitung-------------------------------------------------------------
        if (StandbySchalter)
        {
            outBeleuchtungTastaturLED = OFF;
            outBeleuchtungScrollradLED = OFF;
            outBeleuchtungLogoblauLED = OFF;
 1dc:	77 2d       	mov	r23, r7
 1de:	c1 14       	cp	r12, r1
            outBeleuchtungLogorotLED = OFF;
        }
        
        
        //Ausgabe------------------------------------------------------------------
        if (blinkenSchnellfeuerAktiviert)
 1e0:	d1 04       	cpc	r13, r1
 1e2:	69 f0       	breq	.+26     	; 0x1fe <main+0xda>
 1e4:	ca 30       	cpi	r28, 0x0A	; 10
        {
            if (stoppuhrSchnellfeuer >= PERIODE_EIN_SCHNELFEUER_MS )
 1e6:	d1 05       	cpc	r29, r1
 1e8:	10 f0       	brcs	.+4      	; 0x1ee <main+0xca>
 1ea:	26 2d       	mov	r18, r6
            {
                outBeleuchtungScrollradLED = 0;
 1ec:	37 2d       	mov	r19, r7
 1ee:	c4 36       	cpi	r28, 0x64	; 100
            }
            if (stoppuhrSchnellfeuer >= PERIOD)
 1f0:	d1 05       	cpc	r29, r1
 1f2:	38 f0       	brcs	.+14     	; 0x202 <main+0xde>
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
            {
                outBeleuchtungScrollradLED = OUT_MASKE_BELEUCHTUNG_SCROLLRAD;
                stoppuhrSchnellfeuer = 0;
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	28 e0       	ldi	r18, 0x08	; 8
            {
                outBeleuchtungScrollradLED = 0;
            }
            if (stoppuhrSchnellfeuer >= PERIOD)
            {
                outBeleuchtungScrollradLED = OUT_MASKE_BELEUCHTUNG_SCROLLRAD;
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <main+0xde>
 1fe:	c4 e6       	ldi	r28, 0x64	; 100
                stoppuhrSchnellfeuer = 0;
            }
        }
        else
        {
            stoppuhrSchnellfeuer = PERIOD;
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	a1 14       	cp	r10, r1
        }
        
        if (blinkenPreazisionsmodunsAktiviert)
 204:	b1 04       	cpc	r11, r1
 206:	81 f0       	breq	.+32     	; 0x228 <main+0x104>
 208:	00 3a       	cpi	r16, 0xA0	; 160
        {
            if (stoppuhrPreazisionsmoduns >= EIN_ZEIT_PREAZISIONSMODUS_MS )
 20a:	11 05       	cpc	r17, r1
 20c:	10 f0       	brcs	.+4      	; 0x212 <main+0xee>
 20e:	e6 2c       	mov	r14, r6
            {
                outAnzeigeGeschwindigkeitLED = 0;
 210:	f7 2c       	mov	r15, r7
 212:	08 3c       	cpi	r16, 0xC8	; 200
            }
            if (stoppuhrPreazisionsmoduns >= PERIODE_PREAZISIONSMODUS_MS)
 214:	11 05       	cpc	r17, r1
 216:	50 f0       	brcs	.+20     	; 0x22c <main+0x108>
 218:	00 e0       	ldi	r16, 0x00	; 0
            {
                outAnzeigeGeschwindigkeitLED = OUT_MASKE_BALKEN_GESCHWINDIGKEIT;
                stoppuhrPreazisionsmoduns = 0;
 21a:	10 e0       	ldi	r17, 0x00	; 0
 21c:	0f 2e       	mov	r0, r31
            {
                outAnzeigeGeschwindigkeitLED = 0;
            }
            if (stoppuhrPreazisionsmoduns >= PERIODE_PREAZISIONSMODUS_MS)
            {
                outAnzeigeGeschwindigkeitLED = OUT_MASKE_BALKEN_GESCHWINDIGKEIT;
 21e:	f0 ef       	ldi	r31, 0xF0	; 240
 220:	ef 2e       	mov	r14, r31
 222:	f1 2c       	mov	r15, r1
 224:	f0 2d       	mov	r31, r0
 226:	02 c0       	rjmp	.+4      	; 0x22c <main+0x108>
 228:	08 ec       	ldi	r16, 0xC8	; 200
                stoppuhrPreazisionsmoduns = 0;
            }
        }
        else
        {
            stoppuhrPreazisionsmoduns = PERIODE_PREAZISIONSMODUS_MS;
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	46 2b       	or	r20, r22
        }
        
        
        ledWriteAll(outBeleuchtungLogoblauLED | outBeleuchtungLogorotLED | outBeleuchtungTastaturLED | outAnzeigeGeschwindigkeitLED | outBeleuchtungScrollradLED );
 22e:	57 2b       	or	r21, r23
 230:	84 2b       	or	r24, r20
 232:	95 2b       	or	r25, r21
 234:	82 2b       	or	r24, r18
 236:	93 2b       	or	r25, r19
 238:	8e 29       	or	r24, r14
 23a:	9f 29       	or	r25, r15
 23c:	0a d0       	rcall	.+20     	; 0x252 <ledWriteAll>
 23e:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	9c e9       	ldi	r25, 0x9C	; 156
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x11e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x124>
 248:	00 00       	nop
 24a:	2a 96       	adiw	r28, 0x0a	; 10
        
        //Warten------------------------------------------------------------------
        _delay_ms(PROGRAMMTAKT_MS);
        stoppuhrSchnellfeuer = stoppuhrSchnellfeuer + PROGRAMMTAKT_MS;
 24c:	06 5f       	subi	r16, 0xF6	; 246
        stoppuhrPreazisionsmoduns = stoppuhrPreazisionsmoduns + PROGRAMMTAKT_MS;
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
 250:	7b cf       	rjmp	.-266    	; 0x148 <main+0x24>

00000252 <ledWriteAll>:
    }
 252:	82 b9       	out	0x02, r24	; 2
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 254:	95 b9       	out	0x05, r25	; 5
 256:	08 95       	ret

00000258 <switchReadAll>:
 258:	86 b1       	in	r24, 0x06	; 6
 25a:	08 95       	ret

0000025c <startSystemTimeMs>:
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	84 bd       	out	0x24, r24	; 36
 260:	8b e0       	ldi	r24, 0x0B	; 11
 262:	85 bd       	out	0x25, r24	; 37
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 26a:	89 ef       	ldi	r24, 0xF9	; 249
 26c:	87 bd       	out	0x27, r24	; 39
 26e:	08 95       	ret

00000270 <initAdc>:
 270:	11 ba       	out	0x11, r1	; 17
 272:	10 ba       	out	0x10, r1	; 16
 274:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 278:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 27c:	80 e4       	ldi	r24, 0x40	; 64
 27e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 282:	8f e0       	ldi	r24, 0x0F	; 15
 284:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 28e:	ea e7       	ldi	r30, 0x7A	; 122
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	87 ea       	ldi	r24, 0xA7	; 167
 294:	80 83       	st	Z, r24
 296:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 29a:	80 81       	ld	r24, Z
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	80 83       	st	Z, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	84 ff       	sbrs	r24, 4
 2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <initAdc+0x30>
 2a6:	ea e7       	ldi	r30, 0x7A	; 122
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	8f 7e       	andi	r24, 0xEF	; 239
 2ae:	80 83       	st	Z, r24
 2b0:	08 95       	ret

000002b2 <rgbWrite>:
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	33 e0       	ldi	r19, 0x03	; 3
 2b6:	f9 01       	movw	r30, r18
 2b8:	e8 1b       	sub	r30, r24
 2ba:	f9 0b       	sbc	r31, r25
 2bc:	c9 01       	movw	r24, r18
 2be:	86 1b       	sub	r24, r22
 2c0:	97 0b       	sbc	r25, r23
 2c2:	24 1b       	sub	r18, r20
 2c4:	35 0b       	sbc	r19, r21
 2c6:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 2ca:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 2ce:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 2d2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 2d6:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 2da:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 2de:	08 95       	ret

000002e0 <initRgb>:
 2e0:	8e ef       	ldi	r24, 0xFE	; 254
 2e2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 2e6:	8b e1       	ldi	r24, 0x1B	; 27
 2e8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	d6 cf       	rjmp	.-84     	; 0x2b2 <rgbWrite>
 306:	08 95       	ret

00000308 <lcdSid>:
 308:	88 23       	and	r24, r24
 30a:	11 f0       	breq	.+4      	; 0x310 <lcdSid+0x8>
 30c:	a0 9a       	sbi	0x14, 0	; 20
 30e:	08 95       	ret
 310:	a0 98       	cbi	0x14, 0	; 20
 312:	08 95       	ret

00000314 <lcdSclk>:
 314:	88 23       	and	r24, r24
 316:	11 f0       	breq	.+4      	; 0x31c <lcdSclk+0x8>
 318:	a1 9a       	sbi	0x14, 1	; 20
 31a:	08 95       	ret
 31c:	a1 98       	cbi	0x14, 1	; 20
 31e:	08 95       	ret

00000320 <lcdLight>:
 320:	81 11       	cpse	r24, r1
 322:	04 c0       	rjmp	.+8      	; 0x32c <lcdLight+0xc>
 324:	84 b5       	in	r24, 0x24	; 36
 326:	8f 7d       	andi	r24, 0xDF	; 223
 328:	84 bd       	out	0x24, r24	; 36
 32a:	08 95       	ret
 32c:	94 b5       	in	r25, 0x24	; 36
 32e:	90 62       	ori	r25, 0x20	; 32
 330:	94 bd       	out	0x24, r25	; 36
 332:	88 bd       	out	0x28, r24	; 40
 334:	08 95       	ret

00000336 <writeLcdF>:
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	7c 01       	movw	r14, r24
 344:	eb 01       	movw	r28, r22
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	df df       	rcall	.-66     	; 0x308 <lcdSid>
 34a:	05 e0       	ldi	r16, 0x05	; 5
 34c:	10 e0       	ldi	r17, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	e1 df       	rcall	.-62     	; 0x314 <lcdSclk>
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	df df       	rcall	.-66     	; 0x314 <lcdSclk>
 356:	01 50       	subi	r16, 0x01	; 1
 358:	11 09       	sbc	r17, r1
 35a:	c9 f7       	brne	.-14     	; 0x34e <writeLcdF+0x18>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	d4 df       	rcall	.-88     	; 0x308 <lcdSid>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	d8 df       	rcall	.-80     	; 0x314 <lcdSclk>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	d6 df       	rcall	.-84     	; 0x314 <lcdSclk>
 368:	83 e4       	ldi	r24, 0x43	; 67
 36a:	e8 16       	cp	r14, r24
 36c:	f1 04       	cpc	r15, r1
 36e:	19 f4       	brne	.+6      	; 0x376 <writeLcdF+0x40>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	ca df       	rcall	.-108    	; 0x308 <lcdSid>
 374:	02 c0       	rjmp	.+4      	; 0x37a <writeLcdF+0x44>
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	c7 df       	rcall	.-114    	; 0x308 <lcdSid>
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	cb df       	rcall	.-106    	; 0x314 <lcdSclk>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	c9 df       	rcall	.-110    	; 0x314 <lcdSclk>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	c1 df       	rcall	.-126    	; 0x308 <lcdSid>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	c5 df       	rcall	.-118    	; 0x314 <lcdSclk>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	c3 df       	rcall	.-122    	; 0x314 <lcdSclk>
 38e:	04 e0       	ldi	r16, 0x04	; 4
 390:	10 e0       	ldi	r17, 0x00	; 0
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	bf df       	rcall	.-130    	; 0x314 <lcdSclk>
 396:	c0 ff       	sbrs	r28, 0
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <writeLcdF+0x6a>
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	b5 df       	rcall	.-150    	; 0x308 <lcdSid>
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <writeLcdF+0x6e>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	b2 df       	rcall	.-156    	; 0x308 <lcdSid>
 3a4:	d6 95       	lsr	r29
 3a6:	c7 95       	ror	r28
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	b4 df       	rcall	.-152    	; 0x314 <lcdSclk>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	b2 df       	rcall	.-156    	; 0x314 <lcdSclk>
 3b0:	01 50       	subi	r16, 0x01	; 1
 3b2:	11 09       	sbc	r17, r1
 3b4:	71 f7       	brne	.-36     	; 0x392 <writeLcdF+0x5c>
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	a7 df       	rcall	.-178    	; 0x308 <lcdSid>
 3ba:	04 e0       	ldi	r16, 0x04	; 4
 3bc:	10 e0       	ldi	r17, 0x00	; 0
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	a9 df       	rcall	.-174    	; 0x314 <lcdSclk>
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	a7 df       	rcall	.-178    	; 0x314 <lcdSclk>
 3c6:	01 50       	subi	r16, 0x01	; 1
 3c8:	11 09       	sbc	r17, r1
 3ca:	c9 f7       	brne	.-14     	; 0x3be <writeLcdF+0x88>
 3cc:	04 e0       	ldi	r16, 0x04	; 4
 3ce:	10 e0       	ldi	r17, 0x00	; 0
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	a0 df       	rcall	.-192    	; 0x314 <lcdSclk>
 3d4:	c0 ff       	sbrs	r28, 0
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <writeLcdF+0xa8>
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	96 df       	rcall	.-212    	; 0x308 <lcdSid>
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <writeLcdF+0xac>
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	93 df       	rcall	.-218    	; 0x308 <lcdSid>
 3e2:	d6 95       	lsr	r29
 3e4:	c7 95       	ror	r28
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	95 df       	rcall	.-214    	; 0x314 <lcdSclk>
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	93 df       	rcall	.-218    	; 0x314 <lcdSclk>
 3ee:	01 50       	subi	r16, 0x01	; 1
 3f0:	11 09       	sbc	r17, r1
 3f2:	71 f7       	brne	.-36     	; 0x3d0 <writeLcdF+0x9a>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	88 df       	rcall	.-240    	; 0x308 <lcdSid>
 3f8:	c4 e0       	ldi	r28, 0x04	; 4
 3fa:	d0 e0       	ldi	r29, 0x00	; 0
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	8a df       	rcall	.-236    	; 0x314 <lcdSclk>
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	88 df       	rcall	.-240    	; 0x314 <lcdSclk>
 404:	21 97       	sbiw	r28, 0x01	; 1
 406:	d1 f7       	brne	.-12     	; 0x3fc <writeLcdF+0xc6>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	7e df       	rcall	.-260    	; 0x308 <lcdSid>
 40c:	87 ec       	ldi	r24, 0xC7	; 199
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	08 95       	ret

00000426 <lcdWriteText>:
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	65 97       	sbiw	r28, 0x15	; 21
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	9e 01       	movw	r18, r28
 43e:	20 5e       	subi	r18, 0xE0	; 224
 440:	3f 4f       	sbci	r19, 0xFF	; 255
 442:	4e 8d       	ldd	r20, Y+30	; 0x1e
 444:	5f 8d       	ldd	r21, Y+31	; 0x1f
 446:	65 e1       	ldi	r22, 0x15	; 21
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	ce 01       	movw	r24, r28
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	3a d2       	rcall	.+1140   	; 0x8c4 <vsnprintf>
 450:	6d 8d       	ldd	r22, Y+29	; 0x1d
 452:	8c 8d       	ldd	r24, Y+28	; 0x1c
 454:	90 e2       	ldi	r25, 0x20	; 32
 456:	89 9f       	mul	r24, r25
 458:	60 0d       	add	r22, r0
 45a:	11 24       	eor	r1, r1
 45c:	60 68       	ori	r22, 0x80	; 128
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	83 e4       	ldi	r24, 0x43	; 67
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	68 df       	rcall	.-304    	; 0x336 <writeLcdF>
 466:	69 81       	ldd	r22, Y+1	; 0x01
 468:	66 23       	and	r22, r22
 46a:	79 f0       	breq	.+30     	; 0x48a <lcdWriteText+0x64>
 46c:	10 e0       	ldi	r17, 0x00	; 0
 46e:	1f 5f       	subi	r17, 0xFF	; 255
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	84 e4       	ldi	r24, 0x44	; 68
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	5f df       	rcall	.-322    	; 0x336 <writeLcdF>
 478:	e1 e0       	ldi	r30, 0x01	; 1
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	ec 0f       	add	r30, r28
 47e:	fd 1f       	adc	r31, r29
 480:	e1 0f       	add	r30, r17
 482:	f1 1d       	adc	r31, r1
 484:	60 81       	ld	r22, Z
 486:	61 11       	cpse	r22, r1
 488:	f2 cf       	rjmp	.-28     	; 0x46e <lcdWriteText+0x48>
 48a:	65 96       	adiw	r28, 0x15	; 21
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	08 95       	ret

0000049e <lcdClear>:
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	83 e4       	ldi	r24, 0x43	; 67
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	47 df       	rcall	.-370    	; 0x336 <writeLcdF>
 4a8:	8f e3       	ldi	r24, 0x3F	; 63
 4aa:	9f e1       	ldi	r25, 0x1F	; 31
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <lcdClear+0xe>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <lcdClear+0x14>
 4b2:	00 00       	nop
 4b4:	80 e3       	ldi	r24, 0x30	; 48
 4b6:	92 e0       	ldi	r25, 0x02	; 2
 4b8:	9f 93       	push	r25
 4ba:	8f 93       	push	r24
 4bc:	1f 92       	push	r1
 4be:	1f 92       	push	r1
 4c0:	b2 df       	rcall	.-156    	; 0x426 <lcdWriteText>
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	08 95       	ret

000004cc <initLcd>:
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	22 df       	rcall	.-444    	; 0x314 <lcdSclk>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	1a df       	rcall	.-460    	; 0x308 <lcdSid>
 4d4:	64 e3       	ldi	r22, 0x34	; 52
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	83 e4       	ldi	r24, 0x43	; 67
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	2c df       	rcall	.-424    	; 0x336 <writeLcdF>
 4de:	69 e0       	ldi	r22, 0x09	; 9
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	83 e4       	ldi	r24, 0x43	; 67
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	27 df       	rcall	.-434    	; 0x336 <writeLcdF>
 4e8:	60 e3       	ldi	r22, 0x30	; 48
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	83 e4       	ldi	r24, 0x43	; 67
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	22 df       	rcall	.-444    	; 0x336 <writeLcdF>
 4f2:	6c e0       	ldi	r22, 0x0C	; 12
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	83 e4       	ldi	r24, 0x43	; 67
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	1d df       	rcall	.-454    	; 0x336 <writeLcdF>
 4fc:	d0 df       	rcall	.-96     	; 0x49e <lcdClear>
 4fe:	67 e0       	ldi	r22, 0x07	; 7
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	83 e4       	ldi	r24, 0x43	; 67
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	17 df       	rcall	.-466    	; 0x336 <writeLcdF>
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0a cf       	rjmp	.-492    	; 0x320 <lcdLight>
 50c:	08 95       	ret

0000050e <initBoard>:
 50e:	4f 92       	push	r4
 510:	5f 92       	push	r5
 512:	6f 92       	push	r6
 514:	7f 92       	push	r7
 516:	8f 92       	push	r8
 518:	9f 92       	push	r9
 51a:	af 92       	push	r10
 51c:	bf 92       	push	r11
 51e:	cf 92       	push	r12
 520:	df 92       	push	r13
 522:	ef 92       	push	r14
 524:	ff 92       	push	r15
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	c8 2f       	mov	r28, r24
 530:	85 b7       	in	r24, 0x35	; 53
 532:	85 bf       	out	0x35, r24	; 53
 534:	12 b8       	out	0x02, r1	; 2
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	81 b9       	out	0x01, r24	; 1
 53a:	15 b8       	out	0x05, r1	; 5
 53c:	84 b9       	out	0x04, r24	; 4
 53e:	88 b9       	out	0x08, r24	; 8
 540:	17 b8       	out	0x07, r1	; 7
 542:	8b b9       	out	0x0b, r24	; 11
 544:	1a b8       	out	0x0a, r1	; 10
 546:	8e b9       	out	0x0e, r24	; 14
 548:	1d b8       	out	0x0d, r1	; 13
 54a:	72 98       	cbi	0x0e, 2	; 14
 54c:	11 ba       	out	0x11, r1	; 17
 54e:	10 ba       	out	0x10, r1	; 16
 550:	94 e0       	ldi	r25, 0x04	; 4
 552:	94 bb       	out	0x14, r25	; 20
 554:	93 b3       	in	r25, 0x13	; 19
 556:	93 60       	ori	r25, 0x03	; 3
 558:	93 bb       	out	0x13, r25	; 19
 55a:	9d 9a       	sbi	0x13, 5	; 19
 55c:	97 ec       	ldi	r25, 0xC7	; 199
 55e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 562:	98 e3       	ldi	r25, 0x38	; 56
 564:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 568:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 56c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 570:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 574:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 578:	8c e3       	ldi	r24, 0x3C	; 60
 57a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 57e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 582:	78 94       	sei
 584:	6b de       	rcall	.-810    	; 0x25c <startSystemTimeMs>
 586:	a2 df       	rcall	.-188    	; 0x4cc <initLcd>
 588:	73 de       	rcall	.-794    	; 0x270 <initAdc>
 58a:	aa de       	rcall	.-684    	; 0x2e0 <initRgb>
 58c:	cc 23       	and	r28, r28
 58e:	09 f4       	brne	.+2      	; 0x592 <initBoard+0x84>
 590:	b8 c0       	rjmp	.+368    	; 0x702 <initBoard+0x1f4>
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	c5 de       	rcall	.-630    	; 0x320 <lcdLight>
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	6f ef       	ldi	r22, 0xFF	; 255
 59c:	73 e0       	ldi	r23, 0x03	; 3
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	87 de       	rcall	.-754    	; 0x2b2 <rgbWrite>
 5a4:	8d e1       	ldi	r24, 0x1D	; 29
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	9f 93       	push	r25
 5aa:	8f 93       	push	r24
 5ac:	1f 92       	push	r1
 5ae:	1f 92       	push	r1
 5b0:	3a df       	rcall	.-396    	; 0x426 <lcdWriteText>
 5b2:	82 e3       	ldi	r24, 0x32	; 50
 5b4:	92 e0       	ldi	r25, 0x02	; 2
 5b6:	9f 93       	push	r25
 5b8:	8f 93       	push	r24
 5ba:	1f 92       	push	r1
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	8f 93       	push	r24
 5c0:	32 df       	rcall	.-412    	; 0x426 <lcdWriteText>
 5c2:	88 e0       	ldi	r24, 0x08	; 8
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	9f 93       	push	r25
 5c8:	8f 93       	push	r24
 5ca:	1f 92       	push	r1
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	8f 93       	push	r24
 5d0:	2a df       	rcall	.-428    	; 0x426 <lcdWriteText>
 5d2:	87 e4       	ldi	r24, 0x47	; 71
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	9f 93       	push	r25
 5d8:	8f 93       	push	r24
 5da:	1f 92       	push	r1
 5dc:	83 e0       	ldi	r24, 0x03	; 3
 5de:	8f 93       	push	r24
 5e0:	22 df       	rcall	.-444    	; 0x426 <lcdWriteText>
 5e2:	8d b7       	in	r24, 0x3d	; 61
 5e4:	9e b7       	in	r25, 0x3e	; 62
 5e6:	40 96       	adiw	r24, 0x10	; 16
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	f8 94       	cli
 5ec:	9e bf       	out	0x3e, r25	; 62
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	8d bf       	out	0x3d, r24	; 61
 5f2:	88 24       	eor	r8, r8
 5f4:	83 94       	inc	r8
 5f6:	c0 e0       	ldi	r28, 0x00	; 0
 5f8:	71 2c       	mov	r7, r1
 5fa:	99 24       	eor	r9, r9
 5fc:	93 94       	inc	r9
 5fe:	d0 e0       	ldi	r29, 0x00	; 0
 600:	cc 24       	eor	r12, r12
 602:	c3 94       	inc	r12
 604:	d1 2c       	mov	r13, r1
 606:	e1 2c       	mov	r14, r1
 608:	68 94       	set
 60a:	ff 24       	eor	r15, r15
 60c:	f7 f8       	bld	r15, 7
 60e:	66 24       	eor	r6, r6
 610:	63 94       	inc	r6
 612:	51 2c       	mov	r5, r1
 614:	09 e0       	ldi	r16, 0x09	; 9
 616:	11 e0       	ldi	r17, 0x01	; 1
 618:	0f 2e       	mov	r0, r31
 61a:	fc e5       	ldi	r31, 0x5C	; 92
 61c:	af 2e       	mov	r10, r31
 61e:	f2 e0       	ldi	r31, 0x02	; 2
 620:	bf 2e       	mov	r11, r31
 622:	f0 2d       	mov	r31, r0
 624:	0f 2e       	mov	r0, r31
 626:	f3 e0       	ldi	r31, 0x03	; 3
 628:	4f 2e       	mov	r4, r31
 62a:	f0 2d       	mov	r31, r0
 62c:	99 20       	and	r9, r9
 62e:	49 f0       	breq	.+18     	; 0x642 <initBoard+0x134>
 630:	c7 01       	movw	r24, r14
 632:	0d 2e       	mov	r0, r29
 634:	02 c0       	rjmp	.+4      	; 0x63a <initBoard+0x12c>
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	0a 94       	dec	r0
 63c:	e2 f7       	brpl	.-8      	; 0x636 <initBoard+0x128>
 63e:	09 de       	rcall	.-1006   	; 0x252 <ledWriteAll>
 640:	08 c0       	rjmp	.+16     	; 0x652 <initBoard+0x144>
 642:	c6 01       	movw	r24, r12
 644:	0d 2e       	mov	r0, r29
 646:	02 c0       	rjmp	.+4      	; 0x64c <initBoard+0x13e>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <initBoard+0x13a>
 650:	00 de       	rcall	.-1024   	; 0x252 <ledWriteAll>
 652:	df 5f       	subi	r29, 0xFF	; 255
 654:	d1 31       	cpi	r29, 0x11	; 17
 656:	28 f0       	brcs	.+10     	; 0x662 <initBoard+0x154>
 658:	86 2d       	mov	r24, r6
 65a:	91 10       	cpse	r9, r1
 65c:	85 2d       	mov	r24, r5
 65e:	98 2e       	mov	r9, r24
 660:	d0 e0       	ldi	r29, 0x00	; 0
 662:	88 20       	and	r8, r8
 664:	11 f0       	breq	.+4      	; 0x66a <initBoard+0x15c>
 666:	ce 5f       	subi	r28, 0xFE	; 254
 668:	01 c0       	rjmp	.+2      	; 0x66c <initBoard+0x15e>
 66a:	c2 50       	subi	r28, 0x02	; 2
 66c:	8c 2f       	mov	r24, r28
 66e:	58 de       	rcall	.-848    	; 0x320 <lcdLight>
 670:	ce 3f       	cpi	r28, 0xFE	; 254
 672:	21 f0       	breq	.+8      	; 0x67c <initBoard+0x16e>
 674:	c8 37       	cpi	r28, 0x78	; 120
 676:	19 f4       	brne	.+6      	; 0x67e <initBoard+0x170>
 678:	86 2c       	mov	r8, r6
 67a:	01 c0       	rjmp	.+2      	; 0x67e <initBoard+0x170>
 67c:	85 2c       	mov	r8, r5
 67e:	71 10       	cpse	r7, r1
 680:	3b c0       	rjmp	.+118    	; 0x6f8 <initBoard+0x1ea>
 682:	f8 01       	movw	r30, r16
 684:	80 81       	ld	r24, Z
 686:	83 7c       	andi	r24, 0xC3	; 195
 688:	91 f0       	breq	.+36     	; 0x6ae <initBoard+0x1a0>
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	50 e0       	ldi	r21, 0x00	; 0
 68e:	66 e2       	ldi	r22, 0x26	; 38
 690:	72 e0       	ldi	r23, 0x02	; 2
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	93 e0       	ldi	r25, 0x03	; 3
 696:	0d de       	rcall	.-998    	; 0x2b2 <rgbWrite>
 698:	bf 92       	push	r11
 69a:	af 92       	push	r10
 69c:	1f 92       	push	r1
 69e:	4f 92       	push	r4
 6a0:	c2 de       	rcall	.-636    	; 0x426 <lcdWriteText>
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	76 2c       	mov	r7, r6
 6ac:	25 c0       	rjmp	.+74     	; 0x6f8 <initBoard+0x1ea>
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	9c e7       	ldi	r25, 0x7C	; 124
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <initBoard+0x1a4>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <initBoard+0x1aa>
 6b8:	00 00       	nop
 6ba:	b8 cf       	rjmp	.-144    	; 0x62c <initBoard+0x11e>
 6bc:	f0 de       	rcall	.-544    	; 0x49e <lcdClear>
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	2f de       	rcall	.-930    	; 0x320 <lcdLight>
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	c5 dd       	rcall	.-1142   	; 0x252 <ledWriteAll>
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	50 e0       	ldi	r21, 0x00	; 0
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	ee dd       	rcall	.-1060   	; 0x2b2 <rgbWrite>
 6d6:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
 6da:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
 6de:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
 6e2:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
 6e6:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
 6ea:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
 6ee:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
 6f2:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
 6f6:	05 c0       	rjmp	.+10     	; 0x702 <initBoard+0x1f4>
 6f8:	f8 01       	movw	r30, r16
 6fa:	80 81       	ld	r24, Z
 6fc:	83 7c       	andi	r24, 0xC3	; 195
 6fe:	b9 f6       	brne	.-82     	; 0x6ae <initBoard+0x1a0>
 700:	dd cf       	rjmp	.-70     	; 0x6bc <initBoard+0x1ae>
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	ff 90       	pop	r15
 70c:	ef 90       	pop	r14
 70e:	df 90       	pop	r13
 710:	cf 90       	pop	r12
 712:	bf 90       	pop	r11
 714:	af 90       	pop	r10
 716:	9f 90       	pop	r9
 718:	8f 90       	pop	r8
 71a:	7f 90       	pop	r7
 71c:	6f 90       	pop	r6
 71e:	5f 90       	pop	r5
 720:	4f 90       	pop	r4
 722:	08 95       	ret

00000724 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
 72c:	28 97       	sbiw	r28, 0x08	; 8
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 738:	88 e0       	ldi	r24, 0x08	; 8
 73a:	e0 e0       	ldi	r30, 0x00	; 0
 73c:	f2 e0       	ldi	r31, 0x02	; 2
 73e:	de 01       	movw	r26, r28
 740:	11 96       	adiw	r26, 0x01	; 1
 742:	01 90       	ld	r0, Z+
 744:	0d 92       	st	X+, r0
 746:	8a 95       	dec	r24
 748:	e1 f7       	brne	.-8      	; 0x742 <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 74a:	e5 e0       	ldi	r30, 0x05	; 5
 74c:	f1 e0       	ldi	r31, 0x01	; 1
 74e:	80 81       	ld	r24, Z
 750:	8f 7b       	andi	r24, 0xBF	; 191
 752:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 754:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 758:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	8c 0f       	add	r24, r28
 762:	9d 1f       	adc	r25, r29
 764:	e8 0f       	add	r30, r24
 766:	f9 1f       	adc	r31, r25
 768:	80 81       	ld	r24, Z
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
 770:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
 774:	a2 ef       	ldi	r26, 0xF2	; 242
 776:	b2 e0       	ldi	r27, 0x02	; 2
 778:	22 e8       	ldi	r18, 0x82	; 130
 77a:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 77c:	e5 e0       	ldi	r30, 0x05	; 5
 77e:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 780:	5e 91       	ld	r21, -X
 782:	4e 91       	ld	r20, -X
 784:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
 788:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
 78c:	84 23       	and	r24, r20
 78e:	95 23       	and	r25, r21
 790:	89 2b       	or	r24, r25
 792:	21 f0       	breq	.+8      	; 0x79c <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 794:	80 81       	ld	r24, Z
 796:	80 62       	ori	r24, 0x20	; 32
 798:	80 83       	st	Z, r24
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 79c:	80 81       	ld	r24, Z
 79e:	8f 7d       	andi	r24, 0xDF	; 223
 7a0:	80 83       	st	Z, r24
        }
        CLOCK_1;
 7a2:	80 81       	ld	r24, Z
 7a4:	80 61       	ori	r24, 0x10	; 16
 7a6:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 7a8:	80 81       	ld	r24, Z
 7aa:	8f 7e       	andi	r24, 0xEF	; 239
 7ac:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 7ae:	a2 17       	cp	r26, r18
 7b0:	b3 07       	cpc	r27, r19
 7b2:	31 f7       	brne	.-52     	; 0x780 <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 7b4:	e5 e0       	ldi	r30, 0x05	; 5
 7b6:	f1 e0       	ldi	r31, 0x01	; 1
 7b8:	80 81       	ld	r24, Z
 7ba:	87 7f       	andi	r24, 0xF7	; 247
 7bc:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 7be:	80 81       	ld	r24, Z
 7c0:	88 7f       	andi	r24, 0xF8	; 248
 7c2:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 7c4:	90 81       	ld	r25, Z
 7c6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 7ca:	89 2b       	or	r24, r25
 7cc:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 7ce:	80 81       	ld	r24, Z
 7d0:	80 64       	ori	r24, 0x40	; 64
 7d2:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 7d4:	80 81       	ld	r24, Z
 7d6:	88 60       	ori	r24, 0x08	; 8
 7d8:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 7da:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 7de:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 7e2:	87 30       	cpi	r24, 0x07	; 7
 7e4:	91 05       	cpc	r25, r1
 7e6:	30 f4       	brcc	.+12     	; 0x7f4 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2731+0x1>
 7ee:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2731>
 7f2:	07 c0       	rjmp	.+14     	; 0x802 <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
 7f4:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2731+0x1>
 7f8:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2731>
        writeTextFinished = 1;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
 802:	28 96       	adiw	r28, 0x08	; 8
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	f8 94       	cli
 808:	de bf       	out	0x3e, r29	; 62
 80a:	0f be       	out	0x3f, r0	; 63
 80c:	cd bf       	out	0x3d, r28	; 61
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	08 95       	ret

00000814 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 814:	1f 92       	push	r1
 816:	0f 92       	push	r0
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	0f 92       	push	r0
 81c:	11 24       	eor	r1, r1
 81e:	0b b6       	in	r0, 0x3b	; 59
 820:	0f 92       	push	r0
 822:	2f 93       	push	r18
 824:	3f 93       	push	r19
 826:	4f 93       	push	r20
 828:	5f 93       	push	r21
 82a:	6f 93       	push	r22
 82c:	7f 93       	push	r23
 82e:	8f 93       	push	r24
 830:	9f 93       	push	r25
 832:	af 93       	push	r26
 834:	bf 93       	push	r27
 836:	ef 93       	push	r30
 838:	ff 93       	push	r31
    systemTimeMs += 1;
 83a:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
 83e:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
 842:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
 846:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
 84a:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
 84e:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
 852:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
 856:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
 85a:	a1 e0       	ldi	r26, 0x01	; 1
 85c:	27 d0       	rcall	.+78     	; 0x8ac <__adddi3_s8>
 85e:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
 862:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
 866:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
 86a:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
 86e:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
 872:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
 876:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
 87a:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 87e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
 882:	81 11       	cpse	r24, r1
 884:	4f df       	rcall	.-354    	; 0x724 <matrixWriteNextLine>
}
 886:	ff 91       	pop	r31
 888:	ef 91       	pop	r30
 88a:	bf 91       	pop	r27
 88c:	af 91       	pop	r26
 88e:	9f 91       	pop	r25
 890:	8f 91       	pop	r24
 892:	7f 91       	pop	r23
 894:	6f 91       	pop	r22
 896:	5f 91       	pop	r21
 898:	4f 91       	pop	r20
 89a:	3f 91       	pop	r19
 89c:	2f 91       	pop	r18
 89e:	0f 90       	pop	r0
 8a0:	0b be       	out	0x3b, r0	; 59
 8a2:	0f 90       	pop	r0
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	0f 90       	pop	r0
 8a8:	1f 90       	pop	r1
 8aa:	18 95       	reti

000008ac <__adddi3_s8>:
 8ac:	00 24       	eor	r0, r0
 8ae:	a7 fd       	sbrc	r26, 7
 8b0:	00 94       	com	r0
 8b2:	2a 0f       	add	r18, r26
 8b4:	30 1d       	adc	r19, r0
 8b6:	40 1d       	adc	r20, r0
 8b8:	50 1d       	adc	r21, r0
 8ba:	60 1d       	adc	r22, r0
 8bc:	70 1d       	adc	r23, r0
 8be:	80 1d       	adc	r24, r0
 8c0:	90 1d       	adc	r25, r0
 8c2:	08 95       	ret

000008c4 <vsnprintf>:
 8c4:	0f 93       	push	r16
 8c6:	1f 93       	push	r17
 8c8:	cf 93       	push	r28
 8ca:	df 93       	push	r29
 8cc:	cd b7       	in	r28, 0x3d	; 61
 8ce:	de b7       	in	r29, 0x3e	; 62
 8d0:	2e 97       	sbiw	r28, 0x0e	; 14
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	f8 94       	cli
 8d6:	de bf       	out	0x3e, r29	; 62
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	cd bf       	out	0x3d, r28	; 61
 8dc:	8c 01       	movw	r16, r24
 8de:	fa 01       	movw	r30, r20
 8e0:	86 e0       	ldi	r24, 0x06	; 6
 8e2:	8c 83       	std	Y+4, r24	; 0x04
 8e4:	1a 83       	std	Y+2, r17	; 0x02
 8e6:	09 83       	std	Y+1, r16	; 0x01
 8e8:	77 ff       	sbrs	r23, 7
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <vsnprintf+0x2c>
 8ec:	60 e0       	ldi	r22, 0x00	; 0
 8ee:	70 e8       	ldi	r23, 0x80	; 128
 8f0:	cb 01       	movw	r24, r22
 8f2:	01 97       	sbiw	r24, 0x01	; 1
 8f4:	9e 83       	std	Y+6, r25	; 0x06
 8f6:	8d 83       	std	Y+5, r24	; 0x05
 8f8:	a9 01       	movw	r20, r18
 8fa:	bf 01       	movw	r22, r30
 8fc:	ce 01       	movw	r24, r28
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	19 d0       	rcall	.+50     	; 0x934 <vfprintf>
 902:	4d 81       	ldd	r20, Y+5	; 0x05
 904:	5e 81       	ldd	r21, Y+6	; 0x06
 906:	57 fd       	sbrc	r21, 7
 908:	0a c0       	rjmp	.+20     	; 0x91e <vsnprintf+0x5a>
 90a:	2f 81       	ldd	r18, Y+7	; 0x07
 90c:	38 85       	ldd	r19, Y+8	; 0x08
 90e:	42 17       	cp	r20, r18
 910:	53 07       	cpc	r21, r19
 912:	0c f4       	brge	.+2      	; 0x916 <vsnprintf+0x52>
 914:	9a 01       	movw	r18, r20
 916:	f8 01       	movw	r30, r16
 918:	e2 0f       	add	r30, r18
 91a:	f3 1f       	adc	r31, r19
 91c:	10 82       	st	Z, r1
 91e:	2e 96       	adiw	r28, 0x0e	; 14
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	08 95       	ret

00000934 <vfprintf>:
 934:	2f 92       	push	r2
 936:	3f 92       	push	r3
 938:	4f 92       	push	r4
 93a:	5f 92       	push	r5
 93c:	6f 92       	push	r6
 93e:	7f 92       	push	r7
 940:	8f 92       	push	r8
 942:	9f 92       	push	r9
 944:	af 92       	push	r10
 946:	bf 92       	push	r11
 948:	cf 92       	push	r12
 94a:	df 92       	push	r13
 94c:	ef 92       	push	r14
 94e:	ff 92       	push	r15
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	cd b7       	in	r28, 0x3d	; 61
 95a:	de b7       	in	r29, 0x3e	; 62
 95c:	2b 97       	sbiw	r28, 0x0b	; 11
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	6c 01       	movw	r12, r24
 96a:	7b 01       	movw	r14, r22
 96c:	8a 01       	movw	r16, r20
 96e:	fc 01       	movw	r30, r24
 970:	17 82       	std	Z+7, r1	; 0x07
 972:	16 82       	std	Z+6, r1	; 0x06
 974:	83 81       	ldd	r24, Z+3	; 0x03
 976:	81 ff       	sbrs	r24, 1
 978:	bf c1       	rjmp	.+894    	; 0xcf8 <vfprintf+0x3c4>
 97a:	ce 01       	movw	r24, r28
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	3c 01       	movw	r6, r24
 980:	f6 01       	movw	r30, r12
 982:	93 81       	ldd	r25, Z+3	; 0x03
 984:	f7 01       	movw	r30, r14
 986:	93 fd       	sbrc	r25, 3
 988:	85 91       	lpm	r24, Z+
 98a:	93 ff       	sbrs	r25, 3
 98c:	81 91       	ld	r24, Z+
 98e:	7f 01       	movw	r14, r30
 990:	88 23       	and	r24, r24
 992:	09 f4       	brne	.+2      	; 0x996 <vfprintf+0x62>
 994:	ad c1       	rjmp	.+858    	; 0xcf0 <vfprintf+0x3bc>
 996:	85 32       	cpi	r24, 0x25	; 37
 998:	39 f4       	brne	.+14     	; 0x9a8 <vfprintf+0x74>
 99a:	93 fd       	sbrc	r25, 3
 99c:	85 91       	lpm	r24, Z+
 99e:	93 ff       	sbrs	r25, 3
 9a0:	81 91       	ld	r24, Z+
 9a2:	7f 01       	movw	r14, r30
 9a4:	85 32       	cpi	r24, 0x25	; 37
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <vfprintf+0x7c>
 9a8:	b6 01       	movw	r22, r12
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	d6 d1       	rcall	.+940    	; 0xd5a <fputc>
 9ae:	e8 cf       	rjmp	.-48     	; 0x980 <vfprintf+0x4c>
 9b0:	91 2c       	mov	r9, r1
 9b2:	21 2c       	mov	r2, r1
 9b4:	31 2c       	mov	r3, r1
 9b6:	ff e1       	ldi	r31, 0x1F	; 31
 9b8:	f3 15       	cp	r31, r3
 9ba:	d8 f0       	brcs	.+54     	; 0x9f2 <vfprintf+0xbe>
 9bc:	8b 32       	cpi	r24, 0x2B	; 43
 9be:	79 f0       	breq	.+30     	; 0x9de <vfprintf+0xaa>
 9c0:	38 f4       	brcc	.+14     	; 0x9d0 <vfprintf+0x9c>
 9c2:	80 32       	cpi	r24, 0x20	; 32
 9c4:	79 f0       	breq	.+30     	; 0x9e4 <vfprintf+0xb0>
 9c6:	83 32       	cpi	r24, 0x23	; 35
 9c8:	a1 f4       	brne	.+40     	; 0x9f2 <vfprintf+0xbe>
 9ca:	23 2d       	mov	r18, r3
 9cc:	20 61       	ori	r18, 0x10	; 16
 9ce:	1d c0       	rjmp	.+58     	; 0xa0a <vfprintf+0xd6>
 9d0:	8d 32       	cpi	r24, 0x2D	; 45
 9d2:	61 f0       	breq	.+24     	; 0x9ec <vfprintf+0xb8>
 9d4:	80 33       	cpi	r24, 0x30	; 48
 9d6:	69 f4       	brne	.+26     	; 0x9f2 <vfprintf+0xbe>
 9d8:	23 2d       	mov	r18, r3
 9da:	21 60       	ori	r18, 0x01	; 1
 9dc:	16 c0       	rjmp	.+44     	; 0xa0a <vfprintf+0xd6>
 9de:	83 2d       	mov	r24, r3
 9e0:	82 60       	ori	r24, 0x02	; 2
 9e2:	38 2e       	mov	r3, r24
 9e4:	e3 2d       	mov	r30, r3
 9e6:	e4 60       	ori	r30, 0x04	; 4
 9e8:	3e 2e       	mov	r3, r30
 9ea:	2a c0       	rjmp	.+84     	; 0xa40 <vfprintf+0x10c>
 9ec:	f3 2d       	mov	r31, r3
 9ee:	f8 60       	ori	r31, 0x08	; 8
 9f0:	1d c0       	rjmp	.+58     	; 0xa2c <vfprintf+0xf8>
 9f2:	37 fc       	sbrc	r3, 7
 9f4:	2d c0       	rjmp	.+90     	; 0xa50 <vfprintf+0x11c>
 9f6:	20 ed       	ldi	r18, 0xD0	; 208
 9f8:	28 0f       	add	r18, r24
 9fa:	2a 30       	cpi	r18, 0x0A	; 10
 9fc:	40 f0       	brcs	.+16     	; 0xa0e <vfprintf+0xda>
 9fe:	8e 32       	cpi	r24, 0x2E	; 46
 a00:	b9 f4       	brne	.+46     	; 0xa30 <vfprintf+0xfc>
 a02:	36 fc       	sbrc	r3, 6
 a04:	75 c1       	rjmp	.+746    	; 0xcf0 <vfprintf+0x3bc>
 a06:	23 2d       	mov	r18, r3
 a08:	20 64       	ori	r18, 0x40	; 64
 a0a:	32 2e       	mov	r3, r18
 a0c:	19 c0       	rjmp	.+50     	; 0xa40 <vfprintf+0x10c>
 a0e:	36 fe       	sbrs	r3, 6
 a10:	06 c0       	rjmp	.+12     	; 0xa1e <vfprintf+0xea>
 a12:	8a e0       	ldi	r24, 0x0A	; 10
 a14:	98 9e       	mul	r9, r24
 a16:	20 0d       	add	r18, r0
 a18:	11 24       	eor	r1, r1
 a1a:	92 2e       	mov	r9, r18
 a1c:	11 c0       	rjmp	.+34     	; 0xa40 <vfprintf+0x10c>
 a1e:	ea e0       	ldi	r30, 0x0A	; 10
 a20:	2e 9e       	mul	r2, r30
 a22:	20 0d       	add	r18, r0
 a24:	11 24       	eor	r1, r1
 a26:	22 2e       	mov	r2, r18
 a28:	f3 2d       	mov	r31, r3
 a2a:	f0 62       	ori	r31, 0x20	; 32
 a2c:	3f 2e       	mov	r3, r31
 a2e:	08 c0       	rjmp	.+16     	; 0xa40 <vfprintf+0x10c>
 a30:	8c 36       	cpi	r24, 0x6C	; 108
 a32:	21 f4       	brne	.+8      	; 0xa3c <vfprintf+0x108>
 a34:	83 2d       	mov	r24, r3
 a36:	80 68       	ori	r24, 0x80	; 128
 a38:	38 2e       	mov	r3, r24
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <vfprintf+0x10c>
 a3c:	88 36       	cpi	r24, 0x68	; 104
 a3e:	41 f4       	brne	.+16     	; 0xa50 <vfprintf+0x11c>
 a40:	f7 01       	movw	r30, r14
 a42:	93 fd       	sbrc	r25, 3
 a44:	85 91       	lpm	r24, Z+
 a46:	93 ff       	sbrs	r25, 3
 a48:	81 91       	ld	r24, Z+
 a4a:	7f 01       	movw	r14, r30
 a4c:	81 11       	cpse	r24, r1
 a4e:	b3 cf       	rjmp	.-154    	; 0x9b6 <vfprintf+0x82>
 a50:	98 2f       	mov	r25, r24
 a52:	9f 7d       	andi	r25, 0xDF	; 223
 a54:	95 54       	subi	r25, 0x45	; 69
 a56:	93 30       	cpi	r25, 0x03	; 3
 a58:	28 f4       	brcc	.+10     	; 0xa64 <vfprintf+0x130>
 a5a:	0c 5f       	subi	r16, 0xFC	; 252
 a5c:	1f 4f       	sbci	r17, 0xFF	; 255
 a5e:	9f e3       	ldi	r25, 0x3F	; 63
 a60:	99 83       	std	Y+1, r25	; 0x01
 a62:	0d c0       	rjmp	.+26     	; 0xa7e <vfprintf+0x14a>
 a64:	83 36       	cpi	r24, 0x63	; 99
 a66:	31 f0       	breq	.+12     	; 0xa74 <vfprintf+0x140>
 a68:	83 37       	cpi	r24, 0x73	; 115
 a6a:	71 f0       	breq	.+28     	; 0xa88 <vfprintf+0x154>
 a6c:	83 35       	cpi	r24, 0x53	; 83
 a6e:	09 f0       	breq	.+2      	; 0xa72 <vfprintf+0x13e>
 a70:	55 c0       	rjmp	.+170    	; 0xb1c <vfprintf+0x1e8>
 a72:	20 c0       	rjmp	.+64     	; 0xab4 <vfprintf+0x180>
 a74:	f8 01       	movw	r30, r16
 a76:	80 81       	ld	r24, Z
 a78:	89 83       	std	Y+1, r24	; 0x01
 a7a:	0e 5f       	subi	r16, 0xFE	; 254
 a7c:	1f 4f       	sbci	r17, 0xFF	; 255
 a7e:	88 24       	eor	r8, r8
 a80:	83 94       	inc	r8
 a82:	91 2c       	mov	r9, r1
 a84:	53 01       	movw	r10, r6
 a86:	12 c0       	rjmp	.+36     	; 0xaac <vfprintf+0x178>
 a88:	28 01       	movw	r4, r16
 a8a:	f2 e0       	ldi	r31, 0x02	; 2
 a8c:	4f 0e       	add	r4, r31
 a8e:	51 1c       	adc	r5, r1
 a90:	f8 01       	movw	r30, r16
 a92:	a0 80       	ld	r10, Z
 a94:	b1 80       	ldd	r11, Z+1	; 0x01
 a96:	36 fe       	sbrs	r3, 6
 a98:	03 c0       	rjmp	.+6      	; 0xaa0 <vfprintf+0x16c>
 a9a:	69 2d       	mov	r22, r9
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <vfprintf+0x170>
 aa0:	6f ef       	ldi	r22, 0xFF	; 255
 aa2:	7f ef       	ldi	r23, 0xFF	; 255
 aa4:	c5 01       	movw	r24, r10
 aa6:	4e d1       	rcall	.+668    	; 0xd44 <strnlen>
 aa8:	4c 01       	movw	r8, r24
 aaa:	82 01       	movw	r16, r4
 aac:	f3 2d       	mov	r31, r3
 aae:	ff 77       	andi	r31, 0x7F	; 127
 ab0:	3f 2e       	mov	r3, r31
 ab2:	15 c0       	rjmp	.+42     	; 0xade <vfprintf+0x1aa>
 ab4:	28 01       	movw	r4, r16
 ab6:	22 e0       	ldi	r18, 0x02	; 2
 ab8:	42 0e       	add	r4, r18
 aba:	51 1c       	adc	r5, r1
 abc:	f8 01       	movw	r30, r16
 abe:	a0 80       	ld	r10, Z
 ac0:	b1 80       	ldd	r11, Z+1	; 0x01
 ac2:	36 fe       	sbrs	r3, 6
 ac4:	03 c0       	rjmp	.+6      	; 0xacc <vfprintf+0x198>
 ac6:	69 2d       	mov	r22, r9
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <vfprintf+0x19c>
 acc:	6f ef       	ldi	r22, 0xFF	; 255
 ace:	7f ef       	ldi	r23, 0xFF	; 255
 ad0:	c5 01       	movw	r24, r10
 ad2:	2d d1       	rcall	.+602    	; 0xd2e <strnlen_P>
 ad4:	4c 01       	movw	r8, r24
 ad6:	f3 2d       	mov	r31, r3
 ad8:	f0 68       	ori	r31, 0x80	; 128
 ada:	3f 2e       	mov	r3, r31
 adc:	82 01       	movw	r16, r4
 ade:	33 fc       	sbrc	r3, 3
 ae0:	19 c0       	rjmp	.+50     	; 0xb14 <vfprintf+0x1e0>
 ae2:	82 2d       	mov	r24, r2
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	88 16       	cp	r8, r24
 ae8:	99 06       	cpc	r9, r25
 aea:	a0 f4       	brcc	.+40     	; 0xb14 <vfprintf+0x1e0>
 aec:	b6 01       	movw	r22, r12
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	33 d1       	rcall	.+614    	; 0xd5a <fputc>
 af4:	2a 94       	dec	r2
 af6:	f5 cf       	rjmp	.-22     	; 0xae2 <vfprintf+0x1ae>
 af8:	f5 01       	movw	r30, r10
 afa:	37 fc       	sbrc	r3, 7
 afc:	85 91       	lpm	r24, Z+
 afe:	37 fe       	sbrs	r3, 7
 b00:	81 91       	ld	r24, Z+
 b02:	5f 01       	movw	r10, r30
 b04:	b6 01       	movw	r22, r12
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	28 d1       	rcall	.+592    	; 0xd5a <fputc>
 b0a:	21 10       	cpse	r2, r1
 b0c:	2a 94       	dec	r2
 b0e:	21 e0       	ldi	r18, 0x01	; 1
 b10:	82 1a       	sub	r8, r18
 b12:	91 08       	sbc	r9, r1
 b14:	81 14       	cp	r8, r1
 b16:	91 04       	cpc	r9, r1
 b18:	79 f7       	brne	.-34     	; 0xaf8 <vfprintf+0x1c4>
 b1a:	e1 c0       	rjmp	.+450    	; 0xcde <vfprintf+0x3aa>
 b1c:	84 36       	cpi	r24, 0x64	; 100
 b1e:	11 f0       	breq	.+4      	; 0xb24 <vfprintf+0x1f0>
 b20:	89 36       	cpi	r24, 0x69	; 105
 b22:	39 f5       	brne	.+78     	; 0xb72 <vfprintf+0x23e>
 b24:	f8 01       	movw	r30, r16
 b26:	37 fe       	sbrs	r3, 7
 b28:	07 c0       	rjmp	.+14     	; 0xb38 <vfprintf+0x204>
 b2a:	60 81       	ld	r22, Z
 b2c:	71 81       	ldd	r23, Z+1	; 0x01
 b2e:	82 81       	ldd	r24, Z+2	; 0x02
 b30:	93 81       	ldd	r25, Z+3	; 0x03
 b32:	0c 5f       	subi	r16, 0xFC	; 252
 b34:	1f 4f       	sbci	r17, 0xFF	; 255
 b36:	08 c0       	rjmp	.+16     	; 0xb48 <vfprintf+0x214>
 b38:	60 81       	ld	r22, Z
 b3a:	71 81       	ldd	r23, Z+1	; 0x01
 b3c:	07 2e       	mov	r0, r23
 b3e:	00 0c       	add	r0, r0
 b40:	88 0b       	sbc	r24, r24
 b42:	99 0b       	sbc	r25, r25
 b44:	0e 5f       	subi	r16, 0xFE	; 254
 b46:	1f 4f       	sbci	r17, 0xFF	; 255
 b48:	f3 2d       	mov	r31, r3
 b4a:	ff 76       	andi	r31, 0x6F	; 111
 b4c:	3f 2e       	mov	r3, r31
 b4e:	97 ff       	sbrs	r25, 7
 b50:	09 c0       	rjmp	.+18     	; 0xb64 <vfprintf+0x230>
 b52:	90 95       	com	r25
 b54:	80 95       	com	r24
 b56:	70 95       	com	r23
 b58:	61 95       	neg	r22
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	8f 4f       	sbci	r24, 0xFF	; 255
 b5e:	9f 4f       	sbci	r25, 0xFF	; 255
 b60:	f0 68       	ori	r31, 0x80	; 128
 b62:	3f 2e       	mov	r3, r31
 b64:	2a e0       	ldi	r18, 0x0A	; 10
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	a3 01       	movw	r20, r6
 b6a:	33 d1       	rcall	.+614    	; 0xdd2 <__ultoa_invert>
 b6c:	88 2e       	mov	r8, r24
 b6e:	86 18       	sub	r8, r6
 b70:	44 c0       	rjmp	.+136    	; 0xbfa <vfprintf+0x2c6>
 b72:	85 37       	cpi	r24, 0x75	; 117
 b74:	31 f4       	brne	.+12     	; 0xb82 <vfprintf+0x24e>
 b76:	23 2d       	mov	r18, r3
 b78:	2f 7e       	andi	r18, 0xEF	; 239
 b7a:	b2 2e       	mov	r11, r18
 b7c:	2a e0       	ldi	r18, 0x0A	; 10
 b7e:	30 e0       	ldi	r19, 0x00	; 0
 b80:	25 c0       	rjmp	.+74     	; 0xbcc <vfprintf+0x298>
 b82:	93 2d       	mov	r25, r3
 b84:	99 7f       	andi	r25, 0xF9	; 249
 b86:	b9 2e       	mov	r11, r25
 b88:	8f 36       	cpi	r24, 0x6F	; 111
 b8a:	c1 f0       	breq	.+48     	; 0xbbc <vfprintf+0x288>
 b8c:	18 f4       	brcc	.+6      	; 0xb94 <vfprintf+0x260>
 b8e:	88 35       	cpi	r24, 0x58	; 88
 b90:	79 f0       	breq	.+30     	; 0xbb0 <vfprintf+0x27c>
 b92:	ae c0       	rjmp	.+348    	; 0xcf0 <vfprintf+0x3bc>
 b94:	80 37       	cpi	r24, 0x70	; 112
 b96:	19 f0       	breq	.+6      	; 0xb9e <vfprintf+0x26a>
 b98:	88 37       	cpi	r24, 0x78	; 120
 b9a:	21 f0       	breq	.+8      	; 0xba4 <vfprintf+0x270>
 b9c:	a9 c0       	rjmp	.+338    	; 0xcf0 <vfprintf+0x3bc>
 b9e:	e9 2f       	mov	r30, r25
 ba0:	e0 61       	ori	r30, 0x10	; 16
 ba2:	be 2e       	mov	r11, r30
 ba4:	b4 fe       	sbrs	r11, 4
 ba6:	0d c0       	rjmp	.+26     	; 0xbc2 <vfprintf+0x28e>
 ba8:	fb 2d       	mov	r31, r11
 baa:	f4 60       	ori	r31, 0x04	; 4
 bac:	bf 2e       	mov	r11, r31
 bae:	09 c0       	rjmp	.+18     	; 0xbc2 <vfprintf+0x28e>
 bb0:	34 fe       	sbrs	r3, 4
 bb2:	0a c0       	rjmp	.+20     	; 0xbc8 <vfprintf+0x294>
 bb4:	29 2f       	mov	r18, r25
 bb6:	26 60       	ori	r18, 0x06	; 6
 bb8:	b2 2e       	mov	r11, r18
 bba:	06 c0       	rjmp	.+12     	; 0xbc8 <vfprintf+0x294>
 bbc:	28 e0       	ldi	r18, 0x08	; 8
 bbe:	30 e0       	ldi	r19, 0x00	; 0
 bc0:	05 c0       	rjmp	.+10     	; 0xbcc <vfprintf+0x298>
 bc2:	20 e1       	ldi	r18, 0x10	; 16
 bc4:	30 e0       	ldi	r19, 0x00	; 0
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <vfprintf+0x298>
 bc8:	20 e1       	ldi	r18, 0x10	; 16
 bca:	32 e0       	ldi	r19, 0x02	; 2
 bcc:	f8 01       	movw	r30, r16
 bce:	b7 fe       	sbrs	r11, 7
 bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <vfprintf+0x2ac>
 bd2:	60 81       	ld	r22, Z
 bd4:	71 81       	ldd	r23, Z+1	; 0x01
 bd6:	82 81       	ldd	r24, Z+2	; 0x02
 bd8:	93 81       	ldd	r25, Z+3	; 0x03
 bda:	0c 5f       	subi	r16, 0xFC	; 252
 bdc:	1f 4f       	sbci	r17, 0xFF	; 255
 bde:	06 c0       	rjmp	.+12     	; 0xbec <vfprintf+0x2b8>
 be0:	60 81       	ld	r22, Z
 be2:	71 81       	ldd	r23, Z+1	; 0x01
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	0e 5f       	subi	r16, 0xFE	; 254
 bea:	1f 4f       	sbci	r17, 0xFF	; 255
 bec:	a3 01       	movw	r20, r6
 bee:	f1 d0       	rcall	.+482    	; 0xdd2 <__ultoa_invert>
 bf0:	88 2e       	mov	r8, r24
 bf2:	86 18       	sub	r8, r6
 bf4:	fb 2d       	mov	r31, r11
 bf6:	ff 77       	andi	r31, 0x7F	; 127
 bf8:	3f 2e       	mov	r3, r31
 bfa:	36 fe       	sbrs	r3, 6
 bfc:	0d c0       	rjmp	.+26     	; 0xc18 <vfprintf+0x2e4>
 bfe:	23 2d       	mov	r18, r3
 c00:	2e 7f       	andi	r18, 0xFE	; 254
 c02:	a2 2e       	mov	r10, r18
 c04:	89 14       	cp	r8, r9
 c06:	58 f4       	brcc	.+22     	; 0xc1e <vfprintf+0x2ea>
 c08:	34 fe       	sbrs	r3, 4
 c0a:	0b c0       	rjmp	.+22     	; 0xc22 <vfprintf+0x2ee>
 c0c:	32 fc       	sbrc	r3, 2
 c0e:	09 c0       	rjmp	.+18     	; 0xc22 <vfprintf+0x2ee>
 c10:	83 2d       	mov	r24, r3
 c12:	8e 7e       	andi	r24, 0xEE	; 238
 c14:	a8 2e       	mov	r10, r24
 c16:	05 c0       	rjmp	.+10     	; 0xc22 <vfprintf+0x2ee>
 c18:	b8 2c       	mov	r11, r8
 c1a:	a3 2c       	mov	r10, r3
 c1c:	03 c0       	rjmp	.+6      	; 0xc24 <vfprintf+0x2f0>
 c1e:	b8 2c       	mov	r11, r8
 c20:	01 c0       	rjmp	.+2      	; 0xc24 <vfprintf+0x2f0>
 c22:	b9 2c       	mov	r11, r9
 c24:	a4 fe       	sbrs	r10, 4
 c26:	0f c0       	rjmp	.+30     	; 0xc46 <vfprintf+0x312>
 c28:	fe 01       	movw	r30, r28
 c2a:	e8 0d       	add	r30, r8
 c2c:	f1 1d       	adc	r31, r1
 c2e:	80 81       	ld	r24, Z
 c30:	80 33       	cpi	r24, 0x30	; 48
 c32:	21 f4       	brne	.+8      	; 0xc3c <vfprintf+0x308>
 c34:	9a 2d       	mov	r25, r10
 c36:	99 7e       	andi	r25, 0xE9	; 233
 c38:	a9 2e       	mov	r10, r25
 c3a:	09 c0       	rjmp	.+18     	; 0xc4e <vfprintf+0x31a>
 c3c:	a2 fe       	sbrs	r10, 2
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0x318>
 c40:	b3 94       	inc	r11
 c42:	b3 94       	inc	r11
 c44:	04 c0       	rjmp	.+8      	; 0xc4e <vfprintf+0x31a>
 c46:	8a 2d       	mov	r24, r10
 c48:	86 78       	andi	r24, 0x86	; 134
 c4a:	09 f0       	breq	.+2      	; 0xc4e <vfprintf+0x31a>
 c4c:	b3 94       	inc	r11
 c4e:	a3 fc       	sbrc	r10, 3
 c50:	10 c0       	rjmp	.+32     	; 0xc72 <vfprintf+0x33e>
 c52:	a0 fe       	sbrs	r10, 0
 c54:	06 c0       	rjmp	.+12     	; 0xc62 <vfprintf+0x32e>
 c56:	b2 14       	cp	r11, r2
 c58:	80 f4       	brcc	.+32     	; 0xc7a <vfprintf+0x346>
 c5a:	28 0c       	add	r2, r8
 c5c:	92 2c       	mov	r9, r2
 c5e:	9b 18       	sub	r9, r11
 c60:	0d c0       	rjmp	.+26     	; 0xc7c <vfprintf+0x348>
 c62:	b2 14       	cp	r11, r2
 c64:	58 f4       	brcc	.+22     	; 0xc7c <vfprintf+0x348>
 c66:	b6 01       	movw	r22, r12
 c68:	80 e2       	ldi	r24, 0x20	; 32
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	76 d0       	rcall	.+236    	; 0xd5a <fputc>
 c6e:	b3 94       	inc	r11
 c70:	f8 cf       	rjmp	.-16     	; 0xc62 <vfprintf+0x32e>
 c72:	b2 14       	cp	r11, r2
 c74:	18 f4       	brcc	.+6      	; 0xc7c <vfprintf+0x348>
 c76:	2b 18       	sub	r2, r11
 c78:	02 c0       	rjmp	.+4      	; 0xc7e <vfprintf+0x34a>
 c7a:	98 2c       	mov	r9, r8
 c7c:	21 2c       	mov	r2, r1
 c7e:	a4 fe       	sbrs	r10, 4
 c80:	0f c0       	rjmp	.+30     	; 0xca0 <vfprintf+0x36c>
 c82:	b6 01       	movw	r22, r12
 c84:	80 e3       	ldi	r24, 0x30	; 48
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	68 d0       	rcall	.+208    	; 0xd5a <fputc>
 c8a:	a2 fe       	sbrs	r10, 2
 c8c:	16 c0       	rjmp	.+44     	; 0xcba <vfprintf+0x386>
 c8e:	a1 fc       	sbrc	r10, 1
 c90:	03 c0       	rjmp	.+6      	; 0xc98 <vfprintf+0x364>
 c92:	88 e7       	ldi	r24, 0x78	; 120
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x368>
 c98:	88 e5       	ldi	r24, 0x58	; 88
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	b6 01       	movw	r22, r12
 c9e:	0c c0       	rjmp	.+24     	; 0xcb8 <vfprintf+0x384>
 ca0:	8a 2d       	mov	r24, r10
 ca2:	86 78       	andi	r24, 0x86	; 134
 ca4:	51 f0       	breq	.+20     	; 0xcba <vfprintf+0x386>
 ca6:	a1 fe       	sbrs	r10, 1
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x37a>
 caa:	8b e2       	ldi	r24, 0x2B	; 43
 cac:	01 c0       	rjmp	.+2      	; 0xcb0 <vfprintf+0x37c>
 cae:	80 e2       	ldi	r24, 0x20	; 32
 cb0:	a7 fc       	sbrc	r10, 7
 cb2:	8d e2       	ldi	r24, 0x2D	; 45
 cb4:	b6 01       	movw	r22, r12
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	50 d0       	rcall	.+160    	; 0xd5a <fputc>
 cba:	89 14       	cp	r8, r9
 cbc:	30 f4       	brcc	.+12     	; 0xcca <vfprintf+0x396>
 cbe:	b6 01       	movw	r22, r12
 cc0:	80 e3       	ldi	r24, 0x30	; 48
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	4a d0       	rcall	.+148    	; 0xd5a <fputc>
 cc6:	9a 94       	dec	r9
 cc8:	f8 cf       	rjmp	.-16     	; 0xcba <vfprintf+0x386>
 cca:	8a 94       	dec	r8
 ccc:	f3 01       	movw	r30, r6
 cce:	e8 0d       	add	r30, r8
 cd0:	f1 1d       	adc	r31, r1
 cd2:	80 81       	ld	r24, Z
 cd4:	b6 01       	movw	r22, r12
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	40 d0       	rcall	.+128    	; 0xd5a <fputc>
 cda:	81 10       	cpse	r8, r1
 cdc:	f6 cf       	rjmp	.-20     	; 0xcca <vfprintf+0x396>
 cde:	22 20       	and	r2, r2
 ce0:	09 f4       	brne	.+2      	; 0xce4 <vfprintf+0x3b0>
 ce2:	4e ce       	rjmp	.-868    	; 0x980 <vfprintf+0x4c>
 ce4:	b6 01       	movw	r22, r12
 ce6:	80 e2       	ldi	r24, 0x20	; 32
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	37 d0       	rcall	.+110    	; 0xd5a <fputc>
 cec:	2a 94       	dec	r2
 cee:	f7 cf       	rjmp	.-18     	; 0xcde <vfprintf+0x3aa>
 cf0:	f6 01       	movw	r30, r12
 cf2:	86 81       	ldd	r24, Z+6	; 0x06
 cf4:	97 81       	ldd	r25, Z+7	; 0x07
 cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x3c8>
 cf8:	8f ef       	ldi	r24, 0xFF	; 255
 cfa:	9f ef       	ldi	r25, 0xFF	; 255
 cfc:	2b 96       	adiw	r28, 0x0b	; 11
 cfe:	0f b6       	in	r0, 0x3f	; 63
 d00:	f8 94       	cli
 d02:	de bf       	out	0x3e, r29	; 62
 d04:	0f be       	out	0x3f, r0	; 63
 d06:	cd bf       	out	0x3d, r28	; 61
 d08:	df 91       	pop	r29
 d0a:	cf 91       	pop	r28
 d0c:	1f 91       	pop	r17
 d0e:	0f 91       	pop	r16
 d10:	ff 90       	pop	r15
 d12:	ef 90       	pop	r14
 d14:	df 90       	pop	r13
 d16:	cf 90       	pop	r12
 d18:	bf 90       	pop	r11
 d1a:	af 90       	pop	r10
 d1c:	9f 90       	pop	r9
 d1e:	8f 90       	pop	r8
 d20:	7f 90       	pop	r7
 d22:	6f 90       	pop	r6
 d24:	5f 90       	pop	r5
 d26:	4f 90       	pop	r4
 d28:	3f 90       	pop	r3
 d2a:	2f 90       	pop	r2
 d2c:	08 95       	ret

00000d2e <strnlen_P>:
 d2e:	fc 01       	movw	r30, r24
 d30:	05 90       	lpm	r0, Z+
 d32:	61 50       	subi	r22, 0x01	; 1
 d34:	70 40       	sbci	r23, 0x00	; 0
 d36:	01 10       	cpse	r0, r1
 d38:	d8 f7       	brcc	.-10     	; 0xd30 <strnlen_P+0x2>
 d3a:	80 95       	com	r24
 d3c:	90 95       	com	r25
 d3e:	8e 0f       	add	r24, r30
 d40:	9f 1f       	adc	r25, r31
 d42:	08 95       	ret

00000d44 <strnlen>:
 d44:	fc 01       	movw	r30, r24
 d46:	61 50       	subi	r22, 0x01	; 1
 d48:	70 40       	sbci	r23, 0x00	; 0
 d4a:	01 90       	ld	r0, Z+
 d4c:	01 10       	cpse	r0, r1
 d4e:	d8 f7       	brcc	.-10     	; 0xd46 <strnlen+0x2>
 d50:	80 95       	com	r24
 d52:	90 95       	com	r25
 d54:	8e 0f       	add	r24, r30
 d56:	9f 1f       	adc	r25, r31
 d58:	08 95       	ret

00000d5a <fputc>:
 d5a:	0f 93       	push	r16
 d5c:	1f 93       	push	r17
 d5e:	cf 93       	push	r28
 d60:	df 93       	push	r29
 d62:	fb 01       	movw	r30, r22
 d64:	23 81       	ldd	r18, Z+3	; 0x03
 d66:	21 fd       	sbrc	r18, 1
 d68:	03 c0       	rjmp	.+6      	; 0xd70 <fputc+0x16>
 d6a:	8f ef       	ldi	r24, 0xFF	; 255
 d6c:	9f ef       	ldi	r25, 0xFF	; 255
 d6e:	2c c0       	rjmp	.+88     	; 0xdc8 <fputc+0x6e>
 d70:	22 ff       	sbrs	r18, 2
 d72:	16 c0       	rjmp	.+44     	; 0xda0 <fputc+0x46>
 d74:	46 81       	ldd	r20, Z+6	; 0x06
 d76:	57 81       	ldd	r21, Z+7	; 0x07
 d78:	24 81       	ldd	r18, Z+4	; 0x04
 d7a:	35 81       	ldd	r19, Z+5	; 0x05
 d7c:	42 17       	cp	r20, r18
 d7e:	53 07       	cpc	r21, r19
 d80:	44 f4       	brge	.+16     	; 0xd92 <fputc+0x38>
 d82:	a0 81       	ld	r26, Z
 d84:	b1 81       	ldd	r27, Z+1	; 0x01
 d86:	9d 01       	movw	r18, r26
 d88:	2f 5f       	subi	r18, 0xFF	; 255
 d8a:	3f 4f       	sbci	r19, 0xFF	; 255
 d8c:	31 83       	std	Z+1, r19	; 0x01
 d8e:	20 83       	st	Z, r18
 d90:	8c 93       	st	X, r24
 d92:	26 81       	ldd	r18, Z+6	; 0x06
 d94:	37 81       	ldd	r19, Z+7	; 0x07
 d96:	2f 5f       	subi	r18, 0xFF	; 255
 d98:	3f 4f       	sbci	r19, 0xFF	; 255
 d9a:	37 83       	std	Z+7, r19	; 0x07
 d9c:	26 83       	std	Z+6, r18	; 0x06
 d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <fputc+0x6e>
 da0:	8b 01       	movw	r16, r22
 da2:	ec 01       	movw	r28, r24
 da4:	fb 01       	movw	r30, r22
 da6:	00 84       	ldd	r0, Z+8	; 0x08
 da8:	f1 85       	ldd	r31, Z+9	; 0x09
 daa:	e0 2d       	mov	r30, r0
 dac:	19 95       	eicall
 dae:	89 2b       	or	r24, r25
 db0:	e1 f6       	brne	.-72     	; 0xd6a <fputc+0x10>
 db2:	d8 01       	movw	r26, r16
 db4:	16 96       	adiw	r26, 0x06	; 6
 db6:	8d 91       	ld	r24, X+
 db8:	9c 91       	ld	r25, X
 dba:	17 97       	sbiw	r26, 0x07	; 7
 dbc:	01 96       	adiw	r24, 0x01	; 1
 dbe:	17 96       	adiw	r26, 0x07	; 7
 dc0:	9c 93       	st	X, r25
 dc2:	8e 93       	st	-X, r24
 dc4:	16 97       	sbiw	r26, 0x06	; 6
 dc6:	ce 01       	movw	r24, r28
 dc8:	df 91       	pop	r29
 dca:	cf 91       	pop	r28
 dcc:	1f 91       	pop	r17
 dce:	0f 91       	pop	r16
 dd0:	08 95       	ret

00000dd2 <__ultoa_invert>:
 dd2:	fa 01       	movw	r30, r20
 dd4:	aa 27       	eor	r26, r26
 dd6:	28 30       	cpi	r18, 0x08	; 8
 dd8:	51 f1       	breq	.+84     	; 0xe2e <__ultoa_invert+0x5c>
 dda:	20 31       	cpi	r18, 0x10	; 16
 ddc:	81 f1       	breq	.+96     	; 0xe3e <__ultoa_invert+0x6c>
 dde:	e8 94       	clt
 de0:	6f 93       	push	r22
 de2:	6e 7f       	andi	r22, 0xFE	; 254
 de4:	6e 5f       	subi	r22, 0xFE	; 254
 de6:	7f 4f       	sbci	r23, 0xFF	; 255
 de8:	8f 4f       	sbci	r24, 0xFF	; 255
 dea:	9f 4f       	sbci	r25, 0xFF	; 255
 dec:	af 4f       	sbci	r26, 0xFF	; 255
 dee:	b1 e0       	ldi	r27, 0x01	; 1
 df0:	3e d0       	rcall	.+124    	; 0xe6e <__ultoa_invert+0x9c>
 df2:	b4 e0       	ldi	r27, 0x04	; 4
 df4:	3c d0       	rcall	.+120    	; 0xe6e <__ultoa_invert+0x9c>
 df6:	67 0f       	add	r22, r23
 df8:	78 1f       	adc	r23, r24
 dfa:	89 1f       	adc	r24, r25
 dfc:	9a 1f       	adc	r25, r26
 dfe:	a1 1d       	adc	r26, r1
 e00:	68 0f       	add	r22, r24
 e02:	79 1f       	adc	r23, r25
 e04:	8a 1f       	adc	r24, r26
 e06:	91 1d       	adc	r25, r1
 e08:	a1 1d       	adc	r26, r1
 e0a:	6a 0f       	add	r22, r26
 e0c:	71 1d       	adc	r23, r1
 e0e:	81 1d       	adc	r24, r1
 e10:	91 1d       	adc	r25, r1
 e12:	a1 1d       	adc	r26, r1
 e14:	20 d0       	rcall	.+64     	; 0xe56 <__ultoa_invert+0x84>
 e16:	09 f4       	brne	.+2      	; 0xe1a <__ultoa_invert+0x48>
 e18:	68 94       	set
 e1a:	3f 91       	pop	r19
 e1c:	2a e0       	ldi	r18, 0x0A	; 10
 e1e:	26 9f       	mul	r18, r22
 e20:	11 24       	eor	r1, r1
 e22:	30 19       	sub	r19, r0
 e24:	30 5d       	subi	r19, 0xD0	; 208
 e26:	31 93       	st	Z+, r19
 e28:	de f6       	brtc	.-74     	; 0xde0 <__ultoa_invert+0xe>
 e2a:	cf 01       	movw	r24, r30
 e2c:	08 95       	ret
 e2e:	46 2f       	mov	r20, r22
 e30:	47 70       	andi	r20, 0x07	; 7
 e32:	40 5d       	subi	r20, 0xD0	; 208
 e34:	41 93       	st	Z+, r20
 e36:	b3 e0       	ldi	r27, 0x03	; 3
 e38:	0f d0       	rcall	.+30     	; 0xe58 <__ultoa_invert+0x86>
 e3a:	c9 f7       	brne	.-14     	; 0xe2e <__ultoa_invert+0x5c>
 e3c:	f6 cf       	rjmp	.-20     	; 0xe2a <__ultoa_invert+0x58>
 e3e:	46 2f       	mov	r20, r22
 e40:	4f 70       	andi	r20, 0x0F	; 15
 e42:	40 5d       	subi	r20, 0xD0	; 208
 e44:	4a 33       	cpi	r20, 0x3A	; 58
 e46:	18 f0       	brcs	.+6      	; 0xe4e <__ultoa_invert+0x7c>
 e48:	49 5d       	subi	r20, 0xD9	; 217
 e4a:	31 fd       	sbrc	r19, 1
 e4c:	40 52       	subi	r20, 0x20	; 32
 e4e:	41 93       	st	Z+, r20
 e50:	02 d0       	rcall	.+4      	; 0xe56 <__ultoa_invert+0x84>
 e52:	a9 f7       	brne	.-22     	; 0xe3e <__ultoa_invert+0x6c>
 e54:	ea cf       	rjmp	.-44     	; 0xe2a <__ultoa_invert+0x58>
 e56:	b4 e0       	ldi	r27, 0x04	; 4
 e58:	a6 95       	lsr	r26
 e5a:	97 95       	ror	r25
 e5c:	87 95       	ror	r24
 e5e:	77 95       	ror	r23
 e60:	67 95       	ror	r22
 e62:	ba 95       	dec	r27
 e64:	c9 f7       	brne	.-14     	; 0xe58 <__ultoa_invert+0x86>
 e66:	00 97       	sbiw	r24, 0x00	; 0
 e68:	61 05       	cpc	r22, r1
 e6a:	71 05       	cpc	r23, r1
 e6c:	08 95       	ret
 e6e:	9b 01       	movw	r18, r22
 e70:	ac 01       	movw	r20, r24
 e72:	0a 2e       	mov	r0, r26
 e74:	06 94       	lsr	r0
 e76:	57 95       	ror	r21
 e78:	47 95       	ror	r20
 e7a:	37 95       	ror	r19
 e7c:	27 95       	ror	r18
 e7e:	ba 95       	dec	r27
 e80:	c9 f7       	brne	.-14     	; 0xe74 <__ultoa_invert+0xa2>
 e82:	62 0f       	add	r22, r18
 e84:	73 1f       	adc	r23, r19
 e86:	84 1f       	adc	r24, r20
 e88:	95 1f       	adc	r25, r21
 e8a:	a0 1d       	adc	r26, r0
 e8c:	08 95       	ret

00000e8e <_exit>:
 e8e:	f8 94       	cli

00000e90 <__stop_program>:
 e90:	ff cf       	rjmp	.-2      	; 0xe90 <__stop_program>
