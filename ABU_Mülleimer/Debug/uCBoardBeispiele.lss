
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800200  00001034  000010c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001034  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  0080031c  0080031c  000011e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025cd  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc3  00000000  00000000  00003a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f8  00000000  00000000  000049f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00005ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da0  00000000  00000000  00006678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f0a  00000000  00000000  00007418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009322  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ac c4       	rjmp	.+2392   	; 0x9b6 <__vector_23>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e3       	ldi	r30, 0x34	; 52
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 31       	cpi	r26, 0x1C	; 28
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	ac e1       	ldi	r26, 0x1C	; 28
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 39       	cpi	r26, 0x9A	; 154
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	02 d0       	rcall	.+4      	; 0x124 <main>
     120:	87 c7       	rjmp	.+3854   	; 0x1030 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#define LED_MUELL                      (0b00010000)

typedef enum Zustand_t {STARTUP, MUELLEIMER_AUF, MUELLEIMER_ZU, PET, ALU, MUELL} zustand_t;
//Hauptprogramm
int main(void)
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	00 d0       	rcall	.+0      	; 0x12a <main+0x6>
     12a:	1f 92       	push	r1
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
    zustand_t state = STARTUP;
    
    
    
    //Initialisieren
    initBoard(1);
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	be d2       	rcall	.+1404   	; 0x6b0 <initBoard>
    
    uint16_t led_Muell_offen =0;
    uint16_t led_Muell_zu =0;
    uint16_t led_Pet =0;
    uint16_t led_Alu =0;
    uint16_t led_Muell =0;
     134:	a1 2c       	mov	r10, r1
     136:	b1 2c       	mov	r11, r1
    uint16_t schalter_Pet_Alu_Muell_drinnen =0;
    
    uint16_t led_Muell_offen =0;
    uint16_t led_Muell_zu =0;
    uint16_t led_Pet =0;
    uint16_t led_Alu =0;
     138:	41 2c       	mov	r4, r1
     13a:	51 2c       	mov	r5, r1
    uint16_t schalter_Muell =0;
    uint16_t schalter_Pet_Alu_Muell_drinnen =0;
    
    uint16_t led_Muell_offen =0;
    uint16_t led_Muell_zu =0;
    uint16_t led_Pet =0;
     13c:	21 2c       	mov	r2, r1
     13e:	31 2c       	mov	r3, r1
    uint16_t schalter_Alu =0;
    uint16_t schalter_Muell =0;
    uint16_t schalter_Pet_Alu_Muell_drinnen =0;
    
    uint16_t led_Muell_offen =0;
    uint16_t led_Muell_zu =0;
     140:	e1 2c       	mov	r14, r1
     142:	f1 2c       	mov	r15, r1
    uint16_t schalter_Pet =0;
    uint16_t schalter_Alu =0;
    uint16_t schalter_Muell =0;
    uint16_t schalter_Pet_Alu_Muell_drinnen =0;
    
    uint16_t led_Muell_offen =0;
     144:	c1 2c       	mov	r12, r1
     146:	d1 2c       	mov	r13, r1
            lcdWriteText(0,0,"MUELLEIMER ZU");
            led_Muell_zu = LED_MUELL_ZU;// Mülleimer zu;
            led_Muell_offen =0;
            led_Pet =0;
            led_Alu =0;
            led_Muell =0;
     148:	71 2c       	mov	r7, r1
            lcdWriteText(1,0,"Eimer Alu auf");
            lcdWriteText(2,0,"Eimer Pet zu");
            lcdWriteText(3,0,"Eimer Müll zu");
            break;
            case MUELL:
            lcdWriteText(0,0,"MUELL ERKNAT   ");
     14a:	20 e0       	ldi	r18, 0x00	; 0
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        schalter_Muell_offen = switchReadAll() & SCHALTER_MUELL_OFFEN;
     14c:	2c 83       	std	Y+4, r18	; 0x04
     14e:	55 d1       	rcall	.+682    	; 0x3fa <switchReadAll>
     150:	80 fb       	bst	r24, 0
     152:	88 24       	eor	r8, r8
     154:	80 f8       	bld	r8, 0
        schalter_Muell_reinwerfen = switchReadAll() & SCHALTER_MUELL_REINWERFEN;
     156:	91 2c       	mov	r9, r1
     158:	50 d1       	rcall	.+672    	; 0x3fa <switchReadAll>
        schalter_Pet = switchReadAll() & SCHALTER_PET;
     15a:	89 83       	std	Y+1, r24	; 0x01
     15c:	4e d1       	rcall	.+668    	; 0x3fa <switchReadAll>
        schalter_Alu = switchReadAll() & SCHALTER_ALU;
     15e:	8a 83       	std	Y+2, r24	; 0x02
     160:	4c d1       	rcall	.+664    	; 0x3fa <switchReadAll>
        schalter_Muell = switchReadAll() & SCHALTER_MUELL;
     162:	8b 83       	std	Y+3, r24	; 0x03
     164:	4a d1       	rcall	.+660    	; 0x3fa <switchReadAll>
     166:	68 2e       	mov	r6, r24
        schalter_Pet_Alu_Muell_drinnen = switchReadAll() & SCHALTER_PET_ALU_MUELL_DRINNEN;
     168:	48 d1       	rcall	.+656    	; 0x3fa <switchReadAll>
     16a:	80 72       	andi	r24, 0x20	; 32
     16c:	08 2f       	mov	r16, r24
     16e:	10 e0       	ldi	r17, 0x00	; 0
     170:	8c 81       	ldd	r24, Y+4	; 0x04
        //Verarbeitung-------------------------------------------------------------
        switch (state)
     172:	82 30       	cpi	r24, 0x02	; 2
     174:	09 f4       	brne	.+2      	; 0x178 <main+0x54>
     176:	41 c0       	rjmp	.+130    	; 0x1fa <main+0xd6>
     178:	28 f4       	brcc	.+10     	; 0x184 <main+0x60>
     17a:	88 23       	and	r24, r24
     17c:	69 f0       	breq	.+26     	; 0x198 <main+0x74>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	e9 f0       	breq	.+58     	; 0x1bc <main+0x98>
     182:	2d c1       	rjmp	.+602    	; 0x3de <main+0x2ba>
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	94 30       	cpi	r25, 0x04	; 4
     188:	09 f4       	brne	.+2      	; 0x18c <main+0x68>
     18a:	95 c0       	rjmp	.+298    	; 0x2b6 <main+0x192>
     18c:	08 f4       	brcc	.+2      	; 0x190 <main+0x6c>
     18e:	5b c0       	rjmp	.+182    	; 0x246 <main+0x122>
     190:	95 30       	cpi	r25, 0x05	; 5
     192:	09 f4       	brne	.+2      	; 0x196 <main+0x72>
     194:	c8 c0       	rjmp	.+400    	; 0x326 <main+0x202>
     196:	23 c1       	rjmp	.+582    	; 0x3de <main+0x2ba>
        {
            case STARTUP:
            lcdWriteText(0,0,"STARTUP   ");
     198:	88 e0       	ldi	r24, 0x08	; 8
     19a:	92 e0       	ldi	r25, 0x02	; 2
     19c:	9f 93       	push	r25
     19e:	8f 93       	push	r24
     1a0:	1f 92       	push	r1
     1a2:	1f 92       	push	r1
     1a4:	11 d2       	rcall	.+1058   	; 0x5c8 <lcdWriteText>
     1a6:	21 e0       	ldi	r18, 0x01	; 1

            if (schalter_Muell_offen)
            {
                
               state =  MUELLEIMER_AUF;//Zustand auf Mülleimer auf setzen;
     1a8:	2c 83       	std	Y+4, r18	; 0x04
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	89 28       	or	r8, r9
     1b4:	09 f0       	breq	.+2      	; 0x1b8 <main+0x94>
     1b6:	13 c1       	rjmp	.+550    	; 0x3de <main+0x2ba>
     1b8:	1c 82       	std	Y+4, r1	; 0x04
     1ba:	11 c1       	rjmp	.+546    	; 0x3de <main+0x2ba>
            }
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
     1bc:	83 e1       	ldi	r24, 0x13	; 19
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9f 93       	push	r25
     1c2:	8f 93       	push	r24
     1c4:	1f 92       	push	r1
     1c6:	1f 92       	push	r1
     1c8:	ff d1       	rcall	.+1022   	; 0x5c8 <lcdWriteText>
     1ca:	0f 90       	pop	r0
            led_Muell_zu =0;
            led_Pet =0;
            led_Alu =0;
            led_Muell =0;

            if (schalter_Muell_reinwerfen && schalter_Muell_offen )
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	81 ff       	sbrs	r24, 1
     1d6:	df c0       	rjmp	.+446    	; 0x396 <main+0x272>
     1d8:	89 28       	or	r8, r9
     1da:	09 f4       	brne	.+2      	; 0x1de <main+0xba>
     1dc:	e8 c0       	rjmp	.+464    	; 0x3ae <main+0x28a>
     1de:	92 e0       	ldi	r25, 0x02	; 2
            {
               state = MUELLEIMER_ZU;// Zustand auf Mülleimer zu setzen;
     1e0:	9c 83       	std	Y+4, r25	; 0x04
     1e2:	a7 2c       	mov	r10, r7
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
            led_Pet =0;
            led_Alu =0;
            led_Muell =0;
     1e4:	b1 2c       	mov	r11, r1
     1e6:	47 2c       	mov	r4, r7
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
            led_Pet =0;
            led_Alu =0;
     1e8:	51 2c       	mov	r5, r1
     1ea:	27 2c       	mov	r2, r7
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
            led_Pet =0;
     1ec:	31 2c       	mov	r3, r1
     1ee:	e7 2c       	mov	r14, r7
            }
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
     1f0:	f1 2c       	mov	r15, r1
     1f2:	cc 24       	eor	r12, r12
               state =  MUELLEIMER_AUF;//Zustand auf Mülleimer auf setzen;
            }
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
     1f4:	c3 94       	inc	r12
     1f6:	d1 2c       	mov	r13, r1
     1f8:	f2 c0       	rjmp	.+484    	; 0x3de <main+0x2ba>
            {
               state = MUELLEIMER_ZU;// Zustand auf Mülleimer zu setzen;
            }
            break;
            case MUELLEIMER_ZU:
            lcdWriteText(0,0,"MUELLEIMER ZU");
     1fa:	82 e2       	ldi	r24, 0x22	; 34
     1fc:	92 e0       	ldi	r25, 0x02	; 2
     1fe:	9f 93       	push	r25
     200:	8f 93       	push	r24
     202:	1f 92       	push	r1
     204:	1f 92       	push	r1
     206:	e0 d1       	rcall	.+960    	; 0x5c8 <lcdWriteText>
     208:	0f 90       	pop	r0
            led_Muell_offen =0;
            led_Pet =0;
            led_Alu =0;
            led_Muell =0;

            if (schalter_Pet)
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	82 ff       	sbrs	r24, 2
     214:	02 c0       	rjmp	.+4      	; 0x21a <main+0xf6>
     216:	93 e0       	ldi	r25, 0x03	; 3
            {
                state = PET;// auf PET setzen;
     218:	9c 83       	std	Y+4, r25	; 0x04
     21a:	2b 81       	ldd	r18, Y+3	; 0x03
            }
            if (schalter_Alu)
     21c:	23 ff       	sbrs	r18, 3
     21e:	02 c0       	rjmp	.+4      	; 0x224 <main+0x100>
     220:	84 e0       	ldi	r24, 0x04	; 4
            {
                state = ALU;//Zustand auf Alu setzen;
     222:	8c 83       	std	Y+4, r24	; 0x04
     224:	64 fe       	sbrs	r6, 4
            }
            if (schalter_Muell)
     226:	cf c0       	rjmp	.+414    	; 0x3c6 <main+0x2a2>
     228:	95 e0       	ldi	r25, 0x05	; 5
            {
                state = MUELL;//Zustand auf Müll setzen;
     22a:	9c 83       	std	Y+4, r25	; 0x04
     22c:	a7 2c       	mov	r10, r7
            lcdWriteText(0,0,"MUELLEIMER ZU");
            led_Muell_zu = LED_MUELL_ZU;// Mülleimer zu;
            led_Muell_offen =0;
            led_Pet =0;
            led_Alu =0;
            led_Muell =0;
     22e:	b1 2c       	mov	r11, r1
     230:	47 2c       	mov	r4, r7
            case MUELLEIMER_ZU:
            lcdWriteText(0,0,"MUELLEIMER ZU");
            led_Muell_zu = LED_MUELL_ZU;// Mülleimer zu;
            led_Muell_offen =0;
            led_Pet =0;
            led_Alu =0;
     232:	51 2c       	mov	r5, r1
     234:	27 2c       	mov	r2, r7
            break;
            case MUELLEIMER_ZU:
            lcdWriteText(0,0,"MUELLEIMER ZU");
            led_Muell_zu = LED_MUELL_ZU;// Mülleimer zu;
            led_Muell_offen =0;
            led_Pet =0;
     236:	31 2c       	mov	r3, r1
     238:	68 94       	set
               state = MUELLEIMER_ZU;// Zustand auf Mülleimer zu setzen;
            }
            break;
            case MUELLEIMER_ZU:
            lcdWriteText(0,0,"MUELLEIMER ZU");
            led_Muell_zu = LED_MUELL_ZU;// Mülleimer zu;
     23a:	ee 24       	eor	r14, r14
     23c:	e1 f8       	bld	r14, 1
     23e:	f1 2c       	mov	r15, r1
            led_Muell_offen =0;
     240:	c7 2c       	mov	r12, r7
     242:	d1 2c       	mov	r13, r1
     244:	cc c0       	rjmp	.+408    	; 0x3de <main+0x2ba>
            {
                state = MUELL;//Zustand auf Müll setzen;
            }
            break;
            case PET:
            lcdWriteText(0,0,"PET  ERKNAT   ");
     246:	80 e3       	ldi	r24, 0x30	; 48
     248:	92 e0       	ldi	r25, 0x02	; 2
     24a:	9f 93       	push	r25
     24c:	8f 93       	push	r24
     24e:	1f 92       	push	r1
     250:	1f 92       	push	r1
     252:	ba d1       	rcall	.+884    	; 0x5c8 <lcdWriteText>
     254:	0f 90       	pop	r0
            if (schalter_Pet_Alu_Muell_drinnen)
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	01 2b       	or	r16, r17
     25e:	09 f0       	breq	.+2      	; 0x262 <main+0x13e>
            {
                state = STARTUP;
     260:	1c 82       	std	Y+4, r1	; 0x04
            led_Muell_offen =0;
            led_Muell_zu =0;
            led_Alu =0;
            led_Muell =0;

            lcdWriteText(1,0,"Eimer Pet auf");
     262:	8f e3       	ldi	r24, 0x3F	; 63
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	9f 93       	push	r25
     268:	8f 93       	push	r24
     26a:	1f 92       	push	r1
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	8f 93       	push	r24
     270:	ab d1       	rcall	.+854    	; 0x5c8 <lcdWriteText>
            lcdWriteText(2,0,"Eimer Alu zu");
     272:	8d e4       	ldi	r24, 0x4D	; 77
     274:	92 e0       	ldi	r25, 0x02	; 2
     276:	9f 93       	push	r25
     278:	8f 93       	push	r24
     27a:	1f 92       	push	r1
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	8f 93       	push	r24
     280:	a3 d1       	rcall	.+838    	; 0x5c8 <lcdWriteText>
            lcdWriteText(3,0,"Eimer Müll zu");
     282:	8a e5       	ldi	r24, 0x5A	; 90
     284:	92 e0       	ldi	r25, 0x02	; 2
     286:	9f 93       	push	r25
     288:	8f 93       	push	r24
     28a:	1f 92       	push	r1
     28c:	83 e0       	ldi	r24, 0x03	; 3
     28e:	8f 93       	push	r24
     290:	9b d1       	rcall	.+822    	; 0x5c8 <lcdWriteText>
     292:	0f b6       	in	r0, 0x3f	; 63

            break;
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	a7 2c       	mov	r10, r7
            
            led_Pet = LED_PET;
            led_Muell_offen =0;
            led_Muell_zu =0;
            led_Alu =0;
            led_Muell =0;
     29e:	b1 2c       	mov	r11, r1
     2a0:	47 2c       	mov	r4, r7
            }
            
            led_Pet = LED_PET;
            led_Muell_offen =0;
            led_Muell_zu =0;
            led_Alu =0;
     2a2:	51 2c       	mov	r5, r1
     2a4:	68 94       	set
            if (schalter_Pet_Alu_Muell_drinnen)
            {
                state = STARTUP;
            }
            
            led_Pet = LED_PET;
     2a6:	22 24       	eor	r2, r2
     2a8:	22 f8       	bld	r2, 2
     2aa:	31 2c       	mov	r3, r1
            led_Muell_offen =0;
            led_Muell_zu =0;
     2ac:	e7 2c       	mov	r14, r7
     2ae:	f1 2c       	mov	r15, r1
            {
                state = STARTUP;
            }
            
            led_Pet = LED_PET;
            led_Muell_offen =0;
     2b0:	c7 2c       	mov	r12, r7
     2b2:	d1 2c       	mov	r13, r1

            lcdWriteText(1,0,"Eimer Pet auf");
            lcdWriteText(2,0,"Eimer Alu zu");
            lcdWriteText(3,0,"Eimer Müll zu");

            break;
     2b4:	94 c0       	rjmp	.+296    	; 0x3de <main+0x2ba>
            case ALU:
            lcdWriteText(0,0,"ALU ERKNAT  ");
     2b6:	89 e6       	ldi	r24, 0x69	; 105
     2b8:	92 e0       	ldi	r25, 0x02	; 2
     2ba:	9f 93       	push	r25
     2bc:	8f 93       	push	r24
     2be:	1f 92       	push	r1
     2c0:	1f 92       	push	r1
     2c2:	82 d1       	rcall	.+772    	; 0x5c8 <lcdWriteText>
            if (schalter_Pet_Alu_Muell_drinnen)
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	01 2b       	or	r16, r17
     2ce:	09 f0       	breq	.+2      	; 0x2d2 <main+0x1ae>
            {
                state = STARTUP;
     2d0:	1c 82       	std	Y+4, r1	; 0x04
            led_Muell_offen =0;
            led_Muell_zu =0;
            led_Pet =0;
            led_Muell =0;

            lcdWriteText(1,0,"Eimer Alu auf");
     2d2:	86 e7       	ldi	r24, 0x76	; 118
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	9f 93       	push	r25
     2d8:	8f 93       	push	r24
     2da:	1f 92       	push	r1
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	8f 93       	push	r24
     2e0:	73 d1       	rcall	.+742    	; 0x5c8 <lcdWriteText>
            lcdWriteText(2,0,"Eimer Pet zu");
     2e2:	84 e8       	ldi	r24, 0x84	; 132
     2e4:	92 e0       	ldi	r25, 0x02	; 2
     2e6:	9f 93       	push	r25
     2e8:	8f 93       	push	r24
     2ea:	1f 92       	push	r1
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	8f 93       	push	r24
     2f0:	6b d1       	rcall	.+726    	; 0x5c8 <lcdWriteText>
     2f2:	8a e5       	ldi	r24, 0x5A	; 90
            lcdWriteText(3,0,"Eimer Müll zu");
     2f4:	92 e0       	ldi	r25, 0x02	; 2
     2f6:	9f 93       	push	r25
     2f8:	8f 93       	push	r24
     2fa:	1f 92       	push	r1
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	8f 93       	push	r24
     300:	63 d1       	rcall	.+710    	; 0x5c8 <lcdWriteText>
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
            break;
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	a7 2c       	mov	r10, r7
     30e:	b1 2c       	mov	r11, r1
            }
            led_Alu = LED_ALU;
            led_Muell_offen =0;
            led_Muell_zu =0;
            led_Pet =0;
            led_Muell =0;
     310:	68 94       	set
            lcdWriteText(0,0,"ALU ERKNAT  ");
            if (schalter_Pet_Alu_Muell_drinnen)
            {
                state = STARTUP;
            }
            led_Alu = LED_ALU;
     312:	44 24       	eor	r4, r4
     314:	43 f8       	bld	r4, 3
     316:	51 2c       	mov	r5, r1
     318:	27 2c       	mov	r2, r7
            led_Muell_offen =0;
            led_Muell_zu =0;
            led_Pet =0;
     31a:	31 2c       	mov	r3, r1
     31c:	e7 2c       	mov	r14, r7
            {
                state = STARTUP;
            }
            led_Alu = LED_ALU;
            led_Muell_offen =0;
            led_Muell_zu =0;
     31e:	f1 2c       	mov	r15, r1
     320:	c7 2c       	mov	r12, r7
            if (schalter_Pet_Alu_Muell_drinnen)
            {
                state = STARTUP;
            }
            led_Alu = LED_ALU;
            led_Muell_offen =0;
     322:	d1 2c       	mov	r13, r1
     324:	5c c0       	rjmp	.+184    	; 0x3de <main+0x2ba>
            led_Muell =0;

            lcdWriteText(1,0,"Eimer Alu auf");
            lcdWriteText(2,0,"Eimer Pet zu");
            lcdWriteText(3,0,"Eimer Müll zu");
            break;
     326:	81 e9       	ldi	r24, 0x91	; 145
            case MUELL:
            lcdWriteText(0,0,"MUELL ERKNAT   ");
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	9f 93       	push	r25
     32c:	8f 93       	push	r24
     32e:	1f 92       	push	r1
     330:	1f 92       	push	r1
     332:	4a d1       	rcall	.+660    	; 0x5c8 <lcdWriteText>
     334:	0f 90       	pop	r0
            if (schalter_Pet_Alu_Muell_drinnen)
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	01 2b       	or	r16, r17
     33e:	09 f0       	breq	.+2      	; 0x342 <main+0x21e>
            {
                state = STARTUP;
     340:	1c 82       	std	Y+4, r1	; 0x04
            led_Muell_offen =0;
            led_Muell_zu =0;
            led_Pet =0;
            led_Alu =0;

            lcdWriteText(1,0,"Eimer Müll auf");
     342:	81 ea       	ldi	r24, 0xA1	; 161
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	1f 92       	push	r1
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	8f 93       	push	r24
     350:	3b d1       	rcall	.+630    	; 0x5c8 <lcdWriteText>
            lcdWriteText(2,0,"Eimer Alu zu");
     352:	8d e4       	ldi	r24, 0x4D	; 77
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	9f 93       	push	r25
     358:	8f 93       	push	r24
     35a:	1f 92       	push	r1
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	8f 93       	push	r24
     360:	33 d1       	rcall	.+614    	; 0x5c8 <lcdWriteText>
     362:	84 e8       	ldi	r24, 0x84	; 132
            lcdWriteText(3,0,"Eimer Pet zu");
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	9f 93       	push	r25
     368:	8f 93       	push	r24
     36a:	1f 92       	push	r1
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	8f 93       	push	r24
     370:	2b d1       	rcall	.+598    	; 0x5c8 <lcdWriteText>
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
            break;
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	68 94       	set
     37e:	aa 24       	eor	r10, r10
            lcdWriteText(0,0,"MUELL ERKNAT   ");
            if (schalter_Pet_Alu_Muell_drinnen)
            {
                state = STARTUP;
            }
            led_Muell = LED_MUELL;
     380:	a4 f8       	bld	r10, 4
     382:	b1 2c       	mov	r11, r1
     384:	47 2c       	mov	r4, r7
     386:	51 2c       	mov	r5, r1
            led_Muell_offen =0;
            led_Muell_zu =0;
            led_Pet =0;
            led_Alu =0;
     388:	27 2c       	mov	r2, r7
     38a:	31 2c       	mov	r3, r1
                state = STARTUP;
            }
            led_Muell = LED_MUELL;
            led_Muell_offen =0;
            led_Muell_zu =0;
            led_Pet =0;
     38c:	e7 2c       	mov	r14, r7
     38e:	f1 2c       	mov	r15, r1
            {
                state = STARTUP;
            }
            led_Muell = LED_MUELL;
            led_Muell_offen =0;
            led_Muell_zu =0;
     390:	c7 2c       	mov	r12, r7
     392:	d1 2c       	mov	r13, r1
            if (schalter_Pet_Alu_Muell_drinnen)
            {
                state = STARTUP;
            }
            led_Muell = LED_MUELL;
            led_Muell_offen =0;
     394:	24 c0       	rjmp	.+72     	; 0x3de <main+0x2ba>
     396:	a7 2c       	mov	r10, r7
            led_Alu =0;

            lcdWriteText(1,0,"Eimer Müll auf");
            lcdWriteText(2,0,"Eimer Alu zu");
            lcdWriteText(3,0,"Eimer Pet zu");
            break;
     398:	b1 2c       	mov	r11, r1
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
            led_Pet =0;
            led_Alu =0;
            led_Muell =0;
     39a:	47 2c       	mov	r4, r7
     39c:	51 2c       	mov	r5, r1
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
            led_Pet =0;
            led_Alu =0;
     39e:	27 2c       	mov	r2, r7
     3a0:	31 2c       	mov	r3, r1
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
            led_Pet =0;
     3a2:	e7 2c       	mov	r14, r7
     3a4:	f1 2c       	mov	r15, r1
            }
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
     3a6:	cc 24       	eor	r12, r12
     3a8:	c3 94       	inc	r12
               state =  MUELLEIMER_AUF;//Zustand auf Mülleimer auf setzen;
            }
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
     3aa:	d1 2c       	mov	r13, r1
     3ac:	18 c0       	rjmp	.+48     	; 0x3de <main+0x2ba>
     3ae:	a7 2c       	mov	r10, r7
     3b0:	b1 2c       	mov	r11, r1
            led_Muell_zu =0;
            led_Pet =0;
            led_Alu =0;
            led_Muell =0;
     3b2:	47 2c       	mov	r4, r7
     3b4:	51 2c       	mov	r5, r1
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
            led_Pet =0;
            led_Alu =0;
     3b6:	27 2c       	mov	r2, r7
     3b8:	31 2c       	mov	r3, r1
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
            led_Pet =0;
     3ba:	e7 2c       	mov	r14, r7
     3bc:	f1 2c       	mov	r15, r1
            }
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
            led_Muell_zu =0;
     3be:	cc 24       	eor	r12, r12
     3c0:	c3 94       	inc	r12
               state =  MUELLEIMER_AUF;//Zustand auf Mülleimer auf setzen;
            }
            break;
            case MUELLEIMER_AUF:
            lcdWriteText(0,0,"MUELLEIMER AUF");
            led_Muell_offen = LED_MUELL_OFFEN;// LED Mülleimer auf;
     3c2:	d1 2c       	mov	r13, r1
     3c4:	0c c0       	rjmp	.+24     	; 0x3de <main+0x2ba>
     3c6:	a7 2c       	mov	r10, r7
            lcdWriteText(0,0,"MUELLEIMER ZU");
            led_Muell_zu = LED_MUELL_ZU;// Mülleimer zu;
            led_Muell_offen =0;
            led_Pet =0;
            led_Alu =0;
            led_Muell =0;
     3c8:	b1 2c       	mov	r11, r1
     3ca:	47 2c       	mov	r4, r7
            case MUELLEIMER_ZU:
            lcdWriteText(0,0,"MUELLEIMER ZU");
            led_Muell_zu = LED_MUELL_ZU;// Mülleimer zu;
            led_Muell_offen =0;
            led_Pet =0;
            led_Alu =0;
     3cc:	51 2c       	mov	r5, r1
     3ce:	27 2c       	mov	r2, r7
            break;
            case MUELLEIMER_ZU:
            lcdWriteText(0,0,"MUELLEIMER ZU");
            led_Muell_zu = LED_MUELL_ZU;// Mülleimer zu;
            led_Muell_offen =0;
            led_Pet =0;
     3d0:	31 2c       	mov	r3, r1
     3d2:	68 94       	set
               state = MUELLEIMER_ZU;// Zustand auf Mülleimer zu setzen;
            }
            break;
            case MUELLEIMER_ZU:
            lcdWriteText(0,0,"MUELLEIMER ZU");
            led_Muell_zu = LED_MUELL_ZU;// Mülleimer zu;
     3d4:	ee 24       	eor	r14, r14
     3d6:	e1 f8       	bld	r14, 1
     3d8:	f1 2c       	mov	r15, r1
     3da:	c7 2c       	mov	r12, r7
            led_Muell_offen =0;
     3dc:	d1 2c       	mov	r13, r1
     3de:	c6 01       	movw	r24, r12
            break;
            default:
            ;
        }
        //Ausgabe------------------------------------------------------------------
        ledWriteAll(led_Muell_offen | led_Muell_zu | led_Pet | led_Alu | led_Muell);
     3e0:	8e 29       	or	r24, r14
     3e2:	9f 29       	or	r25, r15
     3e4:	82 29       	or	r24, r2
     3e6:	93 29       	or	r25, r3
     3e8:	84 29       	or	r24, r4
     3ea:	95 29       	or	r25, r5
     3ec:	8a 29       	or	r24, r10
     3ee:	9b 29       	or	r25, r11
     3f0:	01 d0       	rcall	.+2      	; 0x3f4 <ledWriteAll>
     3f2:	ad ce       	rjmp	.-678    	; 0x14e <main+0x2a>

000003f4 <ledWriteAll>:
     3f4:	82 b9       	out	0x02, r24	; 2
    }
     3f6:	95 b9       	out	0x05, r25	; 5
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
     3f8:	08 95       	ret

000003fa <switchReadAll>:
     3fa:	86 b1       	in	r24, 0x06	; 6
     3fc:	08 95       	ret

000003fe <startSystemTimeMs>:
     3fe:	83 e0       	ldi	r24, 0x03	; 3
     400:	84 bd       	out	0x24, r24	; 36
     402:	8b e0       	ldi	r24, 0x0B	; 11
     404:	85 bd       	out	0x25, r24	; 37
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     40c:	89 ef       	ldi	r24, 0xF9	; 249
     40e:	87 bd       	out	0x27, r24	; 39
     410:	08 95       	ret

00000412 <initAdc>:
     412:	11 ba       	out	0x11, r1	; 17
     414:	10 ba       	out	0x10, r1	; 16
     416:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     41a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     41e:	80 e4       	ldi	r24, 0x40	; 64
     420:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
     430:	ea e7       	ldi	r30, 0x7A	; 122
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	87 ea       	ldi	r24, 0xA7	; 167
     436:	80 83       	st	Z, r24
     438:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     43c:	80 81       	ld	r24, Z
     43e:	80 64       	ori	r24, 0x40	; 64
     440:	80 83       	st	Z, r24
     442:	80 81       	ld	r24, Z
     444:	84 ff       	sbrs	r24, 4
     446:	fd cf       	rjmp	.-6      	; 0x442 <initAdc+0x30>
     448:	ea e7       	ldi	r30, 0x7A	; 122
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	8f 7e       	andi	r24, 0xEF	; 239
     450:	80 83       	st	Z, r24
     452:	08 95       	ret

00000454 <rgbWrite>:
     454:	2f ef       	ldi	r18, 0xFF	; 255
     456:	33 e0       	ldi	r19, 0x03	; 3
     458:	f9 01       	movw	r30, r18
     45a:	e8 1b       	sub	r30, r24
     45c:	f9 0b       	sbc	r31, r25
     45e:	c9 01       	movw	r24, r18
     460:	86 1b       	sub	r24, r22
     462:	97 0b       	sbc	r25, r23
     464:	24 1b       	sub	r18, r20
     466:	35 0b       	sbc	r19, r21
     468:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     46c:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     470:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     474:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
     478:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     47c:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
     480:	08 95       	ret

00000482 <initRgb>:
     482:	8e ef       	ldi	r24, 0xFE	; 254
     484:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     488:	8b e1       	ldi	r24, 0x1B	; 27
     48a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	d6 cf       	rjmp	.-84     	; 0x454 <rgbWrite>
     4a8:	08 95       	ret

000004aa <lcdSid>:
     4aa:	88 23       	and	r24, r24
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <lcdSid+0x8>
     4ae:	a0 9a       	sbi	0x14, 0	; 20
     4b0:	08 95       	ret
     4b2:	a0 98       	cbi	0x14, 0	; 20
     4b4:	08 95       	ret

000004b6 <lcdSclk>:
     4b6:	88 23       	and	r24, r24
     4b8:	11 f0       	breq	.+4      	; 0x4be <lcdSclk+0x8>
     4ba:	a1 9a       	sbi	0x14, 1	; 20
     4bc:	08 95       	ret
     4be:	a1 98       	cbi	0x14, 1	; 20
     4c0:	08 95       	ret

000004c2 <lcdLight>:
     4c2:	81 11       	cpse	r24, r1
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <lcdLight+0xc>
     4c6:	84 b5       	in	r24, 0x24	; 36
     4c8:	8f 7d       	andi	r24, 0xDF	; 223
     4ca:	84 bd       	out	0x24, r24	; 36
     4cc:	08 95       	ret
     4ce:	94 b5       	in	r25, 0x24	; 36
     4d0:	90 62       	ori	r25, 0x20	; 32
     4d2:	94 bd       	out	0x24, r25	; 36
     4d4:	88 bd       	out	0x28, r24	; 40
     4d6:	08 95       	ret

000004d8 <writeLcdF>:
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	7c 01       	movw	r14, r24
     4e6:	eb 01       	movw	r28, r22
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	df df       	rcall	.-66     	; 0x4aa <lcdSid>
     4ec:	05 e0       	ldi	r16, 0x05	; 5
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	e1 df       	rcall	.-62     	; 0x4b6 <lcdSclk>
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	df df       	rcall	.-66     	; 0x4b6 <lcdSclk>
     4f8:	01 50       	subi	r16, 0x01	; 1
     4fa:	11 09       	sbc	r17, r1
     4fc:	c9 f7       	brne	.-14     	; 0x4f0 <writeLcdF+0x18>
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	d4 df       	rcall	.-88     	; 0x4aa <lcdSid>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	d8 df       	rcall	.-80     	; 0x4b6 <lcdSclk>
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	d6 df       	rcall	.-84     	; 0x4b6 <lcdSclk>
     50a:	83 e4       	ldi	r24, 0x43	; 67
     50c:	e8 16       	cp	r14, r24
     50e:	f1 04       	cpc	r15, r1
     510:	19 f4       	brne	.+6      	; 0x518 <writeLcdF+0x40>
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	ca df       	rcall	.-108    	; 0x4aa <lcdSid>
     516:	02 c0       	rjmp	.+4      	; 0x51c <writeLcdF+0x44>
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	c7 df       	rcall	.-114    	; 0x4aa <lcdSid>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	cb df       	rcall	.-106    	; 0x4b6 <lcdSclk>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	c9 df       	rcall	.-110    	; 0x4b6 <lcdSclk>
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	c1 df       	rcall	.-126    	; 0x4aa <lcdSid>
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	c5 df       	rcall	.-118    	; 0x4b6 <lcdSclk>
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	c3 df       	rcall	.-122    	; 0x4b6 <lcdSclk>
     530:	04 e0       	ldi	r16, 0x04	; 4
     532:	10 e0       	ldi	r17, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	bf df       	rcall	.-130    	; 0x4b6 <lcdSclk>
     538:	c0 ff       	sbrs	r28, 0
     53a:	03 c0       	rjmp	.+6      	; 0x542 <writeLcdF+0x6a>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	b5 df       	rcall	.-150    	; 0x4aa <lcdSid>
     540:	02 c0       	rjmp	.+4      	; 0x546 <writeLcdF+0x6e>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	b2 df       	rcall	.-156    	; 0x4aa <lcdSid>
     546:	d6 95       	lsr	r29
     548:	c7 95       	ror	r28
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	b4 df       	rcall	.-152    	; 0x4b6 <lcdSclk>
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	b2 df       	rcall	.-156    	; 0x4b6 <lcdSclk>
     552:	01 50       	subi	r16, 0x01	; 1
     554:	11 09       	sbc	r17, r1
     556:	71 f7       	brne	.-36     	; 0x534 <writeLcdF+0x5c>
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	a7 df       	rcall	.-178    	; 0x4aa <lcdSid>
     55c:	04 e0       	ldi	r16, 0x04	; 4
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	a9 df       	rcall	.-174    	; 0x4b6 <lcdSclk>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	a7 df       	rcall	.-178    	; 0x4b6 <lcdSclk>
     568:	01 50       	subi	r16, 0x01	; 1
     56a:	11 09       	sbc	r17, r1
     56c:	c9 f7       	brne	.-14     	; 0x560 <writeLcdF+0x88>
     56e:	04 e0       	ldi	r16, 0x04	; 4
     570:	10 e0       	ldi	r17, 0x00	; 0
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	a0 df       	rcall	.-192    	; 0x4b6 <lcdSclk>
     576:	c0 ff       	sbrs	r28, 0
     578:	03 c0       	rjmp	.+6      	; 0x580 <writeLcdF+0xa8>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	96 df       	rcall	.-212    	; 0x4aa <lcdSid>
     57e:	02 c0       	rjmp	.+4      	; 0x584 <writeLcdF+0xac>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	93 df       	rcall	.-218    	; 0x4aa <lcdSid>
     584:	d6 95       	lsr	r29
     586:	c7 95       	ror	r28
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	95 df       	rcall	.-214    	; 0x4b6 <lcdSclk>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	93 df       	rcall	.-218    	; 0x4b6 <lcdSclk>
     590:	01 50       	subi	r16, 0x01	; 1
     592:	11 09       	sbc	r17, r1
     594:	71 f7       	brne	.-36     	; 0x572 <writeLcdF+0x9a>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	88 df       	rcall	.-240    	; 0x4aa <lcdSid>
     59a:	c4 e0       	ldi	r28, 0x04	; 4
     59c:	d0 e0       	ldi	r29, 0x00	; 0
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	8a df       	rcall	.-236    	; 0x4b6 <lcdSclk>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	88 df       	rcall	.-240    	; 0x4b6 <lcdSclk>
     5a6:	21 97       	sbiw	r28, 0x01	; 1
     5a8:	d1 f7       	brne	.-12     	; 0x59e <writeLcdF+0xc6>
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	7e df       	rcall	.-260    	; 0x4aa <lcdSid>
     5ae:	87 ec       	ldi	r24, 0xC7	; 199
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <writeLcdF+0xda>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <writeLcdF+0xe0>
     5b8:	00 00       	nop
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	08 95       	ret

000005c8 <lcdWriteText>:
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	65 97       	sbiw	r28, 0x15	; 21
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	9e 01       	movw	r18, r28
     5e0:	20 5e       	subi	r18, 0xE0	; 224
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
     5e4:	4e 8d       	ldd	r20, Y+30	; 0x1e
     5e6:	5f 8d       	ldd	r21, Y+31	; 0x1f
     5e8:	65 e1       	ldi	r22, 0x15	; 21
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	3a d2       	rcall	.+1140   	; 0xa66 <vsnprintf>
     5f2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     5f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5f6:	90 e2       	ldi	r25, 0x20	; 32
     5f8:	89 9f       	mul	r24, r25
     5fa:	60 0d       	add	r22, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	60 68       	ori	r22, 0x80	; 128
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	83 e4       	ldi	r24, 0x43	; 67
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	68 df       	rcall	.-304    	; 0x4d8 <writeLcdF>
     608:	69 81       	ldd	r22, Y+1	; 0x01
     60a:	66 23       	and	r22, r22
     60c:	79 f0       	breq	.+30     	; 0x62c <lcdWriteText+0x64>
     60e:	10 e0       	ldi	r17, 0x00	; 0
     610:	1f 5f       	subi	r17, 0xFF	; 255
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	84 e4       	ldi	r24, 0x44	; 68
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	5f df       	rcall	.-322    	; 0x4d8 <writeLcdF>
     61a:	e1 e0       	ldi	r30, 0x01	; 1
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ec 0f       	add	r30, r28
     620:	fd 1f       	adc	r31, r29
     622:	e1 0f       	add	r30, r17
     624:	f1 1d       	adc	r31, r1
     626:	60 81       	ld	r22, Z
     628:	61 11       	cpse	r22, r1
     62a:	f2 cf       	rjmp	.-28     	; 0x610 <lcdWriteText+0x48>
     62c:	65 96       	adiw	r28, 0x15	; 21
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	08 95       	ret

00000640 <lcdClear>:
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	83 e4       	ldi	r24, 0x43	; 67
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	47 df       	rcall	.-370    	; 0x4d8 <writeLcdF>
     64a:	8f e3       	ldi	r24, 0x3F	; 63
     64c:	9f e1       	ldi	r25, 0x1F	; 31
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <lcdClear+0xe>
     652:	00 c0       	rjmp	.+0      	; 0x654 <lcdClear+0x14>
     654:	00 00       	nop
     656:	89 ed       	ldi	r24, 0xD9	; 217
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	1f 92       	push	r1
     660:	1f 92       	push	r1
     662:	b2 df       	rcall	.-156    	; 0x5c8 <lcdWriteText>
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	08 95       	ret

0000066e <initLcd>:
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	22 df       	rcall	.-444    	; 0x4b6 <lcdSclk>
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	1a df       	rcall	.-460    	; 0x4aa <lcdSid>
     676:	64 e3       	ldi	r22, 0x34	; 52
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	83 e4       	ldi	r24, 0x43	; 67
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	2c df       	rcall	.-424    	; 0x4d8 <writeLcdF>
     680:	69 e0       	ldi	r22, 0x09	; 9
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	83 e4       	ldi	r24, 0x43	; 67
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	27 df       	rcall	.-434    	; 0x4d8 <writeLcdF>
     68a:	60 e3       	ldi	r22, 0x30	; 48
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	83 e4       	ldi	r24, 0x43	; 67
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	22 df       	rcall	.-444    	; 0x4d8 <writeLcdF>
     694:	6c e0       	ldi	r22, 0x0C	; 12
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	83 e4       	ldi	r24, 0x43	; 67
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	1d df       	rcall	.-454    	; 0x4d8 <writeLcdF>
     69e:	d0 df       	rcall	.-96     	; 0x640 <lcdClear>
     6a0:	67 e0       	ldi	r22, 0x07	; 7
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	83 e4       	ldi	r24, 0x43	; 67
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	17 df       	rcall	.-466    	; 0x4d8 <writeLcdF>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0a cf       	rjmp	.-492    	; 0x4c2 <lcdLight>
     6ae:	08 95       	ret

000006b0 <initBoard>:
     6b0:	4f 92       	push	r4
     6b2:	5f 92       	push	r5
     6b4:	6f 92       	push	r6
     6b6:	7f 92       	push	r7
     6b8:	8f 92       	push	r8
     6ba:	9f 92       	push	r9
     6bc:	af 92       	push	r10
     6be:	bf 92       	push	r11
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	c8 2f       	mov	r28, r24
     6d2:	85 b7       	in	r24, 0x35	; 53
     6d4:	85 bf       	out	0x35, r24	; 53
     6d6:	12 b8       	out	0x02, r1	; 2
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	81 b9       	out	0x01, r24	; 1
     6dc:	15 b8       	out	0x05, r1	; 5
     6de:	84 b9       	out	0x04, r24	; 4
     6e0:	88 b9       	out	0x08, r24	; 8
     6e2:	17 b8       	out	0x07, r1	; 7
     6e4:	8b b9       	out	0x0b, r24	; 11
     6e6:	1a b8       	out	0x0a, r1	; 10
     6e8:	8e b9       	out	0x0e, r24	; 14
     6ea:	1d b8       	out	0x0d, r1	; 13
     6ec:	72 98       	cbi	0x0e, 2	; 14
     6ee:	11 ba       	out	0x11, r1	; 17
     6f0:	10 ba       	out	0x10, r1	; 16
     6f2:	94 e0       	ldi	r25, 0x04	; 4
     6f4:	94 bb       	out	0x14, r25	; 20
     6f6:	93 b3       	in	r25, 0x13	; 19
     6f8:	93 60       	ori	r25, 0x03	; 3
     6fa:	93 bb       	out	0x13, r25	; 19
     6fc:	9d 9a       	sbi	0x13, 5	; 19
     6fe:	97 ec       	ldi	r25, 0xC7	; 199
     700:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     704:	98 e3       	ldi	r25, 0x38	; 56
     706:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     70a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     70e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
     712:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     716:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     71a:	8c e3       	ldi	r24, 0x3C	; 60
     71c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     720:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
     724:	78 94       	sei
     726:	6b de       	rcall	.-810    	; 0x3fe <startSystemTimeMs>
     728:	a2 df       	rcall	.-188    	; 0x66e <initLcd>
     72a:	73 de       	rcall	.-794    	; 0x412 <initAdc>
     72c:	aa de       	rcall	.-684    	; 0x482 <initRgb>
     72e:	cc 23       	and	r28, r28
     730:	09 f4       	brne	.+2      	; 0x734 <initBoard+0x84>
     732:	b8 c0       	rjmp	.+368    	; 0x8a4 <initBoard+0x1f4>
     734:	8f ef       	ldi	r24, 0xFF	; 255
     736:	c5 de       	rcall	.-630    	; 0x4c2 <lcdLight>
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	6f ef       	ldi	r22, 0xFF	; 255
     73e:	73 e0       	ldi	r23, 0x03	; 3
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	87 de       	rcall	.-754    	; 0x454 <rgbWrite>
     746:	86 ec       	ldi	r24, 0xC6	; 198
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	1f 92       	push	r1
     750:	1f 92       	push	r1
     752:	3a df       	rcall	.-396    	; 0x5c8 <lcdWriteText>
     754:	8b ed       	ldi	r24, 0xDB	; 219
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	9f 93       	push	r25
     75a:	8f 93       	push	r24
     75c:	1f 92       	push	r1
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	8f 93       	push	r24
     762:	32 df       	rcall	.-412    	; 0x5c8 <lcdWriteText>
     764:	81 eb       	ldi	r24, 0xB1	; 177
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	1f 92       	push	r1
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	8f 93       	push	r24
     772:	2a df       	rcall	.-428    	; 0x5c8 <lcdWriteText>
     774:	80 ef       	ldi	r24, 0xF0	; 240
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	1f 92       	push	r1
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	8f 93       	push	r24
     782:	22 df       	rcall	.-444    	; 0x5c8 <lcdWriteText>
     784:	8d b7       	in	r24, 0x3d	; 61
     786:	9e b7       	in	r25, 0x3e	; 62
     788:	40 96       	adiw	r24, 0x10	; 16
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	9e bf       	out	0x3e, r25	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	8d bf       	out	0x3d, r24	; 61
     794:	88 24       	eor	r8, r8
     796:	83 94       	inc	r8
     798:	c0 e0       	ldi	r28, 0x00	; 0
     79a:	71 2c       	mov	r7, r1
     79c:	99 24       	eor	r9, r9
     79e:	93 94       	inc	r9
     7a0:	d0 e0       	ldi	r29, 0x00	; 0
     7a2:	cc 24       	eor	r12, r12
     7a4:	c3 94       	inc	r12
     7a6:	d1 2c       	mov	r13, r1
     7a8:	e1 2c       	mov	r14, r1
     7aa:	68 94       	set
     7ac:	ff 24       	eor	r15, r15
     7ae:	f7 f8       	bld	r15, 7
     7b0:	66 24       	eor	r6, r6
     7b2:	63 94       	inc	r6
     7b4:	51 2c       	mov	r5, r1
     7b6:	09 e0       	ldi	r16, 0x09	; 9
     7b8:	11 e0       	ldi	r17, 0x01	; 1
     7ba:	0f 2e       	mov	r0, r31
     7bc:	f5 e0       	ldi	r31, 0x05	; 5
     7be:	af 2e       	mov	r10, r31
     7c0:	f3 e0       	ldi	r31, 0x03	; 3
     7c2:	bf 2e       	mov	r11, r31
     7c4:	f0 2d       	mov	r31, r0
     7c6:	0f 2e       	mov	r0, r31
     7c8:	f3 e0       	ldi	r31, 0x03	; 3
     7ca:	4f 2e       	mov	r4, r31
     7cc:	f0 2d       	mov	r31, r0
     7ce:	99 20       	and	r9, r9
     7d0:	49 f0       	breq	.+18     	; 0x7e4 <initBoard+0x134>
     7d2:	c7 01       	movw	r24, r14
     7d4:	0d 2e       	mov	r0, r29
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <initBoard+0x12c>
     7d8:	96 95       	lsr	r25
     7da:	87 95       	ror	r24
     7dc:	0a 94       	dec	r0
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <initBoard+0x128>
     7e0:	09 de       	rcall	.-1006   	; 0x3f4 <ledWriteAll>
     7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <initBoard+0x144>
     7e4:	c6 01       	movw	r24, r12
     7e6:	0d 2e       	mov	r0, r29
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <initBoard+0x13e>
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	0a 94       	dec	r0
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <initBoard+0x13a>
     7f2:	00 de       	rcall	.-1024   	; 0x3f4 <ledWriteAll>
     7f4:	df 5f       	subi	r29, 0xFF	; 255
     7f6:	d1 31       	cpi	r29, 0x11	; 17
     7f8:	28 f0       	brcs	.+10     	; 0x804 <initBoard+0x154>
     7fa:	86 2d       	mov	r24, r6
     7fc:	91 10       	cpse	r9, r1
     7fe:	85 2d       	mov	r24, r5
     800:	98 2e       	mov	r9, r24
     802:	d0 e0       	ldi	r29, 0x00	; 0
     804:	88 20       	and	r8, r8
     806:	11 f0       	breq	.+4      	; 0x80c <initBoard+0x15c>
     808:	ce 5f       	subi	r28, 0xFE	; 254
     80a:	01 c0       	rjmp	.+2      	; 0x80e <initBoard+0x15e>
     80c:	c2 50       	subi	r28, 0x02	; 2
     80e:	8c 2f       	mov	r24, r28
     810:	58 de       	rcall	.-848    	; 0x4c2 <lcdLight>
     812:	ce 3f       	cpi	r28, 0xFE	; 254
     814:	21 f0       	breq	.+8      	; 0x81e <initBoard+0x16e>
     816:	c8 37       	cpi	r28, 0x78	; 120
     818:	19 f4       	brne	.+6      	; 0x820 <initBoard+0x170>
     81a:	86 2c       	mov	r8, r6
     81c:	01 c0       	rjmp	.+2      	; 0x820 <initBoard+0x170>
     81e:	85 2c       	mov	r8, r5
     820:	71 10       	cpse	r7, r1
     822:	3b c0       	rjmp	.+118    	; 0x89a <initBoard+0x1ea>
     824:	f8 01       	movw	r30, r16
     826:	80 81       	ld	r24, Z
     828:	83 7c       	andi	r24, 0xC3	; 195
     82a:	91 f0       	breq	.+36     	; 0x850 <initBoard+0x1a0>
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	66 e2       	ldi	r22, 0x26	; 38
     832:	72 e0       	ldi	r23, 0x02	; 2
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	0d de       	rcall	.-998    	; 0x454 <rgbWrite>
     83a:	bf 92       	push	r11
     83c:	af 92       	push	r10
     83e:	1f 92       	push	r1
     840:	4f 92       	push	r4
     842:	c2 de       	rcall	.-636    	; 0x5c8 <lcdWriteText>
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	76 2c       	mov	r7, r6
     84e:	25 c0       	rjmp	.+74     	; 0x89a <initBoard+0x1ea>
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	9c e7       	ldi	r25, 0x7C	; 124
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <initBoard+0x1a4>
     858:	00 c0       	rjmp	.+0      	; 0x85a <initBoard+0x1aa>
     85a:	00 00       	nop
     85c:	b8 cf       	rjmp	.-144    	; 0x7ce <initBoard+0x11e>
     85e:	f0 de       	rcall	.-544    	; 0x640 <lcdClear>
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	2f de       	rcall	.-930    	; 0x4c2 <lcdLight>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	c5 dd       	rcall	.-1142   	; 0x3f4 <ledWriteAll>
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	ee dd       	rcall	.-1060   	; 0x454 <rgbWrite>
     878:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <systemTimeMs>
     87c:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <systemTimeMs+0x1>
     880:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <systemTimeMs+0x2>
     884:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <systemTimeMs+0x3>
     888:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <systemTimeMs+0x4>
     88c:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <systemTimeMs+0x5>
     890:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <systemTimeMs+0x6>
     894:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <systemTimeMs+0x7>
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <initBoard+0x1f4>
     89a:	f8 01       	movw	r30, r16
     89c:	80 81       	ld	r24, Z
     89e:	83 7c       	andi	r24, 0xC3	; 195
     8a0:	b9 f6       	brne	.-82     	; 0x850 <initBoard+0x1a0>
     8a2:	dd cf       	rjmp	.-70     	; 0x85e <initBoard+0x1ae>
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	af 90       	pop	r10
     8b8:	9f 90       	pop	r9
     8ba:	8f 90       	pop	r8
     8bc:	7f 90       	pop	r7
     8be:	6f 90       	pop	r6
     8c0:	5f 90       	pop	r5
     8c2:	4f 90       	pop	r4
     8c4:	08 95       	ret

000008c6 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	28 97       	sbiw	r28, 0x08	; 8
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
     8da:	88 e0       	ldi	r24, 0x08	; 8
     8dc:	e0 e0       	ldi	r30, 0x00	; 0
     8de:	f2 e0       	ldi	r31, 0x02	; 2
     8e0:	de 01       	movw	r26, r28
     8e2:	11 96       	adiw	r26, 0x01	; 1
     8e4:	01 90       	ld	r0, Z+
     8e6:	0d 92       	st	X+, r0
     8e8:	8a 95       	dec	r24
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
     8ec:	e5 e0       	ldi	r30, 0x05	; 5
     8ee:	f1 e0       	ldi	r31, 0x01	; 1
     8f0:	80 81       	ld	r24, Z
     8f2:	8f 7b       	andi	r24, 0xBF	; 191
     8f4:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
     8f6:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <Zeilen_Nr.2731>
     8fa:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <Zeilen_Nr.2731+0x1>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	8c 0f       	add	r24, r28
     904:	9d 1f       	adc	r25, r29
     906:	e8 0f       	add	r30, r24
     908:	f9 1f       	adc	r31, r25
     90a:	80 81       	ld	r24, Z
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <__data_end+0x1>
     912:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <__data_end>
     916:	aa e9       	ldi	r26, 0x9A	; 154
     918:	b3 e0       	ldi	r27, 0x03	; 3
     91a:	2a e2       	ldi	r18, 0x2A	; 42
     91c:	33 e0       	ldi	r19, 0x03	; 3
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
     91e:	e5 e0       	ldi	r30, 0x05	; 5
     920:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
     922:	5e 91       	ld	r21, -X
     924:	4e 91       	ld	r20, -X
     926:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <__data_end>
     92a:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <__data_end+0x1>
     92e:	84 23       	and	r24, r20
     930:	95 23       	and	r25, r21
     932:	89 2b       	or	r24, r25
     934:	21 f0       	breq	.+8      	; 0x93e <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
     936:	80 81       	ld	r24, Z
     938:	80 62       	ori	r24, 0x20	; 32
     93a:	80 83       	st	Z, r24
     93c:	03 c0       	rjmp	.+6      	; 0x944 <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
     93e:	80 81       	ld	r24, Z
     940:	8f 7d       	andi	r24, 0xDF	; 223
     942:	80 83       	st	Z, r24
        }
        CLOCK_1;
     944:	80 81       	ld	r24, Z
     946:	80 61       	ori	r24, 0x10	; 16
     948:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
     94a:	80 81       	ld	r24, Z
     94c:	8f 7e       	andi	r24, 0xEF	; 239
     94e:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
     950:	a2 17       	cp	r26, r18
     952:	b3 07       	cpc	r27, r19
     954:	31 f7       	brne	.-52     	; 0x922 <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
     956:	e5 e0       	ldi	r30, 0x05	; 5
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	80 81       	ld	r24, Z
     95c:	87 7f       	andi	r24, 0xF7	; 247
     95e:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
     960:	80 81       	ld	r24, Z
     962:	88 7f       	andi	r24, 0xF8	; 248
     964:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
     966:	90 81       	ld	r25, Z
     968:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Zeilen_Nr.2731>
     96c:	89 2b       	or	r24, r25
     96e:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
     970:	80 81       	ld	r24, Z
     972:	80 64       	ori	r24, 0x40	; 64
     974:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
     976:	80 81       	ld	r24, Z
     978:	88 60       	ori	r24, 0x08	; 8
     97a:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
     97c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Zeilen_Nr.2731>
     980:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <Zeilen_Nr.2731+0x1>
     984:	87 30       	cpi	r24, 0x07	; 7
     986:	91 05       	cpc	r25, r1
     988:	30 f4       	brcc	.+12     	; 0x996 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <Zeilen_Nr.2731+0x1>
     990:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Zeilen_Nr.2731>
     994:	07 c0       	rjmp	.+14     	; 0x9a4 <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
     996:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <Zeilen_Nr.2731+0x1>
     99a:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <Zeilen_Nr.2731>
        writeTextFinished = 1;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <writeTextFinished>
    }
    
     9a4:	28 96       	adiw	r28, 0x08	; 8
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	0b b6       	in	r0, 0x3b	; 59
     9c2:	0f 92       	push	r0
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	4f 93       	push	r20
     9ca:	5f 93       	push	r21
     9cc:	6f 93       	push	r22
     9ce:	7f 93       	push	r23
     9d0:	8f 93       	push	r24
     9d2:	9f 93       	push	r25
     9d4:	af 93       	push	r26
     9d6:	bf 93       	push	r27
     9d8:	ef 93       	push	r30
     9da:	ff 93       	push	r31
    systemTimeMs += 1;
     9dc:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <systemTimeMs>
     9e0:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <systemTimeMs+0x1>
     9e4:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <systemTimeMs+0x2>
     9e8:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <systemTimeMs+0x3>
     9ec:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <systemTimeMs+0x4>
     9f0:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <systemTimeMs+0x5>
     9f4:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <systemTimeMs+0x6>
     9f8:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <systemTimeMs+0x7>
     9fc:	a1 e0       	ldi	r26, 0x01	; 1
     9fe:	27 d0       	rcall	.+78     	; 0xa4e <__adddi3_s8>
     a00:	20 93 21 03 	sts	0x0321, r18	; 0x800321 <systemTimeMs>
     a04:	30 93 22 03 	sts	0x0322, r19	; 0x800322 <systemTimeMs+0x1>
     a08:	40 93 23 03 	sts	0x0323, r20	; 0x800323 <systemTimeMs+0x2>
     a0c:	50 93 24 03 	sts	0x0324, r21	; 0x800324 <systemTimeMs+0x3>
     a10:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <systemTimeMs+0x4>
     a14:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <systemTimeMs+0x5>
     a18:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <systemTimeMs+0x6>
     a1c:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
     a20:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <matrixRunning>
     a24:	81 11       	cpse	r24, r1
     a26:	4f df       	rcall	.-354    	; 0x8c6 <matrixWriteNextLine>
}
     a28:	ff 91       	pop	r31
     a2a:	ef 91       	pop	r30
     a2c:	bf 91       	pop	r27
     a2e:	af 91       	pop	r26
     a30:	9f 91       	pop	r25
     a32:	8f 91       	pop	r24
     a34:	7f 91       	pop	r23
     a36:	6f 91       	pop	r22
     a38:	5f 91       	pop	r21
     a3a:	4f 91       	pop	r20
     a3c:	3f 91       	pop	r19
     a3e:	2f 91       	pop	r18
     a40:	0f 90       	pop	r0
     a42:	0b be       	out	0x3b, r0	; 59
     a44:	0f 90       	pop	r0
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__adddi3_s8>:
     a4e:	00 24       	eor	r0, r0
     a50:	a7 fd       	sbrc	r26, 7
     a52:	00 94       	com	r0
     a54:	2a 0f       	add	r18, r26
     a56:	30 1d       	adc	r19, r0
     a58:	40 1d       	adc	r20, r0
     a5a:	50 1d       	adc	r21, r0
     a5c:	60 1d       	adc	r22, r0
     a5e:	70 1d       	adc	r23, r0
     a60:	80 1d       	adc	r24, r0
     a62:	90 1d       	adc	r25, r0
     a64:	08 95       	ret

00000a66 <vsnprintf>:
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	2e 97       	sbiw	r28, 0x0e	; 14
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	8c 01       	movw	r16, r24
     a80:	fa 01       	movw	r30, r20
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	8c 83       	std	Y+4, r24	; 0x04
     a86:	1a 83       	std	Y+2, r17	; 0x02
     a88:	09 83       	std	Y+1, r16	; 0x01
     a8a:	77 ff       	sbrs	r23, 7
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <vsnprintf+0x2c>
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e8       	ldi	r23, 0x80	; 128
     a92:	cb 01       	movw	r24, r22
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	9e 83       	std	Y+6, r25	; 0x06
     a98:	8d 83       	std	Y+5, r24	; 0x05
     a9a:	a9 01       	movw	r20, r18
     a9c:	bf 01       	movw	r22, r30
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	19 d0       	rcall	.+50     	; 0xad6 <vfprintf>
     aa4:	4d 81       	ldd	r20, Y+5	; 0x05
     aa6:	5e 81       	ldd	r21, Y+6	; 0x06
     aa8:	57 fd       	sbrc	r21, 7
     aaa:	0a c0       	rjmp	.+20     	; 0xac0 <vsnprintf+0x5a>
     aac:	2f 81       	ldd	r18, Y+7	; 0x07
     aae:	38 85       	ldd	r19, Y+8	; 0x08
     ab0:	42 17       	cp	r20, r18
     ab2:	53 07       	cpc	r21, r19
     ab4:	0c f4       	brge	.+2      	; 0xab8 <vsnprintf+0x52>
     ab6:	9a 01       	movw	r18, r20
     ab8:	f8 01       	movw	r30, r16
     aba:	e2 0f       	add	r30, r18
     abc:	f3 1f       	adc	r31, r19
     abe:	10 82       	st	Z, r1
     ac0:	2e 96       	adiw	r28, 0x0e	; 14
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	08 95       	ret

00000ad6 <vfprintf>:
     ad6:	2f 92       	push	r2
     ad8:	3f 92       	push	r3
     ada:	4f 92       	push	r4
     adc:	5f 92       	push	r5
     ade:	6f 92       	push	r6
     ae0:	7f 92       	push	r7
     ae2:	8f 92       	push	r8
     ae4:	9f 92       	push	r9
     ae6:	af 92       	push	r10
     ae8:	bf 92       	push	r11
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	2b 97       	sbiw	r28, 0x0b	; 11
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	6c 01       	movw	r12, r24
     b0c:	7b 01       	movw	r14, r22
     b0e:	8a 01       	movw	r16, r20
     b10:	fc 01       	movw	r30, r24
     b12:	17 82       	std	Z+7, r1	; 0x07
     b14:	16 82       	std	Z+6, r1	; 0x06
     b16:	83 81       	ldd	r24, Z+3	; 0x03
     b18:	81 ff       	sbrs	r24, 1
     b1a:	bf c1       	rjmp	.+894    	; 0xe9a <vfprintf+0x3c4>
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	3c 01       	movw	r6, r24
     b22:	f6 01       	movw	r30, r12
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	f7 01       	movw	r30, r14
     b28:	93 fd       	sbrc	r25, 3
     b2a:	85 91       	lpm	r24, Z+
     b2c:	93 ff       	sbrs	r25, 3
     b2e:	81 91       	ld	r24, Z+
     b30:	7f 01       	movw	r14, r30
     b32:	88 23       	and	r24, r24
     b34:	09 f4       	brne	.+2      	; 0xb38 <vfprintf+0x62>
     b36:	ad c1       	rjmp	.+858    	; 0xe92 <vfprintf+0x3bc>
     b38:	85 32       	cpi	r24, 0x25	; 37
     b3a:	39 f4       	brne	.+14     	; 0xb4a <vfprintf+0x74>
     b3c:	93 fd       	sbrc	r25, 3
     b3e:	85 91       	lpm	r24, Z+
     b40:	93 ff       	sbrs	r25, 3
     b42:	81 91       	ld	r24, Z+
     b44:	7f 01       	movw	r14, r30
     b46:	85 32       	cpi	r24, 0x25	; 37
     b48:	21 f4       	brne	.+8      	; 0xb52 <vfprintf+0x7c>
     b4a:	b6 01       	movw	r22, r12
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	d6 d1       	rcall	.+940    	; 0xefc <fputc>
     b50:	e8 cf       	rjmp	.-48     	; 0xb22 <vfprintf+0x4c>
     b52:	91 2c       	mov	r9, r1
     b54:	21 2c       	mov	r2, r1
     b56:	31 2c       	mov	r3, r1
     b58:	ff e1       	ldi	r31, 0x1F	; 31
     b5a:	f3 15       	cp	r31, r3
     b5c:	d8 f0       	brcs	.+54     	; 0xb94 <vfprintf+0xbe>
     b5e:	8b 32       	cpi	r24, 0x2B	; 43
     b60:	79 f0       	breq	.+30     	; 0xb80 <vfprintf+0xaa>
     b62:	38 f4       	brcc	.+14     	; 0xb72 <vfprintf+0x9c>
     b64:	80 32       	cpi	r24, 0x20	; 32
     b66:	79 f0       	breq	.+30     	; 0xb86 <vfprintf+0xb0>
     b68:	83 32       	cpi	r24, 0x23	; 35
     b6a:	a1 f4       	brne	.+40     	; 0xb94 <vfprintf+0xbe>
     b6c:	23 2d       	mov	r18, r3
     b6e:	20 61       	ori	r18, 0x10	; 16
     b70:	1d c0       	rjmp	.+58     	; 0xbac <vfprintf+0xd6>
     b72:	8d 32       	cpi	r24, 0x2D	; 45
     b74:	61 f0       	breq	.+24     	; 0xb8e <vfprintf+0xb8>
     b76:	80 33       	cpi	r24, 0x30	; 48
     b78:	69 f4       	brne	.+26     	; 0xb94 <vfprintf+0xbe>
     b7a:	23 2d       	mov	r18, r3
     b7c:	21 60       	ori	r18, 0x01	; 1
     b7e:	16 c0       	rjmp	.+44     	; 0xbac <vfprintf+0xd6>
     b80:	83 2d       	mov	r24, r3
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	38 2e       	mov	r3, r24
     b86:	e3 2d       	mov	r30, r3
     b88:	e4 60       	ori	r30, 0x04	; 4
     b8a:	3e 2e       	mov	r3, r30
     b8c:	2a c0       	rjmp	.+84     	; 0xbe2 <vfprintf+0x10c>
     b8e:	f3 2d       	mov	r31, r3
     b90:	f8 60       	ori	r31, 0x08	; 8
     b92:	1d c0       	rjmp	.+58     	; 0xbce <vfprintf+0xf8>
     b94:	37 fc       	sbrc	r3, 7
     b96:	2d c0       	rjmp	.+90     	; 0xbf2 <vfprintf+0x11c>
     b98:	20 ed       	ldi	r18, 0xD0	; 208
     b9a:	28 0f       	add	r18, r24
     b9c:	2a 30       	cpi	r18, 0x0A	; 10
     b9e:	40 f0       	brcs	.+16     	; 0xbb0 <vfprintf+0xda>
     ba0:	8e 32       	cpi	r24, 0x2E	; 46
     ba2:	b9 f4       	brne	.+46     	; 0xbd2 <vfprintf+0xfc>
     ba4:	36 fc       	sbrc	r3, 6
     ba6:	75 c1       	rjmp	.+746    	; 0xe92 <vfprintf+0x3bc>
     ba8:	23 2d       	mov	r18, r3
     baa:	20 64       	ori	r18, 0x40	; 64
     bac:	32 2e       	mov	r3, r18
     bae:	19 c0       	rjmp	.+50     	; 0xbe2 <vfprintf+0x10c>
     bb0:	36 fe       	sbrs	r3, 6
     bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <vfprintf+0xea>
     bb4:	8a e0       	ldi	r24, 0x0A	; 10
     bb6:	98 9e       	mul	r9, r24
     bb8:	20 0d       	add	r18, r0
     bba:	11 24       	eor	r1, r1
     bbc:	92 2e       	mov	r9, r18
     bbe:	11 c0       	rjmp	.+34     	; 0xbe2 <vfprintf+0x10c>
     bc0:	ea e0       	ldi	r30, 0x0A	; 10
     bc2:	2e 9e       	mul	r2, r30
     bc4:	20 0d       	add	r18, r0
     bc6:	11 24       	eor	r1, r1
     bc8:	22 2e       	mov	r2, r18
     bca:	f3 2d       	mov	r31, r3
     bcc:	f0 62       	ori	r31, 0x20	; 32
     bce:	3f 2e       	mov	r3, r31
     bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <vfprintf+0x10c>
     bd2:	8c 36       	cpi	r24, 0x6C	; 108
     bd4:	21 f4       	brne	.+8      	; 0xbde <vfprintf+0x108>
     bd6:	83 2d       	mov	r24, r3
     bd8:	80 68       	ori	r24, 0x80	; 128
     bda:	38 2e       	mov	r3, r24
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <vfprintf+0x10c>
     bde:	88 36       	cpi	r24, 0x68	; 104
     be0:	41 f4       	brne	.+16     	; 0xbf2 <vfprintf+0x11c>
     be2:	f7 01       	movw	r30, r14
     be4:	93 fd       	sbrc	r25, 3
     be6:	85 91       	lpm	r24, Z+
     be8:	93 ff       	sbrs	r25, 3
     bea:	81 91       	ld	r24, Z+
     bec:	7f 01       	movw	r14, r30
     bee:	81 11       	cpse	r24, r1
     bf0:	b3 cf       	rjmp	.-154    	; 0xb58 <vfprintf+0x82>
     bf2:	98 2f       	mov	r25, r24
     bf4:	9f 7d       	andi	r25, 0xDF	; 223
     bf6:	95 54       	subi	r25, 0x45	; 69
     bf8:	93 30       	cpi	r25, 0x03	; 3
     bfa:	28 f4       	brcc	.+10     	; 0xc06 <vfprintf+0x130>
     bfc:	0c 5f       	subi	r16, 0xFC	; 252
     bfe:	1f 4f       	sbci	r17, 0xFF	; 255
     c00:	9f e3       	ldi	r25, 0x3F	; 63
     c02:	99 83       	std	Y+1, r25	; 0x01
     c04:	0d c0       	rjmp	.+26     	; 0xc20 <vfprintf+0x14a>
     c06:	83 36       	cpi	r24, 0x63	; 99
     c08:	31 f0       	breq	.+12     	; 0xc16 <vfprintf+0x140>
     c0a:	83 37       	cpi	r24, 0x73	; 115
     c0c:	71 f0       	breq	.+28     	; 0xc2a <vfprintf+0x154>
     c0e:	83 35       	cpi	r24, 0x53	; 83
     c10:	09 f0       	breq	.+2      	; 0xc14 <vfprintf+0x13e>
     c12:	55 c0       	rjmp	.+170    	; 0xcbe <vfprintf+0x1e8>
     c14:	20 c0       	rjmp	.+64     	; 0xc56 <vfprintf+0x180>
     c16:	f8 01       	movw	r30, r16
     c18:	80 81       	ld	r24, Z
     c1a:	89 83       	std	Y+1, r24	; 0x01
     c1c:	0e 5f       	subi	r16, 0xFE	; 254
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	88 24       	eor	r8, r8
     c22:	83 94       	inc	r8
     c24:	91 2c       	mov	r9, r1
     c26:	53 01       	movw	r10, r6
     c28:	12 c0       	rjmp	.+36     	; 0xc4e <vfprintf+0x178>
     c2a:	28 01       	movw	r4, r16
     c2c:	f2 e0       	ldi	r31, 0x02	; 2
     c2e:	4f 0e       	add	r4, r31
     c30:	51 1c       	adc	r5, r1
     c32:	f8 01       	movw	r30, r16
     c34:	a0 80       	ld	r10, Z
     c36:	b1 80       	ldd	r11, Z+1	; 0x01
     c38:	36 fe       	sbrs	r3, 6
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <vfprintf+0x16c>
     c3c:	69 2d       	mov	r22, r9
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <vfprintf+0x170>
     c42:	6f ef       	ldi	r22, 0xFF	; 255
     c44:	7f ef       	ldi	r23, 0xFF	; 255
     c46:	c5 01       	movw	r24, r10
     c48:	4e d1       	rcall	.+668    	; 0xee6 <strnlen>
     c4a:	4c 01       	movw	r8, r24
     c4c:	82 01       	movw	r16, r4
     c4e:	f3 2d       	mov	r31, r3
     c50:	ff 77       	andi	r31, 0x7F	; 127
     c52:	3f 2e       	mov	r3, r31
     c54:	15 c0       	rjmp	.+42     	; 0xc80 <vfprintf+0x1aa>
     c56:	28 01       	movw	r4, r16
     c58:	22 e0       	ldi	r18, 0x02	; 2
     c5a:	42 0e       	add	r4, r18
     c5c:	51 1c       	adc	r5, r1
     c5e:	f8 01       	movw	r30, r16
     c60:	a0 80       	ld	r10, Z
     c62:	b1 80       	ldd	r11, Z+1	; 0x01
     c64:	36 fe       	sbrs	r3, 6
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <vfprintf+0x198>
     c68:	69 2d       	mov	r22, r9
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <vfprintf+0x19c>
     c6e:	6f ef       	ldi	r22, 0xFF	; 255
     c70:	7f ef       	ldi	r23, 0xFF	; 255
     c72:	c5 01       	movw	r24, r10
     c74:	2d d1       	rcall	.+602    	; 0xed0 <strnlen_P>
     c76:	4c 01       	movw	r8, r24
     c78:	f3 2d       	mov	r31, r3
     c7a:	f0 68       	ori	r31, 0x80	; 128
     c7c:	3f 2e       	mov	r3, r31
     c7e:	82 01       	movw	r16, r4
     c80:	33 fc       	sbrc	r3, 3
     c82:	19 c0       	rjmp	.+50     	; 0xcb6 <vfprintf+0x1e0>
     c84:	82 2d       	mov	r24, r2
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	88 16       	cp	r8, r24
     c8a:	99 06       	cpc	r9, r25
     c8c:	a0 f4       	brcc	.+40     	; 0xcb6 <vfprintf+0x1e0>
     c8e:	b6 01       	movw	r22, r12
     c90:	80 e2       	ldi	r24, 0x20	; 32
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	33 d1       	rcall	.+614    	; 0xefc <fputc>
     c96:	2a 94       	dec	r2
     c98:	f5 cf       	rjmp	.-22     	; 0xc84 <vfprintf+0x1ae>
     c9a:	f5 01       	movw	r30, r10
     c9c:	37 fc       	sbrc	r3, 7
     c9e:	85 91       	lpm	r24, Z+
     ca0:	37 fe       	sbrs	r3, 7
     ca2:	81 91       	ld	r24, Z+
     ca4:	5f 01       	movw	r10, r30
     ca6:	b6 01       	movw	r22, r12
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	28 d1       	rcall	.+592    	; 0xefc <fputc>
     cac:	21 10       	cpse	r2, r1
     cae:	2a 94       	dec	r2
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	82 1a       	sub	r8, r18
     cb4:	91 08       	sbc	r9, r1
     cb6:	81 14       	cp	r8, r1
     cb8:	91 04       	cpc	r9, r1
     cba:	79 f7       	brne	.-34     	; 0xc9a <vfprintf+0x1c4>
     cbc:	e1 c0       	rjmp	.+450    	; 0xe80 <vfprintf+0x3aa>
     cbe:	84 36       	cpi	r24, 0x64	; 100
     cc0:	11 f0       	breq	.+4      	; 0xcc6 <vfprintf+0x1f0>
     cc2:	89 36       	cpi	r24, 0x69	; 105
     cc4:	39 f5       	brne	.+78     	; 0xd14 <vfprintf+0x23e>
     cc6:	f8 01       	movw	r30, r16
     cc8:	37 fe       	sbrs	r3, 7
     cca:	07 c0       	rjmp	.+14     	; 0xcda <vfprintf+0x204>
     ccc:	60 81       	ld	r22, Z
     cce:	71 81       	ldd	r23, Z+1	; 0x01
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	93 81       	ldd	r25, Z+3	; 0x03
     cd4:	0c 5f       	subi	r16, 0xFC	; 252
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	08 c0       	rjmp	.+16     	; 0xcea <vfprintf+0x214>
     cda:	60 81       	ld	r22, Z
     cdc:	71 81       	ldd	r23, Z+1	; 0x01
     cde:	07 2e       	mov	r0, r23
     ce0:	00 0c       	add	r0, r0
     ce2:	88 0b       	sbc	r24, r24
     ce4:	99 0b       	sbc	r25, r25
     ce6:	0e 5f       	subi	r16, 0xFE	; 254
     ce8:	1f 4f       	sbci	r17, 0xFF	; 255
     cea:	f3 2d       	mov	r31, r3
     cec:	ff 76       	andi	r31, 0x6F	; 111
     cee:	3f 2e       	mov	r3, r31
     cf0:	97 ff       	sbrs	r25, 7
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <vfprintf+0x230>
     cf4:	90 95       	com	r25
     cf6:	80 95       	com	r24
     cf8:	70 95       	com	r23
     cfa:	61 95       	neg	r22
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	8f 4f       	sbci	r24, 0xFF	; 255
     d00:	9f 4f       	sbci	r25, 0xFF	; 255
     d02:	f0 68       	ori	r31, 0x80	; 128
     d04:	3f 2e       	mov	r3, r31
     d06:	2a e0       	ldi	r18, 0x0A	; 10
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	a3 01       	movw	r20, r6
     d0c:	33 d1       	rcall	.+614    	; 0xf74 <__ultoa_invert>
     d0e:	88 2e       	mov	r8, r24
     d10:	86 18       	sub	r8, r6
     d12:	44 c0       	rjmp	.+136    	; 0xd9c <vfprintf+0x2c6>
     d14:	85 37       	cpi	r24, 0x75	; 117
     d16:	31 f4       	brne	.+12     	; 0xd24 <vfprintf+0x24e>
     d18:	23 2d       	mov	r18, r3
     d1a:	2f 7e       	andi	r18, 0xEF	; 239
     d1c:	b2 2e       	mov	r11, r18
     d1e:	2a e0       	ldi	r18, 0x0A	; 10
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	25 c0       	rjmp	.+74     	; 0xd6e <vfprintf+0x298>
     d24:	93 2d       	mov	r25, r3
     d26:	99 7f       	andi	r25, 0xF9	; 249
     d28:	b9 2e       	mov	r11, r25
     d2a:	8f 36       	cpi	r24, 0x6F	; 111
     d2c:	c1 f0       	breq	.+48     	; 0xd5e <vfprintf+0x288>
     d2e:	18 f4       	brcc	.+6      	; 0xd36 <vfprintf+0x260>
     d30:	88 35       	cpi	r24, 0x58	; 88
     d32:	79 f0       	breq	.+30     	; 0xd52 <vfprintf+0x27c>
     d34:	ae c0       	rjmp	.+348    	; 0xe92 <vfprintf+0x3bc>
     d36:	80 37       	cpi	r24, 0x70	; 112
     d38:	19 f0       	breq	.+6      	; 0xd40 <vfprintf+0x26a>
     d3a:	88 37       	cpi	r24, 0x78	; 120
     d3c:	21 f0       	breq	.+8      	; 0xd46 <vfprintf+0x270>
     d3e:	a9 c0       	rjmp	.+338    	; 0xe92 <vfprintf+0x3bc>
     d40:	e9 2f       	mov	r30, r25
     d42:	e0 61       	ori	r30, 0x10	; 16
     d44:	be 2e       	mov	r11, r30
     d46:	b4 fe       	sbrs	r11, 4
     d48:	0d c0       	rjmp	.+26     	; 0xd64 <vfprintf+0x28e>
     d4a:	fb 2d       	mov	r31, r11
     d4c:	f4 60       	ori	r31, 0x04	; 4
     d4e:	bf 2e       	mov	r11, r31
     d50:	09 c0       	rjmp	.+18     	; 0xd64 <vfprintf+0x28e>
     d52:	34 fe       	sbrs	r3, 4
     d54:	0a c0       	rjmp	.+20     	; 0xd6a <vfprintf+0x294>
     d56:	29 2f       	mov	r18, r25
     d58:	26 60       	ori	r18, 0x06	; 6
     d5a:	b2 2e       	mov	r11, r18
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <vfprintf+0x294>
     d5e:	28 e0       	ldi	r18, 0x08	; 8
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <vfprintf+0x298>
     d64:	20 e1       	ldi	r18, 0x10	; 16
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x298>
     d6a:	20 e1       	ldi	r18, 0x10	; 16
     d6c:	32 e0       	ldi	r19, 0x02	; 2
     d6e:	f8 01       	movw	r30, r16
     d70:	b7 fe       	sbrs	r11, 7
     d72:	07 c0       	rjmp	.+14     	; 0xd82 <vfprintf+0x2ac>
     d74:	60 81       	ld	r22, Z
     d76:	71 81       	ldd	r23, Z+1	; 0x01
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	0c 5f       	subi	r16, 0xFC	; 252
     d7e:	1f 4f       	sbci	r17, 0xFF	; 255
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <vfprintf+0x2b8>
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 5f       	subi	r16, 0xFE	; 254
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	a3 01       	movw	r20, r6
     d90:	f1 d0       	rcall	.+482    	; 0xf74 <__ultoa_invert>
     d92:	88 2e       	mov	r8, r24
     d94:	86 18       	sub	r8, r6
     d96:	fb 2d       	mov	r31, r11
     d98:	ff 77       	andi	r31, 0x7F	; 127
     d9a:	3f 2e       	mov	r3, r31
     d9c:	36 fe       	sbrs	r3, 6
     d9e:	0d c0       	rjmp	.+26     	; 0xdba <vfprintf+0x2e4>
     da0:	23 2d       	mov	r18, r3
     da2:	2e 7f       	andi	r18, 0xFE	; 254
     da4:	a2 2e       	mov	r10, r18
     da6:	89 14       	cp	r8, r9
     da8:	58 f4       	brcc	.+22     	; 0xdc0 <vfprintf+0x2ea>
     daa:	34 fe       	sbrs	r3, 4
     dac:	0b c0       	rjmp	.+22     	; 0xdc4 <vfprintf+0x2ee>
     dae:	32 fc       	sbrc	r3, 2
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <vfprintf+0x2ee>
     db2:	83 2d       	mov	r24, r3
     db4:	8e 7e       	andi	r24, 0xEE	; 238
     db6:	a8 2e       	mov	r10, r24
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <vfprintf+0x2ee>
     dba:	b8 2c       	mov	r11, r8
     dbc:	a3 2c       	mov	r10, r3
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <vfprintf+0x2f0>
     dc0:	b8 2c       	mov	r11, r8
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <vfprintf+0x2f0>
     dc4:	b9 2c       	mov	r11, r9
     dc6:	a4 fe       	sbrs	r10, 4
     dc8:	0f c0       	rjmp	.+30     	; 0xde8 <vfprintf+0x312>
     dca:	fe 01       	movw	r30, r28
     dcc:	e8 0d       	add	r30, r8
     dce:	f1 1d       	adc	r31, r1
     dd0:	80 81       	ld	r24, Z
     dd2:	80 33       	cpi	r24, 0x30	; 48
     dd4:	21 f4       	brne	.+8      	; 0xdde <vfprintf+0x308>
     dd6:	9a 2d       	mov	r25, r10
     dd8:	99 7e       	andi	r25, 0xE9	; 233
     dda:	a9 2e       	mov	r10, r25
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <vfprintf+0x31a>
     dde:	a2 fe       	sbrs	r10, 2
     de0:	06 c0       	rjmp	.+12     	; 0xdee <vfprintf+0x318>
     de2:	b3 94       	inc	r11
     de4:	b3 94       	inc	r11
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <vfprintf+0x31a>
     de8:	8a 2d       	mov	r24, r10
     dea:	86 78       	andi	r24, 0x86	; 134
     dec:	09 f0       	breq	.+2      	; 0xdf0 <vfprintf+0x31a>
     dee:	b3 94       	inc	r11
     df0:	a3 fc       	sbrc	r10, 3
     df2:	10 c0       	rjmp	.+32     	; 0xe14 <vfprintf+0x33e>
     df4:	a0 fe       	sbrs	r10, 0
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0x32e>
     df8:	b2 14       	cp	r11, r2
     dfa:	80 f4       	brcc	.+32     	; 0xe1c <vfprintf+0x346>
     dfc:	28 0c       	add	r2, r8
     dfe:	92 2c       	mov	r9, r2
     e00:	9b 18       	sub	r9, r11
     e02:	0d c0       	rjmp	.+26     	; 0xe1e <vfprintf+0x348>
     e04:	b2 14       	cp	r11, r2
     e06:	58 f4       	brcc	.+22     	; 0xe1e <vfprintf+0x348>
     e08:	b6 01       	movw	r22, r12
     e0a:	80 e2       	ldi	r24, 0x20	; 32
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	76 d0       	rcall	.+236    	; 0xefc <fputc>
     e10:	b3 94       	inc	r11
     e12:	f8 cf       	rjmp	.-16     	; 0xe04 <vfprintf+0x32e>
     e14:	b2 14       	cp	r11, r2
     e16:	18 f4       	brcc	.+6      	; 0xe1e <vfprintf+0x348>
     e18:	2b 18       	sub	r2, r11
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <vfprintf+0x34a>
     e1c:	98 2c       	mov	r9, r8
     e1e:	21 2c       	mov	r2, r1
     e20:	a4 fe       	sbrs	r10, 4
     e22:	0f c0       	rjmp	.+30     	; 0xe42 <vfprintf+0x36c>
     e24:	b6 01       	movw	r22, r12
     e26:	80 e3       	ldi	r24, 0x30	; 48
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	68 d0       	rcall	.+208    	; 0xefc <fputc>
     e2c:	a2 fe       	sbrs	r10, 2
     e2e:	16 c0       	rjmp	.+44     	; 0xe5c <vfprintf+0x386>
     e30:	a1 fc       	sbrc	r10, 1
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <vfprintf+0x364>
     e34:	88 e7       	ldi	r24, 0x78	; 120
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <vfprintf+0x368>
     e3a:	88 e5       	ldi	r24, 0x58	; 88
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	b6 01       	movw	r22, r12
     e40:	0c c0       	rjmp	.+24     	; 0xe5a <vfprintf+0x384>
     e42:	8a 2d       	mov	r24, r10
     e44:	86 78       	andi	r24, 0x86	; 134
     e46:	51 f0       	breq	.+20     	; 0xe5c <vfprintf+0x386>
     e48:	a1 fe       	sbrs	r10, 1
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x37a>
     e4c:	8b e2       	ldi	r24, 0x2B	; 43
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <vfprintf+0x37c>
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	a7 fc       	sbrc	r10, 7
     e54:	8d e2       	ldi	r24, 0x2D	; 45
     e56:	b6 01       	movw	r22, r12
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	50 d0       	rcall	.+160    	; 0xefc <fputc>
     e5c:	89 14       	cp	r8, r9
     e5e:	30 f4       	brcc	.+12     	; 0xe6c <vfprintf+0x396>
     e60:	b6 01       	movw	r22, r12
     e62:	80 e3       	ldi	r24, 0x30	; 48
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	4a d0       	rcall	.+148    	; 0xefc <fputc>
     e68:	9a 94       	dec	r9
     e6a:	f8 cf       	rjmp	.-16     	; 0xe5c <vfprintf+0x386>
     e6c:	8a 94       	dec	r8
     e6e:	f3 01       	movw	r30, r6
     e70:	e8 0d       	add	r30, r8
     e72:	f1 1d       	adc	r31, r1
     e74:	80 81       	ld	r24, Z
     e76:	b6 01       	movw	r22, r12
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	40 d0       	rcall	.+128    	; 0xefc <fputc>
     e7c:	81 10       	cpse	r8, r1
     e7e:	f6 cf       	rjmp	.-20     	; 0xe6c <vfprintf+0x396>
     e80:	22 20       	and	r2, r2
     e82:	09 f4       	brne	.+2      	; 0xe86 <vfprintf+0x3b0>
     e84:	4e ce       	rjmp	.-868    	; 0xb22 <vfprintf+0x4c>
     e86:	b6 01       	movw	r22, r12
     e88:	80 e2       	ldi	r24, 0x20	; 32
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	37 d0       	rcall	.+110    	; 0xefc <fputc>
     e8e:	2a 94       	dec	r2
     e90:	f7 cf       	rjmp	.-18     	; 0xe80 <vfprintf+0x3aa>
     e92:	f6 01       	movw	r30, r12
     e94:	86 81       	ldd	r24, Z+6	; 0x06
     e96:	97 81       	ldd	r25, Z+7	; 0x07
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <vfprintf+0x3c8>
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	9f ef       	ldi	r25, 0xFF	; 255
     e9e:	2b 96       	adiw	r28, 0x0b	; 11
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	9f 90       	pop	r9
     ec0:	8f 90       	pop	r8
     ec2:	7f 90       	pop	r7
     ec4:	6f 90       	pop	r6
     ec6:	5f 90       	pop	r5
     ec8:	4f 90       	pop	r4
     eca:	3f 90       	pop	r3
     ecc:	2f 90       	pop	r2
     ece:	08 95       	ret

00000ed0 <strnlen_P>:
     ed0:	fc 01       	movw	r30, r24
     ed2:	05 90       	lpm	r0, Z+
     ed4:	61 50       	subi	r22, 0x01	; 1
     ed6:	70 40       	sbci	r23, 0x00	; 0
     ed8:	01 10       	cpse	r0, r1
     eda:	d8 f7       	brcc	.-10     	; 0xed2 <strnlen_P+0x2>
     edc:	80 95       	com	r24
     ede:	90 95       	com	r25
     ee0:	8e 0f       	add	r24, r30
     ee2:	9f 1f       	adc	r25, r31
     ee4:	08 95       	ret

00000ee6 <strnlen>:
     ee6:	fc 01       	movw	r30, r24
     ee8:	61 50       	subi	r22, 0x01	; 1
     eea:	70 40       	sbci	r23, 0x00	; 0
     eec:	01 90       	ld	r0, Z+
     eee:	01 10       	cpse	r0, r1
     ef0:	d8 f7       	brcc	.-10     	; 0xee8 <strnlen+0x2>
     ef2:	80 95       	com	r24
     ef4:	90 95       	com	r25
     ef6:	8e 0f       	add	r24, r30
     ef8:	9f 1f       	adc	r25, r31
     efa:	08 95       	ret

00000efc <fputc>:
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	fb 01       	movw	r30, r22
     f06:	23 81       	ldd	r18, Z+3	; 0x03
     f08:	21 fd       	sbrc	r18, 1
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <fputc+0x16>
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
     f0e:	9f ef       	ldi	r25, 0xFF	; 255
     f10:	2c c0       	rjmp	.+88     	; 0xf6a <fputc+0x6e>
     f12:	22 ff       	sbrs	r18, 2
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <fputc+0x46>
     f16:	46 81       	ldd	r20, Z+6	; 0x06
     f18:	57 81       	ldd	r21, Z+7	; 0x07
     f1a:	24 81       	ldd	r18, Z+4	; 0x04
     f1c:	35 81       	ldd	r19, Z+5	; 0x05
     f1e:	42 17       	cp	r20, r18
     f20:	53 07       	cpc	r21, r19
     f22:	44 f4       	brge	.+16     	; 0xf34 <fputc+0x38>
     f24:	a0 81       	ld	r26, Z
     f26:	b1 81       	ldd	r27, Z+1	; 0x01
     f28:	9d 01       	movw	r18, r26
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	31 83       	std	Z+1, r19	; 0x01
     f30:	20 83       	st	Z, r18
     f32:	8c 93       	st	X, r24
     f34:	26 81       	ldd	r18, Z+6	; 0x06
     f36:	37 81       	ldd	r19, Z+7	; 0x07
     f38:	2f 5f       	subi	r18, 0xFF	; 255
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	37 83       	std	Z+7, r19	; 0x07
     f3e:	26 83       	std	Z+6, r18	; 0x06
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <fputc+0x6e>
     f42:	8b 01       	movw	r16, r22
     f44:	ec 01       	movw	r28, r24
     f46:	fb 01       	movw	r30, r22
     f48:	00 84       	ldd	r0, Z+8	; 0x08
     f4a:	f1 85       	ldd	r31, Z+9	; 0x09
     f4c:	e0 2d       	mov	r30, r0
     f4e:	19 95       	eicall
     f50:	89 2b       	or	r24, r25
     f52:	e1 f6       	brne	.-72     	; 0xf0c <fputc+0x10>
     f54:	d8 01       	movw	r26, r16
     f56:	16 96       	adiw	r26, 0x06	; 6
     f58:	8d 91       	ld	r24, X+
     f5a:	9c 91       	ld	r25, X
     f5c:	17 97       	sbiw	r26, 0x07	; 7
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	17 96       	adiw	r26, 0x07	; 7
     f62:	9c 93       	st	X, r25
     f64:	8e 93       	st	-X, r24
     f66:	16 97       	sbiw	r26, 0x06	; 6
     f68:	ce 01       	movw	r24, r28
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	08 95       	ret

00000f74 <__ultoa_invert>:
     f74:	fa 01       	movw	r30, r20
     f76:	aa 27       	eor	r26, r26
     f78:	28 30       	cpi	r18, 0x08	; 8
     f7a:	51 f1       	breq	.+84     	; 0xfd0 <__ultoa_invert+0x5c>
     f7c:	20 31       	cpi	r18, 0x10	; 16
     f7e:	81 f1       	breq	.+96     	; 0xfe0 <__ultoa_invert+0x6c>
     f80:	e8 94       	clt
     f82:	6f 93       	push	r22
     f84:	6e 7f       	andi	r22, 0xFE	; 254
     f86:	6e 5f       	subi	r22, 0xFE	; 254
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	8f 4f       	sbci	r24, 0xFF	; 255
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	af 4f       	sbci	r26, 0xFF	; 255
     f90:	b1 e0       	ldi	r27, 0x01	; 1
     f92:	3e d0       	rcall	.+124    	; 0x1010 <__ultoa_invert+0x9c>
     f94:	b4 e0       	ldi	r27, 0x04	; 4
     f96:	3c d0       	rcall	.+120    	; 0x1010 <__ultoa_invert+0x9c>
     f98:	67 0f       	add	r22, r23
     f9a:	78 1f       	adc	r23, r24
     f9c:	89 1f       	adc	r24, r25
     f9e:	9a 1f       	adc	r25, r26
     fa0:	a1 1d       	adc	r26, r1
     fa2:	68 0f       	add	r22, r24
     fa4:	79 1f       	adc	r23, r25
     fa6:	8a 1f       	adc	r24, r26
     fa8:	91 1d       	adc	r25, r1
     faa:	a1 1d       	adc	r26, r1
     fac:	6a 0f       	add	r22, r26
     fae:	71 1d       	adc	r23, r1
     fb0:	81 1d       	adc	r24, r1
     fb2:	91 1d       	adc	r25, r1
     fb4:	a1 1d       	adc	r26, r1
     fb6:	20 d0       	rcall	.+64     	; 0xff8 <__ultoa_invert+0x84>
     fb8:	09 f4       	brne	.+2      	; 0xfbc <__ultoa_invert+0x48>
     fba:	68 94       	set
     fbc:	3f 91       	pop	r19
     fbe:	2a e0       	ldi	r18, 0x0A	; 10
     fc0:	26 9f       	mul	r18, r22
     fc2:	11 24       	eor	r1, r1
     fc4:	30 19       	sub	r19, r0
     fc6:	30 5d       	subi	r19, 0xD0	; 208
     fc8:	31 93       	st	Z+, r19
     fca:	de f6       	brtc	.-74     	; 0xf82 <__ultoa_invert+0xe>
     fcc:	cf 01       	movw	r24, r30
     fce:	08 95       	ret
     fd0:	46 2f       	mov	r20, r22
     fd2:	47 70       	andi	r20, 0x07	; 7
     fd4:	40 5d       	subi	r20, 0xD0	; 208
     fd6:	41 93       	st	Z+, r20
     fd8:	b3 e0       	ldi	r27, 0x03	; 3
     fda:	0f d0       	rcall	.+30     	; 0xffa <__ultoa_invert+0x86>
     fdc:	c9 f7       	brne	.-14     	; 0xfd0 <__ultoa_invert+0x5c>
     fde:	f6 cf       	rjmp	.-20     	; 0xfcc <__ultoa_invert+0x58>
     fe0:	46 2f       	mov	r20, r22
     fe2:	4f 70       	andi	r20, 0x0F	; 15
     fe4:	40 5d       	subi	r20, 0xD0	; 208
     fe6:	4a 33       	cpi	r20, 0x3A	; 58
     fe8:	18 f0       	brcs	.+6      	; 0xff0 <__ultoa_invert+0x7c>
     fea:	49 5d       	subi	r20, 0xD9	; 217
     fec:	31 fd       	sbrc	r19, 1
     fee:	40 52       	subi	r20, 0x20	; 32
     ff0:	41 93       	st	Z+, r20
     ff2:	02 d0       	rcall	.+4      	; 0xff8 <__ultoa_invert+0x84>
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <__ultoa_invert+0x6c>
     ff6:	ea cf       	rjmp	.-44     	; 0xfcc <__ultoa_invert+0x58>
     ff8:	b4 e0       	ldi	r27, 0x04	; 4
     ffa:	a6 95       	lsr	r26
     ffc:	97 95       	ror	r25
     ffe:	87 95       	ror	r24
    1000:	77 95       	ror	r23
    1002:	67 95       	ror	r22
    1004:	ba 95       	dec	r27
    1006:	c9 f7       	brne	.-14     	; 0xffa <__ultoa_invert+0x86>
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	61 05       	cpc	r22, r1
    100c:	71 05       	cpc	r23, r1
    100e:	08 95       	ret
    1010:	9b 01       	movw	r18, r22
    1012:	ac 01       	movw	r20, r24
    1014:	0a 2e       	mov	r0, r26
    1016:	06 94       	lsr	r0
    1018:	57 95       	ror	r21
    101a:	47 95       	ror	r20
    101c:	37 95       	ror	r19
    101e:	27 95       	ror	r18
    1020:	ba 95       	dec	r27
    1022:	c9 f7       	brne	.-14     	; 0x1016 <__ultoa_invert+0xa2>
    1024:	62 0f       	add	r22, r18
    1026:	73 1f       	adc	r23, r19
    1028:	84 1f       	adc	r24, r20
    102a:	95 1f       	adc	r25, r21
    102c:	a0 1d       	adc	r26, r0
    102e:	08 95       	ret

00001030 <_exit>:
    1030:	f8 94       	cli

00001032 <__stop_program>:
    1032:	ff cf       	rjmp	.-2      	; 0x1032 <__stop_program>
