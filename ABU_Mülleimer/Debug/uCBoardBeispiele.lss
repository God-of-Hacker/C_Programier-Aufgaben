
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800200  0000314c  000031e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000314c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  008002c2  008002c2  000032a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002503  00000000  00000000  00003528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eea  00000000  00000000  00005a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d7c  00000000  00000000  00006915  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e0  00000000  00000000  00008694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d7b  00000000  00000000  00008f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001397  00000000  00000000  00009cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000b086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__vector_23>
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e4       	ldi	r30, 0x4C	; 76
      fc:	f1 e3       	ldi	r31, 0x31	; 49
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 3c       	cpi	r26, 0xC2	; 194
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a2 ec       	ldi	r26, 0xC2	; 194
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 38       	cpi	r26, 0x8A	; 138
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	03 d0       	rcall	.+6      	; 0x126 <main>
     120:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <main>:
#define SYSTEMTACKT_MS                     10

typedef enum Zustand_t {TONNE_ZU, TONNE_AUF, PET, ALU, MUELL_ANALYSIEREN, MUELL} zustand_t;
//Hauptprogramm
int main(void)
{
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
     132:	c4 5a       	subi	r28, 0xA4	; 164
     134:	d1 09       	sbc	r29, r1
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	cd bf       	out	0x3d, r28	; 61
    //Variablen
    uint8_t inTaster=0;
     140:	19 82       	std	Y+1, r1	; 0x01
    uint8_t inTasterAlt=0;
     142:	1d 86       	std	Y+13, r1	; 0x0d
    uint8_t posFlanken=0;
     144:	1e 86       	std	Y+14, r1	; 0x0e
    
    uint16_t schalter_infrarot =0;
     146:	18 8a       	std	Y+16, r1	; 0x10
     148:	1f 86       	std	Y+15, r1	; 0x0f
    uint16_t schalter_ton =0;
     14a:	1a 8a       	std	Y+18, r1	; 0x12
     14c:	19 8a       	std	Y+17, r1	; 0x11
    uint16_t schalter_leitfaehigkeit =0;
     14e:	1c 8a       	std	Y+20, r1	; 0x14
     150:	1b 8a       	std	Y+19, r1	; 0x13
    uint16_t taster_Abfall =0;
     152:	1e 8a       	std	Y+22, r1	; 0x16
     154:	1d 8a       	std	Y+21, r1	; 0x15
    uint16_t taster_Abfall_drinnen =0;
     156:	18 8e       	std	Y+24, r1	; 0x18
     158:	1f 8a       	std	Y+23, r1	; 0x17
    

    uint16_t led_Tonne_auf =0;
     15a:	1b 82       	std	Y+3, r1	; 0x03
     15c:	1a 82       	std	Y+2, r1	; 0x02
    uint16_t led_Tonne_zu =0;
     15e:	1d 82       	std	Y+5, r1	; 0x05
     160:	1c 82       	std	Y+4, r1	; 0x04
    uint16_t rot = 0;
     162:	1f 82       	std	Y+7, r1	; 0x07
     164:	1e 82       	std	Y+6, r1	; 0x06
    uint16_t blau = 0;
     166:	19 86       	std	Y+9, r1	; 0x09
     168:	18 86       	std	Y+8, r1	; 0x08
    uint16_t gruen = 0;
     16a:	1b 86       	std	Y+11, r1	; 0x0b
     16c:	1a 86       	std	Y+10, r1	; 0x0a
    
    zustand_t state = TONNE_AUF;
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	8c 87       	std	Y+12, r24	; 0x0c
    
    
    
    //Initialisieren
    initBoard(1);
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	0e 94 22 09 	call	0x1244	; 0x1244 <initBoard>
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        inTasterAlt = inTaster;                                                                                 //Alter Buttonzustand
     178:	89 81       	ldd	r24, Y+1	; 0x01
     17a:	8d 87       	std	Y+13, r24	; 0x0d
        inTaster = buttonReadAllPL();                                                                           //Neuer Buttonzustand
     17c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <buttonReadAllPL>
     180:	89 83       	std	Y+1, r24	; 0x01
        posFlanken = (inTaster ^ inTasterAlt) & inTaster;
     182:	8d 85       	ldd	r24, Y+13	; 0x0d
     184:	98 2f       	mov	r25, r24
     186:	90 95       	com	r25
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	89 23       	and	r24, r25
     18c:	8e 87       	std	Y+14, r24	; 0x0e
        taster_Abfall = posFlanken & TASTER_ABFALL;
     18e:	8e 85       	ldd	r24, Y+14	; 0x0e
     190:	88 2f       	mov	r24, r24
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	81 70       	andi	r24, 0x01	; 1
     196:	99 27       	eor	r25, r25
     198:	9e 8b       	std	Y+22, r25	; 0x16
     19a:	8d 8b       	std	Y+21, r24	; 0x15
        taster_Abfall_drinnen = posFlanken & TASTER_ABFALL_DRINNEN;
     19c:	8e 85       	ldd	r24, Y+14	; 0x0e
     19e:	88 2f       	mov	r24, r24
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	82 70       	andi	r24, 0x02	; 2
     1a4:	99 27       	eor	r25, r25
     1a6:	98 8f       	std	Y+24, r25	; 0x18
     1a8:	8f 8b       	std	Y+23, r24	; 0x17
        schalter_infrarot = switchReadAll() & SCHALTER_INFRAROT;
     1aa:	0e 94 21 0b 	call	0x1642	; 0x1642 <switchReadAll>
     1ae:	88 2f       	mov	r24, r24
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	81 70       	andi	r24, 0x01	; 1
     1b4:	99 27       	eor	r25, r25
     1b6:	98 8b       	std	Y+16, r25	; 0x10
     1b8:	8f 87       	std	Y+15, r24	; 0x0f
        schalter_leitfaehigkeit = switchReadAll() & SCHALTER_LEITFEAHIGKEIT;
     1ba:	0e 94 21 0b 	call	0x1642	; 0x1642 <switchReadAll>
     1be:	88 2f       	mov	r24, r24
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	84 70       	andi	r24, 0x04	; 4
     1c4:	99 27       	eor	r25, r25
     1c6:	9c 8b       	std	Y+20, r25	; 0x14
     1c8:	8b 8b       	std	Y+19, r24	; 0x13
        schalter_ton = switchReadAll() & SCHALTER_TON;
     1ca:	0e 94 21 0b 	call	0x1642	; 0x1642 <switchReadAll>
     1ce:	88 2f       	mov	r24, r24
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	82 70       	andi	r24, 0x02	; 2
     1d4:	99 27       	eor	r25, r25
     1d6:	9a 8b       	std	Y+18, r25	; 0x12
     1d8:	89 8b       	std	Y+17, r24	; 0x11
        //Verarbeitung-------------------------------------------------------------
        switch (state)
     1da:	8c 85       	ldd	r24, Y+12	; 0x0c
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	82 30       	cpi	r24, 0x02	; 2
     1e2:	91 05       	cpc	r25, r1
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <main+0xc2>
     1e6:	9f c5       	rjmp	.+2878   	; 0xd26 <__LOCK_REGION_LENGTH__+0x926>
     1e8:	83 30       	cpi	r24, 0x03	; 3
     1ea:	91 05       	cpc	r25, r1
     1ec:	2c f4       	brge	.+10     	; 0x1f8 <main+0xd2>
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	49 f1       	breq	.+82     	; 0x244 <main+0x11e>
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	49 f0       	breq	.+18     	; 0x208 <main+0xe2>
     1f6:	5d c7       	rjmp	.+3770   	; 0x10b2 <__LOCK_REGION_LENGTH__+0xcb2>
     1f8:	83 30       	cpi	r24, 0x03	; 3
     1fa:	91 05       	cpc	r25, r1
     1fc:	09 f4       	brne	.+2      	; 0x200 <main+0xda>
     1fe:	74 c6       	rjmp	.+3304   	; 0xee8 <__LOCK_REGION_LENGTH__+0xae8>
     200:	04 97       	sbiw	r24, 0x04	; 4
     202:	09 f4       	brne	.+2      	; 0x206 <main+0xe0>
     204:	b6 c1       	rjmp	.+876    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     206:	55 c7       	rjmp	.+3754   	; 0x10b2 <__LOCK_REGION_LENGTH__+0xcb2>
        {
            case TONNE_AUF:
            led_Tonne_auf = TONNE_AUF;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	9b 83       	std	Y+3, r25	; 0x03
     20e:	8a 83       	std	Y+2, r24	; 0x02
            led_Tonne_zu = 0;
     210:	1d 82       	std	Y+5, r1	; 0x05
     212:	1c 82       	std	Y+4, r1	; 0x04
            rot = 0;
     214:	1f 82       	std	Y+7, r1	; 0x07
     216:	1e 82       	std	Y+6, r1	; 0x06
            gruen = 0;
     218:	1b 86       	std	Y+11, r1	; 0x0b
     21a:	1a 86       	std	Y+10, r1	; 0x0a
            blau = 0;
     21c:	19 86       	std	Y+9, r1	; 0x09
     21e:	18 86       	std	Y+8, r1	; 0x08
            lcdLog("Tonne Auf");
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	92 e0       	ldi	r25, 0x02	; 2
     224:	89 2f       	mov	r24, r25
     226:	8f 93       	push	r24
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	8f 93       	push	r24
     22e:	0e 94 ce 10 	call	0x219c	; 0x219c <lcdLog>
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
            if (taster_Abfall)
     236:	8d 89       	ldd	r24, Y+21	; 0x15
     238:	9e 89       	ldd	r25, Y+22	; 0x16
     23a:	89 2b       	or	r24, r25
     23c:	09 f4       	brne	.+2      	; 0x240 <main+0x11a>
     23e:	34 c7       	rjmp	.+3688   	; 0x10a8 <__LOCK_REGION_LENGTH__+0xca8>
            {
                state = TONNE_ZU; //Zustand auf Tonne zu setzen;
     240:	1c 86       	std	Y+12, r1	; 0x0c
            }
            break;
     242:	32 c7       	rjmp	.+3684   	; 0x10a8 <__LOCK_REGION_LENGTH__+0xca8>
            case TONNE_ZU:
            led_Tonne_zu = TONNE_ZU;
     244:	1d 82       	std	Y+5, r1	; 0x05
     246:	1c 82       	std	Y+4, r1	; 0x04
            led_Tonne_auf = 0;
     248:	1b 82       	std	Y+3, r1	; 0x03
     24a:	1a 82       	std	Y+2, r1	; 0x02
            lcdLog("Muell drinnen");
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	89 2f       	mov	r24, r25
     252:	8f 93       	push	r24
     254:	8c e0       	ldi	r24, 0x0C	; 12
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	8f 93       	push	r24
     25a:	0e 94 ce 10 	call	0x219c	; 0x219c <lcdLog>
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	aa e7       	ldi	r26, 0x7A	; 122
     268:	b4 e4       	ldi	r27, 0x44	; 68
     26a:	8d 8f       	std	Y+29, r24	; 0x1d
     26c:	9e 8f       	std	Y+30, r25	; 0x1e
     26e:	af 8f       	std	Y+31, r26	; 0x1f
     270:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     272:	8e 01       	movw	r16, r28
     274:	05 5b       	subi	r16, 0xB5	; 181
     276:	1f 4f       	sbci	r17, 0xFF	; 255
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	4a e7       	ldi	r20, 0x7A	; 122
     27e:	55 e4       	ldi	r21, 0x45	; 69
     280:	6d 8d       	ldd	r22, Y+29	; 0x1d
     282:	7e 8d       	ldd	r23, Y+30	; 0x1e
     284:	8f 8d       	ldd	r24, Y+31	; 0x1f
     286:	98 a1       	ldd	r25, Y+32	; 0x20
     288:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	f8 01       	movw	r30, r16
     292:	80 83       	st	Z, r24
     294:	91 83       	std	Z+1, r25	; 0x01
     296:	a2 83       	std	Z+2, r26	; 0x02
     298:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     29a:	ce 01       	movw	r24, r28
     29c:	85 5b       	subi	r24, 0xB5	; 181
     29e:	9f 4f       	sbci	r25, 0xFF	; 255
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e8       	ldi	r20, 0x80	; 128
     2a6:	5f e3       	ldi	r21, 0x3F	; 63
     2a8:	fc 01       	movw	r30, r24
     2aa:	60 81       	ld	r22, Z
     2ac:	71 81       	ldd	r23, Z+1	; 0x01
     2ae:	82 81       	ldd	r24, Z+2	; 0x02
     2b0:	93 81       	ldd	r25, Z+3	; 0x03
     2b2:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
     2b6:	88 23       	and	r24, r24
     2b8:	4c f4       	brge	.+18     	; 0x2cc <main+0x1a6>
		__ticks = 1;
     2ba:	ce 01       	movw	r24, r28
     2bc:	81 5b       	subi	r24, 0xB1	; 177
     2be:	9f 4f       	sbci	r25, 0xFF	; 255
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	31 83       	std	Z+1, r19	; 0x01
     2c8:	20 83       	st	Z, r18
     2ca:	69 c0       	rjmp	.+210    	; 0x39e <main+0x278>
	else if (__tmp > 65535)
     2cc:	ce 01       	movw	r24, r28
     2ce:	85 5b       	subi	r24, 0xB5	; 181
     2d0:	9f 4f       	sbci	r25, 0xFF	; 255
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	3f ef       	ldi	r19, 0xFF	; 255
     2d6:	4f e7       	ldi	r20, 0x7F	; 127
     2d8:	57 e4       	ldi	r21, 0x47	; 71
     2da:	fc 01       	movw	r30, r24
     2dc:	60 81       	ld	r22, Z
     2de:	71 81       	ldd	r23, Z+1	; 0x01
     2e0:	82 81       	ldd	r24, Z+2	; 0x02
     2e2:	93 81       	ldd	r25, Z+3	; 0x03
     2e4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
     2e8:	18 16       	cp	r1, r24
     2ea:	0c f0       	brlt	.+2      	; 0x2ee <main+0x1c8>
     2ec:	46 c0       	rjmp	.+140    	; 0x37a <main+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e2       	ldi	r20, 0x20	; 32
     2f4:	51 e4       	ldi	r21, 0x41	; 65
     2f6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     2f8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     2fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2fc:	98 a1       	ldd	r25, Y+32	; 0x20
     2fe:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     302:	dc 01       	movw	r26, r24
     304:	cb 01       	movw	r24, r22
     306:	8e 01       	movw	r16, r28
     308:	01 5b       	subi	r16, 0xB1	; 177
     30a:	1f 4f       	sbci	r17, 0xFF	; 255
     30c:	bc 01       	movw	r22, r24
     30e:	cd 01       	movw	r24, r26
     310:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     314:	dc 01       	movw	r26, r24
     316:	cb 01       	movw	r24, r22
     318:	f8 01       	movw	r30, r16
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	80 83       	st	Z, r24
     31e:	24 c0       	rjmp	.+72     	; 0x368 <main+0x242>
     320:	ce 01       	movw	r24, r28
     322:	8f 5a       	subi	r24, 0xAF	; 175
     324:	9f 4f       	sbci	r25, 0xFF	; 255
     326:	20 e9       	ldi	r18, 0x90	; 144
     328:	31 e0       	ldi	r19, 0x01	; 1
     32a:	fc 01       	movw	r30, r24
     32c:	31 83       	std	Z+1, r19	; 0x01
     32e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     330:	ce 01       	movw	r24, r28
     332:	8f 5a       	subi	r24, 0xAF	; 175
     334:	9f 4f       	sbci	r25, 0xFF	; 255
     336:	fc 01       	movw	r30, r24
     338:	80 81       	ld	r24, Z
     33a:	91 81       	ldd	r25, Z+1	; 0x01
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <main+0x216>
     340:	9e 01       	movw	r18, r28
     342:	2f 5a       	subi	r18, 0xAF	; 175
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	f9 01       	movw	r30, r18
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34c:	ce 01       	movw	r24, r28
     34e:	81 5b       	subi	r24, 0xB1	; 177
     350:	9f 4f       	sbci	r25, 0xFF	; 255
     352:	9e 01       	movw	r18, r28
     354:	21 5b       	subi	r18, 0xB1	; 177
     356:	3f 4f       	sbci	r19, 0xFF	; 255
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	31 81       	ldd	r19, Z+1	; 0x01
     35e:	21 50       	subi	r18, 0x01	; 1
     360:	31 09       	sbc	r19, r1
     362:	fc 01       	movw	r30, r24
     364:	31 83       	std	Z+1, r19	; 0x01
     366:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     368:	ce 01       	movw	r24, r28
     36a:	81 5b       	subi	r24, 0xB1	; 177
     36c:	9f 4f       	sbci	r25, 0xFF	; 255
     36e:	fc 01       	movw	r30, r24
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	89 2b       	or	r24, r25
     376:	a1 f6       	brne	.-88     	; 0x320 <main+0x1fa>
     378:	2c c0       	rjmp	.+88     	; 0x3d2 <main+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     37a:	8e 01       	movw	r16, r28
     37c:	01 5b       	subi	r16, 0xB1	; 177
     37e:	1f 4f       	sbci	r17, 0xFF	; 255
     380:	ce 01       	movw	r24, r28
     382:	85 5b       	subi	r24, 0xB5	; 181
     384:	9f 4f       	sbci	r25, 0xFF	; 255
     386:	fc 01       	movw	r30, r24
     388:	60 81       	ld	r22, Z
     38a:	71 81       	ldd	r23, Z+1	; 0x01
     38c:	82 81       	ldd	r24, Z+2	; 0x02
     38e:	93 81       	ldd	r25, Z+3	; 0x03
     390:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	f8 01       	movw	r30, r16
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24
     39e:	ce 01       	movw	r24, r28
     3a0:	8d 5a       	subi	r24, 0xAD	; 173
     3a2:	9f 4f       	sbci	r25, 0xFF	; 255
     3a4:	9e 01       	movw	r18, r28
     3a6:	21 5b       	subi	r18, 0xB1	; 177
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	f9 01       	movw	r30, r18
     3ac:	20 81       	ld	r18, Z
     3ae:	31 81       	ldd	r19, Z+1	; 0x01
     3b0:	fc 01       	movw	r30, r24
     3b2:	31 83       	std	Z+1, r19	; 0x01
     3b4:	20 83       	st	Z, r18
     3b6:	ce 01       	movw	r24, r28
     3b8:	8d 5a       	subi	r24, 0xAD	; 173
     3ba:	9f 4f       	sbci	r25, 0xFF	; 255
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	91 81       	ldd	r25, Z+1	; 0x01
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x29c>
     3c6:	9e 01       	movw	r18, r28
     3c8:	2d 5a       	subi	r18, 0xAD	; 173
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	f9 01       	movw	r30, r18
     3ce:	91 83       	std	Z+1, r25	; 0x01
     3d0:	80 83       	st	Z, r24
            _delay_ms(1000);
            lcdLog("Tonne Zu");
     3d2:	8a e1       	ldi	r24, 0x1A	; 26
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	89 2f       	mov	r24, r25
     3d8:	8f 93       	push	r24
     3da:	8a e1       	ldi	r24, 0x1A	; 26
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	8f 93       	push	r24
     3e0:	0e 94 ce 10 	call	0x219c	; 0x219c <lcdLog>
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	a8 ec       	ldi	r26, 0xC8	; 200
     3ee:	b2 e4       	ldi	r27, 0x42	; 66
     3f0:	9e 01       	movw	r18, r28
     3f2:	23 5c       	subi	r18, 0xC3	; 195
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	f9 01       	movw	r30, r18
     3f8:	80 83       	st	Z, r24
     3fa:	91 83       	std	Z+1, r25	; 0x01
     3fc:	a2 83       	std	Z+2, r26	; 0x02
     3fe:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     400:	8e 01       	movw	r16, r28
     402:	0f 5b       	subi	r16, 0xBF	; 191
     404:	1f 4f       	sbci	r17, 0xFF	; 255
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	4a e7       	ldi	r20, 0x7A	; 122
     40c:	55 e4       	ldi	r21, 0x45	; 69
     40e:	ce 01       	movw	r24, r28
     410:	cd 96       	adiw	r24, 0x3d	; 61
     412:	fc 01       	movw	r30, r24
     414:	60 81       	ld	r22, Z
     416:	71 81       	ldd	r23, Z+1	; 0x01
     418:	82 81       	ldd	r24, Z+2	; 0x02
     41a:	93 81       	ldd	r25, Z+3	; 0x03
     41c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	f8 01       	movw	r30, r16
     426:	80 83       	st	Z, r24
     428:	91 83       	std	Z+1, r25	; 0x01
     42a:	a2 83       	std	Z+2, r26	; 0x02
     42c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     42e:	ce 01       	movw	r24, r28
     430:	8f 5b       	subi	r24, 0xBF	; 191
     432:	9f 4f       	sbci	r25, 0xFF	; 255
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	40 e8       	ldi	r20, 0x80	; 128
     43a:	5f e3       	ldi	r21, 0x3F	; 63
     43c:	fc 01       	movw	r30, r24
     43e:	60 81       	ld	r22, Z
     440:	71 81       	ldd	r23, Z+1	; 0x01
     442:	82 81       	ldd	r24, Z+2	; 0x02
     444:	93 81       	ldd	r25, Z+3	; 0x03
     446:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
     44a:	88 23       	and	r24, r24
     44c:	4c f4       	brge	.+18     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		__ticks = 1;
     44e:	ce 01       	movw	r24, r28
     450:	8b 5b       	subi	r24, 0xBB	; 187
     452:	9f 4f       	sbci	r25, 0xFF	; 255
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	fc 01       	movw	r30, r24
     45a:	31 83       	std	Z+1, r19	; 0x01
     45c:	20 83       	st	Z, r18
     45e:	6c c0       	rjmp	.+216    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	else if (__tmp > 65535)
     460:	ce 01       	movw	r24, r28
     462:	8f 5b       	subi	r24, 0xBF	; 191
     464:	9f 4f       	sbci	r25, 0xFF	; 255
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	3f ef       	ldi	r19, 0xFF	; 255
     46a:	4f e7       	ldi	r20, 0x7F	; 127
     46c:	57 e4       	ldi	r21, 0x47	; 71
     46e:	fc 01       	movw	r30, r24
     470:	60 81       	ld	r22, Z
     472:	71 81       	ldd	r23, Z+1	; 0x01
     474:	82 81       	ldd	r24, Z+2	; 0x02
     476:	93 81       	ldd	r25, Z+3	; 0x03
     478:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
     47c:	18 16       	cp	r1, r24
     47e:	0c f0       	brlt	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     480:	49 c0       	rjmp	.+146    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e2       	ldi	r20, 0x20	; 32
     488:	51 e4       	ldi	r21, 0x41	; 65
     48a:	ce 01       	movw	r24, r28
     48c:	cd 96       	adiw	r24, 0x3d	; 61
     48e:	fc 01       	movw	r30, r24
     490:	60 81       	ld	r22, Z
     492:	71 81       	ldd	r23, Z+1	; 0x01
     494:	82 81       	ldd	r24, Z+2	; 0x02
     496:	93 81       	ldd	r25, Z+3	; 0x03
     498:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	8e 01       	movw	r16, r28
     4a2:	0b 5b       	subi	r16, 0xBB	; 187
     4a4:	1f 4f       	sbci	r17, 0xFF	; 255
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	f8 01       	movw	r30, r16
     4b4:	91 83       	std	Z+1, r25	; 0x01
     4b6:	80 83       	st	Z, r24
     4b8:	24 c0       	rjmp	.+72     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4ba:	ce 01       	movw	r24, r28
     4bc:	89 5b       	subi	r24, 0xB9	; 185
     4be:	9f 4f       	sbci	r25, 0xFF	; 255
     4c0:	20 e9       	ldi	r18, 0x90	; 144
     4c2:	31 e0       	ldi	r19, 0x01	; 1
     4c4:	fc 01       	movw	r30, r24
     4c6:	31 83       	std	Z+1, r19	; 0x01
     4c8:	20 83       	st	Z, r18
     4ca:	ce 01       	movw	r24, r28
     4cc:	89 5b       	subi	r24, 0xB9	; 185
     4ce:	9f 4f       	sbci	r25, 0xFF	; 255
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	91 81       	ldd	r25, Z+1	; 0x01
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4da:	9e 01       	movw	r18, r28
     4dc:	29 5b       	subi	r18, 0xB9	; 185
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	f9 01       	movw	r30, r18
     4e2:	91 83       	std	Z+1, r25	; 0x01
     4e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e6:	ce 01       	movw	r24, r28
     4e8:	8b 5b       	subi	r24, 0xBB	; 187
     4ea:	9f 4f       	sbci	r25, 0xFF	; 255
     4ec:	9e 01       	movw	r18, r28
     4ee:	2b 5b       	subi	r18, 0xBB	; 187
     4f0:	3f 4f       	sbci	r19, 0xFF	; 255
     4f2:	f9 01       	movw	r30, r18
     4f4:	20 81       	ld	r18, Z
     4f6:	31 81       	ldd	r19, Z+1	; 0x01
     4f8:	21 50       	subi	r18, 0x01	; 1
     4fa:	31 09       	sbc	r19, r1
     4fc:	fc 01       	movw	r30, r24
     4fe:	31 83       	std	Z+1, r19	; 0x01
     500:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     502:	ce 01       	movw	r24, r28
     504:	8b 5b       	subi	r24, 0xBB	; 187
     506:	9f 4f       	sbci	r25, 0xFF	; 255
     508:	fc 01       	movw	r30, r24
     50a:	80 81       	ld	r24, Z
     50c:	91 81       	ldd	r25, Z+1	; 0x01
     50e:	89 2b       	or	r24, r25
     510:	a1 f6       	brne	.-88     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     512:	2c c0       	rjmp	.+88     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     514:	8e 01       	movw	r16, r28
     516:	0b 5b       	subi	r16, 0xBB	; 187
     518:	1f 4f       	sbci	r17, 0xFF	; 255
     51a:	ce 01       	movw	r24, r28
     51c:	8f 5b       	subi	r24, 0xBF	; 191
     51e:	9f 4f       	sbci	r25, 0xFF	; 255
     520:	fc 01       	movw	r30, r24
     522:	60 81       	ld	r22, Z
     524:	71 81       	ldd	r23, Z+1	; 0x01
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	f8 01       	movw	r30, r16
     534:	91 83       	std	Z+1, r25	; 0x01
     536:	80 83       	st	Z, r24
     538:	ce 01       	movw	r24, r28
     53a:	87 5b       	subi	r24, 0xB7	; 183
     53c:	9f 4f       	sbci	r25, 0xFF	; 255
     53e:	9e 01       	movw	r18, r28
     540:	2b 5b       	subi	r18, 0xBB	; 187
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	f9 01       	movw	r30, r18
     546:	20 81       	ld	r18, Z
     548:	31 81       	ldd	r19, Z+1	; 0x01
     54a:	fc 01       	movw	r30, r24
     54c:	31 83       	std	Z+1, r19	; 0x01
     54e:	20 83       	st	Z, r18
     550:	ce 01       	movw	r24, r28
     552:	87 5b       	subi	r24, 0xB7	; 183
     554:	9f 4f       	sbci	r25, 0xFF	; 255
     556:	fc 01       	movw	r30, r24
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     560:	9e 01       	movw	r18, r28
     562:	27 5b       	subi	r18, 0xB7	; 183
     564:	3f 4f       	sbci	r19, 0xFF	; 255
     566:	f9 01       	movw	r30, r18
     568:	91 83       	std	Z+1, r25	; 0x01
     56a:	80 83       	st	Z, r24
            _delay_ms(100);
            state = MUELL_ANALYSIEREN;
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	8c 87       	std	Y+12, r24	; 0x0c
            break;
     570:	a0 c5       	rjmp	.+2880   	; 0x10b2 <__LOCK_REGION_LENGTH__+0xcb2>
            case MUELL_ANALYSIEREN:
            led_Tonne_zu = 0;
     572:	1d 82       	std	Y+5, r1	; 0x05
     574:	1c 82       	std	Y+4, r1	; 0x04
            led_Tonne_auf = 0;
     576:	1b 82       	std	Y+3, r1	; 0x03
     578:	1a 82       	std	Y+2, r1	; 0x02
            lcdLog("Muell analysieren");
     57a:	83 e2       	ldi	r24, 0x23	; 35
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	89 2f       	mov	r24, r25
     580:	8f 93       	push	r24
     582:	83 e2       	ldi	r24, 0x23	; 35
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	8f 93       	push	r24
     588:	0e 94 ce 10 	call	0x219c	; 0x219c <lcdLog>
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0

            if (schalter_infrarot && !schalter_leitfaehigkeit)
     590:	8f 85       	ldd	r24, Y+15	; 0x0f
     592:	98 89       	ldd	r25, Y+16	; 0x10
     594:	89 2b       	or	r24, r25
     596:	09 f4       	brne	.+2      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     598:	c0 c0       	rjmp	.+384    	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
     59a:	8b 89       	ldd	r24, Y+19	; 0x13
     59c:	9c 89       	ldd	r25, Y+20	; 0x14
     59e:	89 2b       	or	r24, r25
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     5a2:	bb c0       	rjmp	.+374    	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e8       	ldi	r25, 0x80	; 128
     5a8:	ab eb       	ldi	r26, 0xBB	; 187
     5aa:	b4 e4       	ldi	r27, 0x44	; 68
     5ac:	89 8f       	std	Y+25, r24	; 0x19
     5ae:	9a 8f       	std	Y+26, r25	; 0x1a
     5b0:	ab 8f       	std	Y+27, r26	; 0x1b
     5b2:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5b4:	8e 01       	movw	r16, r28
     5b6:	0b 5a       	subi	r16, 0xAB	; 171
     5b8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	4a e7       	ldi	r20, 0x7A	; 122
     5c0:	55 e4       	ldi	r21, 0x45	; 69
     5c2:	69 8d       	ldd	r22, Y+25	; 0x19
     5c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5ca:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	f8 01       	movw	r30, r16
     5d4:	80 83       	st	Z, r24
     5d6:	91 83       	std	Z+1, r25	; 0x01
     5d8:	a2 83       	std	Z+2, r26	; 0x02
     5da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5dc:	ce 01       	movw	r24, r28
     5de:	8b 5a       	subi	r24, 0xAB	; 171
     5e0:	9f 4f       	sbci	r25, 0xFF	; 255
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e8       	ldi	r20, 0x80	; 128
     5e8:	5f e3       	ldi	r21, 0x3F	; 63
     5ea:	fc 01       	movw	r30, r24
     5ec:	60 81       	ld	r22, Z
     5ee:	71 81       	ldd	r23, Z+1	; 0x01
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	93 81       	ldd	r25, Z+3	; 0x03
     5f4:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
     5f8:	88 23       	and	r24, r24
     5fa:	4c f4       	brge	.+18     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
		__ticks = 1;
     5fc:	ce 01       	movw	r24, r28
     5fe:	87 5a       	subi	r24, 0xA7	; 167
     600:	9f 4f       	sbci	r25, 0xFF	; 255
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	fc 01       	movw	r30, r24
     608:	31 83       	std	Z+1, r19	; 0x01
     60a:	20 83       	st	Z, r18
     60c:	69 c0       	rjmp	.+210    	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
	else if (__tmp > 65535)
     60e:	ce 01       	movw	r24, r28
     610:	8b 5a       	subi	r24, 0xAB	; 171
     612:	9f 4f       	sbci	r25, 0xFF	; 255
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	3f ef       	ldi	r19, 0xFF	; 255
     618:	4f e7       	ldi	r20, 0x7F	; 127
     61a:	57 e4       	ldi	r21, 0x47	; 71
     61c:	fc 01       	movw	r30, r24
     61e:	60 81       	ld	r22, Z
     620:	71 81       	ldd	r23, Z+1	; 0x01
     622:	82 81       	ldd	r24, Z+2	; 0x02
     624:	93 81       	ldd	r25, Z+3	; 0x03
     626:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
     62a:	18 16       	cp	r1, r24
     62c:	0c f0       	brlt	.+2      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     62e:	46 c0       	rjmp	.+140    	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e2       	ldi	r20, 0x20	; 32
     636:	51 e4       	ldi	r21, 0x41	; 65
     638:	69 8d       	ldd	r22, Y+25	; 0x19
     63a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     63c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     63e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     640:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	8e 01       	movw	r16, r28
     64a:	07 5a       	subi	r16, 0xA7	; 167
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	bc 01       	movw	r22, r24
     650:	cd 01       	movw	r24, r26
     652:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	f8 01       	movw	r30, r16
     65c:	91 83       	std	Z+1, r25	; 0x01
     65e:	80 83       	st	Z, r24
     660:	24 c0       	rjmp	.+72     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     662:	ce 01       	movw	r24, r28
     664:	85 5a       	subi	r24, 0xA5	; 165
     666:	9f 4f       	sbci	r25, 0xFF	; 255
     668:	20 e9       	ldi	r18, 0x90	; 144
     66a:	31 e0       	ldi	r19, 0x01	; 1
     66c:	fc 01       	movw	r30, r24
     66e:	31 83       	std	Z+1, r19	; 0x01
     670:	20 83       	st	Z, r18
     672:	ce 01       	movw	r24, r28
     674:	85 5a       	subi	r24, 0xA5	; 165
     676:	9f 4f       	sbci	r25, 0xFF	; 255
     678:	fc 01       	movw	r30, r24
     67a:	80 81       	ld	r24, Z
     67c:	91 81       	ldd	r25, Z+1	; 0x01
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     682:	9e 01       	movw	r18, r28
     684:	25 5a       	subi	r18, 0xA5	; 165
     686:	3f 4f       	sbci	r19, 0xFF	; 255
     688:	f9 01       	movw	r30, r18
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     68e:	ce 01       	movw	r24, r28
     690:	87 5a       	subi	r24, 0xA7	; 167
     692:	9f 4f       	sbci	r25, 0xFF	; 255
     694:	9e 01       	movw	r18, r28
     696:	27 5a       	subi	r18, 0xA7	; 167
     698:	3f 4f       	sbci	r19, 0xFF	; 255
     69a:	f9 01       	movw	r30, r18
     69c:	20 81       	ld	r18, Z
     69e:	31 81       	ldd	r19, Z+1	; 0x01
     6a0:	21 50       	subi	r18, 0x01	; 1
     6a2:	31 09       	sbc	r19, r1
     6a4:	fc 01       	movw	r30, r24
     6a6:	31 83       	std	Z+1, r19	; 0x01
     6a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6aa:	ce 01       	movw	r24, r28
     6ac:	87 5a       	subi	r24, 0xA7	; 167
     6ae:	9f 4f       	sbci	r25, 0xFF	; 255
     6b0:	fc 01       	movw	r30, r24
     6b2:	80 81       	ld	r24, Z
     6b4:	91 81       	ldd	r25, Z+1	; 0x01
     6b6:	89 2b       	or	r24, r25
     6b8:	a1 f6       	brne	.-88     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     6ba:	2c c0       	rjmp	.+88     	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6bc:	8e 01       	movw	r16, r28
     6be:	07 5a       	subi	r16, 0xA7	; 167
     6c0:	1f 4f       	sbci	r17, 0xFF	; 255
     6c2:	ce 01       	movw	r24, r28
     6c4:	8b 5a       	subi	r24, 0xAB	; 171
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	f8 01       	movw	r30, r16
     6dc:	91 83       	std	Z+1, r25	; 0x01
     6de:	80 83       	st	Z, r24
     6e0:	ce 01       	movw	r24, r28
     6e2:	83 5a       	subi	r24, 0xA3	; 163
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	9e 01       	movw	r18, r28
     6e8:	27 5a       	subi	r18, 0xA7	; 167
     6ea:	3f 4f       	sbci	r19, 0xFF	; 255
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	31 81       	ldd	r19, Z+1	; 0x01
     6f2:	fc 01       	movw	r30, r24
     6f4:	31 83       	std	Z+1, r19	; 0x01
     6f6:	20 83       	st	Z, r18
     6f8:	ce 01       	movw	r24, r28
     6fa:	83 5a       	subi	r24, 0xA3	; 163
     6fc:	9f 4f       	sbci	r25, 0xFF	; 255
     6fe:	fc 01       	movw	r30, r24
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
     708:	9e 01       	movw	r18, r28
     70a:	23 5a       	subi	r18, 0xA3	; 163
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	f9 01       	movw	r30, r18
     710:	91 83       	std	Z+1, r25	; 0x01
     712:	80 83       	st	Z, r24
            {
                _delay_ms(1500);
                state = PET; // auf PET setzen;
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	8c 87       	std	Y+12, r24	; 0x0c
     718:	05 c3       	rjmp	.+1546   	; 0xd24 <__LOCK_REGION_LENGTH__+0x924>
            }
            else if (!schalter_leitfaehigkeit)
     71a:	8b 89       	ldd	r24, Y+19	; 0x13
     71c:	9c 89       	ldd	r25, Y+20	; 0x14
     71e:	89 2b       	or	r24, r25
     720:	09 f0       	breq	.+2      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
     722:	bb c0       	rjmp	.+374    	; 0x89a <__LOCK_REGION_LENGTH__+0x49a>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e8       	ldi	r25, 0x80	; 128
     728:	ab eb       	ldi	r26, 0xBB	; 187
     72a:	b4 e4       	ldi	r27, 0x44	; 68
     72c:	89 a3       	std	Y+33, r24	; 0x21
     72e:	9a a3       	std	Y+34, r25	; 0x22
     730:	ab a3       	std	Y+35, r26	; 0x23
     732:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     734:	8e 01       	movw	r16, r28
     736:	01 5a       	subi	r16, 0xA1	; 161
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4a e7       	ldi	r20, 0x7A	; 122
     740:	55 e4       	ldi	r21, 0x45	; 69
     742:	69 a1       	ldd	r22, Y+33	; 0x21
     744:	7a a1       	ldd	r23, Y+34	; 0x22
     746:	8b a1       	ldd	r24, Y+35	; 0x23
     748:	9c a1       	ldd	r25, Y+36	; 0x24
     74a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	f8 01       	movw	r30, r16
     754:	80 83       	st	Z, r24
     756:	91 83       	std	Z+1, r25	; 0x01
     758:	a2 83       	std	Z+2, r26	; 0x02
     75a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     75c:	ce 01       	movw	r24, r28
     75e:	81 5a       	subi	r24, 0xA1	; 161
     760:	9f 4f       	sbci	r25, 0xFF	; 255
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e8       	ldi	r20, 0x80	; 128
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	fc 01       	movw	r30, r24
     76c:	60 81       	ld	r22, Z
     76e:	71 81       	ldd	r23, Z+1	; 0x01
     770:	82 81       	ldd	r24, Z+2	; 0x02
     772:	93 81       	ldd	r25, Z+3	; 0x03
     774:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
     778:	88 23       	and	r24, r24
     77a:	4c f4       	brge	.+18     	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
		__ticks = 1;
     77c:	ce 01       	movw	r24, r28
     77e:	8d 59       	subi	r24, 0x9D	; 157
     780:	9f 4f       	sbci	r25, 0xFF	; 255
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	fc 01       	movw	r30, r24
     788:	31 83       	std	Z+1, r19	; 0x01
     78a:	20 83       	st	Z, r18
     78c:	69 c0       	rjmp	.+210    	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
	else if (__tmp > 65535)
     78e:	ce 01       	movw	r24, r28
     790:	81 5a       	subi	r24, 0xA1	; 161
     792:	9f 4f       	sbci	r25, 0xFF	; 255
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	3f ef       	ldi	r19, 0xFF	; 255
     798:	4f e7       	ldi	r20, 0x7F	; 127
     79a:	57 e4       	ldi	r21, 0x47	; 71
     79c:	fc 01       	movw	r30, r24
     79e:	60 81       	ld	r22, Z
     7a0:	71 81       	ldd	r23, Z+1	; 0x01
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	93 81       	ldd	r25, Z+3	; 0x03
     7a6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
     7aa:	18 16       	cp	r1, r24
     7ac:	0c f0       	brlt	.+2      	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
     7ae:	46 c0       	rjmp	.+140    	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 e2       	ldi	r20, 0x20	; 32
     7b6:	51 e4       	ldi	r21, 0x41	; 65
     7b8:	69 a1       	ldd	r22, Y+33	; 0x21
     7ba:	7a a1       	ldd	r23, Y+34	; 0x22
     7bc:	8b a1       	ldd	r24, Y+35	; 0x23
     7be:	9c a1       	ldd	r25, Y+36	; 0x24
     7c0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	8e 01       	movw	r16, r28
     7ca:	0d 59       	subi	r16, 0x9D	; 157
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	f8 01       	movw	r30, r16
     7dc:	91 83       	std	Z+1, r25	; 0x01
     7de:	80 83       	st	Z, r24
     7e0:	24 c0       	rjmp	.+72     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
     7e2:	ce 01       	movw	r24, r28
     7e4:	8b 59       	subi	r24, 0x9B	; 155
     7e6:	9f 4f       	sbci	r25, 0xFF	; 255
     7e8:	20 e9       	ldi	r18, 0x90	; 144
     7ea:	31 e0       	ldi	r19, 0x01	; 1
     7ec:	fc 01       	movw	r30, r24
     7ee:	31 83       	std	Z+1, r19	; 0x01
     7f0:	20 83       	st	Z, r18
     7f2:	ce 01       	movw	r24, r28
     7f4:	8b 59       	subi	r24, 0x9B	; 155
     7f6:	9f 4f       	sbci	r25, 0xFF	; 255
     7f8:	fc 01       	movw	r30, r24
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
     802:	9e 01       	movw	r18, r28
     804:	2b 59       	subi	r18, 0x9B	; 155
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	f9 01       	movw	r30, r18
     80a:	91 83       	std	Z+1, r25	; 0x01
     80c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     80e:	ce 01       	movw	r24, r28
     810:	8d 59       	subi	r24, 0x9D	; 157
     812:	9f 4f       	sbci	r25, 0xFF	; 255
     814:	9e 01       	movw	r18, r28
     816:	2d 59       	subi	r18, 0x9D	; 157
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	f9 01       	movw	r30, r18
     81c:	20 81       	ld	r18, Z
     81e:	31 81       	ldd	r19, Z+1	; 0x01
     820:	21 50       	subi	r18, 0x01	; 1
     822:	31 09       	sbc	r19, r1
     824:	fc 01       	movw	r30, r24
     826:	31 83       	std	Z+1, r19	; 0x01
     828:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     82a:	ce 01       	movw	r24, r28
     82c:	8d 59       	subi	r24, 0x9D	; 157
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	fc 01       	movw	r30, r24
     832:	80 81       	ld	r24, Z
     834:	91 81       	ldd	r25, Z+1	; 0x01
     836:	89 2b       	or	r24, r25
     838:	a1 f6       	brne	.-88     	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
     83a:	2c c0       	rjmp	.+88     	; 0x894 <__LOCK_REGION_LENGTH__+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83c:	8e 01       	movw	r16, r28
     83e:	0d 59       	subi	r16, 0x9D	; 157
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	ce 01       	movw	r24, r28
     844:	81 5a       	subi	r24, 0xA1	; 161
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	fc 01       	movw	r30, r24
     84a:	60 81       	ld	r22, Z
     84c:	71 81       	ldd	r23, Z+1	; 0x01
     84e:	82 81       	ldd	r24, Z+2	; 0x02
     850:	93 81       	ldd	r25, Z+3	; 0x03
     852:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	f8 01       	movw	r30, r16
     85c:	91 83       	std	Z+1, r25	; 0x01
     85e:	80 83       	st	Z, r24
     860:	ce 01       	movw	r24, r28
     862:	89 59       	subi	r24, 0x99	; 153
     864:	9f 4f       	sbci	r25, 0xFF	; 255
     866:	9e 01       	movw	r18, r28
     868:	2d 59       	subi	r18, 0x9D	; 157
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	f9 01       	movw	r30, r18
     86e:	20 81       	ld	r18, Z
     870:	31 81       	ldd	r19, Z+1	; 0x01
     872:	fc 01       	movw	r30, r24
     874:	31 83       	std	Z+1, r19	; 0x01
     876:	20 83       	st	Z, r18
     878:	ce 01       	movw	r24, r28
     87a:	89 59       	subi	r24, 0x99	; 153
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	fc 01       	movw	r30, r24
     880:	80 81       	ld	r24, Z
     882:	91 81       	ldd	r25, Z+1	; 0x01
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     888:	9e 01       	movw	r18, r28
     88a:	29 59       	subi	r18, 0x99	; 153
     88c:	3f 4f       	sbci	r19, 0xFF	; 255
     88e:	f9 01       	movw	r30, r18
     890:	91 83       	std	Z+1, r25	; 0x01
     892:	80 83       	st	Z, r24
            {                
                _delay_ms(1500);
                state = PET; //PET setzen;
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	8c 87       	std	Y+12, r24	; 0x0c
             else
             {
                 _delay_ms(1500);
                 state = ALU; //auf Alu setzen;
             }
            break;
     898:	0c c4       	rjmp	.+2072   	; 0x10b2 <__LOCK_REGION_LENGTH__+0xcb2>
            {                
                _delay_ms(1500);
                state = PET; //PET setzen;
            }
            
            else if (!schalter_leitfaehigkeit && schalter_ton)
     89a:	8b 89       	ldd	r24, Y+19	; 0x13
     89c:	9c 89       	ldd	r25, Y+20	; 0x14
     89e:	89 2b       	or	r24, r25
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     8a2:	c0 c0       	rjmp	.+384    	; 0xa24 <__LOCK_REGION_LENGTH__+0x624>
     8a4:	89 89       	ldd	r24, Y+17	; 0x11
     8a6:	9a 89       	ldd	r25, Y+18	; 0x12
     8a8:	89 2b       	or	r24, r25
     8aa:	09 f4       	brne	.+2      	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
     8ac:	bb c0       	rjmp	.+374    	; 0xa24 <__LOCK_REGION_LENGTH__+0x624>
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e8       	ldi	r25, 0x80	; 128
     8b2:	ab eb       	ldi	r26, 0xBB	; 187
     8b4:	b4 e4       	ldi	r27, 0x44	; 68
     8b6:	8d a3       	std	Y+37, r24	; 0x25
     8b8:	9e a3       	std	Y+38, r25	; 0x26
     8ba:	af a3       	std	Y+39, r26	; 0x27
     8bc:	b8 a7       	std	Y+40, r27	; 0x28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8be:	8e 01       	movw	r16, r28
     8c0:	07 59       	subi	r16, 0x97	; 151
     8c2:	1f 4f       	sbci	r17, 0xFF	; 255
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	4a e7       	ldi	r20, 0x7A	; 122
     8ca:	55 e4       	ldi	r21, 0x45	; 69
     8cc:	6d a1       	ldd	r22, Y+37	; 0x25
     8ce:	7e a1       	ldd	r23, Y+38	; 0x26
     8d0:	8f a1       	ldd	r24, Y+39	; 0x27
     8d2:	98 a5       	ldd	r25, Y+40	; 0x28
     8d4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	f8 01       	movw	r30, r16
     8de:	80 83       	st	Z, r24
     8e0:	91 83       	std	Z+1, r25	; 0x01
     8e2:	a2 83       	std	Z+2, r26	; 0x02
     8e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8e6:	ce 01       	movw	r24, r28
     8e8:	87 59       	subi	r24, 0x97	; 151
     8ea:	9f 4f       	sbci	r25, 0xFF	; 255
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e8       	ldi	r20, 0x80	; 128
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	fc 01       	movw	r30, r24
     8f6:	60 81       	ld	r22, Z
     8f8:	71 81       	ldd	r23, Z+1	; 0x01
     8fa:	82 81       	ldd	r24, Z+2	; 0x02
     8fc:	93 81       	ldd	r25, Z+3	; 0x03
     8fe:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
     902:	88 23       	and	r24, r24
     904:	4c f4       	brge	.+18     	; 0x918 <__LOCK_REGION_LENGTH__+0x518>
		__ticks = 1;
     906:	ce 01       	movw	r24, r28
     908:	83 59       	subi	r24, 0x93	; 147
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	21 e0       	ldi	r18, 0x01	; 1
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	fc 01       	movw	r30, r24
     912:	31 83       	std	Z+1, r19	; 0x01
     914:	20 83       	st	Z, r18
     916:	69 c0       	rjmp	.+210    	; 0x9ea <__LOCK_REGION_LENGTH__+0x5ea>
	else if (__tmp > 65535)
     918:	ce 01       	movw	r24, r28
     91a:	87 59       	subi	r24, 0x97	; 151
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	3f ef       	ldi	r19, 0xFF	; 255
     922:	4f e7       	ldi	r20, 0x7F	; 127
     924:	57 e4       	ldi	r21, 0x47	; 71
     926:	fc 01       	movw	r30, r24
     928:	60 81       	ld	r22, Z
     92a:	71 81       	ldd	r23, Z+1	; 0x01
     92c:	82 81       	ldd	r24, Z+2	; 0x02
     92e:	93 81       	ldd	r25, Z+3	; 0x03
     930:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
     934:	18 16       	cp	r1, r24
     936:	0c f0       	brlt	.+2      	; 0x93a <__LOCK_REGION_LENGTH__+0x53a>
     938:	46 c0       	rjmp	.+140    	; 0x9c6 <__LOCK_REGION_LENGTH__+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e2       	ldi	r20, 0x20	; 32
     940:	51 e4       	ldi	r21, 0x41	; 65
     942:	6d a1       	ldd	r22, Y+37	; 0x25
     944:	7e a1       	ldd	r23, Y+38	; 0x26
     946:	8f a1       	ldd	r24, Y+39	; 0x27
     948:	98 a5       	ldd	r25, Y+40	; 0x28
     94a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     94e:	dc 01       	movw	r26, r24
     950:	cb 01       	movw	r24, r22
     952:	8e 01       	movw	r16, r28
     954:	03 59       	subi	r16, 0x93	; 147
     956:	1f 4f       	sbci	r17, 0xFF	; 255
     958:	bc 01       	movw	r22, r24
     95a:	cd 01       	movw	r24, r26
     95c:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	f8 01       	movw	r30, r16
     966:	91 83       	std	Z+1, r25	; 0x01
     968:	80 83       	st	Z, r24
     96a:	24 c0       	rjmp	.+72     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
     96c:	ce 01       	movw	r24, r28
     96e:	81 59       	subi	r24, 0x91	; 145
     970:	9f 4f       	sbci	r25, 0xFF	; 255
     972:	20 e9       	ldi	r18, 0x90	; 144
     974:	31 e0       	ldi	r19, 0x01	; 1
     976:	fc 01       	movw	r30, r24
     978:	31 83       	std	Z+1, r19	; 0x01
     97a:	20 83       	st	Z, r18
     97c:	ce 01       	movw	r24, r28
     97e:	81 59       	subi	r24, 0x91	; 145
     980:	9f 4f       	sbci	r25, 0xFF	; 255
     982:	fc 01       	movw	r30, r24
     984:	80 81       	ld	r24, Z
     986:	91 81       	ldd	r25, Z+1	; 0x01
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <__LOCK_REGION_LENGTH__+0x588>
     98c:	9e 01       	movw	r18, r28
     98e:	21 59       	subi	r18, 0x91	; 145
     990:	3f 4f       	sbci	r19, 0xFF	; 255
     992:	f9 01       	movw	r30, r18
     994:	91 83       	std	Z+1, r25	; 0x01
     996:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     998:	ce 01       	movw	r24, r28
     99a:	83 59       	subi	r24, 0x93	; 147
     99c:	9f 4f       	sbci	r25, 0xFF	; 255
     99e:	9e 01       	movw	r18, r28
     9a0:	23 59       	subi	r18, 0x93	; 147
     9a2:	3f 4f       	sbci	r19, 0xFF	; 255
     9a4:	f9 01       	movw	r30, r18
     9a6:	20 81       	ld	r18, Z
     9a8:	31 81       	ldd	r19, Z+1	; 0x01
     9aa:	21 50       	subi	r18, 0x01	; 1
     9ac:	31 09       	sbc	r19, r1
     9ae:	fc 01       	movw	r30, r24
     9b0:	31 83       	std	Z+1, r19	; 0x01
     9b2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b4:	ce 01       	movw	r24, r28
     9b6:	83 59       	subi	r24, 0x93	; 147
     9b8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ba:	fc 01       	movw	r30, r24
     9bc:	80 81       	ld	r24, Z
     9be:	91 81       	ldd	r25, Z+1	; 0x01
     9c0:	89 2b       	or	r24, r25
     9c2:	a1 f6       	brne	.-88     	; 0x96c <__LOCK_REGION_LENGTH__+0x56c>
     9c4:	2c c0       	rjmp	.+88     	; 0xa1e <__LOCK_REGION_LENGTH__+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c6:	8e 01       	movw	r16, r28
     9c8:	03 59       	subi	r16, 0x93	; 147
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	ce 01       	movw	r24, r28
     9ce:	87 59       	subi	r24, 0x97	; 151
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	fc 01       	movw	r30, r24
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	82 81       	ldd	r24, Z+2	; 0x02
     9da:	93 81       	ldd	r25, Z+3	; 0x03
     9dc:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	f8 01       	movw	r30, r16
     9e6:	91 83       	std	Z+1, r25	; 0x01
     9e8:	80 83       	st	Z, r24
     9ea:	ce 01       	movw	r24, r28
     9ec:	8f 58       	subi	r24, 0x8F	; 143
     9ee:	9f 4f       	sbci	r25, 0xFF	; 255
     9f0:	9e 01       	movw	r18, r28
     9f2:	23 59       	subi	r18, 0x93	; 147
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	f9 01       	movw	r30, r18
     9f8:	20 81       	ld	r18, Z
     9fa:	31 81       	ldd	r19, Z+1	; 0x01
     9fc:	fc 01       	movw	r30, r24
     9fe:	31 83       	std	Z+1, r19	; 0x01
     a00:	20 83       	st	Z, r18
     a02:	ce 01       	movw	r24, r28
     a04:	8f 58       	subi	r24, 0x8F	; 143
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     a12:	9e 01       	movw	r18, r28
     a14:	2f 58       	subi	r18, 0x8F	; 143
     a16:	3f 4f       	sbci	r19, 0xFF	; 255
     a18:	f9 01       	movw	r30, r18
     a1a:	91 83       	std	Z+1, r25	; 0x01
     a1c:	80 83       	st	Z, r24
            {
                _delay_ms(1500);
                state = PET; //auf PET setzen;
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	8c 87       	std	Y+12, r24	; 0x0c
     a22:	80 c1       	rjmp	.+768    	; 0xd24 <__LOCK_REGION_LENGTH__+0x924>
            }
            else if (schalter_infrarot && schalter_ton)
     a24:	8f 85       	ldd	r24, Y+15	; 0x0f
     a26:	98 89       	ldd	r25, Y+16	; 0x10
     a28:	89 2b       	or	r24, r25
     a2a:	09 f4       	brne	.+2      	; 0xa2e <__LOCK_REGION_LENGTH__+0x62e>
     a2c:	c0 c0       	rjmp	.+384    	; 0xbae <__LOCK_REGION_LENGTH__+0x7ae>
     a2e:	89 89       	ldd	r24, Y+17	; 0x11
     a30:	9a 89       	ldd	r25, Y+18	; 0x12
     a32:	89 2b       	or	r24, r25
     a34:	09 f4       	brne	.+2      	; 0xa38 <__LOCK_REGION_LENGTH__+0x638>
     a36:	bb c0       	rjmp	.+374    	; 0xbae <__LOCK_REGION_LENGTH__+0x7ae>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e8       	ldi	r25, 0x80	; 128
     a3c:	ab eb       	ldi	r26, 0xBB	; 187
     a3e:	b4 e4       	ldi	r27, 0x44	; 68
     a40:	89 a7       	std	Y+41, r24	; 0x29
     a42:	9a a7       	std	Y+42, r25	; 0x2a
     a44:	ab a7       	std	Y+43, r26	; 0x2b
     a46:	bc a7       	std	Y+44, r27	; 0x2c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a48:	8e 01       	movw	r16, r28
     a4a:	0d 58       	subi	r16, 0x8D	; 141
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	4a e7       	ldi	r20, 0x7A	; 122
     a54:	55 e4       	ldi	r21, 0x45	; 69
     a56:	69 a5       	ldd	r22, Y+41	; 0x29
     a58:	7a a5       	ldd	r23, Y+42	; 0x2a
     a5a:	8b a5       	ldd	r24, Y+43	; 0x2b
     a5c:	9c a5       	ldd	r25, Y+44	; 0x2c
     a5e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     a62:	dc 01       	movw	r26, r24
     a64:	cb 01       	movw	r24, r22
     a66:	f8 01       	movw	r30, r16
     a68:	80 83       	st	Z, r24
     a6a:	91 83       	std	Z+1, r25	; 0x01
     a6c:	a2 83       	std	Z+2, r26	; 0x02
     a6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a70:	ce 01       	movw	r24, r28
     a72:	8d 58       	subi	r24, 0x8D	; 141
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e8       	ldi	r20, 0x80	; 128
     a7c:	5f e3       	ldi	r21, 0x3F	; 63
     a7e:	fc 01       	movw	r30, r24
     a80:	60 81       	ld	r22, Z
     a82:	71 81       	ldd	r23, Z+1	; 0x01
     a84:	82 81       	ldd	r24, Z+2	; 0x02
     a86:	93 81       	ldd	r25, Z+3	; 0x03
     a88:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	4c f4       	brge	.+18     	; 0xaa2 <__LOCK_REGION_LENGTH__+0x6a2>
		__ticks = 1;
     a90:	ce 01       	movw	r24, r28
     a92:	89 58       	subi	r24, 0x89	; 137
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	fc 01       	movw	r30, r24
     a9c:	31 83       	std	Z+1, r19	; 0x01
     a9e:	20 83       	st	Z, r18
     aa0:	69 c0       	rjmp	.+210    	; 0xb74 <__LOCK_REGION_LENGTH__+0x774>
	else if (__tmp > 65535)
     aa2:	ce 01       	movw	r24, r28
     aa4:	8d 58       	subi	r24, 0x8D	; 141
     aa6:	9f 4f       	sbci	r25, 0xFF	; 255
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	3f ef       	ldi	r19, 0xFF	; 255
     aac:	4f e7       	ldi	r20, 0x7F	; 127
     aae:	57 e4       	ldi	r21, 0x47	; 71
     ab0:	fc 01       	movw	r30, r24
     ab2:	60 81       	ld	r22, Z
     ab4:	71 81       	ldd	r23, Z+1	; 0x01
     ab6:	82 81       	ldd	r24, Z+2	; 0x02
     ab8:	93 81       	ldd	r25, Z+3	; 0x03
     aba:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
     abe:	18 16       	cp	r1, r24
     ac0:	0c f0       	brlt	.+2      	; 0xac4 <__LOCK_REGION_LENGTH__+0x6c4>
     ac2:	46 c0       	rjmp	.+140    	; 0xb50 <__LOCK_REGION_LENGTH__+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e2       	ldi	r20, 0x20	; 32
     aca:	51 e4       	ldi	r21, 0x41	; 65
     acc:	69 a5       	ldd	r22, Y+41	; 0x29
     ace:	7a a5       	ldd	r23, Y+42	; 0x2a
     ad0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ad2:	9c a5       	ldd	r25, Y+44	; 0x2c
     ad4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	8e 01       	movw	r16, r28
     ade:	09 58       	subi	r16, 0x89	; 137
     ae0:	1f 4f       	sbci	r17, 0xFF	; 255
     ae2:	bc 01       	movw	r22, r24
     ae4:	cd 01       	movw	r24, r26
     ae6:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     aea:	dc 01       	movw	r26, r24
     aec:	cb 01       	movw	r24, r22
     aee:	f8 01       	movw	r30, r16
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	80 83       	st	Z, r24
     af4:	24 c0       	rjmp	.+72     	; 0xb3e <__LOCK_REGION_LENGTH__+0x73e>
     af6:	ce 01       	movw	r24, r28
     af8:	87 58       	subi	r24, 0x87	; 135
     afa:	9f 4f       	sbci	r25, 0xFF	; 255
     afc:	20 e9       	ldi	r18, 0x90	; 144
     afe:	31 e0       	ldi	r19, 0x01	; 1
     b00:	fc 01       	movw	r30, r24
     b02:	31 83       	std	Z+1, r19	; 0x01
     b04:	20 83       	st	Z, r18
     b06:	ce 01       	movw	r24, r28
     b08:	87 58       	subi	r24, 0x87	; 135
     b0a:	9f 4f       	sbci	r25, 0xFF	; 255
     b0c:	fc 01       	movw	r30, r24
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
     b16:	9e 01       	movw	r18, r28
     b18:	27 58       	subi	r18, 0x87	; 135
     b1a:	3f 4f       	sbci	r19, 0xFF	; 255
     b1c:	f9 01       	movw	r30, r18
     b1e:	91 83       	std	Z+1, r25	; 0x01
     b20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b22:	ce 01       	movw	r24, r28
     b24:	89 58       	subi	r24, 0x89	; 137
     b26:	9f 4f       	sbci	r25, 0xFF	; 255
     b28:	9e 01       	movw	r18, r28
     b2a:	29 58       	subi	r18, 0x89	; 137
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	f9 01       	movw	r30, r18
     b30:	20 81       	ld	r18, Z
     b32:	31 81       	ldd	r19, Z+1	; 0x01
     b34:	21 50       	subi	r18, 0x01	; 1
     b36:	31 09       	sbc	r19, r1
     b38:	fc 01       	movw	r30, r24
     b3a:	31 83       	std	Z+1, r19	; 0x01
     b3c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b3e:	ce 01       	movw	r24, r28
     b40:	89 58       	subi	r24, 0x89	; 137
     b42:	9f 4f       	sbci	r25, 0xFF	; 255
     b44:	fc 01       	movw	r30, r24
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	89 2b       	or	r24, r25
     b4c:	a1 f6       	brne	.-88     	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
     b4e:	2c c0       	rjmp	.+88     	; 0xba8 <__LOCK_REGION_LENGTH__+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b50:	8e 01       	movw	r16, r28
     b52:	09 58       	subi	r16, 0x89	; 137
     b54:	1f 4f       	sbci	r17, 0xFF	; 255
     b56:	ce 01       	movw	r24, r28
     b58:	8d 58       	subi	r24, 0x8D	; 141
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	fc 01       	movw	r30, r24
     b5e:	60 81       	ld	r22, Z
     b60:	71 81       	ldd	r23, Z+1	; 0x01
     b62:	82 81       	ldd	r24, Z+2	; 0x02
     b64:	93 81       	ldd	r25, Z+3	; 0x03
     b66:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	f8 01       	movw	r30, r16
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	80 83       	st	Z, r24
     b74:	ce 01       	movw	r24, r28
     b76:	85 58       	subi	r24, 0x85	; 133
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	9e 01       	movw	r18, r28
     b7c:	29 58       	subi	r18, 0x89	; 137
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	f9 01       	movw	r30, r18
     b82:	20 81       	ld	r18, Z
     b84:	31 81       	ldd	r19, Z+1	; 0x01
     b86:	fc 01       	movw	r30, r24
     b88:	31 83       	std	Z+1, r19	; 0x01
     b8a:	20 83       	st	Z, r18
     b8c:	ce 01       	movw	r24, r28
     b8e:	85 58       	subi	r24, 0x85	; 133
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	fc 01       	movw	r30, r24
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <__LOCK_REGION_LENGTH__+0x798>
     b9c:	9e 01       	movw	r18, r28
     b9e:	25 58       	subi	r18, 0x85	; 133
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	f9 01       	movw	r30, r18
     ba4:	91 83       	std	Z+1, r25	; 0x01
     ba6:	80 83       	st	Z, r24
             {
                 _delay_ms(1500);
                 state = PET; //auf PET setzen;
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	8c 87       	std	Y+12, r24	; 0x0c
     bac:	bb c0       	rjmp	.+374    	; 0xd24 <__LOCK_REGION_LENGTH__+0x924>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e8       	ldi	r25, 0x80	; 128
     bb2:	ab eb       	ldi	r26, 0xBB	; 187
     bb4:	b4 e4       	ldi	r27, 0x44	; 68
     bb6:	8d a7       	std	Y+45, r24	; 0x2d
     bb8:	9e a7       	std	Y+46, r25	; 0x2e
     bba:	af a7       	std	Y+47, r26	; 0x2f
     bbc:	b8 ab       	std	Y+48, r27	; 0x30

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bbe:	8e 01       	movw	r16, r28
     bc0:	03 58       	subi	r16, 0x83	; 131
     bc2:	1f 4f       	sbci	r17, 0xFF	; 255
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	4a e7       	ldi	r20, 0x7A	; 122
     bca:	55 e4       	ldi	r21, 0x45	; 69
     bcc:	6d a5       	ldd	r22, Y+45	; 0x2d
     bce:	7e a5       	ldd	r23, Y+46	; 0x2e
     bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
     bd2:	98 a9       	ldd	r25, Y+48	; 0x30
     bd4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	f8 01       	movw	r30, r16
     bde:	80 83       	st	Z, r24
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	a2 83       	std	Z+2, r26	; 0x02
     be4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     be6:	ce 01       	movw	r24, r28
     be8:	83 58       	subi	r24, 0x83	; 131
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	fc 01       	movw	r30, r24
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
     c02:	88 23       	and	r24, r24
     c04:	4c f4       	brge	.+18     	; 0xc18 <__LOCK_REGION_LENGTH__+0x818>
		__ticks = 1;
     c06:	ce 01       	movw	r24, r28
     c08:	8f 57       	subi	r24, 0x7F	; 127
     c0a:	9f 4f       	sbci	r25, 0xFF	; 255
     c0c:	21 e0       	ldi	r18, 0x01	; 1
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	fc 01       	movw	r30, r24
     c12:	31 83       	std	Z+1, r19	; 0x01
     c14:	20 83       	st	Z, r18
     c16:	69 c0       	rjmp	.+210    	; 0xcea <__LOCK_REGION_LENGTH__+0x8ea>
	else if (__tmp > 65535)
     c18:	ce 01       	movw	r24, r28
     c1a:	83 58       	subi	r24, 0x83	; 131
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	4f e7       	ldi	r20, 0x7F	; 127
     c24:	57 e4       	ldi	r21, 0x47	; 71
     c26:	fc 01       	movw	r30, r24
     c28:	60 81       	ld	r22, Z
     c2a:	71 81       	ldd	r23, Z+1	; 0x01
     c2c:	82 81       	ldd	r24, Z+2	; 0x02
     c2e:	93 81       	ldd	r25, Z+3	; 0x03
     c30:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
     c34:	18 16       	cp	r1, r24
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__LOCK_REGION_LENGTH__+0x83a>
     c38:	46 c0       	rjmp	.+140    	; 0xcc6 <__LOCK_REGION_LENGTH__+0x8c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e2       	ldi	r20, 0x20	; 32
     c40:	51 e4       	ldi	r21, 0x41	; 65
     c42:	6d a5       	ldd	r22, Y+45	; 0x2d
     c44:	7e a5       	ldd	r23, Y+46	; 0x2e
     c46:	8f a5       	ldd	r24, Y+47	; 0x2f
     c48:	98 a9       	ldd	r25, Y+48	; 0x30
     c4a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	8e 01       	movw	r16, r28
     c54:	0f 57       	subi	r16, 0x7F	; 127
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	bc 01       	movw	r22, r24
     c5a:	cd 01       	movw	r24, r26
     c5c:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	f8 01       	movw	r30, r16
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	80 83       	st	Z, r24
     c6a:	24 c0       	rjmp	.+72     	; 0xcb4 <__LOCK_REGION_LENGTH__+0x8b4>
     c6c:	ce 01       	movw	r24, r28
     c6e:	8d 57       	subi	r24, 0x7D	; 125
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	20 e9       	ldi	r18, 0x90	; 144
     c74:	31 e0       	ldi	r19, 0x01	; 1
     c76:	fc 01       	movw	r30, r24
     c78:	31 83       	std	Z+1, r19	; 0x01
     c7a:	20 83       	st	Z, r18
     c7c:	ce 01       	movw	r24, r28
     c7e:	8d 57       	subi	r24, 0x7D	; 125
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <__LOCK_REGION_LENGTH__+0x888>
     c8c:	9e 01       	movw	r18, r28
     c8e:	2d 57       	subi	r18, 0x7D	; 125
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	f9 01       	movw	r30, r18
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c98:	ce 01       	movw	r24, r28
     c9a:	8f 57       	subi	r24, 0x7F	; 127
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	9e 01       	movw	r18, r28
     ca0:	2f 57       	subi	r18, 0x7F	; 127
     ca2:	3f 4f       	sbci	r19, 0xFF	; 255
     ca4:	f9 01       	movw	r30, r18
     ca6:	20 81       	ld	r18, Z
     ca8:	31 81       	ldd	r19, Z+1	; 0x01
     caa:	21 50       	subi	r18, 0x01	; 1
     cac:	31 09       	sbc	r19, r1
     cae:	fc 01       	movw	r30, r24
     cb0:	31 83       	std	Z+1, r19	; 0x01
     cb2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb4:	ce 01       	movw	r24, r28
     cb6:	8f 57       	subi	r24, 0x7F	; 127
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	89 2b       	or	r24, r25
     cc2:	a1 f6       	brne	.-88     	; 0xc6c <__LOCK_REGION_LENGTH__+0x86c>
     cc4:	2c c0       	rjmp	.+88     	; 0xd1e <__LOCK_REGION_LENGTH__+0x91e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc6:	8e 01       	movw	r16, r28
     cc8:	0f 57       	subi	r16, 0x7F	; 127
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
     ccc:	ce 01       	movw	r24, r28
     cce:	83 58       	subi	r24, 0x83	; 131
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	fc 01       	movw	r30, r24
     cd4:	60 81       	ld	r22, Z
     cd6:	71 81       	ldd	r23, Z+1	; 0x01
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	f8 01       	movw	r30, r16
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	80 83       	st	Z, r24
     cea:	ce 01       	movw	r24, r28
     cec:	8b 57       	subi	r24, 0x7B	; 123
     cee:	9f 4f       	sbci	r25, 0xFF	; 255
     cf0:	9e 01       	movw	r18, r28
     cf2:	2f 57       	subi	r18, 0x7F	; 127
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	f9 01       	movw	r30, r18
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	fc 01       	movw	r30, r24
     cfe:	31 83       	std	Z+1, r19	; 0x01
     d00:	20 83       	st	Z, r18
     d02:	ce 01       	movw	r24, r28
     d04:	8b 57       	subi	r24, 0x7B	; 123
     d06:	9f 4f       	sbci	r25, 0xFF	; 255
     d08:	fc 01       	movw	r30, r24
     d0a:	80 81       	ld	r24, Z
     d0c:	91 81       	ldd	r25, Z+1	; 0x01
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <__LOCK_REGION_LENGTH__+0x90e>
     d12:	9e 01       	movw	r18, r28
     d14:	2b 57       	subi	r18, 0x7B	; 123
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	f9 01       	movw	r30, r18
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	80 83       	st	Z, r24
             }
             else
             {
                 _delay_ms(1500);
                 state = ALU; //auf Alu setzen;
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	8c 87       	std	Y+12, r24	; 0x0c
             }
            break;
     d22:	c7 c1       	rjmp	.+910    	; 0x10b2 <__LOCK_REGION_LENGTH__+0xcb2>
     d24:	c6 c1       	rjmp	.+908    	; 0x10b2 <__LOCK_REGION_LENGTH__+0xcb2>
            case PET:
            led_Tonne_zu = 0;
     d26:	1d 82       	std	Y+5, r1	; 0x05
     d28:	1c 82       	std	Y+4, r1	; 0x04
            led_Tonne_auf = 0;           
     d2a:	1b 82       	std	Y+3, r1	; 0x03
     d2c:	1a 82       	std	Y+2, r1	; 0x02
            rot = 0;
     d2e:	1f 82       	std	Y+7, r1	; 0x07
     d30:	1e 82       	std	Y+6, r1	; 0x06
            gruen = 250;
     d32:	8a ef       	ldi	r24, 0xFA	; 250
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9b 87       	std	Y+11, r25	; 0x0b
     d38:	8a 87       	std	Y+10, r24	; 0x0a
            blau = 0;
     d3a:	19 86       	std	Y+9, r1	; 0x09
     d3c:	18 86       	std	Y+8, r1	; 0x08
            rgbWrite(rot, gruen, blau);
     d3e:	48 85       	ldd	r20, Y+8	; 0x08
     d40:	59 85       	ldd	r21, Y+9	; 0x09
     d42:	2a 85       	ldd	r18, Y+10	; 0x0a
     d44:	3b 85       	ldd	r19, Y+11	; 0x0b
     d46:	8e 81       	ldd	r24, Y+6	; 0x06
     d48:	9f 81       	ldd	r25, Y+7	; 0x07
     d4a:	b9 01       	movw	r22, r18
     d4c:	a0 d5       	rcall	.+2880   	; 0x188e <rgbWrite>
            lcdLog("PET erkannt");
     d4e:	85 e3       	ldi	r24, 0x35	; 53
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	89 2f       	mov	r24, r25
     d54:	8f 93       	push	r24
     d56:	85 e3       	ldi	r24, 0x35	; 53
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	8f 93       	push	r24
     d5c:	0e 94 ce 10 	call	0x219c	; 0x219c <lcdLog>
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e4       	ldi	r25, 0x40	; 64
     d68:	ac e1       	ldi	r26, 0x1C	; 28
     d6a:	b5 e4       	ldi	r27, 0x45	; 69
     d6c:	89 ab       	std	Y+49, r24	; 0x31
     d6e:	9a ab       	std	Y+50, r25	; 0x32
     d70:	ab ab       	std	Y+51, r26	; 0x33
     d72:	bc ab       	std	Y+52, r27	; 0x34

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d74:	8e 01       	movw	r16, r28
     d76:	09 57       	subi	r16, 0x79	; 121
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	4a e7       	ldi	r20, 0x7A	; 122
     d80:	55 e4       	ldi	r21, 0x45	; 69
     d82:	69 a9       	ldd	r22, Y+49	; 0x31
     d84:	7a a9       	ldd	r23, Y+50	; 0x32
     d86:	8b a9       	ldd	r24, Y+51	; 0x33
     d88:	9c a9       	ldd	r25, Y+52	; 0x34
     d8a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	f8 01       	movw	r30, r16
     d94:	80 83       	st	Z, r24
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	a2 83       	std	Z+2, r26	; 0x02
     d9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d9c:	ce 01       	movw	r24, r28
     d9e:	89 57       	subi	r24, 0x79	; 121
     da0:	9f 4f       	sbci	r25, 0xFF	; 255
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e8       	ldi	r20, 0x80	; 128
     da8:	5f e3       	ldi	r21, 0x3F	; 63
     daa:	fc 01       	movw	r30, r24
     dac:	60 81       	ld	r22, Z
     dae:	71 81       	ldd	r23, Z+1	; 0x01
     db0:	82 81       	ldd	r24, Z+2	; 0x02
     db2:	93 81       	ldd	r25, Z+3	; 0x03
     db4:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
     db8:	88 23       	and	r24, r24
     dba:	4c f4       	brge	.+18     	; 0xdce <__LOCK_REGION_LENGTH__+0x9ce>
		__ticks = 1;
     dbc:	ce 01       	movw	r24, r28
     dbe:	85 57       	subi	r24, 0x75	; 117
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	21 e0       	ldi	r18, 0x01	; 1
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	fc 01       	movw	r30, r24
     dc8:	31 83       	std	Z+1, r19	; 0x01
     dca:	20 83       	st	Z, r18
     dcc:	69 c0       	rjmp	.+210    	; 0xea0 <__LOCK_REGION_LENGTH__+0xaa0>
	else if (__tmp > 65535)
     dce:	ce 01       	movw	r24, r28
     dd0:	89 57       	subi	r24, 0x79	; 121
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	3f ef       	ldi	r19, 0xFF	; 255
     dd8:	4f e7       	ldi	r20, 0x7F	; 127
     dda:	57 e4       	ldi	r21, 0x47	; 71
     ddc:	fc 01       	movw	r30, r24
     dde:	60 81       	ld	r22, Z
     de0:	71 81       	ldd	r23, Z+1	; 0x01
     de2:	82 81       	ldd	r24, Z+2	; 0x02
     de4:	93 81       	ldd	r25, Z+3	; 0x03
     de6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
     dea:	18 16       	cp	r1, r24
     dec:	0c f0       	brlt	.+2      	; 0xdf0 <__LOCK_REGION_LENGTH__+0x9f0>
     dee:	46 c0       	rjmp	.+140    	; 0xe7c <__LOCK_REGION_LENGTH__+0xa7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e2       	ldi	r20, 0x20	; 32
     df6:	51 e4       	ldi	r21, 0x41	; 65
     df8:	69 a9       	ldd	r22, Y+49	; 0x31
     dfa:	7a a9       	ldd	r23, Y+50	; 0x32
     dfc:	8b a9       	ldd	r24, Y+51	; 0x33
     dfe:	9c a9       	ldd	r25, Y+52	; 0x34
     e00:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	8e 01       	movw	r16, r28
     e0a:	05 57       	subi	r16, 0x75	; 117
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	f8 01       	movw	r30, r16
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
     e20:	24 c0       	rjmp	.+72     	; 0xe6a <__LOCK_REGION_LENGTH__+0xa6a>
     e22:	ce 01       	movw	r24, r28
     e24:	83 57       	subi	r24, 0x73	; 115
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	20 e9       	ldi	r18, 0x90	; 144
     e2a:	31 e0       	ldi	r19, 0x01	; 1
     e2c:	fc 01       	movw	r30, r24
     e2e:	31 83       	std	Z+1, r19	; 0x01
     e30:	20 83       	st	Z, r18
     e32:	ce 01       	movw	r24, r28
     e34:	83 57       	subi	r24, 0x73	; 115
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	fc 01       	movw	r30, r24
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <__LOCK_REGION_LENGTH__+0xa3e>
     e42:	9e 01       	movw	r18, r28
     e44:	23 57       	subi	r18, 0x73	; 115
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	f9 01       	movw	r30, r18
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4e:	ce 01       	movw	r24, r28
     e50:	85 57       	subi	r24, 0x75	; 117
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	9e 01       	movw	r18, r28
     e56:	25 57       	subi	r18, 0x75	; 117
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	f9 01       	movw	r30, r18
     e5c:	20 81       	ld	r18, Z
     e5e:	31 81       	ldd	r19, Z+1	; 0x01
     e60:	21 50       	subi	r18, 0x01	; 1
     e62:	31 09       	sbc	r19, r1
     e64:	fc 01       	movw	r30, r24
     e66:	31 83       	std	Z+1, r19	; 0x01
     e68:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6a:	ce 01       	movw	r24, r28
     e6c:	85 57       	subi	r24, 0x75	; 117
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	fc 01       	movw	r30, r24
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	89 2b       	or	r24, r25
     e78:	a1 f6       	brne	.-88     	; 0xe22 <__LOCK_REGION_LENGTH__+0xa22>
     e7a:	2c c0       	rjmp	.+88     	; 0xed4 <__LOCK_REGION_LENGTH__+0xad4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7c:	8e 01       	movw	r16, r28
     e7e:	05 57       	subi	r16, 0x75	; 117
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	ce 01       	movw	r24, r28
     e84:	89 57       	subi	r24, 0x79	; 121
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	fc 01       	movw	r30, r24
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	f8 01       	movw	r30, r16
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	80 83       	st	Z, r24
     ea0:	ce 01       	movw	r24, r28
     ea2:	81 57       	subi	r24, 0x71	; 113
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	9e 01       	movw	r18, r28
     ea8:	25 57       	subi	r18, 0x75	; 117
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	f9 01       	movw	r30, r18
     eae:	20 81       	ld	r18, Z
     eb0:	31 81       	ldd	r19, Z+1	; 0x01
     eb2:	fc 01       	movw	r30, r24
     eb4:	31 83       	std	Z+1, r19	; 0x01
     eb6:	20 83       	st	Z, r18
     eb8:	ce 01       	movw	r24, r28
     eba:	81 57       	subi	r24, 0x71	; 113
     ebc:	9f 4f       	sbci	r25, 0xFF	; 255
     ebe:	fc 01       	movw	r30, r24
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <__LOCK_REGION_LENGTH__+0xac4>
     ec8:	9e 01       	movw	r18, r28
     eca:	21 57       	subi	r18, 0x71	; 113
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
     ece:	f9 01       	movw	r30, r18
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
            _delay_ms(2500);
            state = TONNE_AUF;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	8c 87       	std	Y+12, r24	; 0x0c
            if (taster_Abfall_drinnen)
     ed8:	8f 89       	ldd	r24, Y+23	; 0x17
     eda:	98 8d       	ldd	r25, Y+24	; 0x18
     edc:	89 2b       	or	r24, r25
     ede:	09 f4       	brne	.+2      	; 0xee2 <__LOCK_REGION_LENGTH__+0xae2>
     ee0:	e5 c0       	rjmp	.+458    	; 0x10ac <__LOCK_REGION_LENGTH__+0xcac>
            {
                state = TONNE_AUF; //auf Tonne auf setzen;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	8c 87       	std	Y+12, r24	; 0x0c
                
            }
            break;
     ee6:	e2 c0       	rjmp	.+452    	; 0x10ac <__LOCK_REGION_LENGTH__+0xcac>
            case ALU:
            rot = 0;
     ee8:	1f 82       	std	Y+7, r1	; 0x07
     eea:	1e 82       	std	Y+6, r1	; 0x06
            gruen = 0;
     eec:	1b 86       	std	Y+11, r1	; 0x0b
     eee:	1a 86       	std	Y+10, r1	; 0x0a
            blau = 250;
     ef0:	8a ef       	ldi	r24, 0xFA	; 250
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	99 87       	std	Y+9, r25	; 0x09
     ef6:	88 87       	std	Y+8, r24	; 0x08
            led_Tonne_zu = 0;
     ef8:	1d 82       	std	Y+5, r1	; 0x05
     efa:	1c 82       	std	Y+4, r1	; 0x04
            led_Tonne_auf = 0;
     efc:	1b 82       	std	Y+3, r1	; 0x03
     efe:	1a 82       	std	Y+2, r1	; 0x02
            rgbWrite(rot, gruen, blau);
     f00:	48 85       	ldd	r20, Y+8	; 0x08
     f02:	59 85       	ldd	r21, Y+9	; 0x09
     f04:	2a 85       	ldd	r18, Y+10	; 0x0a
     f06:	3b 85       	ldd	r19, Y+11	; 0x0b
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	9f 81       	ldd	r25, Y+7	; 0x07
     f0c:	b9 01       	movw	r22, r18
     f0e:	bf d4       	rcall	.+2430   	; 0x188e <rgbWrite>
            lcdLog("Alu erkannt");
     f10:	81 e4       	ldi	r24, 0x41	; 65
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	89 2f       	mov	r24, r25
     f16:	8f 93       	push	r24
     f18:	81 e4       	ldi	r24, 0x41	; 65
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	8f 93       	push	r24
     f1e:	0e 94 ce 10 	call	0x219c	; 0x219c <lcdLog>
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e4       	ldi	r25, 0x40	; 64
     f2a:	ac e1       	ldi	r26, 0x1C	; 28
     f2c:	b5 e4       	ldi	r27, 0x45	; 69
     f2e:	8d ab       	std	Y+53, r24	; 0x35
     f30:	9e ab       	std	Y+54, r25	; 0x36
     f32:	af ab       	std	Y+55, r26	; 0x37
     f34:	b8 af       	std	Y+56, r27	; 0x38

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f36:	8e 01       	movw	r16, r28
     f38:	0f 56       	subi	r16, 0x6F	; 111
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	4a e7       	ldi	r20, 0x7A	; 122
     f42:	55 e4       	ldi	r21, 0x45	; 69
     f44:	6d a9       	ldd	r22, Y+53	; 0x35
     f46:	7e a9       	ldd	r23, Y+54	; 0x36
     f48:	8f a9       	ldd	r24, Y+55	; 0x37
     f4a:	98 ad       	ldd	r25, Y+56	; 0x38
     f4c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	f8 01       	movw	r30, r16
     f56:	80 83       	st	Z, r24
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	a2 83       	std	Z+2, r26	; 0x02
     f5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f5e:	ce 01       	movw	r24, r28
     f60:	8f 56       	subi	r24, 0x6F	; 111
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e8       	ldi	r20, 0x80	; 128
     f6a:	5f e3       	ldi	r21, 0x3F	; 63
     f6c:	fc 01       	movw	r30, r24
     f6e:	60 81       	ld	r22, Z
     f70:	71 81       	ldd	r23, Z+1	; 0x01
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	4c f4       	brge	.+18     	; 0xf90 <__LOCK_REGION_LENGTH__+0xb90>
		__ticks = 1;
     f7e:	ce 01       	movw	r24, r28
     f80:	8b 56       	subi	r24, 0x6B	; 107
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	31 83       	std	Z+1, r19	; 0x01
     f8c:	20 83       	st	Z, r18
     f8e:	69 c0       	rjmp	.+210    	; 0x1062 <__LOCK_REGION_LENGTH__+0xc62>
	else if (__tmp > 65535)
     f90:	ce 01       	movw	r24, r28
     f92:	8f 56       	subi	r24, 0x6F	; 111
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	4f e7       	ldi	r20, 0x7F	; 127
     f9c:	57 e4       	ldi	r21, 0x47	; 71
     f9e:	fc 01       	movw	r30, r24
     fa0:	60 81       	ld	r22, Z
     fa2:	71 81       	ldd	r23, Z+1	; 0x01
     fa4:	82 81       	ldd	r24, Z+2	; 0x02
     fa6:	93 81       	ldd	r25, Z+3	; 0x03
     fa8:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
     fac:	18 16       	cp	r1, r24
     fae:	0c f0       	brlt	.+2      	; 0xfb2 <__LOCK_REGION_LENGTH__+0xbb2>
     fb0:	46 c0       	rjmp	.+140    	; 0x103e <__LOCK_REGION_LENGTH__+0xc3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	6d a9       	ldd	r22, Y+53	; 0x35
     fbc:	7e a9       	ldd	r23, Y+54	; 0x36
     fbe:	8f a9       	ldd	r24, Y+55	; 0x37
     fc0:	98 ad       	ldd	r25, Y+56	; 0x38
     fc2:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	8e 01       	movw	r16, r28
     fcc:	0b 56       	subi	r16, 0x6B	; 107
     fce:	1f 4f       	sbci	r17, 0xFF	; 255
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	f8 01       	movw	r30, r16
     fde:	91 83       	std	Z+1, r25	; 0x01
     fe0:	80 83       	st	Z, r24
     fe2:	24 c0       	rjmp	.+72     	; 0x102c <__LOCK_REGION_LENGTH__+0xc2c>
     fe4:	ce 01       	movw	r24, r28
     fe6:	89 56       	subi	r24, 0x69	; 105
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	20 e9       	ldi	r18, 0x90	; 144
     fec:	31 e0       	ldi	r19, 0x01	; 1
     fee:	fc 01       	movw	r30, r24
     ff0:	31 83       	std	Z+1, r19	; 0x01
     ff2:	20 83       	st	Z, r18
     ff4:	ce 01       	movw	r24, r28
     ff6:	89 56       	subi	r24, 0x69	; 105
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	fc 01       	movw	r30, r24
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <__LOCK_REGION_LENGTH__+0xc00>
    1004:	9e 01       	movw	r18, r28
    1006:	29 56       	subi	r18, 0x69	; 105
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	f9 01       	movw	r30, r18
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	ce 01       	movw	r24, r28
    1012:	8b 56       	subi	r24, 0x6B	; 107
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	9e 01       	movw	r18, r28
    1018:	2b 56       	subi	r18, 0x6B	; 107
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	f9 01       	movw	r30, r18
    101e:	20 81       	ld	r18, Z
    1020:	31 81       	ldd	r19, Z+1	; 0x01
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	31 09       	sbc	r19, r1
    1026:	fc 01       	movw	r30, r24
    1028:	31 83       	std	Z+1, r19	; 0x01
    102a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	ce 01       	movw	r24, r28
    102e:	8b 56       	subi	r24, 0x6B	; 107
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	fc 01       	movw	r30, r24
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	89 2b       	or	r24, r25
    103a:	a1 f6       	brne	.-88     	; 0xfe4 <__LOCK_REGION_LENGTH__+0xbe4>
    103c:	2c c0       	rjmp	.+88     	; 0x1096 <__LOCK_REGION_LENGTH__+0xc96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103e:	8e 01       	movw	r16, r28
    1040:	0b 56       	subi	r16, 0x6B	; 107
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	ce 01       	movw	r24, r28
    1046:	8f 56       	subi	r24, 0x6F	; 111
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	fc 01       	movw	r30, r24
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	f8 01       	movw	r30, r16
    105e:	91 83       	std	Z+1, r25	; 0x01
    1060:	80 83       	st	Z, r24
    1062:	ce 01       	movw	r24, r28
    1064:	87 56       	subi	r24, 0x67	; 103
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	9e 01       	movw	r18, r28
    106a:	2b 56       	subi	r18, 0x6B	; 107
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	f9 01       	movw	r30, r18
    1070:	20 81       	ld	r18, Z
    1072:	31 81       	ldd	r19, Z+1	; 0x01
    1074:	fc 01       	movw	r30, r24
    1076:	31 83       	std	Z+1, r19	; 0x01
    1078:	20 83       	st	Z, r18
    107a:	ce 01       	movw	r24, r28
    107c:	87 56       	subi	r24, 0x67	; 103
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	fc 01       	movw	r30, r24
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <__LOCK_REGION_LENGTH__+0xc86>
    108a:	9e 01       	movw	r18, r28
    108c:	27 56       	subi	r18, 0x67	; 103
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
    1090:	f9 01       	movw	r30, r18
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	80 83       	st	Z, r24
            _delay_ms(2500);
            state = TONNE_AUF;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	8c 87       	std	Y+12, r24	; 0x0c
            if (taster_Abfall_drinnen)
    109a:	8f 89       	ldd	r24, Y+23	; 0x17
    109c:	98 8d       	ldd	r25, Y+24	; 0x18
    109e:	89 2b       	or	r24, r25
    10a0:	39 f0       	breq	.+14     	; 0x10b0 <__LOCK_REGION_LENGTH__+0xcb0>
            {
                state = TONNE_AUF; //Zustand auf Tonne auf setzen;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	8c 87       	std	Y+12, r24	; 0x0c
                
            }
            break;
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <__LOCK_REGION_LENGTH__+0xcb0>
            lcdLog("Tonne Auf");
            if (taster_Abfall)
            {
                state = TONNE_ZU; //Zustand auf Tonne zu setzen;
            }
            break;
    10a8:	00 00       	nop
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <__LOCK_REGION_LENGTH__+0xcb2>
            if (taster_Abfall_drinnen)
            {
                state = TONNE_AUF; //auf Tonne auf setzen;
                
            }
            break;
    10ac:	00 00       	nop
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <__LOCK_REGION_LENGTH__+0xcb2>
            if (taster_Abfall_drinnen)
            {
                state = TONNE_AUF; //Zustand auf Tonne auf setzen;
                
            }
            break;
    10b0:	00 00       	nop
            default:
            ;
        }
        //Ausgabe------------------------------------------------------------------
        ledWriteAll( led_Tonne_auf | led_Tonne_zu );
    10b2:	2a 81       	ldd	r18, Y+2	; 0x02
    10b4:	3b 81       	ldd	r19, Y+3	; 0x03
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	82 2b       	or	r24, r18
    10bc:	93 2b       	or	r25, r19
    10be:	a6 d2       	rcall	.+1356   	; 0x160c <ledWriteAll>
        rgbWrite(rot, gruen, blau);
    10c0:	48 85       	ldd	r20, Y+8	; 0x08
    10c2:	59 85       	ldd	r21, Y+9	; 0x09
    10c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    10c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    10c8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ca:	9f 81       	ldd	r25, Y+7	; 0x07
    10cc:	b9 01       	movw	r22, r18
    10ce:	df d3       	rcall	.+1982   	; 0x188e <rgbWrite>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 e2       	ldi	r26, 0x20	; 32
    10d6:	b1 e4       	ldi	r27, 0x41	; 65
    10d8:	89 af       	std	Y+57, r24	; 0x39
    10da:	9a af       	std	Y+58, r25	; 0x3a
    10dc:	ab af       	std	Y+59, r26	; 0x3b
    10de:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10e0:	8e 01       	movw	r16, r28
    10e2:	05 56       	subi	r16, 0x65	; 101
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a e7       	ldi	r20, 0x7A	; 122
    10ec:	55 e4       	ldi	r21, 0x45	; 69
    10ee:	69 ad       	ldd	r22, Y+57	; 0x39
    10f0:	7a ad       	ldd	r23, Y+58	; 0x3a
    10f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    10f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    10f6:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	f8 01       	movw	r30, r16
    1100:	80 83       	st	Z, r24
    1102:	91 83       	std	Z+1, r25	; 0x01
    1104:	a2 83       	std	Z+2, r26	; 0x02
    1106:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1108:	ce 01       	movw	r24, r28
    110a:	85 56       	subi	r24, 0x65	; 101
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	5f e3       	ldi	r21, 0x3F	; 63
    1116:	fc 01       	movw	r30, r24
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
    1124:	88 23       	and	r24, r24
    1126:	4c f4       	brge	.+18     	; 0x113a <__LOCK_REGION_LENGTH__+0xd3a>
		__ticks = 1;
    1128:	ce 01       	movw	r24, r28
    112a:	81 56       	subi	r24, 0x61	; 97
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	31 83       	std	Z+1, r19	; 0x01
    1136:	20 83       	st	Z, r18
    1138:	69 c0       	rjmp	.+210    	; 0x120c <__LOCK_REGION_LENGTH__+0xe0c>
	else if (__tmp > 65535)
    113a:	ce 01       	movw	r24, r28
    113c:	85 56       	subi	r24, 0x65	; 101
    113e:	9f 4f       	sbci	r25, 0xFF	; 255
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	4f e7       	ldi	r20, 0x7F	; 127
    1146:	57 e4       	ldi	r21, 0x47	; 71
    1148:	fc 01       	movw	r30, r24
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
    1156:	18 16       	cp	r1, r24
    1158:	0c f0       	brlt	.+2      	; 0x115c <__LOCK_REGION_LENGTH__+0xd5c>
    115a:	46 c0       	rjmp	.+140    	; 0x11e8 <__LOCK_REGION_LENGTH__+0xde8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	69 ad       	ldd	r22, Y+57	; 0x39
    1166:	7a ad       	ldd	r23, Y+58	; 0x3a
    1168:	8b ad       	ldd	r24, Y+59	; 0x3b
    116a:	9c ad       	ldd	r25, Y+60	; 0x3c
    116c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	8e 01       	movw	r16, r28
    1176:	01 56       	subi	r16, 0x61	; 97
    1178:	1f 4f       	sbci	r17, 0xFF	; 255
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	f8 01       	movw	r30, r16
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
    118c:	24 c0       	rjmp	.+72     	; 0x11d6 <__LOCK_REGION_LENGTH__+0xdd6>
    118e:	ce 01       	movw	r24, r28
    1190:	8f 55       	subi	r24, 0x5F	; 95
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	20 e9       	ldi	r18, 0x90	; 144
    1196:	31 e0       	ldi	r19, 0x01	; 1
    1198:	fc 01       	movw	r30, r24
    119a:	31 83       	std	Z+1, r19	; 0x01
    119c:	20 83       	st	Z, r18
    119e:	ce 01       	movw	r24, r28
    11a0:	8f 55       	subi	r24, 0x5F	; 95
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	fc 01       	movw	r30, r24
    11a6:	80 81       	ld	r24, Z
    11a8:	91 81       	ldd	r25, Z+1	; 0x01
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <__LOCK_REGION_LENGTH__+0xdaa>
    11ae:	9e 01       	movw	r18, r28
    11b0:	2f 55       	subi	r18, 0x5F	; 95
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	f9 01       	movw	r30, r18
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ba:	ce 01       	movw	r24, r28
    11bc:	81 56       	subi	r24, 0x61	; 97
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	9e 01       	movw	r18, r28
    11c2:	21 56       	subi	r18, 0x61	; 97
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	f9 01       	movw	r30, r18
    11c8:	20 81       	ld	r18, Z
    11ca:	31 81       	ldd	r19, Z+1	; 0x01
    11cc:	21 50       	subi	r18, 0x01	; 1
    11ce:	31 09       	sbc	r19, r1
    11d0:	fc 01       	movw	r30, r24
    11d2:	31 83       	std	Z+1, r19	; 0x01
    11d4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d6:	ce 01       	movw	r24, r28
    11d8:	81 56       	subi	r24, 0x61	; 97
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	fc 01       	movw	r30, r24
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	89 2b       	or	r24, r25
    11e4:	a1 f6       	brne	.-88     	; 0x118e <__LOCK_REGION_LENGTH__+0xd8e>
    11e6:	2c c0       	rjmp	.+88     	; 0x1240 <__LOCK_REGION_LENGTH__+0xe40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e8:	8e 01       	movw	r16, r28
    11ea:	01 56       	subi	r16, 0x61	; 97
    11ec:	1f 4f       	sbci	r17, 0xFF	; 255
    11ee:	ce 01       	movw	r24, r28
    11f0:	85 56       	subi	r24, 0x65	; 101
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	fc 01       	movw	r30, r24
    11f6:	60 81       	ld	r22, Z
    11f8:	71 81       	ldd	r23, Z+1	; 0x01
    11fa:	82 81       	ldd	r24, Z+2	; 0x02
    11fc:	93 81       	ldd	r25, Z+3	; 0x03
    11fe:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	f8 01       	movw	r30, r16
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
    120c:	ce 01       	movw	r24, r28
    120e:	8d 55       	subi	r24, 0x5D	; 93
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	9e 01       	movw	r18, r28
    1214:	21 56       	subi	r18, 0x61	; 97
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	f9 01       	movw	r30, r18
    121a:	20 81       	ld	r18, Z
    121c:	31 81       	ldd	r19, Z+1	; 0x01
    121e:	fc 01       	movw	r30, r24
    1220:	31 83       	std	Z+1, r19	; 0x01
    1222:	20 83       	st	Z, r18
    1224:	ce 01       	movw	r24, r28
    1226:	8d 55       	subi	r24, 0x5D	; 93
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	fc 01       	movw	r30, r24
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <__LOCK_REGION_LENGTH__+0xe30>
    1234:	9e 01       	movw	r18, r28
    1236:	2d 55       	subi	r18, 0x5D	; 93
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	f9 01       	movw	r30, r18
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
        _delay_ms(SYSTEMTACKT_MS);
    }
    1240:	0c 94 bc 00 	jmp	0x178	; 0x178 <main+0x52>

00001244 <initBoard>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	64 97       	sbiw	r28, 0x14	; 20
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8c 8b       	std	Y+20, r24	; 0x14
    125a:	85 e5       	ldi	r24, 0x55	; 85
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	25 e5       	ldi	r18, 0x55	; 85
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	f9 01       	movw	r30, r18
    1264:	20 81       	ld	r18, Z
    1266:	fc 01       	movw	r30, r24
    1268:	20 83       	st	Z, r18
    126a:	82 e2       	ldi	r24, 0x22	; 34
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	fc 01       	movw	r30, r24
    1270:	10 82       	st	Z, r1
    1272:	81 e2       	ldi	r24, 0x21	; 33
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	2f ef       	ldi	r18, 0xFF	; 255
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
    127c:	85 e2       	ldi	r24, 0x25	; 37
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	fc 01       	movw	r30, r24
    1282:	10 82       	st	Z, r1
    1284:	84 e2       	ldi	r24, 0x24	; 36
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	2f ef       	ldi	r18, 0xFF	; 255
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
    128e:	88 e2       	ldi	r24, 0x28	; 40
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	2f ef       	ldi	r18, 0xFF	; 255
    1294:	fc 01       	movw	r30, r24
    1296:	20 83       	st	Z, r18
    1298:	87 e2       	ldi	r24, 0x27	; 39
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	10 82       	st	Z, r1
    12a0:	8b e2       	ldi	r24, 0x2B	; 43
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	2f ef       	ldi	r18, 0xFF	; 255
    12a6:	fc 01       	movw	r30, r24
    12a8:	20 83       	st	Z, r18
    12aa:	8a e2       	ldi	r24, 0x2A	; 42
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	fc 01       	movw	r30, r24
    12b0:	10 82       	st	Z, r1
    12b2:	8e e2       	ldi	r24, 0x2E	; 46
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	2f ef       	ldi	r18, 0xFF	; 255
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 83       	st	Z, r18
    12bc:	8d e2       	ldi	r24, 0x2D	; 45
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	fc 01       	movw	r30, r24
    12c2:	10 82       	st	Z, r1
    12c4:	8e e2       	ldi	r24, 0x2E	; 46
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	2e e2       	ldi	r18, 0x2E	; 46
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	2b 7f       	andi	r18, 0xFB	; 251
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
    12d6:	81 e3       	ldi	r24, 0x31	; 49
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	fc 01       	movw	r30, r24
    12dc:	10 82       	st	Z, r1
    12de:	80 e3       	ldi	r24, 0x30	; 48
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	fc 01       	movw	r30, r24
    12e4:	10 82       	st	Z, r1
    12e6:	84 e3       	ldi	r24, 0x34	; 52
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	24 e0       	ldi	r18, 0x04	; 4
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
    12f0:	83 e3       	ldi	r24, 0x33	; 51
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	23 e3       	ldi	r18, 0x33	; 51
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	f9 01       	movw	r30, r18
    12fa:	20 81       	ld	r18, Z
    12fc:	23 60       	ori	r18, 0x03	; 3
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
    1302:	83 e3       	ldi	r24, 0x33	; 51
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	23 e3       	ldi	r18, 0x33	; 51
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	f9 01       	movw	r30, r18
    130c:	20 81       	ld	r18, Z
    130e:	20 62       	ori	r18, 0x20	; 32
    1310:	fc 01       	movw	r30, r24
    1312:	20 83       	st	Z, r18
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	27 ec       	ldi	r18, 0xC7	; 199
    131a:	fc 01       	movw	r30, r24
    131c:	20 83       	st	Z, r18
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	28 e3       	ldi	r18, 0x38	; 56
    1324:	fc 01       	movw	r30, r24
    1326:	20 83       	st	Z, r18
    1328:	85 e0       	ldi	r24, 0x05	; 5
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	fc 01       	movw	r30, r24
    132e:	10 82       	st	Z, r1
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	2f ef       	ldi	r18, 0xFF	; 255
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
    133a:	88 e0       	ldi	r24, 0x08	; 8
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	fc 01       	movw	r30, r24
    1340:	10 82       	st	Z, r1
    1342:	87 e0       	ldi	r24, 0x07	; 7
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	fc 01       	movw	r30, r24
    1348:	10 82       	st	Z, r1
    134a:	8b e0       	ldi	r24, 0x0B	; 11
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	2c e3       	ldi	r18, 0x3C	; 60
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
    1354:	8a e0       	ldi	r24, 0x0A	; 10
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	fc 01       	movw	r30, r24
    135a:	10 82       	st	Z, r1
    135c:	78 94       	sei
    135e:	87 d1       	rcall	.+782    	; 0x166e <startSystemTimeMs>
    1360:	59 d3       	rcall	.+1714   	; 0x1a14 <initLcd>
    1362:	1a d2       	rcall	.+1076   	; 0x1798 <initAdc>
    1364:	66 d2       	rcall	.+1228   	; 0x1832 <initRgb>
    1366:	8c 89       	ldd	r24, Y+20	; 0x14
    1368:	88 23       	and	r24, r24
    136a:	09 f4       	brne	.+2      	; 0x136e <initBoard+0x12a>
    136c:	45 c1       	rjmp	.+650    	; 0x15f8 <initBoard+0x3b4>
    136e:	8f ef       	ldi	r24, 0xFF	; 255
    1370:	2b d3       	rcall	.+1622   	; 0x19c8 <lcdLight>
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	6f ef       	ldi	r22, 0xFF	; 255
    1378:	73 e0       	ldi	r23, 0x03	; 3
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	87 d2       	rcall	.+1294   	; 0x188e <rgbWrite>
    1380:	8d e4       	ldi	r24, 0x4D	; 77
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	89 2f       	mov	r24, r25
    1386:	8f 93       	push	r24
    1388:	8d e4       	ldi	r24, 0x4D	; 77
    138a:	92 e0       	ldi	r25, 0x02	; 2
    138c:	8f 93       	push	r24
    138e:	1f 92       	push	r1
    1390:	1f 92       	push	r1
    1392:	f9 d4       	rcall	.+2546   	; 0x1d86 <lcdWriteText>
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	82 e6       	ldi	r24, 0x62	; 98
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	89 2f       	mov	r24, r25
    13a2:	8f 93       	push	r24
    13a4:	82 e6       	ldi	r24, 0x62	; 98
    13a6:	92 e0       	ldi	r25, 0x02	; 2
    13a8:	8f 93       	push	r24
    13aa:	1f 92       	push	r1
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	8f 93       	push	r24
    13b0:	ea d4       	rcall	.+2516   	; 0x1d86 <lcdWriteText>
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	87 e7       	ldi	r24, 0x77	; 119
    13bc:	92 e0       	ldi	r25, 0x02	; 2
    13be:	89 2f       	mov	r24, r25
    13c0:	8f 93       	push	r24
    13c2:	87 e7       	ldi	r24, 0x77	; 119
    13c4:	92 e0       	ldi	r25, 0x02	; 2
    13c6:	8f 93       	push	r24
    13c8:	1f 92       	push	r1
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	8f 93       	push	r24
    13ce:	db d4       	rcall	.+2486   	; 0x1d86 <lcdWriteText>
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	8c e8       	ldi	r24, 0x8C	; 140
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	89 2f       	mov	r24, r25
    13de:	8f 93       	push	r24
    13e0:	8c e8       	ldi	r24, 0x8C	; 140
    13e2:	92 e0       	ldi	r25, 0x02	; 2
    13e4:	8f 93       	push	r24
    13e6:	1f 92       	push	r1
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	8f 93       	push	r24
    13ec:	cc d4       	rcall	.+2456   	; 0x1d86 <lcdWriteText>
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	19 82       	std	Y+1, r1	; 0x01
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	8a 83       	std	Y+2, r24	; 0x02
    13fc:	1b 82       	std	Y+3, r1	; 0x03
    13fe:	1c 82       	std	Y+4, r1	; 0x04
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	88 23       	and	r24, r24
    1408:	61 f0       	breq	.+24     	; 0x1422 <initBoard+0x1de>
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e8       	ldi	r25, 0x80	; 128
    1414:	02 c0       	rjmp	.+4      	; 0x141a <initBoard+0x1d6>
    1416:	96 95       	lsr	r25
    1418:	87 95       	ror	r24
    141a:	2a 95       	dec	r18
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <initBoard+0x1d2>
    141e:	f6 d0       	rcall	.+492    	; 0x160c <ledWriteAll>
    1420:	0b c0       	rjmp	.+22     	; 0x1438 <initBoard+0x1f4>
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <initBoard+0x1ee>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	2a 95       	dec	r18
    1434:	e2 f7       	brpl	.-8      	; 0x142e <initBoard+0x1ea>
    1436:	ea d0       	rcall	.+468    	; 0x160c <ledWriteAll>
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	81 31       	cpi	r24, 0x11	; 17
    1442:	38 f0       	brcs	.+14     	; 0x1452 <initBoard+0x20e>
    1444:	19 82       	std	Y+1, r1	; 0x01
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	99 23       	and	r25, r25
    144c:	09 f0       	breq	.+2      	; 0x1450 <initBoard+0x20c>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	8a 83       	std	Y+2, r24	; 0x02
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	88 23       	and	r24, r24
    1456:	21 f0       	breq	.+8      	; 0x1460 <initBoard+0x21c>
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	8e 5f       	subi	r24, 0xFE	; 254
    145c:	8c 83       	std	Y+4, r24	; 0x04
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <initBoard+0x222>
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	82 50       	subi	r24, 0x02	; 2
    1464:	8c 83       	std	Y+4, r24	; 0x04
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	af d2       	rcall	.+1374   	; 0x19c8 <lcdLight>
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	8e 3f       	cpi	r24, 0xFE	; 254
    146e:	09 f4       	brne	.+2      	; 0x1472 <initBoard+0x22e>
    1470:	1d 82       	std	Y+5, r1	; 0x05
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	88 37       	cpi	r24, 0x78	; 120
    1476:	11 f4       	brne	.+4      	; 0x147c <initBoard+0x238>
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	8d 83       	std	Y+5, r24	; 0x05
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 23       	and	r24, r24
    1480:	f9 f4       	brne	.+62     	; 0x14c0 <initBoard+0x27c>
    1482:	ea d0       	rcall	.+468    	; 0x1658 <buttonReadAllPL>
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	83 7c       	andi	r24, 0xC3	; 195
    148a:	99 27       	eor	r25, r25
    148c:	89 2b       	or	r24, r25
    148e:	c1 f0       	breq	.+48     	; 0x14c0 <initBoard+0x27c>
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	66 e2       	ldi	r22, 0x26	; 38
    1496:	72 e0       	ldi	r23, 0x02	; 2
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	f8 d1       	rcall	.+1008   	; 0x188e <rgbWrite>
    149e:	81 ea       	ldi	r24, 0xA1	; 161
    14a0:	92 e0       	ldi	r25, 0x02	; 2
    14a2:	89 2f       	mov	r24, r25
    14a4:	8f 93       	push	r24
    14a6:	81 ea       	ldi	r24, 0xA1	; 161
    14a8:	92 e0       	ldi	r25, 0x02	; 2
    14aa:	8f 93       	push	r24
    14ac:	1f 92       	push	r1
    14ae:	83 e0       	ldi	r24, 0x03	; 3
    14b0:	8f 93       	push	r24
    14b2:	69 d4       	rcall	.+2258   	; 0x1d86 <lcdWriteText>
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	8b 83       	std	Y+3, r24	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 23       	and	r24, r24
    14c4:	41 f0       	breq	.+16     	; 0x14d6 <initBoard+0x292>
    14c6:	c8 d0       	rcall	.+400    	; 0x1658 <buttonReadAllPL>
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	83 7c       	andi	r24, 0xC3	; 195
    14ce:	99 27       	eor	r25, r25
    14d0:	89 2b       	or	r24, r25
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <initBoard+0x292>
    14d4:	73 c0       	rjmp	.+230    	; 0x15bc <initBoard+0x378>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a0 e0       	ldi	r26, 0x00	; 0
    14dc:	b1 e4       	ldi	r27, 0x41	; 65
    14de:	8e 83       	std	Y+6, r24	; 0x06
    14e0:	9f 83       	std	Y+7, r25	; 0x07
    14e2:	a8 87       	std	Y+8, r26	; 0x08
    14e4:	b9 87       	std	Y+9, r27	; 0x09
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a e7       	ldi	r20, 0x7A	; 122
    14ec:	55 e4       	ldi	r21, 0x45	; 69
    14ee:	6e 81       	ldd	r22, Y+6	; 0x06
    14f0:	7f 81       	ldd	r23, Y+7	; 0x07
    14f2:	88 85       	ldd	r24, Y+8	; 0x08
    14f4:	99 85       	ldd	r25, Y+9	; 0x09
    14f6:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	8a 87       	std	Y+10, r24	; 0x0a
    1500:	9b 87       	std	Y+11, r25	; 0x0b
    1502:	ac 87       	std	Y+12, r26	; 0x0c
    1504:	bd 87       	std	Y+13, r27	; 0x0d
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1510:	7b 85       	ldd	r23, Y+11	; 0x0b
    1512:	8c 85       	ldd	r24, Y+12	; 0x0c
    1514:	9d 85       	ldd	r25, Y+13	; 0x0d
    1516:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__cmpsf2>
    151a:	88 23       	and	r24, r24
    151c:	2c f4       	brge	.+10     	; 0x1528 <initBoard+0x2e4>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	9f 87       	std	Y+15, r25	; 0x0f
    1524:	8e 87       	std	Y+14, r24	; 0x0e
    1526:	3f c0       	rjmp	.+126    	; 0x15a6 <initBoard+0x362>
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	6a 85       	ldd	r22, Y+10	; 0x0a
    1532:	7b 85       	ldd	r23, Y+11	; 0x0b
    1534:	8c 85       	ldd	r24, Y+12	; 0x0c
    1536:	9d 85       	ldd	r25, Y+13	; 0x0d
    1538:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__gesf2>
    153c:	18 16       	cp	r1, r24
    153e:	4c f5       	brge	.+82     	; 0x1592 <initBoard+0x34e>
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	6e 81       	ldd	r22, Y+6	; 0x06
    154a:	7f 81       	ldd	r23, Y+7	; 0x07
    154c:	88 85       	ldd	r24, Y+8	; 0x08
    154e:	99 85       	ldd	r25, Y+9	; 0x09
    1550:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	9f 87       	std	Y+15, r25	; 0x0f
    1566:	8e 87       	std	Y+14, r24	; 0x0e
    1568:	0f c0       	rjmp	.+30     	; 0x1588 <initBoard+0x344>
    156a:	80 e9       	ldi	r24, 0x90	; 144
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	99 8b       	std	Y+17, r25	; 0x11
    1570:	88 8b       	std	Y+16, r24	; 0x10
    1572:	88 89       	ldd	r24, Y+16	; 0x10
    1574:	99 89       	ldd	r25, Y+17	; 0x11
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <initBoard+0x332>
    157a:	99 8b       	std	Y+17, r25	; 0x11
    157c:	88 8b       	std	Y+16, r24	; 0x10
    157e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1580:	9f 85       	ldd	r25, Y+15	; 0x0f
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	9f 87       	std	Y+15, r25	; 0x0f
    1586:	8e 87       	std	Y+14, r24	; 0x0e
    1588:	8e 85       	ldd	r24, Y+14	; 0x0e
    158a:	9f 85       	ldd	r25, Y+15	; 0x0f
    158c:	89 2b       	or	r24, r25
    158e:	69 f7       	brne	.-38     	; 0x156a <initBoard+0x326>
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <initBoard+0x376>
    1592:	6a 85       	ldd	r22, Y+10	; 0x0a
    1594:	7b 85       	ldd	r23, Y+11	; 0x0b
    1596:	8c 85       	ldd	r24, Y+12	; 0x0c
    1598:	9d 85       	ldd	r25, Y+13	; 0x0d
    159a:	0e 94 44 14 	call	0x2888	; 0x2888 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9f 87       	std	Y+15, r25	; 0x0f
    15a4:	8e 87       	std	Y+14, r24	; 0x0e
    15a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    15a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    15aa:	9b 8b       	std	Y+19, r25	; 0x13
    15ac:	8a 8b       	std	Y+18, r24	; 0x12
    15ae:	8a 89       	ldd	r24, Y+18	; 0x12
    15b0:	9b 89       	ldd	r25, Y+19	; 0x13
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <initBoard+0x36e>
    15b6:	9b 8b       	std	Y+19, r25	; 0x13
    15b8:	8a 8b       	std	Y+18, r24	; 0x12
    15ba:	24 cf       	rjmp	.-440    	; 0x1404 <initBoard+0x1c0>
    15bc:	00 00       	nop
    15be:	a0 d7       	rcall	.+3904   	; 0x2500 <lcdClear>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	02 d2       	rcall	.+1028   	; 0x19c8 <lcdLight>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	21 d0       	rcall	.+66     	; 0x160c <ledWriteAll>
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	5b d1       	rcall	.+694    	; 0x188e <rgbWrite>
    15d8:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <systemTimeMs>
    15dc:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <systemTimeMs+0x1>
    15e0:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <systemTimeMs+0x2>
    15e4:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <systemTimeMs+0x3>
    15e8:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <systemTimeMs+0x4>
    15ec:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <systemTimeMs+0x5>
    15f0:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <systemTimeMs+0x6>
    15f4:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <systemTimeMs+0x7>
    15f8:	00 00       	nop
    15fa:	64 96       	adiw	r28, 0x14	; 20
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <ledWriteAll>:
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	1f 92       	push	r1
    1612:	1f 92       	push	r1
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	82 e2       	ldi	r24, 0x22	; 34
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	29 81       	ldd	r18, Y+1	; 0x01
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
    1626:	85 e2       	ldi	r24, 0x25	; 37
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	29 81       	ldd	r18, Y+1	; 0x01
    162c:	3a 81       	ldd	r19, Y+2	; 0x02
    162e:	23 2f       	mov	r18, r19
    1630:	33 27       	eor	r19, r19
    1632:	fc 01       	movw	r30, r24
    1634:	20 83       	st	Z, r18
    1636:	00 00       	nop
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	08 95       	ret

00001642 <switchReadAll>:
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	86 e2       	ldi	r24, 0x26	; 38
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	fc 01       	movw	r30, r24
    1650:	80 81       	ld	r24, Z
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <buttonReadAllPL>:
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	89 e0       	ldi	r24, 0x09	; 9
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	fc 01       	movw	r30, r24
    1666:	80 81       	ld	r24, Z
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <startSystemTimeMs>:
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	84 e4       	ldi	r24, 0x44	; 68
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	23 e0       	ldi	r18, 0x03	; 3
    167c:	fc 01       	movw	r30, r24
    167e:	20 83       	st	Z, r18
    1680:	85 e4       	ldi	r24, 0x45	; 69
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	2b e0       	ldi	r18, 0x0B	; 11
    1686:	fc 01       	movw	r30, r24
    1688:	20 83       	st	Z, r18
    168a:	8e e6       	ldi	r24, 0x6E	; 110
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	21 e0       	ldi	r18, 0x01	; 1
    1690:	fc 01       	movw	r30, r24
    1692:	20 83       	st	Z, r18
    1694:	87 e4       	ldi	r24, 0x47	; 71
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	29 ef       	ldi	r18, 0xF9	; 249
    169a:	fc 01       	movw	r30, r24
    169c:	20 83       	st	Z, r18
    169e:	00 00       	nop
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <__vector_23>:
    16a6:	1f 92       	push	r1
    16a8:	0f 92       	push	r0
    16aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    16b6:	0f 92       	push	r0
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	ef 93       	push	r30
    16de:	ff 93       	push	r31
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	a0 90 c3 02 	lds	r10, 0x02C3	; 0x8002c3 <systemTimeMs>
    16ec:	b0 90 c4 02 	lds	r11, 0x02C4	; 0x8002c4 <systemTimeMs+0x1>
    16f0:	c0 90 c5 02 	lds	r12, 0x02C5	; 0x8002c5 <systemTimeMs+0x2>
    16f4:	d0 90 c6 02 	lds	r13, 0x02C6	; 0x8002c6 <systemTimeMs+0x3>
    16f8:	e0 90 c7 02 	lds	r14, 0x02C7	; 0x8002c7 <systemTimeMs+0x4>
    16fc:	f0 90 c8 02 	lds	r15, 0x02C8	; 0x8002c8 <systemTimeMs+0x5>
    1700:	00 91 c9 02 	lds	r16, 0x02C9	; 0x8002c9 <systemTimeMs+0x6>
    1704:	10 91 ca 02 	lds	r17, 0x02CA	; 0x8002ca <systemTimeMs+0x7>
    1708:	2a 2d       	mov	r18, r10
    170a:	3b 2d       	mov	r19, r11
    170c:	4c 2d       	mov	r20, r12
    170e:	5d 2d       	mov	r21, r13
    1710:	6e 2d       	mov	r22, r14
    1712:	7f 2d       	mov	r23, r15
    1714:	80 2f       	mov	r24, r16
    1716:	91 2f       	mov	r25, r17
    1718:	a1 e0       	ldi	r26, 0x01	; 1
    171a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__adddi3_s8>
    171e:	a2 2e       	mov	r10, r18
    1720:	b3 2e       	mov	r11, r19
    1722:	c4 2e       	mov	r12, r20
    1724:	d5 2e       	mov	r13, r21
    1726:	e6 2e       	mov	r14, r22
    1728:	f7 2e       	mov	r15, r23
    172a:	08 2f       	mov	r16, r24
    172c:	19 2f       	mov	r17, r25
    172e:	a0 92 c3 02 	sts	0x02C3, r10	; 0x8002c3 <systemTimeMs>
    1732:	b0 92 c4 02 	sts	0x02C4, r11	; 0x8002c4 <systemTimeMs+0x1>
    1736:	c0 92 c5 02 	sts	0x02C5, r12	; 0x8002c5 <systemTimeMs+0x2>
    173a:	d0 92 c6 02 	sts	0x02C6, r13	; 0x8002c6 <systemTimeMs+0x3>
    173e:	e0 92 c7 02 	sts	0x02C7, r14	; 0x8002c7 <systemTimeMs+0x4>
    1742:	f0 92 c8 02 	sts	0x02C8, r15	; 0x8002c8 <systemTimeMs+0x5>
    1746:	00 93 c9 02 	sts	0x02C9, r16	; 0x8002c9 <systemTimeMs+0x6>
    174a:	10 93 ca 02 	sts	0x02CA, r17	; 0x8002ca <systemTimeMs+0x7>
    174e:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
    1752:	88 23       	and	r24, r24
    1754:	09 f0       	breq	.+2      	; 0x1758 <__vector_23+0xb2>
    1756:	67 d7       	rcall	.+3790   	; 0x2626 <matrixWriteNextLine>
    1758:	00 00       	nop
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	ff 91       	pop	r31
    1760:	ef 91       	pop	r30
    1762:	bf 91       	pop	r27
    1764:	af 91       	pop	r26
    1766:	9f 91       	pop	r25
    1768:	8f 91       	pop	r24
    176a:	7f 91       	pop	r23
    176c:	6f 91       	pop	r22
    176e:	5f 91       	pop	r21
    1770:	4f 91       	pop	r20
    1772:	3f 91       	pop	r19
    1774:	2f 91       	pop	r18
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	0f 90       	pop	r0
    1788:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    178c:	0f 90       	pop	r0
    178e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1792:	0f 90       	pop	r0
    1794:	1f 90       	pop	r1
    1796:	18 95       	reti

00001798 <initAdc>:
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	81 e3       	ldi	r24, 0x31	; 49
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	fc 01       	movw	r30, r24
    17a6:	10 82       	st	Z, r1
    17a8:	80 e3       	ldi	r24, 0x30	; 48
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	fc 01       	movw	r30, r24
    17ae:	10 82       	st	Z, r1
    17b0:	88 e0       	ldi	r24, 0x08	; 8
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	fc 01       	movw	r30, r24
    17b6:	10 82       	st	Z, r1
    17b8:	87 e0       	ldi	r24, 0x07	; 7
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	fc 01       	movw	r30, r24
    17be:	10 82       	st	Z, r1
    17c0:	8c e7       	ldi	r24, 0x7C	; 124
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	20 e4       	ldi	r18, 0x40	; 64
    17c6:	fc 01       	movw	r30, r24
    17c8:	20 83       	st	Z, r18
    17ca:	8e e7       	ldi	r24, 0x7E	; 126
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	2f e0       	ldi	r18, 0x0F	; 15
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 83       	st	Z, r18
    17d4:	8d e7       	ldi	r24, 0x7D	; 125
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2f ef       	ldi	r18, 0xFF	; 255
    17da:	fc 01       	movw	r30, r24
    17dc:	20 83       	st	Z, r18
    17de:	8a e7       	ldi	r24, 0x7A	; 122
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	27 ea       	ldi	r18, 0xA7	; 167
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
    17e8:	8b e7       	ldi	r24, 0x7B	; 123
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	fc 01       	movw	r30, r24
    17ee:	10 82       	st	Z, r1
    17f0:	8a e7       	ldi	r24, 0x7A	; 122
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	2a e7       	ldi	r18, 0x7A	; 122
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	f9 01       	movw	r30, r18
    17fa:	20 81       	ld	r18, Z
    17fc:	20 64       	ori	r18, 0x40	; 64
    17fe:	fc 01       	movw	r30, r24
    1800:	20 83       	st	Z, r18
    1802:	00 00       	nop
    1804:	8a e7       	ldi	r24, 0x7A	; 122
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	fc 01       	movw	r30, r24
    180a:	80 81       	ld	r24, Z
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	80 71       	andi	r24, 0x10	; 16
    1812:	99 27       	eor	r25, r25
    1814:	89 2b       	or	r24, r25
    1816:	b1 f3       	breq	.-20     	; 0x1804 <initAdc+0x6c>
    1818:	8a e7       	ldi	r24, 0x7A	; 122
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	2a e7       	ldi	r18, 0x7A	; 122
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	f9 01       	movw	r30, r18
    1822:	20 81       	ld	r18, Z
    1824:	2f 7e       	andi	r18, 0xEF	; 239
    1826:	fc 01       	movw	r30, r24
    1828:	20 83       	st	Z, r18
    182a:	00 00       	nop
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <initRgb>:
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	1f 92       	push	r1
    1838:	1f 92       	push	r1
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	93 e0       	ldi	r25, 0x03	; 3
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	80 ea       	ldi	r24, 0xA0	; 160
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	2e ef       	ldi	r18, 0xFE	; 254
    184c:	fc 01       	movw	r30, r24
    184e:	20 83       	st	Z, r18
    1850:	81 ea       	ldi	r24, 0xA1	; 161
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	2b e1       	ldi	r18, 0x1B	; 27
    1856:	fc 01       	movw	r30, r24
    1858:	20 83       	st	Z, r18
    185a:	87 ea       	ldi	r24, 0xA7	; 167
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	29 81       	ldd	r18, Y+1	; 0x01
    1860:	3a 81       	ldd	r19, Y+2	; 0x02
    1862:	23 2f       	mov	r18, r19
    1864:	33 27       	eor	r19, r19
    1866:	fc 01       	movw	r30, r24
    1868:	20 83       	st	Z, r18
    186a:	86 ea       	ldi	r24, 0xA6	; 166
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	29 81       	ldd	r18, Y+1	; 0x01
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	06 d0       	rcall	.+12     	; 0x188e <rgbWrite>
    1882:	00 00       	nop
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <rgbWrite>:
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	00 d0       	rcall	.+0      	; 0x1894 <rgbWrite+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <rgbWrite+0x8>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	7c 83       	std	Y+4, r23	; 0x04
    18a0:	6b 83       	std	Y+3, r22	; 0x03
    18a2:	5e 83       	std	Y+6, r21	; 0x06
    18a4:	4d 83       	std	Y+5, r20	; 0x05
    18a6:	2f ef       	ldi	r18, 0xFF	; 255
    18a8:	33 e0       	ldi	r19, 0x03	; 3
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	a9 01       	movw	r20, r18
    18b0:	48 1b       	sub	r20, r24
    18b2:	59 0b       	sbc	r21, r25
    18b4:	ca 01       	movw	r24, r20
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	2f ef       	ldi	r18, 0xFF	; 255
    18bc:	33 e0       	ldi	r19, 0x03	; 3
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	f9 01       	movw	r30, r18
    18c4:	e8 1b       	sub	r30, r24
    18c6:	f9 0b       	sbc	r31, r25
    18c8:	cf 01       	movw	r24, r30
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	2f ef       	ldi	r18, 0xFF	; 255
    18d0:	33 e0       	ldi	r19, 0x03	; 3
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	a9 01       	movw	r20, r18
    18d8:	48 1b       	sub	r20, r24
    18da:	59 0b       	sbc	r21, r25
    18dc:	ca 01       	movw	r24, r20
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	89 ea       	ldi	r24, 0xA9	; 169
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	29 81       	ldd	r18, Y+1	; 0x01
    18e8:	3a 81       	ldd	r19, Y+2	; 0x02
    18ea:	23 2f       	mov	r18, r19
    18ec:	33 27       	eor	r19, r19
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 83       	st	Z, r18
    18f2:	88 ea       	ldi	r24, 0xA8	; 168
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	29 81       	ldd	r18, Y+1	; 0x01
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 83       	st	Z, r18
    18fc:	8b ea       	ldi	r24, 0xAB	; 171
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	2b 81       	ldd	r18, Y+3	; 0x03
    1902:	3c 81       	ldd	r19, Y+4	; 0x04
    1904:	23 2f       	mov	r18, r19
    1906:	33 27       	eor	r19, r19
    1908:	fc 01       	movw	r30, r24
    190a:	20 83       	st	Z, r18
    190c:	8a ea       	ldi	r24, 0xAA	; 170
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	2b 81       	ldd	r18, Y+3	; 0x03
    1912:	fc 01       	movw	r30, r24
    1914:	20 83       	st	Z, r18
    1916:	8d ea       	ldi	r24, 0xAD	; 173
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	2d 81       	ldd	r18, Y+5	; 0x05
    191c:	3e 81       	ldd	r19, Y+6	; 0x06
    191e:	23 2f       	mov	r18, r19
    1920:	33 27       	eor	r19, r19
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
    1926:	8c ea       	ldi	r24, 0xAC	; 172
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	2d 81       	ldd	r18, Y+5	; 0x05
    192c:	fc 01       	movw	r30, r24
    192e:	20 83       	st	Z, r18
    1930:	00 00       	nop
    1932:	26 96       	adiw	r28, 0x06	; 6
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <lcdSid>:
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	1f 92       	push	r1
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	88 23       	and	r24, r24
    1954:	51 f0       	breq	.+20     	; 0x196a <lcdSid+0x26>
    1956:	84 e3       	ldi	r24, 0x34	; 52
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	24 e3       	ldi	r18, 0x34	; 52
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	f9 01       	movw	r30, r18
    1960:	20 81       	ld	r18, Z
    1962:	21 60       	ori	r18, 0x01	; 1
    1964:	fc 01       	movw	r30, r24
    1966:	20 83       	st	Z, r18
    1968:	09 c0       	rjmp	.+18     	; 0x197c <lcdSid+0x38>
    196a:	84 e3       	ldi	r24, 0x34	; 52
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	24 e3       	ldi	r18, 0x34	; 52
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	f9 01       	movw	r30, r18
    1974:	20 81       	ld	r18, Z
    1976:	2e 7f       	andi	r18, 0xFE	; 254
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18
    197c:	00 00       	nop
    197e:	0f 90       	pop	r0
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <lcdSclk>:
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	1f 92       	push	r1
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	88 23       	and	r24, r24
    1996:	51 f0       	breq	.+20     	; 0x19ac <lcdSclk+0x26>
    1998:	84 e3       	ldi	r24, 0x34	; 52
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	24 e3       	ldi	r18, 0x34	; 52
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	f9 01       	movw	r30, r18
    19a2:	20 81       	ld	r18, Z
    19a4:	22 60       	ori	r18, 0x02	; 2
    19a6:	fc 01       	movw	r30, r24
    19a8:	20 83       	st	Z, r18
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <lcdSclk+0x38>
    19ac:	84 e3       	ldi	r24, 0x34	; 52
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	24 e3       	ldi	r18, 0x34	; 52
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	f9 01       	movw	r30, r18
    19b6:	20 81       	ld	r18, Z
    19b8:	2d 7f       	andi	r18, 0xFD	; 253
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 83       	st	Z, r18
    19be:	00 00       	nop
    19c0:	0f 90       	pop	r0
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	08 95       	ret

000019c8 <lcdLight>:
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	1f 92       	push	r1
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	88 23       	and	r24, r24
    19d8:	51 f4       	brne	.+20     	; 0x19ee <lcdLight+0x26>
    19da:	84 e4       	ldi	r24, 0x44	; 68
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	24 e4       	ldi	r18, 0x44	; 68
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	f9 01       	movw	r30, r18
    19e4:	20 81       	ld	r18, Z
    19e6:	2f 7d       	andi	r18, 0xDF	; 223
    19e8:	fc 01       	movw	r30, r24
    19ea:	20 83       	st	Z, r18
    19ec:	0e c0       	rjmp	.+28     	; 0x1a0a <lcdLight+0x42>
    19ee:	84 e4       	ldi	r24, 0x44	; 68
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	24 e4       	ldi	r18, 0x44	; 68
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	f9 01       	movw	r30, r18
    19f8:	20 81       	ld	r18, Z
    19fa:	20 62       	ori	r18, 0x20	; 32
    19fc:	fc 01       	movw	r30, r24
    19fe:	20 83       	st	Z, r18
    1a00:	88 e4       	ldi	r24, 0x48	; 72
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	29 81       	ldd	r18, Y+1	; 0x01
    1a06:	fc 01       	movw	r30, r24
    1a08:	20 83       	st	Z, r18
    1a0a:	00 00       	nop
    1a0c:	0f 90       	pop	r0
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	08 95       	ret

00001a14 <initLcd>:
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	b3 df       	rcall	.-154    	; 0x1986 <lcdSclk>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 df       	rcall	.-224    	; 0x1944 <lcdSid>
    1a24:	64 e3       	ldi	r22, 0x34	; 52
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	83 e4       	ldi	r24, 0x43	; 67
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	1b d0       	rcall	.+54     	; 0x1a64 <writeLcdF>
    1a2e:	69 e0       	ldi	r22, 0x09	; 9
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	83 e4       	ldi	r24, 0x43	; 67
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	16 d0       	rcall	.+44     	; 0x1a64 <writeLcdF>
    1a38:	60 e3       	ldi	r22, 0x30	; 48
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	83 e4       	ldi	r24, 0x43	; 67
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	11 d0       	rcall	.+34     	; 0x1a64 <writeLcdF>
    1a42:	6c e0       	ldi	r22, 0x0C	; 12
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	83 e4       	ldi	r24, 0x43	; 67
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0c d0       	rcall	.+24     	; 0x1a64 <writeLcdF>
    1a4c:	59 d5       	rcall	.+2738   	; 0x2500 <lcdClear>
    1a4e:	67 e0       	ldi	r22, 0x07	; 7
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	83 e4       	ldi	r24, 0x43	; 67
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	06 d0       	rcall	.+12     	; 0x1a64 <writeLcdF>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	b6 df       	rcall	.-148    	; 0x19c8 <lcdLight>
    1a5c:	00 00       	nop
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <writeLcdF>:
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	a6 97       	sbiw	r28, 0x26	; 38
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	9c a3       	std	Y+36, r25	; 0x24
    1a7a:	8b a3       	std	Y+35, r24	; 0x23
    1a7c:	7e a3       	std	Y+38, r23	; 0x26
    1a7e:	6d a3       	std	Y+37, r22	; 0x25
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	60 df       	rcall	.-320    	; 0x1944 <lcdSid>
    1a84:	1a 82       	std	Y+2, r1	; 0x02
    1a86:	19 82       	std	Y+1, r1	; 0x01
    1a88:	09 c0       	rjmp	.+18     	; 0x1a9c <writeLcdF+0x38>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	7c df       	rcall	.-264    	; 0x1986 <lcdSclk>
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	7a df       	rcall	.-268    	; 0x1986 <lcdSclk>
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	05 97       	sbiw	r24, 0x05	; 5
    1aa2:	98 f3       	brcs	.-26     	; 0x1a8a <writeLcdF+0x26>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	4e df       	rcall	.-356    	; 0x1944 <lcdSid>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	6d df       	rcall	.-294    	; 0x1986 <lcdSclk>
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	6b df       	rcall	.-298    	; 0x1986 <lcdSclk>
    1ab0:	8b a1       	ldd	r24, Y+35	; 0x23
    1ab2:	9c a1       	ldd	r25, Y+36	; 0x24
    1ab4:	83 34       	cpi	r24, 0x43	; 67
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	19 f4       	brne	.+6      	; 0x1ac0 <writeLcdF+0x5c>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	43 df       	rcall	.-378    	; 0x1944 <lcdSid>
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <writeLcdF+0x60>
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	40 df       	rcall	.-384    	; 0x1944 <lcdSid>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	5f df       	rcall	.-322    	; 0x1986 <lcdSclk>
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	5d df       	rcall	.-326    	; 0x1986 <lcdSclk>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	3a df       	rcall	.-396    	; 0x1944 <lcdSid>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	59 df       	rcall	.-334    	; 0x1986 <lcdSclk>
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	57 df       	rcall	.-338    	; 0x1986 <lcdSclk>
    1ad8:	1a 82       	std	Y+2, r1	; 0x02
    1ada:	19 82       	std	Y+1, r1	; 0x01
    1adc:	1c c0       	rjmp	.+56     	; 0x1b16 <writeLcdF+0xb2>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	52 df       	rcall	.-348    	; 0x1986 <lcdSclk>
    1ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae6:	81 70       	andi	r24, 0x01	; 1
    1ae8:	99 27       	eor	r25, r25
    1aea:	89 2b       	or	r24, r25
    1aec:	19 f0       	breq	.+6      	; 0x1af4 <writeLcdF+0x90>
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	29 df       	rcall	.-430    	; 0x1944 <lcdSid>
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <writeLcdF+0x94>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	26 df       	rcall	.-436    	; 0x1944 <lcdSid>
    1af8:	8d a1       	ldd	r24, Y+37	; 0x25
    1afa:	9e a1       	ldd	r25, Y+38	; 0x26
    1afc:	96 95       	lsr	r25
    1afe:	87 95       	ror	r24
    1b00:	9e a3       	std	Y+38, r25	; 0x26
    1b02:	8d a3       	std	Y+37, r24	; 0x25
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	3f df       	rcall	.-386    	; 0x1986 <lcdSclk>
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	3d df       	rcall	.-390    	; 0x1986 <lcdSclk>
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	04 97       	sbiw	r24, 0x04	; 4
    1b1c:	00 f3       	brcs	.-64     	; 0x1ade <writeLcdF+0x7a>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	11 df       	rcall	.-478    	; 0x1944 <lcdSid>
    1b22:	1a 82       	std	Y+2, r1	; 0x02
    1b24:	19 82       	std	Y+1, r1	; 0x01
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <writeLcdF+0xd6>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	2d df       	rcall	.-422    	; 0x1986 <lcdSclk>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	2b df       	rcall	.-426    	; 0x1986 <lcdSclk>
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	04 97       	sbiw	r24, 0x04	; 4
    1b40:	98 f3       	brcs	.-26     	; 0x1b28 <writeLcdF+0xc4>
    1b42:	1a 82       	std	Y+2, r1	; 0x02
    1b44:	19 82       	std	Y+1, r1	; 0x01
    1b46:	1c c0       	rjmp	.+56     	; 0x1b80 <writeLcdF+0x11c>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	1d df       	rcall	.-454    	; 0x1986 <lcdSclk>
    1b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b50:	81 70       	andi	r24, 0x01	; 1
    1b52:	99 27       	eor	r25, r25
    1b54:	89 2b       	or	r24, r25
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <writeLcdF+0xfa>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	f4 de       	rcall	.-536    	; 0x1944 <lcdSid>
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <writeLcdF+0xfe>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	f1 de       	rcall	.-542    	; 0x1944 <lcdSid>
    1b62:	8d a1       	ldd	r24, Y+37	; 0x25
    1b64:	9e a1       	ldd	r25, Y+38	; 0x26
    1b66:	96 95       	lsr	r25
    1b68:	87 95       	ror	r24
    1b6a:	9e a3       	std	Y+38, r25	; 0x26
    1b6c:	8d a3       	std	Y+37, r24	; 0x25
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	0a df       	rcall	.-492    	; 0x1986 <lcdSclk>
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	08 df       	rcall	.-496    	; 0x1986 <lcdSclk>
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	04 97       	sbiw	r24, 0x04	; 4
    1b86:	00 f3       	brcs	.-64     	; 0x1b48 <writeLcdF+0xe4>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	dc de       	rcall	.-584    	; 0x1944 <lcdSid>
    1b8c:	1a 82       	std	Y+2, r1	; 0x02
    1b8e:	19 82       	std	Y+1, r1	; 0x01
    1b90:	09 c0       	rjmp	.+18     	; 0x1ba4 <writeLcdF+0x140>
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	f8 de       	rcall	.-528    	; 0x1986 <lcdSclk>
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	f6 de       	rcall	.-532    	; 0x1986 <lcdSclk>
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	04 97       	sbiw	r24, 0x04	; 4
    1baa:	98 f3       	brcs	.-26     	; 0x1b92 <writeLcdF+0x12e>
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	ca de       	rcall	.-620    	; 0x1944 <lcdSid>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a8 e4       	ldi	r26, 0x48	; 72
    1bb6:	b2 e4       	ldi	r27, 0x42	; 66
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	ad 83       	std	Y+5, r26	; 0x05
    1bbe:	be 83       	std	Y+6, r27	; 0x06
    1bc0:	2b ea       	ldi	r18, 0xAB	; 171
    1bc2:	3a ea       	ldi	r19, 0xAA	; 170
    1bc4:	4a ea       	ldi	r20, 0xAA	; 170
    1bc6:	50 e4       	ldi	r21, 0x40	; 64
    1bc8:	6b 81       	ldd	r22, Y+3	; 0x03
    1bca:	7c 81       	ldd	r23, Y+4	; 0x04
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	00 d7       	rcall	.+3584   	; 0x29d2 <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8f 83       	std	Y+7, r24	; 0x07
    1bd8:	98 87       	std	Y+8, r25	; 0x08
    1bda:	a9 87       	std	Y+9, r26	; 0x09
    1bdc:	ba 87       	std	Y+10, r27	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	50 e4       	ldi	r21, 0x40	; 64
    1be6:	6b 81       	ldd	r22, Y+3	; 0x03
    1be8:	7c 81       	ldd	r23, Y+4	; 0x04
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	f1 d6       	rcall	.+3554   	; 0x29d2 <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	8b 87       	std	Y+11, r24	; 0x0b
    1bf6:	9c 87       	std	Y+12, r25	; 0x0c
    1bf8:	ad 87       	std	Y+13, r26	; 0x0d
    1bfa:	be 87       	std	Y+14, r27	; 0x0e
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	5f e3       	ldi	r21, 0x3F	; 63
    1c04:	6f 81       	ldd	r22, Y+7	; 0x07
    1c06:	78 85       	ldd	r23, Y+8	; 0x08
    1c08:	89 85       	ldd	r24, Y+9	; 0x09
    1c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0c:	d1 d5       	rcall	.+2978   	; 0x27b0 <__cmpsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	1c f4       	brge	.+6      	; 0x1c18 <writeLcdF+0x1b4>
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	8f 87       	std	Y+15, r24	; 0x0f
    1c16:	a7 c0       	rjmp	.+334    	; 0x1d66 <writeLcdF+0x302>
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	57 e4       	ldi	r21, 0x47	; 71
    1c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c28:	d0 d6       	rcall	.+3488   	; 0x29ca <__gesf2>
    1c2a:	18 16       	cp	r1, r24
    1c2c:	0c f0       	brlt	.+2      	; 0x1c30 <writeLcdF+0x1cc>
    1c2e:	74 c0       	rjmp	.+232    	; 0x1d18 <writeLcdF+0x2b4>
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a e7       	ldi	r20, 0x7A	; 122
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	6b 81       	ldd	r22, Y+3	; 0x03
    1c3a:	7c 81       	ldd	r23, Y+4	; 0x04
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	bb d5       	rcall	.+2934   	; 0x27b8 <__divsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	88 8b       	std	Y+16, r24	; 0x10
    1c48:	99 8b       	std	Y+17, r25	; 0x11
    1c4a:	aa 8b       	std	Y+18, r26	; 0x12
    1c4c:	bb 8b       	std	Y+19, r27	; 0x13
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a e7       	ldi	r20, 0x7A	; 122
    1c54:	55 e4       	ldi	r21, 0x45	; 69
    1c56:	68 89       	ldd	r22, Y+16	; 0x10
    1c58:	79 89       	ldd	r23, Y+17	; 0x11
    1c5a:	8a 89       	ldd	r24, Y+18	; 0x12
    1c5c:	9b 89       	ldd	r25, Y+19	; 0x13
    1c5e:	b9 d6       	rcall	.+3442   	; 0x29d2 <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	8c 8b       	std	Y+20, r24	; 0x14
    1c66:	9d 8b       	std	Y+21, r25	; 0x15
    1c68:	ae 8b       	std	Y+22, r26	; 0x16
    1c6a:	bf 8b       	std	Y+23, r27	; 0x17
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	6c 89       	ldd	r22, Y+20	; 0x14
    1c76:	7d 89       	ldd	r23, Y+21	; 0x15
    1c78:	8e 89       	ldd	r24, Y+22	; 0x16
    1c7a:	9f 89       	ldd	r25, Y+23	; 0x17
    1c7c:	99 d5       	rcall	.+2866   	; 0x27b0 <__cmpsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <writeLcdF+0x228>
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	99 8f       	std	Y+25, r25	; 0x19
    1c88:	88 8f       	std	Y+24, r24	; 0x18
    1c8a:	3b c0       	rjmp	.+118    	; 0x1d02 <writeLcdF+0x29e>
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	3f ef       	ldi	r19, 0xFF	; 255
    1c90:	4f e7       	ldi	r20, 0x7F	; 127
    1c92:	57 e4       	ldi	r21, 0x47	; 71
    1c94:	6c 89       	ldd	r22, Y+20	; 0x14
    1c96:	7d 89       	ldd	r23, Y+21	; 0x15
    1c98:	8e 89       	ldd	r24, Y+22	; 0x16
    1c9a:	9f 89       	ldd	r25, Y+23	; 0x17
    1c9c:	96 d6       	rcall	.+3372   	; 0x29ca <__gesf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	3c f5       	brge	.+78     	; 0x1cf0 <writeLcdF+0x28c>
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	68 89       	ldd	r22, Y+16	; 0x10
    1cac:	79 89       	ldd	r23, Y+17	; 0x11
    1cae:	8a 89       	ldd	r24, Y+18	; 0x12
    1cb0:	9b 89       	ldd	r25, Y+19	; 0x13
    1cb2:	8f d6       	rcall	.+3358   	; 0x29d2 <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	e5 d5       	rcall	.+3018   	; 0x2888 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	99 8f       	std	Y+25, r25	; 0x19
    1cc4:	88 8f       	std	Y+24, r24	; 0x18
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <writeLcdF+0x282>
    1cc8:	80 e9       	ldi	r24, 0x90	; 144
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	9b 8f       	std	Y+27, r25	; 0x1b
    1cce:	8a 8f       	std	Y+26, r24	; 0x1a
    1cd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cd2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <writeLcdF+0x270>
    1cd8:	9b 8f       	std	Y+27, r25	; 0x1b
    1cda:	8a 8f       	std	Y+26, r24	; 0x1a
    1cdc:	88 8d       	ldd	r24, Y+24	; 0x18
    1cde:	99 8d       	ldd	r25, Y+25	; 0x19
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	99 8f       	std	Y+25, r25	; 0x19
    1ce4:	88 8f       	std	Y+24, r24	; 0x18
    1ce6:	88 8d       	ldd	r24, Y+24	; 0x18
    1ce8:	99 8d       	ldd	r25, Y+25	; 0x19
    1cea:	89 2b       	or	r24, r25
    1cec:	69 f7       	brne	.-38     	; 0x1cc8 <writeLcdF+0x264>
    1cee:	3b c0       	rjmp	.+118    	; 0x1d66 <writeLcdF+0x302>
    1cf0:	6c 89       	ldd	r22, Y+20	; 0x14
    1cf2:	7d 89       	ldd	r23, Y+21	; 0x15
    1cf4:	8e 89       	ldd	r24, Y+22	; 0x16
    1cf6:	9f 89       	ldd	r25, Y+23	; 0x17
    1cf8:	c7 d5       	rcall	.+2958   	; 0x2888 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	99 8f       	std	Y+25, r25	; 0x19
    1d00:	88 8f       	std	Y+24, r24	; 0x18
    1d02:	88 8d       	ldd	r24, Y+24	; 0x18
    1d04:	99 8d       	ldd	r25, Y+25	; 0x19
    1d06:	9d 8f       	std	Y+29, r25	; 0x1d
    1d08:	8c 8f       	std	Y+28, r24	; 0x1c
    1d0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <writeLcdF+0x2aa>
    1d12:	9d 8f       	std	Y+29, r25	; 0x1d
    1d14:	8c 8f       	std	Y+28, r24	; 0x1c
    1d16:	27 c0       	rjmp	.+78     	; 0x1d66 <writeLcdF+0x302>
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	53 e4       	ldi	r21, 0x43	; 67
    1d20:	6f 81       	ldd	r22, Y+7	; 0x07
    1d22:	78 85       	ldd	r23, Y+8	; 0x08
    1d24:	89 85       	ldd	r24, Y+9	; 0x09
    1d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d28:	50 d6       	rcall	.+3232   	; 0x29ca <__gesf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	a4 f4       	brge	.+40     	; 0x1d56 <writeLcdF+0x2f2>
    1d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d36:	a8 d5       	rcall	.+2896   	; 0x2888 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d3e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d44:	99 a3       	std	Y+33, r25	; 0x21
    1d46:	88 a3       	std	Y+32, r24	; 0x20
    1d48:	88 a1       	ldd	r24, Y+32	; 0x20
    1d4a:	99 a1       	ldd	r25, Y+33	; 0x21
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <writeLcdF+0x2e8>
    1d50:	99 a3       	std	Y+33, r25	; 0x21
    1d52:	88 a3       	std	Y+32, r24	; 0x20
    1d54:	0e c0       	rjmp	.+28     	; 0x1d72 <writeLcdF+0x30e>
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	94 d5       	rcall	.+2856   	; 0x2888 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	8f 87       	std	Y+15, r24	; 0x0f
    1d66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d68:	8a a3       	std	Y+34, r24	; 0x22
    1d6a:	8a a1       	ldd	r24, Y+34	; 0x22
    1d6c:	8a 95       	dec	r24
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <writeLcdF+0x308>
    1d70:	8a a3       	std	Y+34, r24	; 0x22
    1d72:	00 00       	nop
    1d74:	a6 96       	adiw	r28, 0x26	; 38
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	08 95       	ret

00001d86 <lcdWriteText>:
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	69 97       	sbiw	r28, 0x19	; 25
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	83 96       	adiw	r24, 0x23	; 35
    1d9e:	99 8f       	std	Y+25, r25	; 0x19
    1da0:	88 8f       	std	Y+24, r24	; 0x18
    1da2:	28 8d       	ldd	r18, Y+24	; 0x18
    1da4:	39 8d       	ldd	r19, Y+25	; 0x19
    1da6:	49 a1       	ldd	r20, Y+33	; 0x21
    1da8:	5a a1       	ldd	r21, Y+34	; 0x22
    1daa:	ce 01       	movw	r24, r28
    1dac:	03 96       	adiw	r24, 0x03	; 3
    1dae:	65 e1       	ldi	r22, 0x15	; 21
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	e5 d6       	rcall	.+3530   	; 0x2b7e <vsnprintf>
    1db4:	19 82       	std	Y+1, r1	; 0x01
    1db6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1db8:	98 2f       	mov	r25, r24
    1dba:	92 95       	swap	r25
    1dbc:	99 0f       	add	r25, r25
    1dbe:	90 7e       	andi	r25, 0xE0	; 224
    1dc0:	88 a1       	ldd	r24, Y+32	; 0x20
    1dc2:	89 0f       	add	r24, r25
    1dc4:	8a 83       	std	Y+2, r24	; 0x02
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	80 68       	ori	r24, 0x80	; 128
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	bc 01       	movw	r22, r24
    1dd0:	83 e4       	ldi	r24, 0x43	; 67
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	47 de       	rcall	.-882    	; 0x1a64 <writeLcdF>
    1dd6:	13 c0       	rjmp	.+38     	; 0x1dfe <lcdWriteText+0x78>
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	91 e0       	ldi	r25, 0x01	; 1
    1ddc:	98 0f       	add	r25, r24
    1dde:	99 83       	std	Y+1, r25	; 0x01
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9e 01       	movw	r18, r28
    1de6:	2d 5f       	subi	r18, 0xFD	; 253
    1de8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dea:	82 0f       	add	r24, r18
    1dec:	93 1f       	adc	r25, r19
    1dee:	fc 01       	movw	r30, r24
    1df0:	80 81       	ld	r24, Z
    1df2:	88 2f       	mov	r24, r24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	bc 01       	movw	r22, r24
    1df8:	84 e4       	ldi	r24, 0x44	; 68
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	33 de       	rcall	.-922    	; 0x1a64 <writeLcdF>
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9e 01       	movw	r18, r28
    1e06:	2d 5f       	subi	r18, 0xFD	; 253
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	82 0f       	add	r24, r18
    1e0c:	93 1f       	adc	r25, r19
    1e0e:	fc 01       	movw	r30, r24
    1e10:	80 81       	ld	r24, Z
    1e12:	88 23       	and	r24, r24
    1e14:	09 f7       	brne	.-62     	; 0x1dd8 <lcdWriteText+0x52>
    1e16:	00 00       	nop
    1e18:	69 96       	adiw	r28, 0x19	; 25
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <lcdWriteZahl>:
    1e2a:	2f 92       	push	r2
    1e2c:	3f 92       	push	r3
    1e2e:	4f 92       	push	r4
    1e30:	5f 92       	push	r5
    1e32:	6f 92       	push	r6
    1e34:	7f 92       	push	r7
    1e36:	8f 92       	push	r8
    1e38:	9f 92       	push	r9
    1e3a:	af 92       	push	r10
    1e3c:	bf 92       	push	r11
    1e3e:	cf 92       	push	r12
    1e40:	df 92       	push	r13
    1e42:	ef 92       	push	r14
    1e44:	ff 92       	push	r15
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	c5 54       	subi	r28, 0x45	; 69
    1e54:	d1 09       	sbc	r29, r1
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	88 af       	std	Y+56, r24	; 0x38
    1e62:	69 af       	std	Y+57, r22	; 0x39
    1e64:	ce 01       	movw	r24, r28
    1e66:	ca 96       	adiw	r24, 0x3a	; 58
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e0 82       	st	Z, r14
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	f1 82       	std	Z+1, r15	; 0x01
    1e70:	fc 01       	movw	r30, r24
    1e72:	02 83       	std	Z+2, r16	; 0x02
    1e74:	fc 01       	movw	r30, r24
    1e76:	13 83       	std	Z+3, r17	; 0x03
    1e78:	fc 01       	movw	r30, r24
    1e7a:	24 83       	std	Z+4, r18	; 0x04
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	35 83       	std	Z+5, r19	; 0x05
    1e80:	fc 01       	movw	r30, r24
    1e82:	46 83       	std	Z+6, r20	; 0x06
    1e84:	fc 01       	movw	r30, r24
    1e86:	57 83       	std	Z+7, r21	; 0x07
    1e88:	ce 01       	movw	r24, r28
    1e8a:	8e 5b       	subi	r24, 0xBE	; 190
    1e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8e:	fc 01       	movw	r30, r24
    1e90:	c0 82       	st	Z, r12
    1e92:	ce 01       	movw	r24, r28
    1e94:	8d 5b       	subi	r24, 0xBD	; 189
    1e96:	9f 4f       	sbci	r25, 0xFF	; 255
    1e98:	fc 01       	movw	r30, r24
    1e9a:	a0 82       	st	Z, r10
    1e9c:	19 82       	std	Y+1, r1	; 0x01
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	ca 96       	adiw	r24, 0x3a	; 58
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 81       	ld	r18, Z
    1ea6:	2d 83       	std	Y+5, r18	; 0x05
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	21 81       	ldd	r18, Z+1	; 0x01
    1eac:	2e 83       	std	Y+6, r18	; 0x06
    1eae:	fc 01       	movw	r30, r24
    1eb0:	22 81       	ldd	r18, Z+2	; 0x02
    1eb2:	2f 83       	std	Y+7, r18	; 0x07
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	23 81       	ldd	r18, Z+3	; 0x03
    1eb8:	28 87       	std	Y+8, r18	; 0x08
    1eba:	fc 01       	movw	r30, r24
    1ebc:	24 81       	ldd	r18, Z+4	; 0x04
    1ebe:	29 87       	std	Y+9, r18	; 0x09
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	25 81       	ldd	r18, Z+5	; 0x05
    1ec4:	2a 87       	std	Y+10, r18	; 0x0a
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	26 81       	ldd	r18, Z+6	; 0x06
    1eca:	2b 87       	std	Y+11, r18	; 0x0b
    1ecc:	fc 01       	movw	r30, r24
    1ece:	87 81       	ldd	r24, Z+7	; 0x07
    1ed0:	8c 87       	std	Y+12, r24	; 0x0c
    1ed2:	9e 01       	movw	r18, r28
    1ed4:	2e 5b       	subi	r18, 0xBE	; 190
    1ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed8:	ce 01       	movw	r24, r28
    1eda:	8d 5b       	subi	r24, 0xBD	; 189
    1edc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ede:	f9 01       	movw	r30, r18
    1ee0:	20 81       	ld	r18, Z
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	80 81       	ld	r24, Z
    1ee6:	82 0f       	add	r24, r18
    1ee8:	8d 87       	std	Y+13, r24	; 0x0d
    1eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eec:	85 31       	cpi	r24, 0x15	; 21
    1eee:	88 f0       	brcs	.+34     	; 0x1f12 <lcdWriteZahl+0xe8>
    1ef0:	87 e7       	ldi	r24, 0x77	; 119
    1ef2:	92 e0       	ldi	r25, 0x02	; 2
    1ef4:	89 2f       	mov	r24, r25
    1ef6:	8f 93       	push	r24
    1ef8:	87 e7       	ldi	r24, 0x77	; 119
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	8f 93       	push	r24
    1efe:	89 ad       	ldd	r24, Y+57	; 0x39
    1f00:	8f 93       	push	r24
    1f02:	88 ad       	ldd	r24, Y+56	; 0x38
    1f04:	8f 93       	push	r24
    1f06:	3f df       	rcall	.-386    	; 0x1d86 <lcdWriteText>
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	2b c1       	rjmp	.+598    	; 0x2168 <lcdWriteZahl+0x33e>
    1f12:	ce 01       	movw	r24, r28
    1f14:	8d 5b       	subi	r24, 0xBD	; 189
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	fc 01       	movw	r30, r24
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 23       	and	r24, r24
    1f1e:	11 f0       	breq	.+4      	; 0x1f24 <lcdWriteZahl+0xfa>
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	1a 82       	std	Y+2, r1	; 0x02
    1f26:	74 c0       	rjmp	.+232    	; 0x2010 <lcdWriteZahl+0x1e6>
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	23 e1       	ldi	r18, 0x13	; 19
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	a9 01       	movw	r20, r18
    1f34:	48 1b       	sub	r20, r24
    1f36:	59 0b       	sbc	r21, r25
    1f38:	26 96       	adiw	r28, 0x06	; 6
    1f3a:	5f af       	std	Y+63, r21	; 0x3f
    1f3c:	4e af       	std	Y+62, r20	; 0x3e
    1f3e:	26 97       	sbiw	r28, 0x06	; 6
    1f40:	2d 80       	ldd	r2, Y+5	; 0x05
    1f42:	3e 80       	ldd	r3, Y+6	; 0x06
    1f44:	4f 80       	ldd	r4, Y+7	; 0x07
    1f46:	58 84       	ldd	r5, Y+8	; 0x08
    1f48:	69 84       	ldd	r6, Y+9	; 0x09
    1f4a:	7a 84       	ldd	r7, Y+10	; 0x0a
    1f4c:	8b 84       	ldd	r8, Y+11	; 0x0b
    1f4e:	9c 84       	ldd	r9, Y+12	; 0x0c
    1f50:	0f 2e       	mov	r0, r31
    1f52:	fa e0       	ldi	r31, 0x0A	; 10
    1f54:	af 2e       	mov	r10, r31
    1f56:	f0 2d       	mov	r31, r0
    1f58:	b1 2c       	mov	r11, r1
    1f5a:	c1 2c       	mov	r12, r1
    1f5c:	d1 2c       	mov	r13, r1
    1f5e:	e1 2c       	mov	r14, r1
    1f60:	f1 2c       	mov	r15, r1
    1f62:	00 e0       	ldi	r16, 0x00	; 0
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	22 2d       	mov	r18, r2
    1f68:	33 2d       	mov	r19, r3
    1f6a:	44 2d       	mov	r20, r4
    1f6c:	55 2d       	mov	r21, r5
    1f6e:	66 2d       	mov	r22, r6
    1f70:	77 2d       	mov	r23, r7
    1f72:	88 2d       	mov	r24, r8
    1f74:	99 2d       	mov	r25, r9
    1f76:	90 d5       	rcall	.+2848   	; 0x2a98 <__umoddi3>
    1f78:	a2 2e       	mov	r10, r18
    1f7a:	b3 2e       	mov	r11, r19
    1f7c:	c4 2e       	mov	r12, r20
    1f7e:	d5 2e       	mov	r13, r21
    1f80:	e6 2e       	mov	r14, r22
    1f82:	f7 2e       	mov	r15, r23
    1f84:	08 2f       	mov	r16, r24
    1f86:	19 2f       	mov	r17, r25
    1f88:	2a 2d       	mov	r18, r10
    1f8a:	3b 2d       	mov	r19, r11
    1f8c:	4c 2d       	mov	r20, r12
    1f8e:	5d 2d       	mov	r21, r13
    1f90:	6e 2d       	mov	r22, r14
    1f92:	7f 2d       	mov	r23, r15
    1f94:	80 2f       	mov	r24, r16
    1f96:	91 2f       	mov	r25, r17
    1f98:	82 2f       	mov	r24, r18
    1f9a:	20 e3       	ldi	r18, 0x30	; 48
    1f9c:	28 0f       	add	r18, r24
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	0e 96       	adiw	r24, 0x0e	; 14
    1fa2:	26 96       	adiw	r28, 0x06	; 6
    1fa4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fa6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fa8:	26 97       	sbiw	r28, 0x06	; 6
    1faa:	8e 0f       	add	r24, r30
    1fac:	9f 1f       	adc	r25, r31
    1fae:	fc 01       	movw	r30, r24
    1fb0:	20 83       	st	Z, r18
    1fb2:	2d 80       	ldd	r2, Y+5	; 0x05
    1fb4:	3e 80       	ldd	r3, Y+6	; 0x06
    1fb6:	4f 80       	ldd	r4, Y+7	; 0x07
    1fb8:	58 84       	ldd	r5, Y+8	; 0x08
    1fba:	69 84       	ldd	r6, Y+9	; 0x09
    1fbc:	7a 84       	ldd	r7, Y+10	; 0x0a
    1fbe:	8b 84       	ldd	r8, Y+11	; 0x0b
    1fc0:	9c 84       	ldd	r9, Y+12	; 0x0c
    1fc2:	0f 2e       	mov	r0, r31
    1fc4:	fa e0       	ldi	r31, 0x0A	; 10
    1fc6:	af 2e       	mov	r10, r31
    1fc8:	f0 2d       	mov	r31, r0
    1fca:	b1 2c       	mov	r11, r1
    1fcc:	c1 2c       	mov	r12, r1
    1fce:	d1 2c       	mov	r13, r1
    1fd0:	e1 2c       	mov	r14, r1
    1fd2:	f1 2c       	mov	r15, r1
    1fd4:	00 e0       	ldi	r16, 0x00	; 0
    1fd6:	10 e0       	ldi	r17, 0x00	; 0
    1fd8:	22 2d       	mov	r18, r2
    1fda:	33 2d       	mov	r19, r3
    1fdc:	44 2d       	mov	r20, r4
    1fde:	55 2d       	mov	r21, r5
    1fe0:	66 2d       	mov	r22, r6
    1fe2:	77 2d       	mov	r23, r7
    1fe4:	88 2d       	mov	r24, r8
    1fe6:	99 2d       	mov	r25, r9
    1fe8:	59 d5       	rcall	.+2738   	; 0x2a9c <__udivdi3>
    1fea:	a2 2e       	mov	r10, r18
    1fec:	b3 2e       	mov	r11, r19
    1fee:	c4 2e       	mov	r12, r20
    1ff0:	d5 2e       	mov	r13, r21
    1ff2:	e6 2e       	mov	r14, r22
    1ff4:	f7 2e       	mov	r15, r23
    1ff6:	08 2f       	mov	r16, r24
    1ff8:	19 2f       	mov	r17, r25
    1ffa:	ad 82       	std	Y+5, r10	; 0x05
    1ffc:	be 82       	std	Y+6, r11	; 0x06
    1ffe:	cf 82       	std	Y+7, r12	; 0x07
    2000:	d8 86       	std	Y+8, r13	; 0x08
    2002:	e9 86       	std	Y+9, r14	; 0x09
    2004:	fa 86       	std	Y+10, r15	; 0x0a
    2006:	0b 87       	std	Y+11, r16	; 0x0b
    2008:	1c 87       	std	Y+12, r17	; 0x0c
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	8a 83       	std	Y+2, r24	; 0x02
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	84 31       	cpi	r24, 0x14	; 20
    2014:	08 f4       	brcc	.+2      	; 0x2018 <lcdWriteZahl+0x1ee>
    2016:	88 cf       	rjmp	.-240    	; 0x1f28 <lcdWriteZahl+0xfe>
    2018:	1b 82       	std	Y+3, r1	; 0x03
    201a:	94 e1       	ldi	r25, 0x14	; 20
    201c:	8d 85       	ldd	r24, Y+13	; 0x0d
    201e:	f9 2f       	mov	r31, r25
    2020:	f8 1b       	sub	r31, r24
    2022:	8f 2f       	mov	r24, r31
    2024:	8c 83       	std	Y+4, r24	; 0x04
    2026:	1a 82       	std	Y+2, r1	; 0x02
    2028:	1d c0       	rjmp	.+58     	; 0x2064 <lcdWriteZahl+0x23a>
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	2c 81       	ldd	r18, Y+4	; 0x04
    2032:	22 2f       	mov	r18, r18
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	ae 01       	movw	r20, r28
    2038:	42 5f       	subi	r20, 0xF2	; 242
    203a:	5f 4f       	sbci	r21, 0xFF	; 255
    203c:	24 0f       	add	r18, r20
    203e:	35 1f       	adc	r19, r21
    2040:	f9 01       	movw	r30, r18
    2042:	40 81       	ld	r20, Z
    2044:	9e 01       	movw	r18, r28
    2046:	2e 5d       	subi	r18, 0xDE	; 222
    2048:	3f 4f       	sbci	r19, 0xFF	; 255
    204a:	82 0f       	add	r24, r18
    204c:	93 1f       	adc	r25, r19
    204e:	fc 01       	movw	r30, r24
    2050:	40 83       	st	Z, r20
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	8f 5f       	subi	r24, 0xFF	; 255
    2056:	8b 83       	std	Y+3, r24	; 0x03
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	8f 5f       	subi	r24, 0xFF	; 255
    205c:	8c 83       	std	Y+4, r24	; 0x04
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	ce 01       	movw	r24, r28
    2066:	8e 5b       	subi	r24, 0xBE	; 190
    2068:	9f 4f       	sbci	r25, 0xFF	; 255
    206a:	2a 81       	ldd	r18, Y+2	; 0x02
    206c:	fc 01       	movw	r30, r24
    206e:	80 81       	ld	r24, Z
    2070:	28 17       	cp	r18, r24
    2072:	d8 f2       	brcs	.-74     	; 0x202a <lcdWriteZahl+0x200>
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	88 23       	and	r24, r24
    2078:	71 f0       	breq	.+28     	; 0x2096 <lcdWriteZahl+0x26c>
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9e 01       	movw	r18, r28
    2082:	2e 5d       	subi	r18, 0xDE	; 222
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	82 0f       	add	r24, r18
    2088:	93 1f       	adc	r25, r19
    208a:	2e e2       	ldi	r18, 0x2E	; 46
    208c:	fc 01       	movw	r30, r24
    208e:	20 83       	st	Z, r18
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	8f 5f       	subi	r24, 0xFF	; 255
    2094:	8b 83       	std	Y+3, r24	; 0x03
    2096:	1a 82       	std	Y+2, r1	; 0x02
    2098:	1d c0       	rjmp	.+58     	; 0x20d4 <lcdWriteZahl+0x2aa>
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	2c 81       	ldd	r18, Y+4	; 0x04
    20a2:	22 2f       	mov	r18, r18
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	ae 01       	movw	r20, r28
    20a8:	42 5f       	subi	r20, 0xF2	; 242
    20aa:	5f 4f       	sbci	r21, 0xFF	; 255
    20ac:	24 0f       	add	r18, r20
    20ae:	35 1f       	adc	r19, r21
    20b0:	f9 01       	movw	r30, r18
    20b2:	40 81       	ld	r20, Z
    20b4:	9e 01       	movw	r18, r28
    20b6:	2e 5d       	subi	r18, 0xDE	; 222
    20b8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ba:	82 0f       	add	r24, r18
    20bc:	93 1f       	adc	r25, r19
    20be:	fc 01       	movw	r30, r24
    20c0:	40 83       	st	Z, r20
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	8f 5f       	subi	r24, 0xFF	; 255
    20c6:	8b 83       	std	Y+3, r24	; 0x03
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	8c 83       	std	Y+4, r24	; 0x04
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	8f 5f       	subi	r24, 0xFF	; 255
    20d2:	8a 83       	std	Y+2, r24	; 0x02
    20d4:	ce 01       	movw	r24, r28
    20d6:	8d 5b       	subi	r24, 0xBD	; 189
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	2a 81       	ldd	r18, Y+2	; 0x02
    20dc:	fc 01       	movw	r30, r24
    20de:	80 81       	ld	r24, Z
    20e0:	28 17       	cp	r18, r24
    20e2:	d8 f2       	brcs	.-74     	; 0x209a <lcdWriteZahl+0x270>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9e 01       	movw	r18, r28
    20ec:	2e 5d       	subi	r18, 0xDE	; 222
    20ee:	3f 4f       	sbci	r19, 0xFF	; 255
    20f0:	82 0f       	add	r24, r18
    20f2:	93 1f       	adc	r25, r19
    20f4:	fc 01       	movw	r30, r24
    20f6:	10 82       	st	Z, r1
    20f8:	1a 82       	std	Y+2, r1	; 0x02
    20fa:	0e c0       	rjmp	.+28     	; 0x2118 <lcdWriteZahl+0x2ee>
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	98 0f       	add	r25, r24
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9e 01       	movw	r18, r28
    210a:	2e 5d       	subi	r18, 0xDE	; 222
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	82 0f       	add	r24, r18
    2110:	93 1f       	adc	r25, r19
    2112:	20 e2       	ldi	r18, 0x20	; 32
    2114:	fc 01       	movw	r30, r24
    2116:	20 83       	st	Z, r18
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	88 2f       	mov	r24, r24
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9e 01       	movw	r18, r28
    2120:	2e 5d       	subi	r18, 0xDE	; 222
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	82 0f       	add	r24, r18
    2126:	93 1f       	adc	r25, r19
    2128:	fc 01       	movw	r30, r24
    212a:	80 81       	ld	r24, Z
    212c:	80 33       	cpi	r24, 0x30	; 48
    212e:	71 f4       	brne	.+28     	; 0x214c <lcdWriteZahl+0x322>
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	ce 01       	movw	r24, r28
    2138:	8e 5b       	subi	r24, 0xBE	; 190
    213a:	9f 4f       	sbci	r25, 0xFF	; 255
    213c:	fc 01       	movw	r30, r24
    213e:	80 81       	ld	r24, Z
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	28 17       	cp	r18, r24
    2148:	39 07       	cpc	r19, r25
    214a:	c4 f2       	brlt	.-80     	; 0x20fc <lcdWriteZahl+0x2d2>
    214c:	ce 01       	movw	r24, r28
    214e:	82 96       	adiw	r24, 0x22	; 34
    2150:	29 2f       	mov	r18, r25
    2152:	2f 93       	push	r18
    2154:	8f 93       	push	r24
    2156:	89 ad       	ldd	r24, Y+57	; 0x39
    2158:	8f 93       	push	r24
    215a:	88 ad       	ldd	r24, Y+56	; 0x38
    215c:	8f 93       	push	r24
    215e:	13 de       	rcall	.-986    	; 0x1d86 <lcdWriteText>
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cb 5b       	subi	r28, 0xBB	; 187
    216a:	df 4f       	sbci	r29, 0xFF	; 255
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	cf 90       	pop	r12
    2186:	bf 90       	pop	r11
    2188:	af 90       	pop	r10
    218a:	9f 90       	pop	r9
    218c:	8f 90       	pop	r8
    218e:	7f 90       	pop	r7
    2190:	6f 90       	pop	r6
    2192:	5f 90       	pop	r5
    2194:	4f 90       	pop	r4
    2196:	3f 90       	pop	r3
    2198:	2f 90       	pop	r2
    219a:	08 95       	ret

0000219c <lcdLog>:
    219c:	2f 92       	push	r2
    219e:	3f 92       	push	r3
    21a0:	4f 92       	push	r4
    21a2:	5f 92       	push	r5
    21a4:	6f 92       	push	r6
    21a6:	7f 92       	push	r7
    21a8:	8f 92       	push	r8
    21aa:	9f 92       	push	r9
    21ac:	af 92       	push	r10
    21ae:	cf 92       	push	r12
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	6c 97       	sbiw	r28, 0x1c	; 28
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <firstCall.2614>
    21d0:	88 23       	and	r24, r24
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <lcdLog+0x3a>
    21d4:	4a c0       	rjmp	.+148    	; 0x226a <__stack+0x6b>
    21d6:	94 d1       	rcall	.+808    	; 0x2500 <lcdClear>
    21d8:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <firstCall.2614>
    21dc:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <nummer.2615+0x1>
    21e0:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <nummer.2615>
    21e4:	19 82       	std	Y+1, r1	; 0x01
    21e6:	3d c0       	rjmp	.+122    	; 0x2262 <__stack+0x63>
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	82 53       	subi	r24, 0x32	; 50
    21f4:	9d 4f       	sbci	r25, 0xFD	; 253
    21f6:	fc 01       	movw	r30, r24
    21f8:	11 82       	std	Z+1, r1	; 0x01
    21fa:	10 82       	st	Z, r1
    21fc:	1a 82       	std	Y+2, r1	; 0x02
    21fe:	2b c0       	rjmp	.+86     	; 0x2256 <__stack+0x57>
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	88 2f       	mov	r24, r24
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	22 95       	swap	r18
    220e:	32 95       	swap	r19
    2210:	30 7f       	andi	r19, 0xF0	; 240
    2212:	32 27       	eor	r19, r18
    2214:	20 7f       	andi	r18, 0xF0	; 240
    2216:	32 27       	eor	r19, r18
    2218:	82 0f       	add	r24, r18
    221a:	93 1f       	adc	r25, r19
    221c:	8a 52       	subi	r24, 0x2A	; 42
    221e:	9d 4f       	sbci	r25, 0xFD	; 253
    2220:	20 e2       	ldi	r18, 0x20	; 32
    2222:	fc 01       	movw	r30, r24
    2224:	20 83       	st	Z, r18
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	8f 30       	cpi	r24, 0x0F	; 15
    222a:	91 f4       	brne	.+36     	; 0x2250 <__stack+0x51>
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	22 95       	swap	r18
    223a:	32 95       	swap	r19
    223c:	30 7f       	andi	r19, 0xF0	; 240
    223e:	32 27       	eor	r19, r18
    2240:	20 7f       	andi	r18, 0xF0	; 240
    2242:	32 27       	eor	r19, r18
    2244:	82 0f       	add	r24, r18
    2246:	93 1f       	adc	r25, r19
    2248:	8a 52       	subi	r24, 0x2A	; 42
    224a:	9d 4f       	sbci	r25, 0xFD	; 253
    224c:	fc 01       	movw	r30, r24
    224e:	10 82       	st	Z, r1
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	8f 5f       	subi	r24, 0xFF	; 255
    2254:	8a 83       	std	Y+2, r24	; 0x02
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	80 31       	cpi	r24, 0x10	; 16
    225a:	90 f2       	brcs	.-92     	; 0x2200 <__stack+0x1>
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	8f 5f       	subi	r24, 0xFF	; 255
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	84 30       	cpi	r24, 0x04	; 4
    2266:	08 f4       	brcc	.+2      	; 0x226a <__stack+0x6b>
    2268:	bf cf       	rjmp	.-130    	; 0x21e8 <lcdLog+0x4c>
    226a:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <nummer.2615>
    226e:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <nummer.2615+0x1>
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <nummer.2615+0x1>
    2278:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <nummer.2615>
    227c:	ce 01       	movw	r24, r28
    227e:	c2 96       	adiw	r24, 0x32	; 50
    2280:	9c 8f       	std	Y+28, r25	; 0x1c
    2282:	8b 8f       	std	Y+27, r24	; 0x1b
    2284:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2286:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2288:	48 a9       	ldd	r20, Y+48	; 0x30
    228a:	59 a9       	ldd	r21, Y+49	; 0x31
    228c:	ce 01       	movw	r24, r28
    228e:	0b 96       	adiw	r24, 0x0b	; 11
    2290:	60 e1       	ldi	r22, 0x10	; 16
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	74 d4       	rcall	.+2280   	; 0x2b7e <vsnprintf>
    2296:	1b 82       	std	Y+3, r1	; 0x03
    2298:	1c 82       	std	Y+4, r1	; 0x04
    229a:	1f c0       	rjmp	.+62     	; 0x22da <__stack+0xdb>
    229c:	8c 81       	ldd	r24, Y+4	; 0x04
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9e 01       	movw	r18, r28
    22a4:	25 5f       	subi	r18, 0xF5	; 245
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	82 0f       	add	r24, r18
    22aa:	93 1f       	adc	r25, r19
    22ac:	fc 01       	movw	r30, r24
    22ae:	80 81       	ld	r24, Z
    22b0:	88 23       	and	r24, r24
    22b2:	11 f4       	brne	.+4      	; 0x22b8 <__stack+0xb9>
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	88 23       	and	r24, r24
    22bc:	59 f0       	breq	.+22     	; 0x22d4 <__stack+0xd5>
    22be:	8c 81       	ldd	r24, Y+4	; 0x04
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9e 01       	movw	r18, r28
    22c6:	25 5f       	subi	r18, 0xF5	; 245
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	82 0f       	add	r24, r18
    22cc:	93 1f       	adc	r25, r19
    22ce:	20 e2       	ldi	r18, 0x20	; 32
    22d0:	fc 01       	movw	r30, r24
    22d2:	20 83       	st	Z, r18
    22d4:	8c 81       	ldd	r24, Y+4	; 0x04
    22d6:	8f 5f       	subi	r24, 0xFF	; 255
    22d8:	8c 83       	std	Y+4, r24	; 0x04
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	80 31       	cpi	r24, 0x10	; 16
    22de:	f0 f2       	brcs	.-68     	; 0x229c <__stack+0x9d>
    22e0:	1a 8e       	std	Y+26, r1	; 0x1a
    22e2:	ce 01       	movw	r24, r28
    22e4:	0b 96       	adiw	r24, 0x0b	; 11
    22e6:	66 ed       	ldi	r22, 0xD6	; 214
    22e8:	72 e0       	ldi	r23, 0x02	; 2
    22ea:	40 d4       	rcall	.+2176   	; 0x2b6c <strcmp>
    22ec:	89 87       	std	Y+9, r24	; 0x09
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	88 23       	and	r24, r24
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__stack+0xf7>
    22f4:	cc c0       	rjmp	.+408    	; 0x248e <__stack+0x28f>
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	8d 83       	std	Y+5, r24	; 0x05
    22fa:	48 c0       	rjmp	.+144    	; 0x238c <__stack+0x18d>
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	2d 81       	ldd	r18, Y+5	; 0x05
    2304:	22 2f       	mov	r18, r18
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	21 50       	subi	r18, 0x01	; 1
    230a:	31 09       	sbc	r19, r1
    230c:	22 0f       	add	r18, r18
    230e:	33 1f       	adc	r19, r19
    2310:	22 53       	subi	r18, 0x32	; 50
    2312:	3d 4f       	sbci	r19, 0xFD	; 253
    2314:	f9 01       	movw	r30, r18
    2316:	20 81       	ld	r18, Z
    2318:	31 81       	ldd	r19, Z+1	; 0x01
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	82 53       	subi	r24, 0x32	; 50
    2320:	9d 4f       	sbci	r25, 0xFD	; 253
    2322:	fc 01       	movw	r30, r24
    2324:	31 83       	std	Z+1, r19	; 0x01
    2326:	20 83       	st	Z, r18
    2328:	1e 82       	std	Y+6, r1	; 0x06
    232a:	2a c0       	rjmp	.+84     	; 0x2380 <__stack+0x181>
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	8e 81       	ldd	r24, Y+6	; 0x06
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	4d 81       	ldd	r20, Y+5	; 0x05
    233a:	44 2f       	mov	r20, r20
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	ba 01       	movw	r22, r20
    2340:	61 50       	subi	r22, 0x01	; 1
    2342:	71 09       	sbc	r23, r1
    2344:	4e 81       	ldd	r20, Y+6	; 0x06
    2346:	44 2f       	mov	r20, r20
    2348:	50 e0       	ldi	r21, 0x00	; 0
    234a:	62 95       	swap	r22
    234c:	72 95       	swap	r23
    234e:	70 7f       	andi	r23, 0xF0	; 240
    2350:	76 27       	eor	r23, r22
    2352:	60 7f       	andi	r22, 0xF0	; 240
    2354:	76 27       	eor	r23, r22
    2356:	46 0f       	add	r20, r22
    2358:	57 1f       	adc	r21, r23
    235a:	4a 52       	subi	r20, 0x2A	; 42
    235c:	5d 4f       	sbci	r21, 0xFD	; 253
    235e:	fa 01       	movw	r30, r20
    2360:	40 81       	ld	r20, Z
    2362:	22 95       	swap	r18
    2364:	32 95       	swap	r19
    2366:	30 7f       	andi	r19, 0xF0	; 240
    2368:	32 27       	eor	r19, r18
    236a:	20 7f       	andi	r18, 0xF0	; 240
    236c:	32 27       	eor	r19, r18
    236e:	82 0f       	add	r24, r18
    2370:	93 1f       	adc	r25, r19
    2372:	8a 52       	subi	r24, 0x2A	; 42
    2374:	9d 4f       	sbci	r25, 0xFD	; 253
    2376:	fc 01       	movw	r30, r24
    2378:	40 83       	st	Z, r20
    237a:	8e 81       	ldd	r24, Y+6	; 0x06
    237c:	8f 5f       	subi	r24, 0xFF	; 255
    237e:	8e 83       	std	Y+6, r24	; 0x06
    2380:	8e 81       	ldd	r24, Y+6	; 0x06
    2382:	80 31       	cpi	r24, 0x10	; 16
    2384:	98 f2       	brcs	.-90     	; 0x232c <__stack+0x12d>
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	81 50       	subi	r24, 0x01	; 1
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	88 23       	and	r24, r24
    2390:	09 f0       	breq	.+2      	; 0x2394 <__stack+0x195>
    2392:	b4 cf       	rjmp	.-152    	; 0x22fc <__stack+0xfd>
    2394:	1f 82       	std	Y+7, r1	; 0x07
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <__stack+0x1c1>
    2398:	8f 81       	ldd	r24, Y+7	; 0x07
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	2f 81       	ldd	r18, Y+7	; 0x07
    23a0:	22 2f       	mov	r18, r18
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	ae 01       	movw	r20, r28
    23a6:	45 5f       	subi	r20, 0xF5	; 245
    23a8:	5f 4f       	sbci	r21, 0xFF	; 255
    23aa:	24 0f       	add	r18, r20
    23ac:	35 1f       	adc	r19, r21
    23ae:	f9 01       	movw	r30, r18
    23b0:	20 81       	ld	r18, Z
    23b2:	8a 52       	subi	r24, 0x2A	; 42
    23b4:	9d 4f       	sbci	r25, 0xFD	; 253
    23b6:	fc 01       	movw	r30, r24
    23b8:	20 83       	st	Z, r18
    23ba:	8f 81       	ldd	r24, Y+7	; 0x07
    23bc:	8f 5f       	subi	r24, 0xFF	; 255
    23be:	8f 83       	std	Y+7, r24	; 0x07
    23c0:	8f 81       	ldd	r24, Y+7	; 0x07
    23c2:	80 31       	cpi	r24, 0x10	; 16
    23c4:	48 f3       	brcs	.-46     	; 0x2398 <__stack+0x199>
    23c6:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <nummer.2615>
    23ca:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <nummer.2615+0x1>
    23ce:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <lcdPrintNr.2613+0x1>
    23d2:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <lcdPrintNr.2613>
    23d6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    23da:	94 e0       	ldi	r25, 0x04	; 4
    23dc:	f9 2f       	mov	r31, r25
    23de:	f8 1b       	sub	r31, r24
    23e0:	8f 2f       	mov	r24, r31
    23e2:	88 87       	std	Y+8, r24	; 0x08
    23e4:	4f c0       	rjmp	.+158    	; 0x2484 <__stack+0x285>
    23e6:	93 e0       	ldi	r25, 0x03	; 3
    23e8:	88 85       	ldd	r24, Y+8	; 0x08
    23ea:	29 2f       	mov	r18, r25
    23ec:	28 1b       	sub	r18, r24
    23ee:	82 2f       	mov	r24, r18
    23f0:	8a 87       	std	Y+10, r24	; 0x0a
    23f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f4:	88 2f       	mov	r24, r24
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	82 95       	swap	r24
    23fa:	92 95       	swap	r25
    23fc:	90 7f       	andi	r25, 0xF0	; 240
    23fe:	98 27       	eor	r25, r24
    2400:	80 7f       	andi	r24, 0xF0	; 240
    2402:	98 27       	eor	r25, r24
    2404:	8a 52       	subi	r24, 0x2A	; 42
    2406:	9d 4f       	sbci	r25, 0xFD	; 253
    2408:	29 2f       	mov	r18, r25
    240a:	2f 93       	push	r18
    240c:	8f 93       	push	r24
    240e:	85 e0       	ldi	r24, 0x05	; 5
    2410:	8f 93       	push	r24
    2412:	88 85       	ldd	r24, Y+8	; 0x08
    2414:	8f 93       	push	r24
    2416:	b7 dc       	rcall	.-1682   	; 0x1d86 <lcdWriteText>
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	86 eb       	ldi	r24, 0xB6	; 182
    2422:	92 e0       	ldi	r25, 0x02	; 2
    2424:	89 2f       	mov	r24, r25
    2426:	8f 93       	push	r24
    2428:	86 eb       	ldi	r24, 0xB6	; 182
    242a:	92 e0       	ldi	r25, 0x02	; 2
    242c:	8f 93       	push	r24
    242e:	84 e0       	ldi	r24, 0x04	; 4
    2430:	8f 93       	push	r24
    2432:	88 85       	ldd	r24, Y+8	; 0x08
    2434:	8f 93       	push	r24
    2436:	a7 dc       	rcall	.-1714   	; 0x1d86 <lcdWriteText>
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	8a 85       	ldd	r24, Y+10	; 0x0a
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	82 53       	subi	r24, 0x32	; 50
    244c:	9d 4f       	sbci	r25, 0xFD	; 253
    244e:	fc 01       	movw	r30, r24
    2450:	80 81       	ld	r24, Z
    2452:	91 81       	ldd	r25, Z+1	; 0x01
    2454:	1c 01       	movw	r2, r24
    2456:	41 2c       	mov	r4, r1
    2458:	51 2c       	mov	r5, r1
    245a:	61 2c       	mov	r6, r1
    245c:	71 2c       	mov	r7, r1
    245e:	43 01       	movw	r8, r6
    2460:	a1 2c       	mov	r10, r1
    2462:	68 94       	set
    2464:	cc 24       	eor	r12, r12
    2466:	c2 f8       	bld	r12, 2
    2468:	e2 2c       	mov	r14, r2
    246a:	f3 2c       	mov	r15, r3
    246c:	04 2d       	mov	r16, r4
    246e:	15 2d       	mov	r17, r5
    2470:	26 2d       	mov	r18, r6
    2472:	37 2d       	mov	r19, r7
    2474:	48 2d       	mov	r20, r8
    2476:	59 2d       	mov	r21, r9
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	88 85       	ldd	r24, Y+8	; 0x08
    247c:	d6 dc       	rcall	.-1620   	; 0x1e2a <lcdWriteZahl>
    247e:	88 85       	ldd	r24, Y+8	; 0x08
    2480:	8f 5f       	subi	r24, 0xFF	; 255
    2482:	88 87       	std	Y+8, r24	; 0x08
    2484:	88 85       	ldd	r24, Y+8	; 0x08
    2486:	84 30       	cpi	r24, 0x04	; 4
    2488:	08 f4       	brcc	.+2      	; 0x248c <__stack+0x28d>
    248a:	ad cf       	rjmp	.-166    	; 0x23e6 <__stack+0x1e7>
    248c:	21 c0       	rjmp	.+66     	; 0x24d0 <__stack+0x2d1>
    248e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <nummer.2615>
    2492:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <nummer.2615+0x1>
    2496:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <lcdPrintNr.2613+0x1>
    249a:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <lcdPrintNr.2613>
    249e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <lcdPrintNr.2613>
    24a2:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <lcdPrintNr.2613+0x1>
    24a6:	1c 01       	movw	r2, r24
    24a8:	41 2c       	mov	r4, r1
    24aa:	51 2c       	mov	r5, r1
    24ac:	61 2c       	mov	r6, r1
    24ae:	71 2c       	mov	r7, r1
    24b0:	43 01       	movw	r8, r6
    24b2:	a1 2c       	mov	r10, r1
    24b4:	68 94       	set
    24b6:	cc 24       	eor	r12, r12
    24b8:	c2 f8       	bld	r12, 2
    24ba:	e2 2c       	mov	r14, r2
    24bc:	f3 2c       	mov	r15, r3
    24be:	04 2d       	mov	r16, r4
    24c0:	15 2d       	mov	r17, r5
    24c2:	26 2d       	mov	r18, r6
    24c4:	37 2d       	mov	r19, r7
    24c6:	48 2d       	mov	r20, r8
    24c8:	59 2d       	mov	r21, r9
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	ad dc       	rcall	.-1702   	; 0x1e2a <lcdWriteZahl>
    24d0:	00 00       	nop
    24d2:	6c 96       	adiw	r28, 0x1c	; 28
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	ff 90       	pop	r15
    24e8:	ef 90       	pop	r14
    24ea:	cf 90       	pop	r12
    24ec:	af 90       	pop	r10
    24ee:	9f 90       	pop	r9
    24f0:	8f 90       	pop	r8
    24f2:	7f 90       	pop	r7
    24f4:	6f 90       	pop	r6
    24f6:	5f 90       	pop	r5
    24f8:	4f 90       	pop	r4
    24fa:	3f 90       	pop	r3
    24fc:	2f 90       	pop	r2
    24fe:	08 95       	ret

00002500 <lcdClear>:
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	2e 97       	sbiw	r28, 0x0e	; 14
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	61 e0       	ldi	r22, 0x01	; 1
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	83 e4       	ldi	r24, 0x43	; 67
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a3 da       	rcall	.-2746   	; 0x1a64 <writeLcdF>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	a0 e0       	ldi	r26, 0x00	; 0
    2524:	b0 e4       	ldi	r27, 0x40	; 64
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	ab 83       	std	Y+3, r26	; 0x03
    252c:	bc 83       	std	Y+4, r27	; 0x04
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a e7       	ldi	r20, 0x7A	; 122
    2534:	55 e4       	ldi	r21, 0x45	; 69
    2536:	69 81       	ldd	r22, Y+1	; 0x01
    2538:	7a 81       	ldd	r23, Y+2	; 0x02
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	49 d2       	rcall	.+1170   	; 0x29d2 <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	af 83       	std	Y+7, r26	; 0x07
    254a:	b8 87       	std	Y+8, r27	; 0x08
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e8       	ldi	r20, 0x80	; 128
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	6d 81       	ldd	r22, Y+5	; 0x05
    2556:	7e 81       	ldd	r23, Y+6	; 0x06
    2558:	8f 81       	ldd	r24, Y+7	; 0x07
    255a:	98 85       	ldd	r25, Y+8	; 0x08
    255c:	29 d1       	rcall	.+594    	; 0x27b0 <__cmpsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <lcdClear+0x6c>
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9a 87       	std	Y+10, r25	; 0x0a
    2568:	89 87       	std	Y+9, r24	; 0x09
    256a:	3b c0       	rjmp	.+118    	; 0x25e2 <lcdClear+0xe2>
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	6d 81       	ldd	r22, Y+5	; 0x05
    2576:	7e 81       	ldd	r23, Y+6	; 0x06
    2578:	8f 81       	ldd	r24, Y+7	; 0x07
    257a:	98 85       	ldd	r25, Y+8	; 0x08
    257c:	26 d2       	rcall	.+1100   	; 0x29ca <__gesf2>
    257e:	18 16       	cp	r1, r24
    2580:	3c f5       	brge	.+78     	; 0x25d0 <lcdClear+0xd0>
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	69 81       	ldd	r22, Y+1	; 0x01
    258c:	7a 81       	ldd	r23, Y+2	; 0x02
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	1f d2       	rcall	.+1086   	; 0x29d2 <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	75 d1       	rcall	.+746    	; 0x2888 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9a 87       	std	Y+10, r25	; 0x0a
    25a4:	89 87       	std	Y+9, r24	; 0x09
    25a6:	0f c0       	rjmp	.+30     	; 0x25c6 <lcdClear+0xc6>
    25a8:	80 e9       	ldi	r24, 0x90	; 144
    25aa:	91 e0       	ldi	r25, 0x01	; 1
    25ac:	9c 87       	std	Y+12, r25	; 0x0c
    25ae:	8b 87       	std	Y+11, r24	; 0x0b
    25b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    25b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <lcdClear+0xb4>
    25b8:	9c 87       	std	Y+12, r25	; 0x0c
    25ba:	8b 87       	std	Y+11, r24	; 0x0b
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	9a 87       	std	Y+10, r25	; 0x0a
    25c4:	89 87       	std	Y+9, r24	; 0x09
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	89 2b       	or	r24, r25
    25cc:	69 f7       	brne	.-38     	; 0x25a8 <lcdClear+0xa8>
    25ce:	13 c0       	rjmp	.+38     	; 0x25f6 <lcdClear+0xf6>
    25d0:	6d 81       	ldd	r22, Y+5	; 0x05
    25d2:	7e 81       	ldd	r23, Y+6	; 0x06
    25d4:	8f 81       	ldd	r24, Y+7	; 0x07
    25d6:	98 85       	ldd	r25, Y+8	; 0x08
    25d8:	57 d1       	rcall	.+686    	; 0x2888 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9a 87       	std	Y+10, r25	; 0x0a
    25e0:	89 87       	std	Y+9, r24	; 0x09
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	9e 87       	std	Y+14, r25	; 0x0e
    25e8:	8d 87       	std	Y+13, r24	; 0x0d
    25ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <lcdClear+0xee>
    25f2:	9e 87       	std	Y+14, r25	; 0x0e
    25f4:	8d 87       	std	Y+13, r24	; 0x0d
    25f6:	88 eb       	ldi	r24, 0xB8	; 184
    25f8:	92 e0       	ldi	r25, 0x02	; 2
    25fa:	89 2f       	mov	r24, r25
    25fc:	8f 93       	push	r24
    25fe:	88 eb       	ldi	r24, 0xB8	; 184
    2600:	92 e0       	ldi	r25, 0x02	; 2
    2602:	8f 93       	push	r24
    2604:	1f 92       	push	r1
    2606:	1f 92       	push	r1
    2608:	be db       	rcall	.-2180   	; 0x1d86 <lcdWriteText>
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	00 00       	nop
    2614:	2e 96       	adiw	r28, 0x0e	; 14
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	08 95       	ret

00002626 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	29 97       	sbiw	r28, 0x09	; 9
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
    263a:	88 e0       	ldi	r24, 0x08	; 8
    263c:	ea eb       	ldi	r30, 0xBA	; 186
    263e:	f2 e0       	ldi	r31, 0x02	; 2
    2640:	de 01       	movw	r26, r28
    2642:	12 96       	adiw	r26, 0x02	; 2
    2644:	01 90       	ld	r0, Z+
    2646:	0d 92       	st	X+, r0
    2648:	8a 95       	dec	r24
    264a:	e1 f7       	brne	.-8      	; 0x2644 <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
    264c:	85 e0       	ldi	r24, 0x05	; 5
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	25 e0       	ldi	r18, 0x05	; 5
    2652:	31 e0       	ldi	r19, 0x01	; 1
    2654:	f9 01       	movw	r30, r18
    2656:	20 81       	ld	r18, Z
    2658:	2f 7b       	andi	r18, 0xBF	; 191
    265a:	fc 01       	movw	r30, r24
    265c:	20 83       	st	Z, r18

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    265e:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <Zeilen_Nr.2730>
    2662:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <Zeilen_Nr.2730+0x1>
    2666:	9e 01       	movw	r18, r28
    2668:	2e 5f       	subi	r18, 0xFE	; 254
    266a:	3f 4f       	sbci	r19, 0xFF	; 255
    266c:	82 0f       	add	r24, r18
    266e:	93 1f       	adc	r25, r19
    2670:	fc 01       	movw	r30, r24
    2672:	80 81       	ld	r24, Z
    2674:	88 2f       	mov	r24, r24
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <Bit_Muster.2731+0x1>
    267c:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <Bit_Muster.2731>
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    2680:	19 82       	std	Y+1, r1	; 0x01
    2682:	40 c0       	rjmp	.+128    	; 0x2704 <matrixWriteNextLine+0xde>
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	88 2f       	mov	r24, r24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	27 e3       	ldi	r18, 0x37	; 55
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	a9 01       	movw	r20, r18
    2690:	48 1b       	sub	r20, r24
    2692:	59 0b       	sbc	r21, r25
    2694:	ca 01       	movw	r24, r20
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	86 5e       	subi	r24, 0xE6	; 230
    269c:	9c 4f       	sbci	r25, 0xFC	; 252
    269e:	fc 01       	movw	r30, r24
    26a0:	20 81       	ld	r18, Z
    26a2:	31 81       	ldd	r19, Z+1	; 0x01
    26a4:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <Bit_Muster.2731>
    26a8:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <Bit_Muster.2731+0x1>
    26ac:	82 23       	and	r24, r18
    26ae:	93 23       	and	r25, r19
    26b0:	89 2b       	or	r24, r25
    26b2:	51 f0       	breq	.+20     	; 0x26c8 <matrixWriteNextLine+0xa2>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
    26b4:	85 e0       	ldi	r24, 0x05	; 5
    26b6:	91 e0       	ldi	r25, 0x01	; 1
    26b8:	25 e0       	ldi	r18, 0x05	; 5
    26ba:	31 e0       	ldi	r19, 0x01	; 1
    26bc:	f9 01       	movw	r30, r18
    26be:	20 81       	ld	r18, Z
    26c0:	20 62       	ori	r18, 0x20	; 32
    26c2:	fc 01       	movw	r30, r24
    26c4:	20 83       	st	Z, r18
    26c6:	09 c0       	rjmp	.+18     	; 0x26da <matrixWriteNextLine+0xb4>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
    26c8:	85 e0       	ldi	r24, 0x05	; 5
    26ca:	91 e0       	ldi	r25, 0x01	; 1
    26cc:	25 e0       	ldi	r18, 0x05	; 5
    26ce:	31 e0       	ldi	r19, 0x01	; 1
    26d0:	f9 01       	movw	r30, r18
    26d2:	20 81       	ld	r18, Z
    26d4:	2f 7d       	andi	r18, 0xDF	; 223
    26d6:	fc 01       	movw	r30, r24
    26d8:	20 83       	st	Z, r18
        }
        CLOCK_1;
    26da:	85 e0       	ldi	r24, 0x05	; 5
    26dc:	91 e0       	ldi	r25, 0x01	; 1
    26de:	25 e0       	ldi	r18, 0x05	; 5
    26e0:	31 e0       	ldi	r19, 0x01	; 1
    26e2:	f9 01       	movw	r30, r18
    26e4:	20 81       	ld	r18, Z
    26e6:	20 61       	ori	r18, 0x10	; 16
    26e8:	fc 01       	movw	r30, r24
    26ea:	20 83       	st	Z, r18
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    26ec:	85 e0       	ldi	r24, 0x05	; 5
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	25 e0       	ldi	r18, 0x05	; 5
    26f2:	31 e0       	ldi	r19, 0x01	; 1
    26f4:	f9 01       	movw	r30, r18
    26f6:	20 81       	ld	r18, Z
    26f8:	2f 7e       	andi	r18, 0xEF	; 239
    26fa:	fc 01       	movw	r30, r24
    26fc:	20 83       	st	Z, r18
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	8f 5f       	subi	r24, 0xFF	; 255
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	88 33       	cpi	r24, 0x38	; 56
    2708:	08 f4       	brcc	.+2      	; 0x270c <matrixWriteNextLine+0xe6>
    270a:	bc cf       	rjmp	.-136    	; 0x2684 <matrixWriteNextLine+0x5e>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
    270c:	85 e0       	ldi	r24, 0x05	; 5
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	25 e0       	ldi	r18, 0x05	; 5
    2712:	31 e0       	ldi	r19, 0x01	; 1
    2714:	f9 01       	movw	r30, r18
    2716:	20 81       	ld	r18, Z
    2718:	27 7f       	andi	r18, 0xF7	; 247
    271a:	fc 01       	movw	r30, r24
    271c:	20 83       	st	Z, r18
    PORTJ &= ~0x07;
    271e:	85 e0       	ldi	r24, 0x05	; 5
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	25 e0       	ldi	r18, 0x05	; 5
    2724:	31 e0       	ldi	r19, 0x01	; 1
    2726:	f9 01       	movw	r30, r18
    2728:	20 81       	ld	r18, Z
    272a:	28 7f       	andi	r18, 0xF8	; 248
    272c:	fc 01       	movw	r30, r24
    272e:	20 83       	st	Z, r18
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
    2730:	85 e0       	ldi	r24, 0x05	; 5
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	25 e0       	ldi	r18, 0x05	; 5
    2736:	31 e0       	ldi	r19, 0x01	; 1
    2738:	f9 01       	movw	r30, r18
    273a:	40 81       	ld	r20, Z
    273c:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <Zeilen_Nr.2730>
    2740:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <Zeilen_Nr.2730+0x1>
    2744:	24 2b       	or	r18, r20
    2746:	fc 01       	movw	r30, r24
    2748:	20 83       	st	Z, r18
    STROBE_1;                             // Daten ins Latch schreiben
    274a:	85 e0       	ldi	r24, 0x05	; 5
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	25 e0       	ldi	r18, 0x05	; 5
    2750:	31 e0       	ldi	r19, 0x01	; 1
    2752:	f9 01       	movw	r30, r18
    2754:	20 81       	ld	r18, Z
    2756:	20 64       	ori	r18, 0x40	; 64
    2758:	fc 01       	movw	r30, r24
    275a:	20 83       	st	Z, r18
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
    275c:	85 e0       	ldi	r24, 0x05	; 5
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	25 e0       	ldi	r18, 0x05	; 5
    2762:	31 e0       	ldi	r19, 0x01	; 1
    2764:	f9 01       	movw	r30, r18
    2766:	20 81       	ld	r18, Z
    2768:	28 60       	ori	r18, 0x08	; 8
    276a:	fc 01       	movw	r30, r24
    276c:	20 83       	st	Z, r18

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
    276e:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <Zeilen_Nr.2730>
    2772:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <Zeilen_Nr.2730+0x1>
    2776:	07 97       	sbiw	r24, 0x07	; 7
    2778:	50 f4       	brcc	.+20     	; 0x278e <matrixWriteNextLine+0x168>
    {
        Zeilen_Nr++;
    277a:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <Zeilen_Nr.2730>
    277e:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <Zeilen_Nr.2730+0x1>
    2782:	01 96       	adiw	r24, 0x01	; 1
    2784:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <Zeilen_Nr.2730+0x1>
    2788:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <Zeilen_Nr.2730>
    {
        Zeilen_Nr = 0;
        writeTextFinished = 1;
    }
    
    278c:	07 c0       	rjmp	.+14     	; 0x279c <matrixWriteNextLine+0x176>
    {
        Zeilen_Nr++;
    }
    else
    {
        Zeilen_Nr = 0;
    278e:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <Zeilen_Nr.2730+0x1>
    2792:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <Zeilen_Nr.2730>
        writeTextFinished = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <writeTextFinished>
    }
    
    279c:	00 00       	nop
    279e:	29 96       	adiw	r28, 0x09	; 9
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	df 91       	pop	r29
    27ac:	cf 91       	pop	r28
    27ae:	08 95       	ret

000027b0 <__cmpsf2>:
    27b0:	97 d0       	rcall	.+302    	; 0x28e0 <__fp_cmp>
    27b2:	08 f4       	brcc	.+2      	; 0x27b6 <__cmpsf2+0x6>
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	08 95       	ret

000027b8 <__divsf3>:
    27b8:	0c d0       	rcall	.+24     	; 0x27d2 <__divsf3x>
    27ba:	cd c0       	rjmp	.+410    	; 0x2956 <__fp_round>
    27bc:	c5 d0       	rcall	.+394    	; 0x2948 <__fp_pscB>
    27be:	40 f0       	brcs	.+16     	; 0x27d0 <__divsf3+0x18>
    27c0:	bc d0       	rcall	.+376    	; 0x293a <__fp_pscA>
    27c2:	30 f0       	brcs	.+12     	; 0x27d0 <__divsf3+0x18>
    27c4:	21 f4       	brne	.+8      	; 0x27ce <__divsf3+0x16>
    27c6:	5f 3f       	cpi	r21, 0xFF	; 255
    27c8:	19 f0       	breq	.+6      	; 0x27d0 <__divsf3+0x18>
    27ca:	ae c0       	rjmp	.+348    	; 0x2928 <__fp_inf>
    27cc:	51 11       	cpse	r21, r1
    27ce:	f7 c0       	rjmp	.+494    	; 0x29be <__fp_szero>
    27d0:	b1 c0       	rjmp	.+354    	; 0x2934 <__fp_nan>

000027d2 <__divsf3x>:
    27d2:	d2 d0       	rcall	.+420    	; 0x2978 <__fp_split3>
    27d4:	98 f3       	brcs	.-26     	; 0x27bc <__divsf3+0x4>

000027d6 <__divsf3_pse>:
    27d6:	99 23       	and	r25, r25
    27d8:	c9 f3       	breq	.-14     	; 0x27cc <__divsf3+0x14>
    27da:	55 23       	and	r21, r21
    27dc:	b1 f3       	breq	.-20     	; 0x27ca <__divsf3+0x12>
    27de:	95 1b       	sub	r25, r21
    27e0:	55 0b       	sbc	r21, r21
    27e2:	bb 27       	eor	r27, r27
    27e4:	aa 27       	eor	r26, r26
    27e6:	62 17       	cp	r22, r18
    27e8:	73 07       	cpc	r23, r19
    27ea:	84 07       	cpc	r24, r20
    27ec:	38 f0       	brcs	.+14     	; 0x27fc <__divsf3_pse+0x26>
    27ee:	9f 5f       	subi	r25, 0xFF	; 255
    27f0:	5f 4f       	sbci	r21, 0xFF	; 255
    27f2:	22 0f       	add	r18, r18
    27f4:	33 1f       	adc	r19, r19
    27f6:	44 1f       	adc	r20, r20
    27f8:	aa 1f       	adc	r26, r26
    27fa:	a9 f3       	breq	.-22     	; 0x27e6 <__divsf3_pse+0x10>
    27fc:	33 d0       	rcall	.+102    	; 0x2864 <__divsf3_pse+0x8e>
    27fe:	0e 2e       	mov	r0, r30
    2800:	3a f0       	brmi	.+14     	; 0x2810 <__divsf3_pse+0x3a>
    2802:	e0 e8       	ldi	r30, 0x80	; 128
    2804:	30 d0       	rcall	.+96     	; 0x2866 <__divsf3_pse+0x90>
    2806:	91 50       	subi	r25, 0x01	; 1
    2808:	50 40       	sbci	r21, 0x00	; 0
    280a:	e6 95       	lsr	r30
    280c:	00 1c       	adc	r0, r0
    280e:	ca f7       	brpl	.-14     	; 0x2802 <__divsf3_pse+0x2c>
    2810:	29 d0       	rcall	.+82     	; 0x2864 <__divsf3_pse+0x8e>
    2812:	fe 2f       	mov	r31, r30
    2814:	27 d0       	rcall	.+78     	; 0x2864 <__divsf3_pse+0x8e>
    2816:	66 0f       	add	r22, r22
    2818:	77 1f       	adc	r23, r23
    281a:	88 1f       	adc	r24, r24
    281c:	bb 1f       	adc	r27, r27
    281e:	26 17       	cp	r18, r22
    2820:	37 07       	cpc	r19, r23
    2822:	48 07       	cpc	r20, r24
    2824:	ab 07       	cpc	r26, r27
    2826:	b0 e8       	ldi	r27, 0x80	; 128
    2828:	09 f0       	breq	.+2      	; 0x282c <__divsf3_pse+0x56>
    282a:	bb 0b       	sbc	r27, r27
    282c:	80 2d       	mov	r24, r0
    282e:	bf 01       	movw	r22, r30
    2830:	ff 27       	eor	r31, r31
    2832:	93 58       	subi	r25, 0x83	; 131
    2834:	5f 4f       	sbci	r21, 0xFF	; 255
    2836:	2a f0       	brmi	.+10     	; 0x2842 <__divsf3_pse+0x6c>
    2838:	9e 3f       	cpi	r25, 0xFE	; 254
    283a:	51 05       	cpc	r21, r1
    283c:	68 f0       	brcs	.+26     	; 0x2858 <__divsf3_pse+0x82>
    283e:	74 c0       	rjmp	.+232    	; 0x2928 <__fp_inf>
    2840:	be c0       	rjmp	.+380    	; 0x29be <__fp_szero>
    2842:	5f 3f       	cpi	r21, 0xFF	; 255
    2844:	ec f3       	brlt	.-6      	; 0x2840 <__divsf3_pse+0x6a>
    2846:	98 3e       	cpi	r25, 0xE8	; 232
    2848:	dc f3       	brlt	.-10     	; 0x2840 <__divsf3_pse+0x6a>
    284a:	86 95       	lsr	r24
    284c:	77 95       	ror	r23
    284e:	67 95       	ror	r22
    2850:	b7 95       	ror	r27
    2852:	f7 95       	ror	r31
    2854:	9f 5f       	subi	r25, 0xFF	; 255
    2856:	c9 f7       	brne	.-14     	; 0x284a <__divsf3_pse+0x74>
    2858:	88 0f       	add	r24, r24
    285a:	91 1d       	adc	r25, r1
    285c:	96 95       	lsr	r25
    285e:	87 95       	ror	r24
    2860:	97 f9       	bld	r25, 7
    2862:	08 95       	ret
    2864:	e1 e0       	ldi	r30, 0x01	; 1
    2866:	66 0f       	add	r22, r22
    2868:	77 1f       	adc	r23, r23
    286a:	88 1f       	adc	r24, r24
    286c:	bb 1f       	adc	r27, r27
    286e:	62 17       	cp	r22, r18
    2870:	73 07       	cpc	r23, r19
    2872:	84 07       	cpc	r24, r20
    2874:	ba 07       	cpc	r27, r26
    2876:	20 f0       	brcs	.+8      	; 0x2880 <__divsf3_pse+0xaa>
    2878:	62 1b       	sub	r22, r18
    287a:	73 0b       	sbc	r23, r19
    287c:	84 0b       	sbc	r24, r20
    287e:	ba 0b       	sbc	r27, r26
    2880:	ee 1f       	adc	r30, r30
    2882:	88 f7       	brcc	.-30     	; 0x2866 <__divsf3_pse+0x90>
    2884:	e0 95       	com	r30
    2886:	08 95       	ret

00002888 <__fixunssfsi>:
    2888:	7f d0       	rcall	.+254    	; 0x2988 <__fp_splitA>
    288a:	88 f0       	brcs	.+34     	; 0x28ae <__fixunssfsi+0x26>
    288c:	9f 57       	subi	r25, 0x7F	; 127
    288e:	90 f0       	brcs	.+36     	; 0x28b4 <__fixunssfsi+0x2c>
    2890:	b9 2f       	mov	r27, r25
    2892:	99 27       	eor	r25, r25
    2894:	b7 51       	subi	r27, 0x17	; 23
    2896:	a0 f0       	brcs	.+40     	; 0x28c0 <__fixunssfsi+0x38>
    2898:	d1 f0       	breq	.+52     	; 0x28ce <__fixunssfsi+0x46>
    289a:	66 0f       	add	r22, r22
    289c:	77 1f       	adc	r23, r23
    289e:	88 1f       	adc	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	1a f0       	brmi	.+6      	; 0x28aa <__fixunssfsi+0x22>
    28a4:	ba 95       	dec	r27
    28a6:	c9 f7       	brne	.-14     	; 0x289a <__fixunssfsi+0x12>
    28a8:	12 c0       	rjmp	.+36     	; 0x28ce <__fixunssfsi+0x46>
    28aa:	b1 30       	cpi	r27, 0x01	; 1
    28ac:	81 f0       	breq	.+32     	; 0x28ce <__fixunssfsi+0x46>
    28ae:	86 d0       	rcall	.+268    	; 0x29bc <__fp_zero>
    28b0:	b1 e0       	ldi	r27, 0x01	; 1
    28b2:	08 95       	ret
    28b4:	83 c0       	rjmp	.+262    	; 0x29bc <__fp_zero>
    28b6:	67 2f       	mov	r22, r23
    28b8:	78 2f       	mov	r23, r24
    28ba:	88 27       	eor	r24, r24
    28bc:	b8 5f       	subi	r27, 0xF8	; 248
    28be:	39 f0       	breq	.+14     	; 0x28ce <__fixunssfsi+0x46>
    28c0:	b9 3f       	cpi	r27, 0xF9	; 249
    28c2:	cc f3       	brlt	.-14     	; 0x28b6 <__fixunssfsi+0x2e>
    28c4:	86 95       	lsr	r24
    28c6:	77 95       	ror	r23
    28c8:	67 95       	ror	r22
    28ca:	b3 95       	inc	r27
    28cc:	d9 f7       	brne	.-10     	; 0x28c4 <__fixunssfsi+0x3c>
    28ce:	3e f4       	brtc	.+14     	; 0x28de <__fixunssfsi+0x56>
    28d0:	90 95       	com	r25
    28d2:	80 95       	com	r24
    28d4:	70 95       	com	r23
    28d6:	61 95       	neg	r22
    28d8:	7f 4f       	sbci	r23, 0xFF	; 255
    28da:	8f 4f       	sbci	r24, 0xFF	; 255
    28dc:	9f 4f       	sbci	r25, 0xFF	; 255
    28de:	08 95       	ret

000028e0 <__fp_cmp>:
    28e0:	99 0f       	add	r25, r25
    28e2:	00 08       	sbc	r0, r0
    28e4:	55 0f       	add	r21, r21
    28e6:	aa 0b       	sbc	r26, r26
    28e8:	e0 e8       	ldi	r30, 0x80	; 128
    28ea:	fe ef       	ldi	r31, 0xFE	; 254
    28ec:	16 16       	cp	r1, r22
    28ee:	17 06       	cpc	r1, r23
    28f0:	e8 07       	cpc	r30, r24
    28f2:	f9 07       	cpc	r31, r25
    28f4:	c0 f0       	brcs	.+48     	; 0x2926 <__fp_cmp+0x46>
    28f6:	12 16       	cp	r1, r18
    28f8:	13 06       	cpc	r1, r19
    28fa:	e4 07       	cpc	r30, r20
    28fc:	f5 07       	cpc	r31, r21
    28fe:	98 f0       	brcs	.+38     	; 0x2926 <__fp_cmp+0x46>
    2900:	62 1b       	sub	r22, r18
    2902:	73 0b       	sbc	r23, r19
    2904:	84 0b       	sbc	r24, r20
    2906:	95 0b       	sbc	r25, r21
    2908:	39 f4       	brne	.+14     	; 0x2918 <__fp_cmp+0x38>
    290a:	0a 26       	eor	r0, r26
    290c:	61 f0       	breq	.+24     	; 0x2926 <__fp_cmp+0x46>
    290e:	23 2b       	or	r18, r19
    2910:	24 2b       	or	r18, r20
    2912:	25 2b       	or	r18, r21
    2914:	21 f4       	brne	.+8      	; 0x291e <__fp_cmp+0x3e>
    2916:	08 95       	ret
    2918:	0a 26       	eor	r0, r26
    291a:	09 f4       	brne	.+2      	; 0x291e <__fp_cmp+0x3e>
    291c:	a1 40       	sbci	r26, 0x01	; 1
    291e:	a6 95       	lsr	r26
    2920:	8f ef       	ldi	r24, 0xFF	; 255
    2922:	81 1d       	adc	r24, r1
    2924:	81 1d       	adc	r24, r1
    2926:	08 95       	ret

00002928 <__fp_inf>:
    2928:	97 f9       	bld	r25, 7
    292a:	9f 67       	ori	r25, 0x7F	; 127
    292c:	80 e8       	ldi	r24, 0x80	; 128
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	08 95       	ret

00002934 <__fp_nan>:
    2934:	9f ef       	ldi	r25, 0xFF	; 255
    2936:	80 ec       	ldi	r24, 0xC0	; 192
    2938:	08 95       	ret

0000293a <__fp_pscA>:
    293a:	00 24       	eor	r0, r0
    293c:	0a 94       	dec	r0
    293e:	16 16       	cp	r1, r22
    2940:	17 06       	cpc	r1, r23
    2942:	18 06       	cpc	r1, r24
    2944:	09 06       	cpc	r0, r25
    2946:	08 95       	ret

00002948 <__fp_pscB>:
    2948:	00 24       	eor	r0, r0
    294a:	0a 94       	dec	r0
    294c:	12 16       	cp	r1, r18
    294e:	13 06       	cpc	r1, r19
    2950:	14 06       	cpc	r1, r20
    2952:	05 06       	cpc	r0, r21
    2954:	08 95       	ret

00002956 <__fp_round>:
    2956:	09 2e       	mov	r0, r25
    2958:	03 94       	inc	r0
    295a:	00 0c       	add	r0, r0
    295c:	11 f4       	brne	.+4      	; 0x2962 <__fp_round+0xc>
    295e:	88 23       	and	r24, r24
    2960:	52 f0       	brmi	.+20     	; 0x2976 <__fp_round+0x20>
    2962:	bb 0f       	add	r27, r27
    2964:	40 f4       	brcc	.+16     	; 0x2976 <__fp_round+0x20>
    2966:	bf 2b       	or	r27, r31
    2968:	11 f4       	brne	.+4      	; 0x296e <__fp_round+0x18>
    296a:	60 ff       	sbrs	r22, 0
    296c:	04 c0       	rjmp	.+8      	; 0x2976 <__fp_round+0x20>
    296e:	6f 5f       	subi	r22, 0xFF	; 255
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	8f 4f       	sbci	r24, 0xFF	; 255
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	08 95       	ret

00002978 <__fp_split3>:
    2978:	57 fd       	sbrc	r21, 7
    297a:	90 58       	subi	r25, 0x80	; 128
    297c:	44 0f       	add	r20, r20
    297e:	55 1f       	adc	r21, r21
    2980:	59 f0       	breq	.+22     	; 0x2998 <__fp_splitA+0x10>
    2982:	5f 3f       	cpi	r21, 0xFF	; 255
    2984:	71 f0       	breq	.+28     	; 0x29a2 <__fp_splitA+0x1a>
    2986:	47 95       	ror	r20

00002988 <__fp_splitA>:
    2988:	88 0f       	add	r24, r24
    298a:	97 fb       	bst	r25, 7
    298c:	99 1f       	adc	r25, r25
    298e:	61 f0       	breq	.+24     	; 0x29a8 <__fp_splitA+0x20>
    2990:	9f 3f       	cpi	r25, 0xFF	; 255
    2992:	79 f0       	breq	.+30     	; 0x29b2 <__fp_splitA+0x2a>
    2994:	87 95       	ror	r24
    2996:	08 95       	ret
    2998:	12 16       	cp	r1, r18
    299a:	13 06       	cpc	r1, r19
    299c:	14 06       	cpc	r1, r20
    299e:	55 1f       	adc	r21, r21
    29a0:	f2 cf       	rjmp	.-28     	; 0x2986 <__fp_split3+0xe>
    29a2:	46 95       	lsr	r20
    29a4:	f1 df       	rcall	.-30     	; 0x2988 <__fp_splitA>
    29a6:	08 c0       	rjmp	.+16     	; 0x29b8 <__fp_splitA+0x30>
    29a8:	16 16       	cp	r1, r22
    29aa:	17 06       	cpc	r1, r23
    29ac:	18 06       	cpc	r1, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	f1 cf       	rjmp	.-30     	; 0x2994 <__fp_splitA+0xc>
    29b2:	86 95       	lsr	r24
    29b4:	71 05       	cpc	r23, r1
    29b6:	61 05       	cpc	r22, r1
    29b8:	08 94       	sec
    29ba:	08 95       	ret

000029bc <__fp_zero>:
    29bc:	e8 94       	clt

000029be <__fp_szero>:
    29be:	bb 27       	eor	r27, r27
    29c0:	66 27       	eor	r22, r22
    29c2:	77 27       	eor	r23, r23
    29c4:	cb 01       	movw	r24, r22
    29c6:	97 f9       	bld	r25, 7
    29c8:	08 95       	ret

000029ca <__gesf2>:
    29ca:	8a df       	rcall	.-236    	; 0x28e0 <__fp_cmp>
    29cc:	08 f4       	brcc	.+2      	; 0x29d0 <__gesf2+0x6>
    29ce:	8f ef       	ldi	r24, 0xFF	; 255
    29d0:	08 95       	ret

000029d2 <__mulsf3>:
    29d2:	0b d0       	rcall	.+22     	; 0x29ea <__mulsf3x>
    29d4:	c0 cf       	rjmp	.-128    	; 0x2956 <__fp_round>
    29d6:	b1 df       	rcall	.-158    	; 0x293a <__fp_pscA>
    29d8:	28 f0       	brcs	.+10     	; 0x29e4 <__mulsf3+0x12>
    29da:	b6 df       	rcall	.-148    	; 0x2948 <__fp_pscB>
    29dc:	18 f0       	brcs	.+6      	; 0x29e4 <__mulsf3+0x12>
    29de:	95 23       	and	r25, r21
    29e0:	09 f0       	breq	.+2      	; 0x29e4 <__mulsf3+0x12>
    29e2:	a2 cf       	rjmp	.-188    	; 0x2928 <__fp_inf>
    29e4:	a7 cf       	rjmp	.-178    	; 0x2934 <__fp_nan>
    29e6:	11 24       	eor	r1, r1
    29e8:	ea cf       	rjmp	.-44     	; 0x29be <__fp_szero>

000029ea <__mulsf3x>:
    29ea:	c6 df       	rcall	.-116    	; 0x2978 <__fp_split3>
    29ec:	a0 f3       	brcs	.-24     	; 0x29d6 <__mulsf3+0x4>

000029ee <__mulsf3_pse>:
    29ee:	95 9f       	mul	r25, r21
    29f0:	d1 f3       	breq	.-12     	; 0x29e6 <__mulsf3+0x14>
    29f2:	95 0f       	add	r25, r21
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	55 1f       	adc	r21, r21
    29f8:	62 9f       	mul	r22, r18
    29fa:	f0 01       	movw	r30, r0
    29fc:	72 9f       	mul	r23, r18
    29fe:	bb 27       	eor	r27, r27
    2a00:	f0 0d       	add	r31, r0
    2a02:	b1 1d       	adc	r27, r1
    2a04:	63 9f       	mul	r22, r19
    2a06:	aa 27       	eor	r26, r26
    2a08:	f0 0d       	add	r31, r0
    2a0a:	b1 1d       	adc	r27, r1
    2a0c:	aa 1f       	adc	r26, r26
    2a0e:	64 9f       	mul	r22, r20
    2a10:	66 27       	eor	r22, r22
    2a12:	b0 0d       	add	r27, r0
    2a14:	a1 1d       	adc	r26, r1
    2a16:	66 1f       	adc	r22, r22
    2a18:	82 9f       	mul	r24, r18
    2a1a:	22 27       	eor	r18, r18
    2a1c:	b0 0d       	add	r27, r0
    2a1e:	a1 1d       	adc	r26, r1
    2a20:	62 1f       	adc	r22, r18
    2a22:	73 9f       	mul	r23, r19
    2a24:	b0 0d       	add	r27, r0
    2a26:	a1 1d       	adc	r26, r1
    2a28:	62 1f       	adc	r22, r18
    2a2a:	83 9f       	mul	r24, r19
    2a2c:	a0 0d       	add	r26, r0
    2a2e:	61 1d       	adc	r22, r1
    2a30:	22 1f       	adc	r18, r18
    2a32:	74 9f       	mul	r23, r20
    2a34:	33 27       	eor	r19, r19
    2a36:	a0 0d       	add	r26, r0
    2a38:	61 1d       	adc	r22, r1
    2a3a:	23 1f       	adc	r18, r19
    2a3c:	84 9f       	mul	r24, r20
    2a3e:	60 0d       	add	r22, r0
    2a40:	21 1d       	adc	r18, r1
    2a42:	82 2f       	mov	r24, r18
    2a44:	76 2f       	mov	r23, r22
    2a46:	6a 2f       	mov	r22, r26
    2a48:	11 24       	eor	r1, r1
    2a4a:	9f 57       	subi	r25, 0x7F	; 127
    2a4c:	50 40       	sbci	r21, 0x00	; 0
    2a4e:	8a f0       	brmi	.+34     	; 0x2a72 <__mulsf3_pse+0x84>
    2a50:	e1 f0       	breq	.+56     	; 0x2a8a <__mulsf3_pse+0x9c>
    2a52:	88 23       	and	r24, r24
    2a54:	4a f0       	brmi	.+18     	; 0x2a68 <__mulsf3_pse+0x7a>
    2a56:	ee 0f       	add	r30, r30
    2a58:	ff 1f       	adc	r31, r31
    2a5a:	bb 1f       	adc	r27, r27
    2a5c:	66 1f       	adc	r22, r22
    2a5e:	77 1f       	adc	r23, r23
    2a60:	88 1f       	adc	r24, r24
    2a62:	91 50       	subi	r25, 0x01	; 1
    2a64:	50 40       	sbci	r21, 0x00	; 0
    2a66:	a9 f7       	brne	.-22     	; 0x2a52 <__mulsf3_pse+0x64>
    2a68:	9e 3f       	cpi	r25, 0xFE	; 254
    2a6a:	51 05       	cpc	r21, r1
    2a6c:	70 f0       	brcs	.+28     	; 0x2a8a <__mulsf3_pse+0x9c>
    2a6e:	5c cf       	rjmp	.-328    	; 0x2928 <__fp_inf>
    2a70:	a6 cf       	rjmp	.-180    	; 0x29be <__fp_szero>
    2a72:	5f 3f       	cpi	r21, 0xFF	; 255
    2a74:	ec f3       	brlt	.-6      	; 0x2a70 <__mulsf3_pse+0x82>
    2a76:	98 3e       	cpi	r25, 0xE8	; 232
    2a78:	dc f3       	brlt	.-10     	; 0x2a70 <__mulsf3_pse+0x82>
    2a7a:	86 95       	lsr	r24
    2a7c:	77 95       	ror	r23
    2a7e:	67 95       	ror	r22
    2a80:	b7 95       	ror	r27
    2a82:	f7 95       	ror	r31
    2a84:	e7 95       	ror	r30
    2a86:	9f 5f       	subi	r25, 0xFF	; 255
    2a88:	c1 f7       	brne	.-16     	; 0x2a7a <__mulsf3_pse+0x8c>
    2a8a:	fe 2b       	or	r31, r30
    2a8c:	88 0f       	add	r24, r24
    2a8e:	91 1d       	adc	r25, r1
    2a90:	96 95       	lsr	r25
    2a92:	87 95       	ror	r24
    2a94:	97 f9       	bld	r25, 7
    2a96:	08 95       	ret

00002a98 <__umoddi3>:
    2a98:	68 94       	set
    2a9a:	01 c0       	rjmp	.+2      	; 0x2a9e <__udivdi3_umoddi3>

00002a9c <__udivdi3>:
    2a9c:	e8 94       	clt

00002a9e <__udivdi3_umoddi3>:
    2a9e:	8f 92       	push	r8
    2aa0:	9f 92       	push	r9
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	05 d0       	rcall	.+10     	; 0x2ab2 <__udivmod64>
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	9f 90       	pop	r9
    2aae:	8f 90       	pop	r8
    2ab0:	08 95       	ret

00002ab2 <__udivmod64>:
    2ab2:	88 24       	eor	r8, r8
    2ab4:	99 24       	eor	r9, r9
    2ab6:	f4 01       	movw	r30, r8
    2ab8:	e4 01       	movw	r28, r8
    2aba:	b0 e4       	ldi	r27, 0x40	; 64
    2abc:	9f 93       	push	r25
    2abe:	aa 27       	eor	r26, r26
    2ac0:	9a 15       	cp	r25, r10
    2ac2:	8b 04       	cpc	r8, r11
    2ac4:	9c 04       	cpc	r9, r12
    2ac6:	ed 05       	cpc	r30, r13
    2ac8:	fe 05       	cpc	r31, r14
    2aca:	cf 05       	cpc	r28, r15
    2acc:	d0 07       	cpc	r29, r16
    2ace:	a1 07       	cpc	r26, r17
    2ad0:	98 f4       	brcc	.+38     	; 0x2af8 <__udivmod64+0x46>
    2ad2:	ad 2f       	mov	r26, r29
    2ad4:	dc 2f       	mov	r29, r28
    2ad6:	cf 2f       	mov	r28, r31
    2ad8:	fe 2f       	mov	r31, r30
    2ada:	e9 2d       	mov	r30, r9
    2adc:	98 2c       	mov	r9, r8
    2ade:	89 2e       	mov	r8, r25
    2ae0:	98 2f       	mov	r25, r24
    2ae2:	87 2f       	mov	r24, r23
    2ae4:	76 2f       	mov	r23, r22
    2ae6:	65 2f       	mov	r22, r21
    2ae8:	54 2f       	mov	r21, r20
    2aea:	43 2f       	mov	r20, r19
    2aec:	32 2f       	mov	r19, r18
    2aee:	22 27       	eor	r18, r18
    2af0:	b8 50       	subi	r27, 0x08	; 8
    2af2:	31 f7       	brne	.-52     	; 0x2ac0 <__udivmod64+0xe>
    2af4:	bf 91       	pop	r27
    2af6:	27 c0       	rjmp	.+78     	; 0x2b46 <__udivmod64+0x94>
    2af8:	1b 2e       	mov	r1, r27
    2afa:	bf 91       	pop	r27
    2afc:	bb 27       	eor	r27, r27
    2afe:	22 0f       	add	r18, r18
    2b00:	33 1f       	adc	r19, r19
    2b02:	44 1f       	adc	r20, r20
    2b04:	55 1f       	adc	r21, r21
    2b06:	66 1f       	adc	r22, r22
    2b08:	77 1f       	adc	r23, r23
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	88 1c       	adc	r8, r8
    2b10:	99 1c       	adc	r9, r9
    2b12:	ee 1f       	adc	r30, r30
    2b14:	ff 1f       	adc	r31, r31
    2b16:	cc 1f       	adc	r28, r28
    2b18:	dd 1f       	adc	r29, r29
    2b1a:	aa 1f       	adc	r26, r26
    2b1c:	bb 1f       	adc	r27, r27
    2b1e:	8a 14       	cp	r8, r10
    2b20:	9b 04       	cpc	r9, r11
    2b22:	ec 05       	cpc	r30, r12
    2b24:	fd 05       	cpc	r31, r13
    2b26:	ce 05       	cpc	r28, r14
    2b28:	df 05       	cpc	r29, r15
    2b2a:	a0 07       	cpc	r26, r16
    2b2c:	b1 07       	cpc	r27, r17
    2b2e:	48 f0       	brcs	.+18     	; 0x2b42 <__udivmod64+0x90>
    2b30:	8a 18       	sub	r8, r10
    2b32:	9b 08       	sbc	r9, r11
    2b34:	ec 09       	sbc	r30, r12
    2b36:	fd 09       	sbc	r31, r13
    2b38:	ce 09       	sbc	r28, r14
    2b3a:	df 09       	sbc	r29, r15
    2b3c:	a0 0b       	sbc	r26, r16
    2b3e:	b1 0b       	sbc	r27, r17
    2b40:	21 60       	ori	r18, 0x01	; 1
    2b42:	1a 94       	dec	r1
    2b44:	e1 f6       	brne	.-72     	; 0x2afe <__udivmod64+0x4c>
    2b46:	2e f4       	brtc	.+10     	; 0x2b52 <__udivmod64+0xa0>
    2b48:	94 01       	movw	r18, r8
    2b4a:	af 01       	movw	r20, r30
    2b4c:	be 01       	movw	r22, r28
    2b4e:	cd 01       	movw	r24, r26
    2b50:	00 0c       	add	r0, r0
    2b52:	08 95       	ret

00002b54 <__adddi3_s8>:
    2b54:	00 24       	eor	r0, r0
    2b56:	a7 fd       	sbrc	r26, 7
    2b58:	00 94       	com	r0
    2b5a:	2a 0f       	add	r18, r26
    2b5c:	30 1d       	adc	r19, r0
    2b5e:	40 1d       	adc	r20, r0
    2b60:	50 1d       	adc	r21, r0
    2b62:	60 1d       	adc	r22, r0
    2b64:	70 1d       	adc	r23, r0
    2b66:	80 1d       	adc	r24, r0
    2b68:	90 1d       	adc	r25, r0
    2b6a:	08 95       	ret

00002b6c <strcmp>:
    2b6c:	fb 01       	movw	r30, r22
    2b6e:	dc 01       	movw	r26, r24
    2b70:	8d 91       	ld	r24, X+
    2b72:	01 90       	ld	r0, Z+
    2b74:	80 19       	sub	r24, r0
    2b76:	01 10       	cpse	r0, r1
    2b78:	d9 f3       	breq	.-10     	; 0x2b70 <strcmp+0x4>
    2b7a:	99 0b       	sbc	r25, r25
    2b7c:	08 95       	ret

00002b7e <vsnprintf>:
    2b7e:	0f 93       	push	r16
    2b80:	1f 93       	push	r17
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	2e 97       	sbiw	r28, 0x0e	; 14
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	8c 01       	movw	r16, r24
    2b98:	fa 01       	movw	r30, r20
    2b9a:	86 e0       	ldi	r24, 0x06	; 6
    2b9c:	8c 83       	std	Y+4, r24	; 0x04
    2b9e:	1a 83       	std	Y+2, r17	; 0x02
    2ba0:	09 83       	std	Y+1, r16	; 0x01
    2ba2:	77 ff       	sbrs	r23, 7
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <vsnprintf+0x2c>
    2ba6:	60 e0       	ldi	r22, 0x00	; 0
    2ba8:	70 e8       	ldi	r23, 0x80	; 128
    2baa:	cb 01       	movw	r24, r22
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	9e 83       	std	Y+6, r25	; 0x06
    2bb0:	8d 83       	std	Y+5, r24	; 0x05
    2bb2:	a9 01       	movw	r20, r18
    2bb4:	bf 01       	movw	r22, r30
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	19 d0       	rcall	.+50     	; 0x2bee <vfprintf>
    2bbc:	4d 81       	ldd	r20, Y+5	; 0x05
    2bbe:	5e 81       	ldd	r21, Y+6	; 0x06
    2bc0:	57 fd       	sbrc	r21, 7
    2bc2:	0a c0       	rjmp	.+20     	; 0x2bd8 <vsnprintf+0x5a>
    2bc4:	2f 81       	ldd	r18, Y+7	; 0x07
    2bc6:	38 85       	ldd	r19, Y+8	; 0x08
    2bc8:	42 17       	cp	r20, r18
    2bca:	53 07       	cpc	r21, r19
    2bcc:	0c f4       	brge	.+2      	; 0x2bd0 <vsnprintf+0x52>
    2bce:	9a 01       	movw	r18, r20
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	e2 0f       	add	r30, r18
    2bd4:	f3 1f       	adc	r31, r19
    2bd6:	10 82       	st	Z, r1
    2bd8:	2e 96       	adiw	r28, 0x0e	; 14
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	08 95       	ret

00002bee <vfprintf>:
    2bee:	2f 92       	push	r2
    2bf0:	3f 92       	push	r3
    2bf2:	4f 92       	push	r4
    2bf4:	5f 92       	push	r5
    2bf6:	6f 92       	push	r6
    2bf8:	7f 92       	push	r7
    2bfa:	8f 92       	push	r8
    2bfc:	9f 92       	push	r9
    2bfe:	af 92       	push	r10
    2c00:	bf 92       	push	r11
    2c02:	cf 92       	push	r12
    2c04:	df 92       	push	r13
    2c06:	ef 92       	push	r14
    2c08:	ff 92       	push	r15
    2c0a:	0f 93       	push	r16
    2c0c:	1f 93       	push	r17
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	2b 97       	sbiw	r28, 0x0b	; 11
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	6c 01       	movw	r12, r24
    2c24:	7b 01       	movw	r14, r22
    2c26:	8a 01       	movw	r16, r20
    2c28:	fc 01       	movw	r30, r24
    2c2a:	17 82       	std	Z+7, r1	; 0x07
    2c2c:	16 82       	std	Z+6, r1	; 0x06
    2c2e:	83 81       	ldd	r24, Z+3	; 0x03
    2c30:	81 ff       	sbrs	r24, 1
    2c32:	bf c1       	rjmp	.+894    	; 0x2fb2 <vfprintf+0x3c4>
    2c34:	ce 01       	movw	r24, r28
    2c36:	01 96       	adiw	r24, 0x01	; 1
    2c38:	3c 01       	movw	r6, r24
    2c3a:	f6 01       	movw	r30, r12
    2c3c:	93 81       	ldd	r25, Z+3	; 0x03
    2c3e:	f7 01       	movw	r30, r14
    2c40:	93 fd       	sbrc	r25, 3
    2c42:	85 91       	lpm	r24, Z+
    2c44:	93 ff       	sbrs	r25, 3
    2c46:	81 91       	ld	r24, Z+
    2c48:	7f 01       	movw	r14, r30
    2c4a:	88 23       	and	r24, r24
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <vfprintf+0x62>
    2c4e:	ad c1       	rjmp	.+858    	; 0x2faa <vfprintf+0x3bc>
    2c50:	85 32       	cpi	r24, 0x25	; 37
    2c52:	39 f4       	brne	.+14     	; 0x2c62 <vfprintf+0x74>
    2c54:	93 fd       	sbrc	r25, 3
    2c56:	85 91       	lpm	r24, Z+
    2c58:	93 ff       	sbrs	r25, 3
    2c5a:	81 91       	ld	r24, Z+
    2c5c:	7f 01       	movw	r14, r30
    2c5e:	85 32       	cpi	r24, 0x25	; 37
    2c60:	21 f4       	brne	.+8      	; 0x2c6a <vfprintf+0x7c>
    2c62:	b6 01       	movw	r22, r12
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	d6 d1       	rcall	.+940    	; 0x3014 <fputc>
    2c68:	e8 cf       	rjmp	.-48     	; 0x2c3a <vfprintf+0x4c>
    2c6a:	91 2c       	mov	r9, r1
    2c6c:	21 2c       	mov	r2, r1
    2c6e:	31 2c       	mov	r3, r1
    2c70:	ff e1       	ldi	r31, 0x1F	; 31
    2c72:	f3 15       	cp	r31, r3
    2c74:	d8 f0       	brcs	.+54     	; 0x2cac <vfprintf+0xbe>
    2c76:	8b 32       	cpi	r24, 0x2B	; 43
    2c78:	79 f0       	breq	.+30     	; 0x2c98 <vfprintf+0xaa>
    2c7a:	38 f4       	brcc	.+14     	; 0x2c8a <vfprintf+0x9c>
    2c7c:	80 32       	cpi	r24, 0x20	; 32
    2c7e:	79 f0       	breq	.+30     	; 0x2c9e <vfprintf+0xb0>
    2c80:	83 32       	cpi	r24, 0x23	; 35
    2c82:	a1 f4       	brne	.+40     	; 0x2cac <vfprintf+0xbe>
    2c84:	23 2d       	mov	r18, r3
    2c86:	20 61       	ori	r18, 0x10	; 16
    2c88:	1d c0       	rjmp	.+58     	; 0x2cc4 <vfprintf+0xd6>
    2c8a:	8d 32       	cpi	r24, 0x2D	; 45
    2c8c:	61 f0       	breq	.+24     	; 0x2ca6 <vfprintf+0xb8>
    2c8e:	80 33       	cpi	r24, 0x30	; 48
    2c90:	69 f4       	brne	.+26     	; 0x2cac <vfprintf+0xbe>
    2c92:	23 2d       	mov	r18, r3
    2c94:	21 60       	ori	r18, 0x01	; 1
    2c96:	16 c0       	rjmp	.+44     	; 0x2cc4 <vfprintf+0xd6>
    2c98:	83 2d       	mov	r24, r3
    2c9a:	82 60       	ori	r24, 0x02	; 2
    2c9c:	38 2e       	mov	r3, r24
    2c9e:	e3 2d       	mov	r30, r3
    2ca0:	e4 60       	ori	r30, 0x04	; 4
    2ca2:	3e 2e       	mov	r3, r30
    2ca4:	2a c0       	rjmp	.+84     	; 0x2cfa <vfprintf+0x10c>
    2ca6:	f3 2d       	mov	r31, r3
    2ca8:	f8 60       	ori	r31, 0x08	; 8
    2caa:	1d c0       	rjmp	.+58     	; 0x2ce6 <vfprintf+0xf8>
    2cac:	37 fc       	sbrc	r3, 7
    2cae:	2d c0       	rjmp	.+90     	; 0x2d0a <vfprintf+0x11c>
    2cb0:	20 ed       	ldi	r18, 0xD0	; 208
    2cb2:	28 0f       	add	r18, r24
    2cb4:	2a 30       	cpi	r18, 0x0A	; 10
    2cb6:	40 f0       	brcs	.+16     	; 0x2cc8 <vfprintf+0xda>
    2cb8:	8e 32       	cpi	r24, 0x2E	; 46
    2cba:	b9 f4       	brne	.+46     	; 0x2cea <vfprintf+0xfc>
    2cbc:	36 fc       	sbrc	r3, 6
    2cbe:	75 c1       	rjmp	.+746    	; 0x2faa <vfprintf+0x3bc>
    2cc0:	23 2d       	mov	r18, r3
    2cc2:	20 64       	ori	r18, 0x40	; 64
    2cc4:	32 2e       	mov	r3, r18
    2cc6:	19 c0       	rjmp	.+50     	; 0x2cfa <vfprintf+0x10c>
    2cc8:	36 fe       	sbrs	r3, 6
    2cca:	06 c0       	rjmp	.+12     	; 0x2cd8 <vfprintf+0xea>
    2ccc:	8a e0       	ldi	r24, 0x0A	; 10
    2cce:	98 9e       	mul	r9, r24
    2cd0:	20 0d       	add	r18, r0
    2cd2:	11 24       	eor	r1, r1
    2cd4:	92 2e       	mov	r9, r18
    2cd6:	11 c0       	rjmp	.+34     	; 0x2cfa <vfprintf+0x10c>
    2cd8:	ea e0       	ldi	r30, 0x0A	; 10
    2cda:	2e 9e       	mul	r2, r30
    2cdc:	20 0d       	add	r18, r0
    2cde:	11 24       	eor	r1, r1
    2ce0:	22 2e       	mov	r2, r18
    2ce2:	f3 2d       	mov	r31, r3
    2ce4:	f0 62       	ori	r31, 0x20	; 32
    2ce6:	3f 2e       	mov	r3, r31
    2ce8:	08 c0       	rjmp	.+16     	; 0x2cfa <vfprintf+0x10c>
    2cea:	8c 36       	cpi	r24, 0x6C	; 108
    2cec:	21 f4       	brne	.+8      	; 0x2cf6 <vfprintf+0x108>
    2cee:	83 2d       	mov	r24, r3
    2cf0:	80 68       	ori	r24, 0x80	; 128
    2cf2:	38 2e       	mov	r3, r24
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <vfprintf+0x10c>
    2cf6:	88 36       	cpi	r24, 0x68	; 104
    2cf8:	41 f4       	brne	.+16     	; 0x2d0a <vfprintf+0x11c>
    2cfa:	f7 01       	movw	r30, r14
    2cfc:	93 fd       	sbrc	r25, 3
    2cfe:	85 91       	lpm	r24, Z+
    2d00:	93 ff       	sbrs	r25, 3
    2d02:	81 91       	ld	r24, Z+
    2d04:	7f 01       	movw	r14, r30
    2d06:	81 11       	cpse	r24, r1
    2d08:	b3 cf       	rjmp	.-154    	; 0x2c70 <vfprintf+0x82>
    2d0a:	98 2f       	mov	r25, r24
    2d0c:	9f 7d       	andi	r25, 0xDF	; 223
    2d0e:	95 54       	subi	r25, 0x45	; 69
    2d10:	93 30       	cpi	r25, 0x03	; 3
    2d12:	28 f4       	brcc	.+10     	; 0x2d1e <vfprintf+0x130>
    2d14:	0c 5f       	subi	r16, 0xFC	; 252
    2d16:	1f 4f       	sbci	r17, 0xFF	; 255
    2d18:	9f e3       	ldi	r25, 0x3F	; 63
    2d1a:	99 83       	std	Y+1, r25	; 0x01
    2d1c:	0d c0       	rjmp	.+26     	; 0x2d38 <vfprintf+0x14a>
    2d1e:	83 36       	cpi	r24, 0x63	; 99
    2d20:	31 f0       	breq	.+12     	; 0x2d2e <vfprintf+0x140>
    2d22:	83 37       	cpi	r24, 0x73	; 115
    2d24:	71 f0       	breq	.+28     	; 0x2d42 <vfprintf+0x154>
    2d26:	83 35       	cpi	r24, 0x53	; 83
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <vfprintf+0x13e>
    2d2a:	55 c0       	rjmp	.+170    	; 0x2dd6 <vfprintf+0x1e8>
    2d2c:	20 c0       	rjmp	.+64     	; 0x2d6e <vfprintf+0x180>
    2d2e:	f8 01       	movw	r30, r16
    2d30:	80 81       	ld	r24, Z
    2d32:	89 83       	std	Y+1, r24	; 0x01
    2d34:	0e 5f       	subi	r16, 0xFE	; 254
    2d36:	1f 4f       	sbci	r17, 0xFF	; 255
    2d38:	88 24       	eor	r8, r8
    2d3a:	83 94       	inc	r8
    2d3c:	91 2c       	mov	r9, r1
    2d3e:	53 01       	movw	r10, r6
    2d40:	12 c0       	rjmp	.+36     	; 0x2d66 <vfprintf+0x178>
    2d42:	28 01       	movw	r4, r16
    2d44:	f2 e0       	ldi	r31, 0x02	; 2
    2d46:	4f 0e       	add	r4, r31
    2d48:	51 1c       	adc	r5, r1
    2d4a:	f8 01       	movw	r30, r16
    2d4c:	a0 80       	ld	r10, Z
    2d4e:	b1 80       	ldd	r11, Z+1	; 0x01
    2d50:	36 fe       	sbrs	r3, 6
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <vfprintf+0x16c>
    2d54:	69 2d       	mov	r22, r9
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	02 c0       	rjmp	.+4      	; 0x2d5e <vfprintf+0x170>
    2d5a:	6f ef       	ldi	r22, 0xFF	; 255
    2d5c:	7f ef       	ldi	r23, 0xFF	; 255
    2d5e:	c5 01       	movw	r24, r10
    2d60:	4e d1       	rcall	.+668    	; 0x2ffe <strnlen>
    2d62:	4c 01       	movw	r8, r24
    2d64:	82 01       	movw	r16, r4
    2d66:	f3 2d       	mov	r31, r3
    2d68:	ff 77       	andi	r31, 0x7F	; 127
    2d6a:	3f 2e       	mov	r3, r31
    2d6c:	15 c0       	rjmp	.+42     	; 0x2d98 <vfprintf+0x1aa>
    2d6e:	28 01       	movw	r4, r16
    2d70:	22 e0       	ldi	r18, 0x02	; 2
    2d72:	42 0e       	add	r4, r18
    2d74:	51 1c       	adc	r5, r1
    2d76:	f8 01       	movw	r30, r16
    2d78:	a0 80       	ld	r10, Z
    2d7a:	b1 80       	ldd	r11, Z+1	; 0x01
    2d7c:	36 fe       	sbrs	r3, 6
    2d7e:	03 c0       	rjmp	.+6      	; 0x2d86 <vfprintf+0x198>
    2d80:	69 2d       	mov	r22, r9
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <vfprintf+0x19c>
    2d86:	6f ef       	ldi	r22, 0xFF	; 255
    2d88:	7f ef       	ldi	r23, 0xFF	; 255
    2d8a:	c5 01       	movw	r24, r10
    2d8c:	2d d1       	rcall	.+602    	; 0x2fe8 <strnlen_P>
    2d8e:	4c 01       	movw	r8, r24
    2d90:	f3 2d       	mov	r31, r3
    2d92:	f0 68       	ori	r31, 0x80	; 128
    2d94:	3f 2e       	mov	r3, r31
    2d96:	82 01       	movw	r16, r4
    2d98:	33 fc       	sbrc	r3, 3
    2d9a:	19 c0       	rjmp	.+50     	; 0x2dce <vfprintf+0x1e0>
    2d9c:	82 2d       	mov	r24, r2
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	88 16       	cp	r8, r24
    2da2:	99 06       	cpc	r9, r25
    2da4:	a0 f4       	brcc	.+40     	; 0x2dce <vfprintf+0x1e0>
    2da6:	b6 01       	movw	r22, r12
    2da8:	80 e2       	ldi	r24, 0x20	; 32
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	33 d1       	rcall	.+614    	; 0x3014 <fputc>
    2dae:	2a 94       	dec	r2
    2db0:	f5 cf       	rjmp	.-22     	; 0x2d9c <vfprintf+0x1ae>
    2db2:	f5 01       	movw	r30, r10
    2db4:	37 fc       	sbrc	r3, 7
    2db6:	85 91       	lpm	r24, Z+
    2db8:	37 fe       	sbrs	r3, 7
    2dba:	81 91       	ld	r24, Z+
    2dbc:	5f 01       	movw	r10, r30
    2dbe:	b6 01       	movw	r22, r12
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	28 d1       	rcall	.+592    	; 0x3014 <fputc>
    2dc4:	21 10       	cpse	r2, r1
    2dc6:	2a 94       	dec	r2
    2dc8:	21 e0       	ldi	r18, 0x01	; 1
    2dca:	82 1a       	sub	r8, r18
    2dcc:	91 08       	sbc	r9, r1
    2dce:	81 14       	cp	r8, r1
    2dd0:	91 04       	cpc	r9, r1
    2dd2:	79 f7       	brne	.-34     	; 0x2db2 <vfprintf+0x1c4>
    2dd4:	e1 c0       	rjmp	.+450    	; 0x2f98 <vfprintf+0x3aa>
    2dd6:	84 36       	cpi	r24, 0x64	; 100
    2dd8:	11 f0       	breq	.+4      	; 0x2dde <vfprintf+0x1f0>
    2dda:	89 36       	cpi	r24, 0x69	; 105
    2ddc:	39 f5       	brne	.+78     	; 0x2e2c <vfprintf+0x23e>
    2dde:	f8 01       	movw	r30, r16
    2de0:	37 fe       	sbrs	r3, 7
    2de2:	07 c0       	rjmp	.+14     	; 0x2df2 <vfprintf+0x204>
    2de4:	60 81       	ld	r22, Z
    2de6:	71 81       	ldd	r23, Z+1	; 0x01
    2de8:	82 81       	ldd	r24, Z+2	; 0x02
    2dea:	93 81       	ldd	r25, Z+3	; 0x03
    2dec:	0c 5f       	subi	r16, 0xFC	; 252
    2dee:	1f 4f       	sbci	r17, 0xFF	; 255
    2df0:	08 c0       	rjmp	.+16     	; 0x2e02 <vfprintf+0x214>
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	07 2e       	mov	r0, r23
    2df8:	00 0c       	add	r0, r0
    2dfa:	88 0b       	sbc	r24, r24
    2dfc:	99 0b       	sbc	r25, r25
    2dfe:	0e 5f       	subi	r16, 0xFE	; 254
    2e00:	1f 4f       	sbci	r17, 0xFF	; 255
    2e02:	f3 2d       	mov	r31, r3
    2e04:	ff 76       	andi	r31, 0x6F	; 111
    2e06:	3f 2e       	mov	r3, r31
    2e08:	97 ff       	sbrs	r25, 7
    2e0a:	09 c0       	rjmp	.+18     	; 0x2e1e <vfprintf+0x230>
    2e0c:	90 95       	com	r25
    2e0e:	80 95       	com	r24
    2e10:	70 95       	com	r23
    2e12:	61 95       	neg	r22
    2e14:	7f 4f       	sbci	r23, 0xFF	; 255
    2e16:	8f 4f       	sbci	r24, 0xFF	; 255
    2e18:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1a:	f0 68       	ori	r31, 0x80	; 128
    2e1c:	3f 2e       	mov	r3, r31
    2e1e:	2a e0       	ldi	r18, 0x0A	; 10
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	a3 01       	movw	r20, r6
    2e24:	33 d1       	rcall	.+614    	; 0x308c <__ultoa_invert>
    2e26:	88 2e       	mov	r8, r24
    2e28:	86 18       	sub	r8, r6
    2e2a:	44 c0       	rjmp	.+136    	; 0x2eb4 <vfprintf+0x2c6>
    2e2c:	85 37       	cpi	r24, 0x75	; 117
    2e2e:	31 f4       	brne	.+12     	; 0x2e3c <vfprintf+0x24e>
    2e30:	23 2d       	mov	r18, r3
    2e32:	2f 7e       	andi	r18, 0xEF	; 239
    2e34:	b2 2e       	mov	r11, r18
    2e36:	2a e0       	ldi	r18, 0x0A	; 10
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	25 c0       	rjmp	.+74     	; 0x2e86 <vfprintf+0x298>
    2e3c:	93 2d       	mov	r25, r3
    2e3e:	99 7f       	andi	r25, 0xF9	; 249
    2e40:	b9 2e       	mov	r11, r25
    2e42:	8f 36       	cpi	r24, 0x6F	; 111
    2e44:	c1 f0       	breq	.+48     	; 0x2e76 <vfprintf+0x288>
    2e46:	18 f4       	brcc	.+6      	; 0x2e4e <vfprintf+0x260>
    2e48:	88 35       	cpi	r24, 0x58	; 88
    2e4a:	79 f0       	breq	.+30     	; 0x2e6a <vfprintf+0x27c>
    2e4c:	ae c0       	rjmp	.+348    	; 0x2faa <vfprintf+0x3bc>
    2e4e:	80 37       	cpi	r24, 0x70	; 112
    2e50:	19 f0       	breq	.+6      	; 0x2e58 <vfprintf+0x26a>
    2e52:	88 37       	cpi	r24, 0x78	; 120
    2e54:	21 f0       	breq	.+8      	; 0x2e5e <vfprintf+0x270>
    2e56:	a9 c0       	rjmp	.+338    	; 0x2faa <vfprintf+0x3bc>
    2e58:	e9 2f       	mov	r30, r25
    2e5a:	e0 61       	ori	r30, 0x10	; 16
    2e5c:	be 2e       	mov	r11, r30
    2e5e:	b4 fe       	sbrs	r11, 4
    2e60:	0d c0       	rjmp	.+26     	; 0x2e7c <vfprintf+0x28e>
    2e62:	fb 2d       	mov	r31, r11
    2e64:	f4 60       	ori	r31, 0x04	; 4
    2e66:	bf 2e       	mov	r11, r31
    2e68:	09 c0       	rjmp	.+18     	; 0x2e7c <vfprintf+0x28e>
    2e6a:	34 fe       	sbrs	r3, 4
    2e6c:	0a c0       	rjmp	.+20     	; 0x2e82 <vfprintf+0x294>
    2e6e:	29 2f       	mov	r18, r25
    2e70:	26 60       	ori	r18, 0x06	; 6
    2e72:	b2 2e       	mov	r11, r18
    2e74:	06 c0       	rjmp	.+12     	; 0x2e82 <vfprintf+0x294>
    2e76:	28 e0       	ldi	r18, 0x08	; 8
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	05 c0       	rjmp	.+10     	; 0x2e86 <vfprintf+0x298>
    2e7c:	20 e1       	ldi	r18, 0x10	; 16
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <vfprintf+0x298>
    2e82:	20 e1       	ldi	r18, 0x10	; 16
    2e84:	32 e0       	ldi	r19, 0x02	; 2
    2e86:	f8 01       	movw	r30, r16
    2e88:	b7 fe       	sbrs	r11, 7
    2e8a:	07 c0       	rjmp	.+14     	; 0x2e9a <vfprintf+0x2ac>
    2e8c:	60 81       	ld	r22, Z
    2e8e:	71 81       	ldd	r23, Z+1	; 0x01
    2e90:	82 81       	ldd	r24, Z+2	; 0x02
    2e92:	93 81       	ldd	r25, Z+3	; 0x03
    2e94:	0c 5f       	subi	r16, 0xFC	; 252
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
    2e98:	06 c0       	rjmp	.+12     	; 0x2ea6 <vfprintf+0x2b8>
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 5f       	subi	r16, 0xFE	; 254
    2ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea6:	a3 01       	movw	r20, r6
    2ea8:	f1 d0       	rcall	.+482    	; 0x308c <__ultoa_invert>
    2eaa:	88 2e       	mov	r8, r24
    2eac:	86 18       	sub	r8, r6
    2eae:	fb 2d       	mov	r31, r11
    2eb0:	ff 77       	andi	r31, 0x7F	; 127
    2eb2:	3f 2e       	mov	r3, r31
    2eb4:	36 fe       	sbrs	r3, 6
    2eb6:	0d c0       	rjmp	.+26     	; 0x2ed2 <vfprintf+0x2e4>
    2eb8:	23 2d       	mov	r18, r3
    2eba:	2e 7f       	andi	r18, 0xFE	; 254
    2ebc:	a2 2e       	mov	r10, r18
    2ebe:	89 14       	cp	r8, r9
    2ec0:	58 f4       	brcc	.+22     	; 0x2ed8 <vfprintf+0x2ea>
    2ec2:	34 fe       	sbrs	r3, 4
    2ec4:	0b c0       	rjmp	.+22     	; 0x2edc <vfprintf+0x2ee>
    2ec6:	32 fc       	sbrc	r3, 2
    2ec8:	09 c0       	rjmp	.+18     	; 0x2edc <vfprintf+0x2ee>
    2eca:	83 2d       	mov	r24, r3
    2ecc:	8e 7e       	andi	r24, 0xEE	; 238
    2ece:	a8 2e       	mov	r10, r24
    2ed0:	05 c0       	rjmp	.+10     	; 0x2edc <vfprintf+0x2ee>
    2ed2:	b8 2c       	mov	r11, r8
    2ed4:	a3 2c       	mov	r10, r3
    2ed6:	03 c0       	rjmp	.+6      	; 0x2ede <vfprintf+0x2f0>
    2ed8:	b8 2c       	mov	r11, r8
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <vfprintf+0x2f0>
    2edc:	b9 2c       	mov	r11, r9
    2ede:	a4 fe       	sbrs	r10, 4
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <vfprintf+0x312>
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e8 0d       	add	r30, r8
    2ee6:	f1 1d       	adc	r31, r1
    2ee8:	80 81       	ld	r24, Z
    2eea:	80 33       	cpi	r24, 0x30	; 48
    2eec:	21 f4       	brne	.+8      	; 0x2ef6 <vfprintf+0x308>
    2eee:	9a 2d       	mov	r25, r10
    2ef0:	99 7e       	andi	r25, 0xE9	; 233
    2ef2:	a9 2e       	mov	r10, r25
    2ef4:	09 c0       	rjmp	.+18     	; 0x2f08 <vfprintf+0x31a>
    2ef6:	a2 fe       	sbrs	r10, 2
    2ef8:	06 c0       	rjmp	.+12     	; 0x2f06 <vfprintf+0x318>
    2efa:	b3 94       	inc	r11
    2efc:	b3 94       	inc	r11
    2efe:	04 c0       	rjmp	.+8      	; 0x2f08 <vfprintf+0x31a>
    2f00:	8a 2d       	mov	r24, r10
    2f02:	86 78       	andi	r24, 0x86	; 134
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <vfprintf+0x31a>
    2f06:	b3 94       	inc	r11
    2f08:	a3 fc       	sbrc	r10, 3
    2f0a:	10 c0       	rjmp	.+32     	; 0x2f2c <vfprintf+0x33e>
    2f0c:	a0 fe       	sbrs	r10, 0
    2f0e:	06 c0       	rjmp	.+12     	; 0x2f1c <vfprintf+0x32e>
    2f10:	b2 14       	cp	r11, r2
    2f12:	80 f4       	brcc	.+32     	; 0x2f34 <vfprintf+0x346>
    2f14:	28 0c       	add	r2, r8
    2f16:	92 2c       	mov	r9, r2
    2f18:	9b 18       	sub	r9, r11
    2f1a:	0d c0       	rjmp	.+26     	; 0x2f36 <vfprintf+0x348>
    2f1c:	b2 14       	cp	r11, r2
    2f1e:	58 f4       	brcc	.+22     	; 0x2f36 <vfprintf+0x348>
    2f20:	b6 01       	movw	r22, r12
    2f22:	80 e2       	ldi	r24, 0x20	; 32
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	76 d0       	rcall	.+236    	; 0x3014 <fputc>
    2f28:	b3 94       	inc	r11
    2f2a:	f8 cf       	rjmp	.-16     	; 0x2f1c <vfprintf+0x32e>
    2f2c:	b2 14       	cp	r11, r2
    2f2e:	18 f4       	brcc	.+6      	; 0x2f36 <vfprintf+0x348>
    2f30:	2b 18       	sub	r2, r11
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <vfprintf+0x34a>
    2f34:	98 2c       	mov	r9, r8
    2f36:	21 2c       	mov	r2, r1
    2f38:	a4 fe       	sbrs	r10, 4
    2f3a:	0f c0       	rjmp	.+30     	; 0x2f5a <vfprintf+0x36c>
    2f3c:	b6 01       	movw	r22, r12
    2f3e:	80 e3       	ldi	r24, 0x30	; 48
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	68 d0       	rcall	.+208    	; 0x3014 <fputc>
    2f44:	a2 fe       	sbrs	r10, 2
    2f46:	16 c0       	rjmp	.+44     	; 0x2f74 <vfprintf+0x386>
    2f48:	a1 fc       	sbrc	r10, 1
    2f4a:	03 c0       	rjmp	.+6      	; 0x2f52 <vfprintf+0x364>
    2f4c:	88 e7       	ldi	r24, 0x78	; 120
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <vfprintf+0x368>
    2f52:	88 e5       	ldi	r24, 0x58	; 88
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	b6 01       	movw	r22, r12
    2f58:	0c c0       	rjmp	.+24     	; 0x2f72 <vfprintf+0x384>
    2f5a:	8a 2d       	mov	r24, r10
    2f5c:	86 78       	andi	r24, 0x86	; 134
    2f5e:	51 f0       	breq	.+20     	; 0x2f74 <vfprintf+0x386>
    2f60:	a1 fe       	sbrs	r10, 1
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <vfprintf+0x37a>
    2f64:	8b e2       	ldi	r24, 0x2B	; 43
    2f66:	01 c0       	rjmp	.+2      	; 0x2f6a <vfprintf+0x37c>
    2f68:	80 e2       	ldi	r24, 0x20	; 32
    2f6a:	a7 fc       	sbrc	r10, 7
    2f6c:	8d e2       	ldi	r24, 0x2D	; 45
    2f6e:	b6 01       	movw	r22, r12
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	50 d0       	rcall	.+160    	; 0x3014 <fputc>
    2f74:	89 14       	cp	r8, r9
    2f76:	30 f4       	brcc	.+12     	; 0x2f84 <vfprintf+0x396>
    2f78:	b6 01       	movw	r22, r12
    2f7a:	80 e3       	ldi	r24, 0x30	; 48
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	4a d0       	rcall	.+148    	; 0x3014 <fputc>
    2f80:	9a 94       	dec	r9
    2f82:	f8 cf       	rjmp	.-16     	; 0x2f74 <vfprintf+0x386>
    2f84:	8a 94       	dec	r8
    2f86:	f3 01       	movw	r30, r6
    2f88:	e8 0d       	add	r30, r8
    2f8a:	f1 1d       	adc	r31, r1
    2f8c:	80 81       	ld	r24, Z
    2f8e:	b6 01       	movw	r22, r12
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	40 d0       	rcall	.+128    	; 0x3014 <fputc>
    2f94:	81 10       	cpse	r8, r1
    2f96:	f6 cf       	rjmp	.-20     	; 0x2f84 <vfprintf+0x396>
    2f98:	22 20       	and	r2, r2
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <vfprintf+0x3b0>
    2f9c:	4e ce       	rjmp	.-868    	; 0x2c3a <vfprintf+0x4c>
    2f9e:	b6 01       	movw	r22, r12
    2fa0:	80 e2       	ldi	r24, 0x20	; 32
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	37 d0       	rcall	.+110    	; 0x3014 <fputc>
    2fa6:	2a 94       	dec	r2
    2fa8:	f7 cf       	rjmp	.-18     	; 0x2f98 <vfprintf+0x3aa>
    2faa:	f6 01       	movw	r30, r12
    2fac:	86 81       	ldd	r24, Z+6	; 0x06
    2fae:	97 81       	ldd	r25, Z+7	; 0x07
    2fb0:	02 c0       	rjmp	.+4      	; 0x2fb6 <vfprintf+0x3c8>
    2fb2:	8f ef       	ldi	r24, 0xFF	; 255
    2fb4:	9f ef       	ldi	r25, 0xFF	; 255
    2fb6:	2b 96       	adiw	r28, 0x0b	; 11
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	df 91       	pop	r29
    2fc4:	cf 91       	pop	r28
    2fc6:	1f 91       	pop	r17
    2fc8:	0f 91       	pop	r16
    2fca:	ff 90       	pop	r15
    2fcc:	ef 90       	pop	r14
    2fce:	df 90       	pop	r13
    2fd0:	cf 90       	pop	r12
    2fd2:	bf 90       	pop	r11
    2fd4:	af 90       	pop	r10
    2fd6:	9f 90       	pop	r9
    2fd8:	8f 90       	pop	r8
    2fda:	7f 90       	pop	r7
    2fdc:	6f 90       	pop	r6
    2fde:	5f 90       	pop	r5
    2fe0:	4f 90       	pop	r4
    2fe2:	3f 90       	pop	r3
    2fe4:	2f 90       	pop	r2
    2fe6:	08 95       	ret

00002fe8 <strnlen_P>:
    2fe8:	fc 01       	movw	r30, r24
    2fea:	05 90       	lpm	r0, Z+
    2fec:	61 50       	subi	r22, 0x01	; 1
    2fee:	70 40       	sbci	r23, 0x00	; 0
    2ff0:	01 10       	cpse	r0, r1
    2ff2:	d8 f7       	brcc	.-10     	; 0x2fea <strnlen_P+0x2>
    2ff4:	80 95       	com	r24
    2ff6:	90 95       	com	r25
    2ff8:	8e 0f       	add	r24, r30
    2ffa:	9f 1f       	adc	r25, r31
    2ffc:	08 95       	ret

00002ffe <strnlen>:
    2ffe:	fc 01       	movw	r30, r24
    3000:	61 50       	subi	r22, 0x01	; 1
    3002:	70 40       	sbci	r23, 0x00	; 0
    3004:	01 90       	ld	r0, Z+
    3006:	01 10       	cpse	r0, r1
    3008:	d8 f7       	brcc	.-10     	; 0x3000 <strnlen+0x2>
    300a:	80 95       	com	r24
    300c:	90 95       	com	r25
    300e:	8e 0f       	add	r24, r30
    3010:	9f 1f       	adc	r25, r31
    3012:	08 95       	ret

00003014 <fputc>:
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	fb 01       	movw	r30, r22
    301e:	23 81       	ldd	r18, Z+3	; 0x03
    3020:	21 fd       	sbrc	r18, 1
    3022:	03 c0       	rjmp	.+6      	; 0x302a <fputc+0x16>
    3024:	8f ef       	ldi	r24, 0xFF	; 255
    3026:	9f ef       	ldi	r25, 0xFF	; 255
    3028:	2c c0       	rjmp	.+88     	; 0x3082 <fputc+0x6e>
    302a:	22 ff       	sbrs	r18, 2
    302c:	16 c0       	rjmp	.+44     	; 0x305a <fputc+0x46>
    302e:	46 81       	ldd	r20, Z+6	; 0x06
    3030:	57 81       	ldd	r21, Z+7	; 0x07
    3032:	24 81       	ldd	r18, Z+4	; 0x04
    3034:	35 81       	ldd	r19, Z+5	; 0x05
    3036:	42 17       	cp	r20, r18
    3038:	53 07       	cpc	r21, r19
    303a:	44 f4       	brge	.+16     	; 0x304c <fputc+0x38>
    303c:	a0 81       	ld	r26, Z
    303e:	b1 81       	ldd	r27, Z+1	; 0x01
    3040:	9d 01       	movw	r18, r26
    3042:	2f 5f       	subi	r18, 0xFF	; 255
    3044:	3f 4f       	sbci	r19, 0xFF	; 255
    3046:	31 83       	std	Z+1, r19	; 0x01
    3048:	20 83       	st	Z, r18
    304a:	8c 93       	st	X, r24
    304c:	26 81       	ldd	r18, Z+6	; 0x06
    304e:	37 81       	ldd	r19, Z+7	; 0x07
    3050:	2f 5f       	subi	r18, 0xFF	; 255
    3052:	3f 4f       	sbci	r19, 0xFF	; 255
    3054:	37 83       	std	Z+7, r19	; 0x07
    3056:	26 83       	std	Z+6, r18	; 0x06
    3058:	14 c0       	rjmp	.+40     	; 0x3082 <fputc+0x6e>
    305a:	8b 01       	movw	r16, r22
    305c:	ec 01       	movw	r28, r24
    305e:	fb 01       	movw	r30, r22
    3060:	00 84       	ldd	r0, Z+8	; 0x08
    3062:	f1 85       	ldd	r31, Z+9	; 0x09
    3064:	e0 2d       	mov	r30, r0
    3066:	19 95       	eicall
    3068:	89 2b       	or	r24, r25
    306a:	e1 f6       	brne	.-72     	; 0x3024 <fputc+0x10>
    306c:	d8 01       	movw	r26, r16
    306e:	16 96       	adiw	r26, 0x06	; 6
    3070:	8d 91       	ld	r24, X+
    3072:	9c 91       	ld	r25, X
    3074:	17 97       	sbiw	r26, 0x07	; 7
    3076:	01 96       	adiw	r24, 0x01	; 1
    3078:	17 96       	adiw	r26, 0x07	; 7
    307a:	9c 93       	st	X, r25
    307c:	8e 93       	st	-X, r24
    307e:	16 97       	sbiw	r26, 0x06	; 6
    3080:	ce 01       	movw	r24, r28
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	08 95       	ret

0000308c <__ultoa_invert>:
    308c:	fa 01       	movw	r30, r20
    308e:	aa 27       	eor	r26, r26
    3090:	28 30       	cpi	r18, 0x08	; 8
    3092:	51 f1       	breq	.+84     	; 0x30e8 <__ultoa_invert+0x5c>
    3094:	20 31       	cpi	r18, 0x10	; 16
    3096:	81 f1       	breq	.+96     	; 0x30f8 <__ultoa_invert+0x6c>
    3098:	e8 94       	clt
    309a:	6f 93       	push	r22
    309c:	6e 7f       	andi	r22, 0xFE	; 254
    309e:	6e 5f       	subi	r22, 0xFE	; 254
    30a0:	7f 4f       	sbci	r23, 0xFF	; 255
    30a2:	8f 4f       	sbci	r24, 0xFF	; 255
    30a4:	9f 4f       	sbci	r25, 0xFF	; 255
    30a6:	af 4f       	sbci	r26, 0xFF	; 255
    30a8:	b1 e0       	ldi	r27, 0x01	; 1
    30aa:	3e d0       	rcall	.+124    	; 0x3128 <__ultoa_invert+0x9c>
    30ac:	b4 e0       	ldi	r27, 0x04	; 4
    30ae:	3c d0       	rcall	.+120    	; 0x3128 <__ultoa_invert+0x9c>
    30b0:	67 0f       	add	r22, r23
    30b2:	78 1f       	adc	r23, r24
    30b4:	89 1f       	adc	r24, r25
    30b6:	9a 1f       	adc	r25, r26
    30b8:	a1 1d       	adc	r26, r1
    30ba:	68 0f       	add	r22, r24
    30bc:	79 1f       	adc	r23, r25
    30be:	8a 1f       	adc	r24, r26
    30c0:	91 1d       	adc	r25, r1
    30c2:	a1 1d       	adc	r26, r1
    30c4:	6a 0f       	add	r22, r26
    30c6:	71 1d       	adc	r23, r1
    30c8:	81 1d       	adc	r24, r1
    30ca:	91 1d       	adc	r25, r1
    30cc:	a1 1d       	adc	r26, r1
    30ce:	20 d0       	rcall	.+64     	; 0x3110 <__ultoa_invert+0x84>
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <__ultoa_invert+0x48>
    30d2:	68 94       	set
    30d4:	3f 91       	pop	r19
    30d6:	2a e0       	ldi	r18, 0x0A	; 10
    30d8:	26 9f       	mul	r18, r22
    30da:	11 24       	eor	r1, r1
    30dc:	30 19       	sub	r19, r0
    30de:	30 5d       	subi	r19, 0xD0	; 208
    30e0:	31 93       	st	Z+, r19
    30e2:	de f6       	brtc	.-74     	; 0x309a <__ultoa_invert+0xe>
    30e4:	cf 01       	movw	r24, r30
    30e6:	08 95       	ret
    30e8:	46 2f       	mov	r20, r22
    30ea:	47 70       	andi	r20, 0x07	; 7
    30ec:	40 5d       	subi	r20, 0xD0	; 208
    30ee:	41 93       	st	Z+, r20
    30f0:	b3 e0       	ldi	r27, 0x03	; 3
    30f2:	0f d0       	rcall	.+30     	; 0x3112 <__ultoa_invert+0x86>
    30f4:	c9 f7       	brne	.-14     	; 0x30e8 <__ultoa_invert+0x5c>
    30f6:	f6 cf       	rjmp	.-20     	; 0x30e4 <__ultoa_invert+0x58>
    30f8:	46 2f       	mov	r20, r22
    30fa:	4f 70       	andi	r20, 0x0F	; 15
    30fc:	40 5d       	subi	r20, 0xD0	; 208
    30fe:	4a 33       	cpi	r20, 0x3A	; 58
    3100:	18 f0       	brcs	.+6      	; 0x3108 <__ultoa_invert+0x7c>
    3102:	49 5d       	subi	r20, 0xD9	; 217
    3104:	31 fd       	sbrc	r19, 1
    3106:	40 52       	subi	r20, 0x20	; 32
    3108:	41 93       	st	Z+, r20
    310a:	02 d0       	rcall	.+4      	; 0x3110 <__ultoa_invert+0x84>
    310c:	a9 f7       	brne	.-22     	; 0x30f8 <__ultoa_invert+0x6c>
    310e:	ea cf       	rjmp	.-44     	; 0x30e4 <__ultoa_invert+0x58>
    3110:	b4 e0       	ldi	r27, 0x04	; 4
    3112:	a6 95       	lsr	r26
    3114:	97 95       	ror	r25
    3116:	87 95       	ror	r24
    3118:	77 95       	ror	r23
    311a:	67 95       	ror	r22
    311c:	ba 95       	dec	r27
    311e:	c9 f7       	brne	.-14     	; 0x3112 <__ultoa_invert+0x86>
    3120:	00 97       	sbiw	r24, 0x00	; 0
    3122:	61 05       	cpc	r22, r1
    3124:	71 05       	cpc	r23, r1
    3126:	08 95       	ret
    3128:	9b 01       	movw	r18, r22
    312a:	ac 01       	movw	r20, r24
    312c:	0a 2e       	mov	r0, r26
    312e:	06 94       	lsr	r0
    3130:	57 95       	ror	r21
    3132:	47 95       	ror	r20
    3134:	37 95       	ror	r19
    3136:	27 95       	ror	r18
    3138:	ba 95       	dec	r27
    313a:	c9 f7       	brne	.-14     	; 0x312e <__ultoa_invert+0xa2>
    313c:	62 0f       	add	r22, r18
    313e:	73 1f       	adc	r23, r19
    3140:	84 1f       	adc	r24, r20
    3142:	95 1f       	adc	r25, r21
    3144:	a0 1d       	adc	r26, r0
    3146:	08 95       	ret

00003148 <_exit>:
    3148:	f8 94       	cli

0000314a <__stop_program>:
    314a:	ff cf       	rjmp	.-2      	; 0x314a <__stop_program>
