
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800200  0000154c  000015e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000154c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  0080029a  0080029a  0000167a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000274a  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001017  00000000  00000000  0000404a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000166a  00000000  00000000  00005061  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  000066cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e23  00000000  00000000  00006d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002155  00000000  00000000  00007b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d1 c6       	rjmp	.+3490   	; 0xe00 <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e4       	ldi	r30, 0x4C	; 76
      fc:	f5 e1       	ldi	r31, 0x15	; 21
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 39       	cpi	r26, 0x9A	; 154
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	aa e9       	ldi	r26, 0x9A	; 154
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 36       	cpi	r26, 0x62	; 98
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	03 d0       	rcall	.+6      	; 0x126 <main>
     120:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <main>:

#define PROGRAMMTAKT_MS (10)
typedef enum Zustand_t {GESPERRT, ENTSPERRT, AUTO_TUERE , MELDUNG, BATTERIE} zustand_t;
//Hauptprogramm
int main(void)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	28 97       	sbiw	r28, 0x08	; 8
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	f8 94       	cli
     134:	de bf       	out	0x3e, r29	; 62
     136:	0f be       	out	0x3f, r0	; 63
     138:	cd bf       	out	0x3d, r28	; 61
    uint8_t blink = 0;
    uint64_t timerBlink_ms = 0;
    
    zustand_t state = GESPERRT;
    //Initialisieren
    initBoard(1);
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	b0 d3       	rcall	.+1888   	; 0x89e <initBoard>
    uint8_t ledAutoStart =0;
    
    uint8_t blink = 0;
    uint64_t timerBlink_ms = 0;
    
    zustand_t state = GESPERRT;
     13e:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t ledZuendung =0;
    uint8_t ledBatterieLeer =0;
    uint8_t ledAutoStart =0;
    
    uint8_t blink = 0;
    uint64_t timerBlink_ms = 0;
     140:	c1 2c       	mov	r12, r1
     142:	d1 2c       	mov	r13, r1
     144:	e1 2c       	mov	r14, r1
     146:	f1 2c       	mov	r15, r1
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	a1 2c       	mov	r10, r1
     14c:	b1 2c       	mov	r11, r1
    uint8_t ledTuereAuf =0;
    uint8_t ledZuendung =0;
    uint8_t ledBatterieLeer =0;
    uint8_t ledAutoStart =0;
    
    uint8_t blink = 0;
     14e:	1e 82       	std	Y+6, r1	; 0x06
    
    uint8_t ledSperren=0;
    uint8_t ledTuereAuf =0;
    uint8_t ledZuendung =0;
    uint8_t ledBatterieLeer =0;
    uint8_t ledAutoStart =0;
     150:	61 2c       	mov	r6, r1

    
    uint8_t ledSperren=0;
    uint8_t ledTuereAuf =0;
    uint8_t ledZuendung =0;
    uint8_t ledBatterieLeer =0;
     152:	41 2c       	mov	r4, r1
    uint8_t posFlankeButtonBatterie=0;

    
    uint8_t ledSperren=0;
    uint8_t ledTuereAuf =0;
    uint8_t ledZuendung =0;
     154:	91 2c       	mov	r9, r1
    uint8_t sensorZuendung=0;
    uint8_t posFlankeButtonBatterie=0;

    
    uint8_t ledSperren=0;
    uint8_t ledTuereAuf =0;
     156:	21 2c       	mov	r2, r1
    uint8_t schalterKofferraum=0;
    uint8_t sensorZuendung=0;
    uint8_t posFlankeButtonBatterie=0;

    
    uint8_t ledSperren=0;
     158:	31 2c       	mov	r3, r1
    uint8_t inTasterAlt=0;
    uint8_t posFlanken=0;
    uint8_t posFlankeButtonAutoStart=0;
    uint8_t posFlankeButtonIgnorieren=0;
    
    uint8_t autogestartet = 0;
     15a:	51 2c       	mov	r5, r1
typedef enum Zustand_t {GESPERRT, ENTSPERRT, AUTO_TUERE , MELDUNG, BATTERIE} zustand_t;
//Hauptprogramm
int main(void)
{
    //Variablen
    uint8_t inTaster=0;
     15c:	20 e0       	ldi	r18, 0x00	; 0
                state = GESPERRT;                      // auf ENTSPERRT  setzen;
            }
            break;

            case MELDUNG:
            lcdLog("MELDUNG");
     15e:	2a 83       	std	Y+2, r18	; 0x02
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        inTasterAlt = inTaster;                                                                                 //Alter Buttonzustand
        inTaster = buttonReadAllPL();                                                                           //Neuer Buttonzustand
     160:	5f 82       	std	Y+7, r5	; 0x07
     162:	49 d1       	rcall	.+658    	; 0x3f6 <buttonReadAllPL>
     164:	88 2e       	mov	r8, r24
        posFlanken = (inTaster ^ inTasterAlt) & inTaster;                                                       //Positive Flanken aus altem und neuem Buttonzustand auslessen
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	80 95       	com	r24
     16a:	88 21       	and	r24, r8
     16c:	88 87       	std	Y+8, r24	; 0x08
        posFlankeButtonAutoStart = posFlanken & IN_MASKE_BUTTON_AUTO_START;                                     //Tater auto start aus positive Flanken auslessen
     16e:	81 70       	andi	r24, 0x01	; 1
        posFlankeButtonIgnorieren = posFlanken & IN_MASKE_BUTTON_IGNORIEREN;                                     //posFlankeButtonIgnorieren aus positive Flanken auslessen
        posFlankeButtonBatterie = posFlanken & IN_MASKE_BUTTON_BATTERIE;
        schalterEntsperren = switchReadAll() & IN_MASKE_SCHALTER_ENTSPERREN;                                          //
     170:	78 2e       	mov	r7, r24
     172:	3f d1       	rcall	.+638    	; 0x3f2 <switchReadAll>
     174:	81 70       	andi	r24, 0x01	; 1
        schalterFahrerTuere = switchReadAll() & IN_MASKE_SCHALTER_FAHRER_TUERE;                                    //
     176:	89 83       	std	Y+1, r24	; 0x01
     178:	3c d1       	rcall	.+632    	; 0x3f2 <switchReadAll>
     17a:	82 70       	andi	r24, 0x02	; 2
        schalterBeifahrerTuere = switchReadAll() & IN_MASKE_SCHALTER_BEIFAHRER_TUERE;                              //
     17c:	8a 83       	std	Y+2, r24	; 0x02
     17e:	39 d1       	rcall	.+626    	; 0x3f2 <switchReadAll>
     180:	84 70       	andi	r24, 0x04	; 4
        schalterKofferraum = switchReadAll() & IN_MASKE_SCHALTER_KOFFERRAUM;
     182:	8b 83       	std	Y+3, r24	; 0x03
     184:	36 d1       	rcall	.+620    	; 0x3f2 <switchReadAll>
     186:	88 70       	andi	r24, 0x08	; 8
     188:	8d 83       	std	Y+5, r24	; 0x05
        sensorZuendung = switchReadAll() & IN_MASKE_SENSOR_ZUENDUNG;
     18a:	33 d1       	rcall	.+614    	; 0x3f2 <switchReadAll>
     18c:	8c 83       	std	Y+4, r24	; 0x04
     18e:	98 85       	ldd	r25, Y+8	; 0x08
        
        //Verarbeitung-------------------------------------------------------------
        if ( posFlankeButtonBatterie)  //Taster Batterie aus positive Flanken  ?
     190:	96 fd       	sbrc	r25, 6
     192:	29 c1       	rjmp	.+594    	; 0x3e6 <main+0x2c0>
     194:	77 20       	and	r7, r7
        {
            state = BATTERIE;   // auf BATTERIE  setzen;
        }
        if (posFlankeButtonAutoStart && !autogestartet)//Taster Auto Start auf positive Flanken
     196:	69 f0       	breq	.+26     	; 0x1b2 <main+0x8c>
     198:	01 c0       	rjmp	.+2      	; 0x19c <main+0x76>
     19a:	14 e0       	ldi	r17, 0x04	; 4
        sensorZuendung = switchReadAll() & IN_MASKE_SENSOR_ZUENDUNG;
        
        //Verarbeitung-------------------------------------------------------------
        if ( posFlankeButtonBatterie)  //Taster Batterie aus positive Flanken  ?
        {
            state = BATTERIE;   // auf BATTERIE  setzen;
     19c:	ef 81       	ldd	r30, Y+7	; 0x07
        }
        if (posFlankeButtonAutoStart && !autogestartet)//Taster Auto Start auf positive Flanken
     19e:	ee 23       	and	r30, r30
     1a0:	19 f0       	breq	.+6      	; 0x1a8 <main+0x82>
     1a2:	21 2c       	mov	r2, r1
            autogestartet = 1;          //autogestartet auf 1 setzen;
            ledAutoStart = OUT_MASKE_LED_AUTO_START;                //-Auto Start auf 1 setzen;
        }
        else if (posFlankeButtonAutoStart && autogestartet)//Taster Auto Start auf positive Flanken und autogestartet auf 1
        {
            ledAutoStart = OFF;                     //Auto Start auf 0 setzen;
     1a4:	1f 82       	std	Y+7, r1	; 0x07
            autogestartet = 0;               //autogestartet auf 1 setzen;
     1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <main+0x8c>
     1a8:	68 94       	set
            state = BATTERIE;   // auf BATTERIE  setzen;
        }
        if (posFlankeButtonAutoStart && !autogestartet)//Taster Auto Start auf positive Flanken
        {
            autogestartet = 1;          //autogestartet auf 1 setzen;
            ledAutoStart = OUT_MASKE_LED_AUTO_START;                //-Auto Start auf 1 setzen;
     1aa:	22 24       	eor	r2, r2
     1ac:	27 f8       	bld	r2, 7
     1ae:	21 e0       	ldi	r18, 0x01	; 1
        {
            state = BATTERIE;   // auf BATTERIE  setzen;
        }
        if (posFlankeButtonAutoStart && !autogestartet)//Taster Auto Start auf positive Flanken
        {
            autogestartet = 1;          //autogestartet auf 1 setzen;
     1b0:	2f 83       	std	Y+7, r18	; 0x07
     1b2:	11 30       	cpi	r17, 0x01	; 1
        else if (posFlankeButtonAutoStart && autogestartet)//Taster Auto Start auf positive Flanken und autogestartet auf 1
        {
            ledAutoStart = OFF;                     //Auto Start auf 0 setzen;
            autogestartet = 0;               //autogestartet auf 1 setzen;
        }
        switch (state)
     1b4:	09 f1       	breq	.+66     	; 0x1f8 <main+0xd2>
     1b6:	38 f0       	brcs	.+14     	; 0x1c6 <main+0xa0>
     1b8:	13 30       	cpi	r17, 0x03	; 3
     1ba:	09 f4       	brne	.+2      	; 0x1be <main+0x98>
     1bc:	4a c0       	rjmp	.+148    	; 0x252 <main+0x12c>
     1be:	14 30       	cpi	r17, 0x04	; 4
     1c0:	09 f0       	breq	.+2      	; 0x1c4 <main+0x9e>
     1c2:	83 c0       	rjmp	.+262    	; 0x2ca <main+0x1a4>
     1c4:	65 c0       	rjmp	.+202    	; 0x290 <main+0x16a>
        {
            case GESPERRT:
            lcdLog("GESPERRT");
     1c6:	8a e0       	ldi	r24, 0x0A	; 10
     1c8:	92 e0       	ldi	r25, 0x02	; 2
     1ca:	9f 93       	push	r25
     1cc:	8f 93       	push	r24
     1ce:	72 d4       	rcall	.+2276   	; 0xab4 <lcdLog>
            timerBlink_ms = 0; //timerBlinken auf 0 setzen
            ledSperren = OUT_MASKE_LED_SPERREN;             //- Sperren auf 1 setzen;
            ledBatterieLeer = OFF;              //- Batterie _ leer auf 0 setzen;
            blink = 0;                              //blink auf 0 setzen;
            ledZuendung = 0;                               //Led Zündung auf 0 setzen
            rgbWrite(0,0,0);                                // ausschalten;
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	3a d1       	rcall	.+628    	; 0x452 <rgbWrite>
     1de:	11 e0       	ldi	r17, 0x01	; 1
            if (sensorZuendung)       //Senor Zündung?
            {
                ledZuendung = OUT_MASKE_LED_ZUENDUNG;         // Zündung auf 1 setzen;
                if (posFlankeButtonAutoStart)                          //Sensor Zündung und Taster Auto Start aus positive Flanken?
                {
                    state = GESPERRT;                     // auf GESPERRT  setzen;
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	29 81       	ldd	r18, Y+1	; 0x01
     1e6:	21 11       	cpse	r18, r1
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <main+0xc6>
     1ea:	10 e0       	ldi	r17, 0x00	; 0
     1ec:	41 2c       	mov	r4, r1
            case GESPERRT:
            lcdLog("GESPERRT");
            ledTuereAuf = OFF; //LED-Tür_auf auf 0 setzen
            timerBlink_ms = 0; //timerBlinken auf 0 setzen
            ledSperren = OUT_MASKE_LED_SPERREN;             //- Sperren auf 1 setzen;
            ledBatterieLeer = OFF;              //- Batterie _ leer auf 0 setzen;
     1ee:	51 2c       	mov	r5, r1
        }
        switch (state)
        {
            case GESPERRT:
            lcdLog("GESPERRT");
            ledTuereAuf = OFF; //LED-Tür_auf auf 0 setzen
     1f0:	61 2c       	mov	r6, r1
            timerBlink_ms = 0; //timerBlinken auf 0 setzen
            ledSperren = OUT_MASKE_LED_SPERREN;             //- Sperren auf 1 setzen;
     1f2:	33 24       	eor	r3, r3
     1f4:	33 94       	inc	r3
     1f6:	e9 c0       	rjmp	.+466    	; 0x3ca <main+0x2a4>
            {
                state = ENTSPERRT;                      // auf ENTSPERRT  setzen;
            }
            break;
            case ENTSPERRT:
            lcdLog("ENTSPERRT");
     1f8:	83 e1       	ldi	r24, 0x13	; 19
     1fa:	92 e0       	ldi	r25, 0x02	; 2
     1fc:	9f 93       	push	r25
     1fe:	8f 93       	push	r24
     200:	59 d4       	rcall	.+2226   	; 0xab4 <lcdLog>
            blink = 0;
            rgbWrite(0,0,0);
     202:	40 e0       	ldi	r20, 0x00	; 0
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	21 d1       	rcall	.+578    	; 0x452 <rgbWrite>
     210:	0f 90       	pop	r0
            ledSperren = OFF; //LED- Sperren auf 0 setzen
            ledBatterieLeer = OFF;              //- Batterie _ leer auf 0 setzen;
            if (schalterFahrerTuere || schalterBeifahrerTuere || schalterKofferraum)//Schalter Fahrer Tür oder Schalter Beifahrer Tür oder Schalter Kofferraum ?
     212:	0f 90       	pop	r0
     214:	2a 81       	ldd	r18, Y+2	; 0x02
     216:	21 11       	cpse	r18, r1
     218:	06 c0       	rjmp	.+12     	; 0x226 <main+0x100>
     21a:	8b 81       	ldd	r24, Y+3	; 0x03
     21c:	81 11       	cpse	r24, r1
     21e:	03 c0       	rjmp	.+6      	; 0x226 <main+0x100>
     220:	9d 81       	ldd	r25, Y+5	; 0x05
     222:	99 23       	and	r25, r25
     224:	51 f0       	breq	.+20     	; 0x23a <main+0x114>
     226:	77 20       	and	r7, r7
            {
                ledTuereAuf = OUT_MASKE_LED_TUERE_AUF;              //-Tür_auf auf 1 setzen;
                if (posFlankeButtonAutoStart )    //Taster Auto Start aus positive Flanken
     228:	51 f0       	breq	.+20     	; 0x23e <main+0x118>
     22a:	13 e0       	ldi	r17, 0x03	; 3
                {
                    ledAutoStart = OUT_MASKE_LED_AUTO_START;          //led-Auto Start auf 1 setzen;
                    state = MELDUNG;        // auf MELDUNG setzen;
     22c:	68 94       	set
            if (schalterFahrerTuere || schalterBeifahrerTuere || schalterKofferraum)//Schalter Fahrer Tür oder Schalter Beifahrer Tür oder Schalter Kofferraum ?
            {
                ledTuereAuf = OUT_MASKE_LED_TUERE_AUF;              //-Tür_auf auf 1 setzen;
                if (posFlankeButtonAutoStart )    //Taster Auto Start aus positive Flanken
                {
                    ledAutoStart = OUT_MASKE_LED_AUTO_START;          //led-Auto Start auf 1 setzen;
     22e:	22 24       	eor	r2, r2
     230:	27 f8       	bld	r2, 7
     232:	68 94       	set
            rgbWrite(0,0,0);
            ledSperren = OFF; //LED- Sperren auf 0 setzen
            ledBatterieLeer = OFF;              //- Batterie _ leer auf 0 setzen;
            if (schalterFahrerTuere || schalterBeifahrerTuere || schalterKofferraum)//Schalter Fahrer Tür oder Schalter Beifahrer Tür oder Schalter Kofferraum ?
            {
                ledTuereAuf = OUT_MASKE_LED_TUERE_AUF;              //-Tür_auf auf 1 setzen;
     234:	66 24       	eor	r6, r6
     236:	61 f8       	bld	r6, 1
     238:	05 c0       	rjmp	.+10     	; 0x244 <main+0x11e>
     23a:	61 2c       	mov	r6, r1
                    state = MELDUNG;        // auf MELDUNG setzen;
                }
            }
            else
            {
                ledTuereAuf = OFF; //LED-Tür_auf auf 0 setzen
     23c:	03 c0       	rjmp	.+6      	; 0x244 <main+0x11e>
     23e:	68 94       	set
            rgbWrite(0,0,0);
            ledSperren = OFF; //LED- Sperren auf 0 setzen
            ledBatterieLeer = OFF;              //- Batterie _ leer auf 0 setzen;
            if (schalterFahrerTuere || schalterBeifahrerTuere || schalterKofferraum)//Schalter Fahrer Tür oder Schalter Beifahrer Tür oder Schalter Kofferraum ?
            {
                ledTuereAuf = OUT_MASKE_LED_TUERE_AUF;              //-Tür_auf auf 1 setzen;
     240:	66 24       	eor	r6, r6
     242:	61 f8       	bld	r6, 1
     244:	e9 81       	ldd	r30, Y+1	; 0x01
            else
            {
                ledTuereAuf = OFF; //LED-Tür_auf auf 0 setzen
            }

            if (!schalterEntsperren)   //Schalter Entsperren ?
     246:	e1 11       	cpse	r30, r1
     248:	ae c0       	rjmp	.+348    	; 0x3a6 <main+0x280>
            {
                state = GESPERRT;                      // auf ENTSPERRT  setzen;
     24a:	10 e0       	ldi	r17, 0x00	; 0
            case ENTSPERRT:
            lcdLog("ENTSPERRT");
            blink = 0;
            rgbWrite(0,0,0);
            ledSperren = OFF; //LED- Sperren auf 0 setzen
            ledBatterieLeer = OFF;              //- Batterie _ leer auf 0 setzen;
     24c:	41 2c       	mov	r4, r1
            break;
            case ENTSPERRT:
            lcdLog("ENTSPERRT");
            blink = 0;
            rgbWrite(0,0,0);
            ledSperren = OFF; //LED- Sperren auf 0 setzen
     24e:	31 2c       	mov	r3, r1
     250:	bc c0       	rjmp	.+376    	; 0x3ca <main+0x2a4>
                state = GESPERRT;                      // auf ENTSPERRT  setzen;
            }
            break;

            case MELDUNG:
            lcdLog("MELDUNG");
     252:	8d e1       	ldi	r24, 0x1D	; 29
     254:	92 e0       	ldi	r25, 0x02	; 2
     256:	9f 93       	push	r25
     258:	8f 93       	push	r24
     25a:	2c d4       	rcall	.+2136   	; 0xab4 <lcdLog>
     25c:	0f 90       	pop	r0
            blink = 1;                  //blink auf 1 setzen;
            ledAutoStart = 0;               //-Auto Start auf 0 setzen;
            if (posFlankeButtonIgnorieren)     //Taster Ignorieren aus positive Flanken
     25e:	0f 90       	pop	r0
     260:	28 85       	ldd	r18, Y+8	; 0x08
     262:	21 ff       	sbrs	r18, 1
     264:	05 c0       	rjmp	.+10     	; 0x270 <main+0x14a>
     266:	10 e0       	ldi	r17, 0x00	; 0
            {
                
                ledAutoStart = OUT_MASKE_LED_AUTO_START;          //-Auto Start auf 1 setzen;
                state = GESPERRT;   //state auf GESPERRT setzen
     268:	68 94       	set
            blink = 1;                  //blink auf 1 setzen;
            ledAutoStart = 0;               //-Auto Start auf 0 setzen;
            if (posFlankeButtonIgnorieren)     //Taster Ignorieren aus positive Flanken
            {
                
                ledAutoStart = OUT_MASKE_LED_AUTO_START;          //-Auto Start auf 1 setzen;
     26a:	22 24       	eor	r2, r2
     26c:	27 f8       	bld	r2, 7
     26e:	01 c0       	rjmp	.+2      	; 0x272 <main+0x14c>
     270:	21 2c       	mov	r2, r1
            break;

            case MELDUNG:
            lcdLog("MELDUNG");
            blink = 1;                  //blink auf 1 setzen;
            ledAutoStart = 0;               //-Auto Start auf 0 setzen;
     272:	8a 81       	ldd	r24, Y+2	; 0x02
            {
                
                ledAutoStart = OUT_MASKE_LED_AUTO_START;          //-Auto Start auf 1 setzen;
                state = GESPERRT;   //state auf GESPERRT setzen
            }
            if (!schalterFahrerTuere && !schalterBeifahrerTuere && !schalterKofferraum)   //Schalter Fahrer Tür und Schalter Beifahrer Tür und Schalter Kofferraum auf 0?
     274:	81 11       	cpse	r24, r1
     276:	94 c0       	rjmp	.+296    	; 0x3a0 <main+0x27a>
     278:	9b 81       	ldd	r25, Y+3	; 0x03
     27a:	91 11       	cpse	r25, r1
     27c:	91 c0       	rjmp	.+290    	; 0x3a0 <main+0x27a>
     27e:	ed 81       	ldd	r30, Y+5	; 0x05
     280:	e1 11       	cpse	r30, r1
     282:	8e c0       	rjmp	.+284    	; 0x3a0 <main+0x27a>
            {
                ledTuereAuf = OFF;                  //-Tür_auf auf 0 setzen;
                ledAutoStart = OUT_MASKE_LED_AUTO_START;          //-Auto Start auf 1 setzen;
                state = ENTSPERRT;                          // auf ENTSPERRT  setzen;
     284:	11 e0       	ldi	r17, 0x01	; 1
                state = GESPERRT;   //state auf GESPERRT setzen
            }
            if (!schalterFahrerTuere && !schalterBeifahrerTuere && !schalterKofferraum)   //Schalter Fahrer Tür und Schalter Beifahrer Tür und Schalter Kofferraum auf 0?
            {
                ledTuereAuf = OFF;                  //-Tür_auf auf 0 setzen;
                ledAutoStart = OUT_MASKE_LED_AUTO_START;          //-Auto Start auf 1 setzen;
     286:	68 94       	set
     288:	22 24       	eor	r2, r2
     28a:	27 f8       	bld	r2, 7
                ledAutoStart = OUT_MASKE_LED_AUTO_START;          //-Auto Start auf 1 setzen;
                state = GESPERRT;   //state auf GESPERRT setzen
            }
            if (!schalterFahrerTuere && !schalterBeifahrerTuere && !schalterKofferraum)   //Schalter Fahrer Tür und Schalter Beifahrer Tür und Schalter Kofferraum auf 0?
            {
                ledTuereAuf = OFF;                  //-Tür_auf auf 0 setzen;
     28c:	61 2c       	mov	r6, r1
                ledAutoStart = OUT_MASKE_LED_AUTO_START;          //-Auto Start auf 1 setzen;
                state = ENTSPERRT;                          // auf ENTSPERRT  setzen;
            }
            break;
            case BATTERIE:
            lcdLog("BATTERIE");
     28e:	88 c0       	rjmp	.+272    	; 0x3a0 <main+0x27a>
     290:	85 e2       	ldi	r24, 0x25	; 37
     292:	92 e0       	ldi	r25, 0x02	; 2
     294:	9f 93       	push	r25
     296:	8f 93       	push	r24
     298:	0d d4       	rcall	.+2074   	; 0xab4 <lcdLog>
            ledBatterieLeer = OUT_MASKE_LED_BATTERIE_LEER;        //- Batterie _ leer auf 1 setzen;
            ledSperren = OFF; //LED- Sperren auf 0 setzen
            blink = 0;                              //blink auf 0 setzen;
            rgbWrite(0,0,0);                                // ausschalten;
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	d5 d0       	rcall	.+426    	; 0x452 <rgbWrite>
     2a8:	0f 90       	pop	r0
            if (sensorZuendung)       //Senor Zündung?
     2aa:	0f 90       	pop	r0
     2ac:	2c 81       	ldd	r18, Y+4	; 0x04
     2ae:	24 ff       	sbrs	r18, 4
     2b0:	7d c0       	rjmp	.+250    	; 0x3ac <main+0x286>
     2b2:	77 20       	and	r7, r7
            {
                ledZuendung = OUT_MASKE_LED_ZUENDUNG;         // Zündung auf 1 setzen;
                if (posFlankeButtonAutoStart)                          //Sensor Zündung und Taster Auto Start aus positive Flanken?
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0x192>
     2b6:	81 c0       	rjmp	.+258    	; 0x3ba <main+0x294>
     2b8:	10 e0       	ldi	r17, 0x00	; 0
                {
                    state = GESPERRT;                     // auf GESPERRT  setzen;
     2ba:	68 94       	set
                state = ENTSPERRT;                          // auf ENTSPERRT  setzen;
            }
            break;
            case BATTERIE:
            lcdLog("BATTERIE");
            ledBatterieLeer = OUT_MASKE_LED_BATTERIE_LEER;        //- Batterie _ leer auf 1 setzen;
     2bc:	44 24       	eor	r4, r4
     2be:	45 f8       	bld	r4, 5
     2c0:	68 94       	set
            ledSperren = OFF; //LED- Sperren auf 0 setzen
            blink = 0;                              //blink auf 0 setzen;
            rgbWrite(0,0,0);                                // ausschalten;
            if (sensorZuendung)       //Senor Zündung?
            {
                ledZuendung = OUT_MASKE_LED_ZUENDUNG;         // Zündung auf 1 setzen;
     2c2:	55 24       	eor	r5, r5
     2c4:	54 f8       	bld	r5, 4
     2c6:	31 2c       	mov	r3, r1
            }
            break;
            case BATTERIE:
            lcdLog("BATTERIE");
            ledBatterieLeer = OUT_MASKE_LED_BATTERIE_LEER;        //- Batterie _ leer auf 1 setzen;
            ledSperren = OFF; //LED- Sperren auf 0 setzen
     2c8:	80 c0       	rjmp	.+256    	; 0x3ca <main+0x2a4>
     2ca:	8e 81       	ldd	r24, Y+6	; 0x06
            ;
        }
        
        
        //Ausgabe------------------------------------------------------------------
        if (blink)
     2cc:	88 23       	and	r24, r24
     2ce:	d9 f1       	breq	.+118    	; 0x346 <main+0x220>
     2d0:	2c 2d       	mov	r18, r12
        {
            if (timerBlink_ms >= ON_TIME)
     2d2:	3d 2d       	mov	r19, r13
     2d4:	4e 2d       	mov	r20, r14
     2d6:	5f 2d       	mov	r21, r15
     2d8:	60 2f       	mov	r22, r16
     2da:	79 2d       	mov	r23, r9
     2dc:	8a 2d       	mov	r24, r10
     2de:	9b 2d       	mov	r25, r11
     2e0:	27 3c       	cpi	r18, 0xC7	; 199
     2e2:	31 05       	cpc	r19, r1
     2e4:	41 05       	cpc	r20, r1
     2e6:	51 05       	cpc	r21, r1
     2e8:	61 05       	cpc	r22, r1
     2ea:	71 05       	cpc	r23, r1
     2ec:	81 05       	cpc	r24, r1
     2ee:	91 05       	cpc	r25, r1
     2f0:	41 f0       	breq	.+16     	; 0x302 <main+0x1dc>
     2f2:	38 f0       	brcs	.+14     	; 0x302 <main+0x1dc>
            {
                rgbWrite(0,0,0);
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	a8 d0       	rcall	.+336    	; 0x452 <rgbWrite>
     302:	2c 2d       	mov	r18, r12
            }
            if (timerBlink_ms >= PERIOD)
     304:	3d 2d       	mov	r19, r13
     306:	4e 2d       	mov	r20, r14
     308:	5f 2d       	mov	r21, r15
     30a:	60 2f       	mov	r22, r16
     30c:	79 2d       	mov	r23, r9
     30e:	8a 2d       	mov	r24, r10
     310:	9b 2d       	mov	r25, r11
     312:	2f 38       	cpi	r18, 0x8F	; 143
     314:	31 40       	sbci	r19, 0x01	; 1
     316:	41 05       	cpc	r20, r1
     318:	51 05       	cpc	r21, r1
     31a:	61 05       	cpc	r22, r1
     31c:	71 05       	cpc	r23, r1
     31e:	81 05       	cpc	r24, r1
     320:	91 05       	cpc	r25, r1
     322:	e9 f0       	breq	.+58     	; 0x35e <main+0x238>
     324:	e0 f0       	brcs	.+56     	; 0x35e <main+0x238>
            {
                rgbWrite(100,0,0);
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	84 e6       	ldi	r24, 0x64	; 100
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	8f d0       	rcall	.+286    	; 0x452 <rgbWrite>
     334:	c1 2c       	mov	r12, r1
                timerBlink_ms = OFF;
     336:	d1 2c       	mov	r13, r1
     338:	e1 2c       	mov	r14, r1
     33a:	f1 2c       	mov	r15, r1
     33c:	00 e0       	ldi	r16, 0x00	; 0
     33e:	91 2c       	mov	r9, r1
     340:	a1 2c       	mov	r10, r1
     342:	b1 2c       	mov	r11, r1
     344:	0c c0       	rjmp	.+24     	; 0x35e <main+0x238>
     346:	0f 2e       	mov	r0, r31
            }
        }
        else
        {
            timerBlink_ms = PERIOD;
     348:	f0 e9       	ldi	r31, 0x90	; 144
     34a:	cf 2e       	mov	r12, r31
     34c:	f0 2d       	mov	r31, r0
     34e:	dd 24       	eor	r13, r13
     350:	d3 94       	inc	r13
     352:	e1 2c       	mov	r14, r1
     354:	f1 2c       	mov	r15, r1
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	91 2c       	mov	r9, r1
     35a:	a1 2c       	mov	r10, r1
     35c:	b1 2c       	mov	r11, r1
        }
        ledWriteAll(ledSperren | ledTuereAuf | ledZuendung | ledBatterieLeer | ledAutoStart);
     35e:	83 2d       	mov	r24, r3
     360:	86 29       	or	r24, r6
     362:	85 29       	or	r24, r5
     364:	84 29       	or	r24, r4
     366:	82 29       	or	r24, r2
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	40 d0       	rcall	.+128    	; 0x3ec <ledWriteAll>
        timerBlink_ms = timerBlink_ms + PROGRAMMTAKT_MS;
     36c:	2c 2d       	mov	r18, r12
     36e:	3d 2d       	mov	r19, r13
     370:	4e 2d       	mov	r20, r14
     372:	5f 2d       	mov	r21, r15
     374:	60 2f       	mov	r22, r16
     376:	79 2d       	mov	r23, r9
     378:	8a 2d       	mov	r24, r10
     37a:	9b 2d       	mov	r25, r11
     37c:	aa e0       	ldi	r26, 0x0A	; 10
     37e:	ea d5       	rcall	.+3028   	; 0xf54 <__adddi3_s8>
     380:	c2 2e       	mov	r12, r18
     382:	d3 2e       	mov	r13, r19
     384:	e4 2e       	mov	r14, r20
     386:	f5 2e       	mov	r15, r21
     388:	06 2f       	mov	r16, r22
     38a:	97 2e       	mov	r9, r23
     38c:	a8 2e       	mov	r10, r24
     38e:	b9 2e       	mov	r11, r25
     390:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     392:	9c e9       	ldi	r25, 0x9C	; 156
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <main+0x26e>
     398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x274>
     39a:	00 00       	nop
     39c:	8a 82       	std	Y+2, r8	; 0x02
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        inTasterAlt = inTaster;                                                                                 //Alter Buttonzustand
        inTaster = buttonReadAllPL();                                                                           //Neuer Buttonzustand
     39e:	e1 ce       	rjmp	.-574    	; 0x162 <main+0x3c>
     3a0:	91 e0       	ldi	r25, 0x01	; 1
            blink = 1;                  //blink auf 1 setzen;
            ledAutoStart = 0;               //-Auto Start auf 0 setzen;
            if (posFlankeButtonIgnorieren)     //Taster Ignorieren aus positive Flanken
            {
                
                ledAutoStart = OUT_MASKE_LED_AUTO_START;          //-Auto Start auf 1 setzen;
     3a2:	9e 83       	std	Y+6, r25	; 0x06
     3a4:	95 cf       	rjmp	.-214    	; 0x2d0 <main+0x1aa>
     3a6:	41 2c       	mov	r4, r1
            case ENTSPERRT:
            lcdLog("ENTSPERRT");
            blink = 0;
            rgbWrite(0,0,0);
            ledSperren = OFF; //LED- Sperren auf 0 setzen
            ledBatterieLeer = OFF;              //- Batterie _ leer auf 0 setzen;
     3a8:	31 2c       	mov	r3, r1
            break;
            case ENTSPERRT:
            lcdLog("ENTSPERRT");
            blink = 0;
            rgbWrite(0,0,0);
            ledSperren = OFF; //LED- Sperren auf 0 setzen
     3aa:	0f c0       	rjmp	.+30     	; 0x3ca <main+0x2a4>
     3ac:	14 e0       	ldi	r17, 0x04	; 4
     3ae:	68 94       	set
                state = ENTSPERRT;                          // auf ENTSPERRT  setzen;
            }
            break;
            case BATTERIE:
            lcdLog("BATTERIE");
            ledBatterieLeer = OUT_MASKE_LED_BATTERIE_LEER;        //- Batterie _ leer auf 1 setzen;
     3b0:	44 24       	eor	r4, r4
     3b2:	45 f8       	bld	r4, 5
     3b4:	51 2c       	mov	r5, r1
                    state = GESPERRT;                     // auf GESPERRT  setzen;
                }
            }
            else
            {
                ledZuendung = OFF;              // Zündung auf 0 setzen;
     3b6:	31 2c       	mov	r3, r1
            }
            break;
            case BATTERIE:
            lcdLog("BATTERIE");
            ledBatterieLeer = OUT_MASKE_LED_BATTERIE_LEER;        //- Batterie _ leer auf 1 setzen;
            ledSperren = OFF; //LED- Sperren auf 0 setzen
     3b8:	08 c0       	rjmp	.+16     	; 0x3ca <main+0x2a4>
     3ba:	14 e0       	ldi	r17, 0x04	; 4
     3bc:	68 94       	set
                state = ENTSPERRT;                          // auf ENTSPERRT  setzen;
            }
            break;
            case BATTERIE:
            lcdLog("BATTERIE");
            ledBatterieLeer = OUT_MASKE_LED_BATTERIE_LEER;        //- Batterie _ leer auf 1 setzen;
     3be:	44 24       	eor	r4, r4
     3c0:	45 f8       	bld	r4, 5
     3c2:	68 94       	set
            ledSperren = OFF; //LED- Sperren auf 0 setzen
            blink = 0;                              //blink auf 0 setzen;
            rgbWrite(0,0,0);                                // ausschalten;
            if (sensorZuendung)       //Senor Zündung?
            {
                ledZuendung = OUT_MASKE_LED_ZUENDUNG;         // Zündung auf 1 setzen;
     3c4:	55 24       	eor	r5, r5
     3c6:	54 f8       	bld	r5, 4
     3c8:	31 2c       	mov	r3, r1
            }
            break;
            case BATTERIE:
            lcdLog("BATTERIE");
            ledBatterieLeer = OUT_MASKE_LED_BATTERIE_LEER;        //- Batterie _ leer auf 1 setzen;
            ledSperren = OFF; //LED- Sperren auf 0 setzen
     3ca:	1e 82       	std	Y+6, r1	; 0x06
                timerBlink_ms = OFF;
            }
        }
        else
        {
            timerBlink_ms = PERIOD;
     3cc:	0f 2e       	mov	r0, r31
     3ce:	f0 e9       	ldi	r31, 0x90	; 144
     3d0:	cf 2e       	mov	r12, r31
     3d2:	f0 2d       	mov	r31, r0
     3d4:	dd 24       	eor	r13, r13
     3d6:	d3 94       	inc	r13
     3d8:	e1 2c       	mov	r14, r1
     3da:	f1 2c       	mov	r15, r1
     3dc:	00 e0       	ldi	r16, 0x00	; 0
     3de:	91 2c       	mov	r9, r1
     3e0:	a1 2c       	mov	r10, r1
     3e2:	b1 2c       	mov	r11, r1
     3e4:	bc cf       	rjmp	.-136    	; 0x35e <main+0x238>
     3e6:	71 10       	cpse	r7, r1
        //Verarbeitung-------------------------------------------------------------
        if ( posFlankeButtonBatterie)  //Taster Batterie aus positive Flanken  ?
        {
            state = BATTERIE;   // auf BATTERIE  setzen;
        }
        if (posFlankeButtonAutoStart && !autogestartet)//Taster Auto Start auf positive Flanken
     3e8:	d8 ce       	rjmp	.-592    	; 0x19a <main+0x74>
     3ea:	52 cf       	rjmp	.-348    	; 0x290 <main+0x16a>

000003ec <ledWriteAll>:
     3ec:	82 b9       	out	0x02, r24	; 2
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
     3ee:	95 b9       	out	0x05, r25	; 5
     3f0:	08 95       	ret

000003f2 <switchReadAll>:
     3f2:	86 b1       	in	r24, 0x06	; 6
     3f4:	08 95       	ret

000003f6 <buttonReadAllPL>:
     3f6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     3fa:	08 95       	ret

000003fc <startSystemTimeMs>:
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	84 bd       	out	0x24, r24	; 36
     400:	8b e0       	ldi	r24, 0x0B	; 11
     402:	85 bd       	out	0x25, r24	; 37
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     40a:	89 ef       	ldi	r24, 0xF9	; 249
     40c:	87 bd       	out	0x27, r24	; 39
     40e:	08 95       	ret

00000410 <initAdc>:
     410:	11 ba       	out	0x11, r1	; 17
     412:	10 ba       	out	0x10, r1	; 16
     414:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     418:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     41c:	80 e4       	ldi	r24, 0x40	; 64
     41e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     422:	8f e0       	ldi	r24, 0x0F	; 15
     424:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
     42e:	ea e7       	ldi	r30, 0x7A	; 122
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	87 ea       	ldi	r24, 0xA7	; 167
     434:	80 83       	st	Z, r24
     436:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     43a:	80 81       	ld	r24, Z
     43c:	80 64       	ori	r24, 0x40	; 64
     43e:	80 83       	st	Z, r24
     440:	80 81       	ld	r24, Z
     442:	84 ff       	sbrs	r24, 4
     444:	fd cf       	rjmp	.-6      	; 0x440 <initAdc+0x30>
     446:	ea e7       	ldi	r30, 0x7A	; 122
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8f 7e       	andi	r24, 0xEF	; 239
     44e:	80 83       	st	Z, r24
     450:	08 95       	ret

00000452 <rgbWrite>:
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	33 e0       	ldi	r19, 0x03	; 3
     456:	f9 01       	movw	r30, r18
     458:	e8 1b       	sub	r30, r24
     45a:	f9 0b       	sbc	r31, r25
     45c:	c9 01       	movw	r24, r18
     45e:	86 1b       	sub	r24, r22
     460:	97 0b       	sbc	r25, r23
     462:	24 1b       	sub	r18, r20
     464:	35 0b       	sbc	r19, r21
     466:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     46a:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     46e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     472:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
     476:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     47a:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
     47e:	08 95       	ret

00000480 <initRgb>:
     480:	8e ef       	ldi	r24, 0xFE	; 254
     482:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     486:	8b e1       	ldi	r24, 0x1B	; 27
     488:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	d6 cf       	rjmp	.-84     	; 0x452 <rgbWrite>
     4a6:	08 95       	ret

000004a8 <lcdSid>:
     4a8:	88 23       	and	r24, r24
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <lcdSid+0x8>
     4ac:	a0 9a       	sbi	0x14, 0	; 20
     4ae:	08 95       	ret
     4b0:	a0 98       	cbi	0x14, 0	; 20
     4b2:	08 95       	ret

000004b4 <lcdSclk>:
     4b4:	88 23       	and	r24, r24
     4b6:	11 f0       	breq	.+4      	; 0x4bc <lcdSclk+0x8>
     4b8:	a1 9a       	sbi	0x14, 1	; 20
     4ba:	08 95       	ret
     4bc:	a1 98       	cbi	0x14, 1	; 20
     4be:	08 95       	ret

000004c0 <lcdLight>:
     4c0:	81 11       	cpse	r24, r1
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <lcdLight+0xc>
     4c4:	84 b5       	in	r24, 0x24	; 36
     4c6:	8f 7d       	andi	r24, 0xDF	; 223
     4c8:	84 bd       	out	0x24, r24	; 36
     4ca:	08 95       	ret
     4cc:	94 b5       	in	r25, 0x24	; 36
     4ce:	90 62       	ori	r25, 0x20	; 32
     4d0:	94 bd       	out	0x24, r25	; 36
     4d2:	88 bd       	out	0x28, r24	; 40
     4d4:	08 95       	ret

000004d6 <writeLcdF>:
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	7c 01       	movw	r14, r24
     4e4:	eb 01       	movw	r28, r22
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	df df       	rcall	.-66     	; 0x4a8 <lcdSid>
     4ea:	05 e0       	ldi	r16, 0x05	; 5
     4ec:	10 e0       	ldi	r17, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	e1 df       	rcall	.-62     	; 0x4b4 <lcdSclk>
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	df df       	rcall	.-66     	; 0x4b4 <lcdSclk>
     4f6:	01 50       	subi	r16, 0x01	; 1
     4f8:	11 09       	sbc	r17, r1
     4fa:	c9 f7       	brne	.-14     	; 0x4ee <writeLcdF+0x18>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	d4 df       	rcall	.-88     	; 0x4a8 <lcdSid>
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	d8 df       	rcall	.-80     	; 0x4b4 <lcdSclk>
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	d6 df       	rcall	.-84     	; 0x4b4 <lcdSclk>
     508:	83 e4       	ldi	r24, 0x43	; 67
     50a:	e8 16       	cp	r14, r24
     50c:	f1 04       	cpc	r15, r1
     50e:	19 f4       	brne	.+6      	; 0x516 <writeLcdF+0x40>
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	ca df       	rcall	.-108    	; 0x4a8 <lcdSid>
     514:	02 c0       	rjmp	.+4      	; 0x51a <writeLcdF+0x44>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	c7 df       	rcall	.-114    	; 0x4a8 <lcdSid>
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	cb df       	rcall	.-106    	; 0x4b4 <lcdSclk>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	c9 df       	rcall	.-110    	; 0x4b4 <lcdSclk>
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	c1 df       	rcall	.-126    	; 0x4a8 <lcdSid>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	c5 df       	rcall	.-118    	; 0x4b4 <lcdSclk>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	c3 df       	rcall	.-122    	; 0x4b4 <lcdSclk>
     52e:	04 e0       	ldi	r16, 0x04	; 4
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	bf df       	rcall	.-130    	; 0x4b4 <lcdSclk>
     536:	c0 ff       	sbrs	r28, 0
     538:	03 c0       	rjmp	.+6      	; 0x540 <writeLcdF+0x6a>
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	b5 df       	rcall	.-150    	; 0x4a8 <lcdSid>
     53e:	02 c0       	rjmp	.+4      	; 0x544 <writeLcdF+0x6e>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	b2 df       	rcall	.-156    	; 0x4a8 <lcdSid>
     544:	d6 95       	lsr	r29
     546:	c7 95       	ror	r28
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	b4 df       	rcall	.-152    	; 0x4b4 <lcdSclk>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	b2 df       	rcall	.-156    	; 0x4b4 <lcdSclk>
     550:	01 50       	subi	r16, 0x01	; 1
     552:	11 09       	sbc	r17, r1
     554:	71 f7       	brne	.-36     	; 0x532 <writeLcdF+0x5c>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	a7 df       	rcall	.-178    	; 0x4a8 <lcdSid>
     55a:	04 e0       	ldi	r16, 0x04	; 4
     55c:	10 e0       	ldi	r17, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	a9 df       	rcall	.-174    	; 0x4b4 <lcdSclk>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	a7 df       	rcall	.-178    	; 0x4b4 <lcdSclk>
     566:	01 50       	subi	r16, 0x01	; 1
     568:	11 09       	sbc	r17, r1
     56a:	c9 f7       	brne	.-14     	; 0x55e <writeLcdF+0x88>
     56c:	04 e0       	ldi	r16, 0x04	; 4
     56e:	10 e0       	ldi	r17, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	a0 df       	rcall	.-192    	; 0x4b4 <lcdSclk>
     574:	c0 ff       	sbrs	r28, 0
     576:	03 c0       	rjmp	.+6      	; 0x57e <writeLcdF+0xa8>
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	96 df       	rcall	.-212    	; 0x4a8 <lcdSid>
     57c:	02 c0       	rjmp	.+4      	; 0x582 <writeLcdF+0xac>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	93 df       	rcall	.-218    	; 0x4a8 <lcdSid>
     582:	d6 95       	lsr	r29
     584:	c7 95       	ror	r28
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	95 df       	rcall	.-214    	; 0x4b4 <lcdSclk>
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	93 df       	rcall	.-218    	; 0x4b4 <lcdSclk>
     58e:	01 50       	subi	r16, 0x01	; 1
     590:	11 09       	sbc	r17, r1
     592:	71 f7       	brne	.-36     	; 0x570 <writeLcdF+0x9a>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	88 df       	rcall	.-240    	; 0x4a8 <lcdSid>
     598:	c4 e0       	ldi	r28, 0x04	; 4
     59a:	d0 e0       	ldi	r29, 0x00	; 0
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	8a df       	rcall	.-236    	; 0x4b4 <lcdSclk>
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	88 df       	rcall	.-240    	; 0x4b4 <lcdSclk>
     5a4:	21 97       	sbiw	r28, 0x01	; 1
     5a6:	d1 f7       	brne	.-12     	; 0x59c <writeLcdF+0xc6>
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	7e df       	rcall	.-260    	; 0x4a8 <lcdSid>
     5ac:	87 ec       	ldi	r24, 0xC7	; 199
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <writeLcdF+0xda>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <writeLcdF+0xe0>
     5b6:	00 00       	nop
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	08 95       	ret

000005c6 <lcdWriteText>:
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	65 97       	sbiw	r28, 0x15	; 21
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	9e 01       	movw	r18, r28
     5de:	20 5e       	subi	r18, 0xE0	; 224
     5e0:	3f 4f       	sbci	r19, 0xFF	; 255
     5e2:	4e 8d       	ldd	r20, Y+30	; 0x1e
     5e4:	5f 8d       	ldd	r21, Y+31	; 0x1f
     5e6:	65 e1       	ldi	r22, 0x15	; 21
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	c7 d4       	rcall	.+2446   	; 0xf7e <vsnprintf>
     5f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     5f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5f4:	90 e2       	ldi	r25, 0x20	; 32
     5f6:	89 9f       	mul	r24, r25
     5f8:	60 0d       	add	r22, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	60 68       	ori	r22, 0x80	; 128
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	83 e4       	ldi	r24, 0x43	; 67
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	68 df       	rcall	.-304    	; 0x4d6 <writeLcdF>
     606:	69 81       	ldd	r22, Y+1	; 0x01
     608:	66 23       	and	r22, r22
     60a:	79 f0       	breq	.+30     	; 0x62a <lcdWriteText+0x64>
     60c:	10 e0       	ldi	r17, 0x00	; 0
     60e:	1f 5f       	subi	r17, 0xFF	; 255
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	84 e4       	ldi	r24, 0x44	; 68
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	5f df       	rcall	.-322    	; 0x4d6 <writeLcdF>
     618:	e1 e0       	ldi	r30, 0x01	; 1
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	ec 0f       	add	r30, r28
     61e:	fd 1f       	adc	r31, r29
     620:	e1 0f       	add	r30, r17
     622:	f1 1d       	adc	r31, r1
     624:	60 81       	ld	r22, Z
     626:	61 11       	cpse	r22, r1
     628:	f2 cf       	rjmp	.-28     	; 0x60e <lcdWriteText+0x48>
     62a:	65 96       	adiw	r28, 0x15	; 21
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	08 95       	ret

0000063e <lcdWriteZahl>:
     63e:	2f 92       	push	r2
     640:	3f 92       	push	r3
     642:	4f 92       	push	r4
     644:	5f 92       	push	r5
     646:	6f 92       	push	r6
     648:	7f 92       	push	r7
     64a:	8f 92       	push	r8
     64c:	9f 92       	push	r9
     64e:	af 92       	push	r10
     650:	bf 92       	push	r11
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	e3 97       	sbiw	r28, 0x33	; 51
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	8a ab       	std	Y+50, r24	; 0x32
     674:	6b ab       	std	Y+51, r22	; 0x33
     676:	ed a6       	std	Y+45, r14	; 0x2d
     678:	fe a6       	std	Y+46, r15	; 0x2e
     67a:	70 2e       	mov	r7, r16
     67c:	61 2e       	mov	r6, r17
     67e:	52 2e       	mov	r5, r18
     680:	43 2e       	mov	r4, r19
     682:	cf a6       	std	Y+47, r12	; 0x2f
     684:	a8 aa       	std	Y+48, r10	; 0x30
     686:	8c 2d       	mov	r24, r12
     688:	8a 0d       	add	r24, r10
     68a:	89 ab       	std	Y+49, r24	; 0x31
     68c:	85 31       	cpi	r24, 0x15	; 21
     68e:	70 f0       	brcs	.+28     	; 0x6ac <lcdWriteZahl+0x6e>
     690:	8e e2       	ldi	r24, 0x2E	; 46
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	9b a9       	ldd	r25, Y+51	; 0x33
     69a:	9f 93       	push	r25
     69c:	ea a9       	ldd	r30, Y+50	; 0x32
     69e:	ef 93       	push	r30
     6a0:	92 df       	rcall	.-220    	; 0x5c6 <lcdWriteText>
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	a8 c0       	rjmp	.+336    	; 0x7fc <lcdWriteZahl+0x1be>
     6ac:	4e 01       	movw	r8, r28
     6ae:	f5 e1       	ldi	r31, 0x15	; 21
     6b0:	8f 0e       	add	r8, r31
     6b2:	91 1c       	adc	r9, r1
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	9c a7       	std	Y+44, r25	; 0x2c
     6ba:	8b a7       	std	Y+43, r24	; 0x2b
     6bc:	24 2e       	mov	r2, r20
     6be:	35 2e       	mov	r3, r21
     6c0:	0f 2e       	mov	r0, r31
     6c2:	fa e0       	ldi	r31, 0x0A	; 10
     6c4:	af 2e       	mov	r10, r31
     6c6:	f0 2d       	mov	r31, r0
     6c8:	b1 2c       	mov	r11, r1
     6ca:	c1 2c       	mov	r12, r1
     6cc:	d1 2c       	mov	r13, r1
     6ce:	e1 2c       	mov	r14, r1
     6d0:	f1 2c       	mov	r15, r1
     6d2:	00 e0       	ldi	r16, 0x00	; 0
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	2d a5       	ldd	r18, Y+45	; 0x2d
     6d8:	3e a5       	ldd	r19, Y+46	; 0x2e
     6da:	47 2d       	mov	r20, r7
     6dc:	56 2d       	mov	r21, r6
     6de:	65 2d       	mov	r22, r5
     6e0:	74 2d       	mov	r23, r4
     6e2:	82 2d       	mov	r24, r2
     6e4:	93 2d       	mov	r25, r3
     6e6:	d8 d3       	rcall	.+1968   	; 0xe98 <__umoddi3>
     6e8:	20 5d       	subi	r18, 0xD0	; 208
     6ea:	f4 01       	movw	r30, r8
     6ec:	22 93       	st	-Z, r18
     6ee:	4f 01       	movw	r8, r30
     6f0:	2d a5       	ldd	r18, Y+45	; 0x2d
     6f2:	3e a5       	ldd	r19, Y+46	; 0x2e
     6f4:	47 2d       	mov	r20, r7
     6f6:	56 2d       	mov	r21, r6
     6f8:	65 2d       	mov	r22, r5
     6fa:	74 2d       	mov	r23, r4
     6fc:	82 2d       	mov	r24, r2
     6fe:	93 2d       	mov	r25, r3
     700:	cd d3       	rcall	.+1946   	; 0xe9c <__udivdi3>
     702:	2d a7       	std	Y+45, r18	; 0x2d
     704:	3e a7       	std	Y+46, r19	; 0x2e
     706:	74 2e       	mov	r7, r20
     708:	65 2e       	mov	r6, r21
     70a:	56 2e       	mov	r5, r22
     70c:	47 2e       	mov	r4, r23
     70e:	28 2e       	mov	r2, r24
     710:	39 2e       	mov	r3, r25
     712:	8b a5       	ldd	r24, Y+43	; 0x2b
     714:	9c a5       	ldd	r25, Y+44	; 0x2c
     716:	88 15       	cp	r24, r8
     718:	99 05       	cpc	r25, r9
     71a:	91 f6       	brne	.-92     	; 0x6c0 <lcdWriteZahl+0x82>
     71c:	84 e1       	ldi	r24, 0x14	; 20
     71e:	99 a9       	ldd	r25, Y+49	; 0x31
     720:	89 1b       	sub	r24, r25
     722:	ef a5       	ldd	r30, Y+47	; 0x2f
     724:	ee 23       	and	r30, r30
     726:	89 f0       	breq	.+34     	; 0x74a <lcdWriteZahl+0x10c>
     728:	fe 01       	movw	r30, r28
     72a:	75 96       	adiw	r30, 0x15	; 21
     72c:	2f a5       	ldd	r18, Y+47	; 0x2f
     72e:	28 0f       	add	r18, r24
     730:	a1 e0       	ldi	r26, 0x01	; 1
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	ac 0f       	add	r26, r28
     736:	bd 1f       	adc	r27, r29
     738:	a8 0f       	add	r26, r24
     73a:	b1 1d       	adc	r27, r1
     73c:	9c 91       	ld	r25, X
     73e:	91 93       	st	Z+, r25
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	82 13       	cpse	r24, r18
     744:	f5 cf       	rjmp	.-22     	; 0x730 <lcdWriteZahl+0xf2>
     746:	3f a5       	ldd	r19, Y+47	; 0x2f
     748:	02 c0       	rjmp	.+4      	; 0x74e <lcdWriteZahl+0x110>
     74a:	28 2f       	mov	r18, r24
     74c:	3f a5       	ldd	r19, Y+47	; 0x2f
     74e:	f8 a9       	ldd	r31, Y+48	; 0x30
     750:	ff 23       	and	r31, r31
     752:	f1 f0       	breq	.+60     	; 0x790 <lcdWriteZahl+0x152>
     754:	fe 01       	movw	r30, r28
     756:	e3 0f       	add	r30, r19
     758:	f1 1d       	adc	r31, r1
     75a:	8e e2       	ldi	r24, 0x2E	; 46
     75c:	85 8b       	std	Z+21, r24	; 0x15
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	93 0f       	add	r25, r19
     762:	38 a9       	ldd	r19, Y+48	; 0x30
     764:	39 0f       	add	r19, r25
     766:	89 2f       	mov	r24, r25
     768:	29 1b       	sub	r18, r25
     76a:	e5 e1       	ldi	r30, 0x15	; 21
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	ec 0f       	add	r30, r28
     770:	fd 1f       	adc	r31, r29
     772:	e8 0f       	add	r30, r24
     774:	f1 1d       	adc	r31, r1
     776:	92 2f       	mov	r25, r18
     778:	98 0f       	add	r25, r24
     77a:	a1 e0       	ldi	r26, 0x01	; 1
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	ac 0f       	add	r26, r28
     780:	bd 1f       	adc	r27, r29
     782:	a9 0f       	add	r26, r25
     784:	b1 1d       	adc	r27, r1
     786:	9c 91       	ld	r25, X
     788:	90 83       	st	Z, r25
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	38 13       	cpse	r19, r24
     78e:	ed cf       	rjmp	.-38     	; 0x76a <lcdWriteZahl+0x12c>
     790:	fe 01       	movw	r30, r28
     792:	e3 0f       	add	r30, r19
     794:	f1 1d       	adc	r31, r1
     796:	15 8a       	std	Z+21, r1	; 0x15
     798:	8d 89       	ldd	r24, Y+21	; 0x15
     79a:	80 33       	cpi	r24, 0x30	; 48
     79c:	11 f5       	brne	.+68     	; 0x7e2 <lcdWriteZahl+0x1a4>
     79e:	8f a5       	ldd	r24, Y+47	; 0x2f
     7a0:	48 2f       	mov	r20, r24
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	41 50       	subi	r20, 0x01	; 1
     7a6:	51 09       	sbc	r21, r1
     7a8:	14 16       	cp	r1, r20
     7aa:	15 06       	cpc	r1, r21
     7ac:	d4 f4       	brge	.+52     	; 0x7e2 <lcdWriteZahl+0x1a4>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	60 e2       	ldi	r22, 0x20	; 32
     7b6:	2f 5f       	subi	r18, 0xFF	; 255
     7b8:	e5 e1       	ldi	r30, 0x15	; 21
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	ec 0f       	add	r30, r28
     7be:	fd 1f       	adc	r31, r29
     7c0:	e8 0f       	add	r30, r24
     7c2:	f9 1f       	adc	r31, r25
     7c4:	60 83       	st	Z, r22
     7c6:	82 2f       	mov	r24, r18
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	e5 e1       	ldi	r30, 0x15	; 21
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	ec 0f       	add	r30, r28
     7d0:	fd 1f       	adc	r31, r29
     7d2:	e8 0f       	add	r30, r24
     7d4:	f9 1f       	adc	r31, r25
     7d6:	30 81       	ld	r19, Z
     7d8:	30 33       	cpi	r19, 0x30	; 48
     7da:	19 f4       	brne	.+6      	; 0x7e2 <lcdWriteZahl+0x1a4>
     7dc:	84 17       	cp	r24, r20
     7de:	95 07       	cpc	r25, r21
     7e0:	54 f3       	brlt	.-44     	; 0x7b6 <lcdWriteZahl+0x178>
     7e2:	ce 01       	movw	r24, r28
     7e4:	45 96       	adiw	r24, 0x15	; 21
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	9b a9       	ldd	r25, Y+51	; 0x33
     7ec:	9f 93       	push	r25
     7ee:	ea a9       	ldd	r30, Y+50	; 0x32
     7f0:	ef 93       	push	r30
     7f2:	e9 de       	rcall	.-558    	; 0x5c6 <lcdWriteText>
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	e3 96       	adiw	r28, 0x33	; 51
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	bf 90       	pop	r11
     81a:	af 90       	pop	r10
     81c:	9f 90       	pop	r9
     81e:	8f 90       	pop	r8
     820:	7f 90       	pop	r7
     822:	6f 90       	pop	r6
     824:	5f 90       	pop	r5
     826:	4f 90       	pop	r4
     828:	3f 90       	pop	r3
     82a:	2f 90       	pop	r2
     82c:	08 95       	ret

0000082e <lcdClear>:
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	83 e4       	ldi	r24, 0x43	; 67
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	4f de       	rcall	.-866    	; 0x4d6 <writeLcdF>
     838:	8f e3       	ldi	r24, 0x3F	; 63
     83a:	9f e1       	ldi	r25, 0x1F	; 31
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <lcdClear+0xe>
     840:	00 c0       	rjmp	.+0      	; 0x842 <lcdClear+0x14>
     842:	00 00       	nop
     844:	86 e5       	ldi	r24, 0x56	; 86
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	9f 93       	push	r25
     84a:	8f 93       	push	r24
     84c:	1f 92       	push	r1
     84e:	1f 92       	push	r1
     850:	ba de       	rcall	.-652    	; 0x5c6 <lcdWriteText>
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	08 95       	ret

0000085c <initLcd>:
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	2a de       	rcall	.-940    	; 0x4b4 <lcdSclk>
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	22 de       	rcall	.-956    	; 0x4a8 <lcdSid>
     864:	64 e3       	ldi	r22, 0x34	; 52
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	83 e4       	ldi	r24, 0x43	; 67
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	34 de       	rcall	.-920    	; 0x4d6 <writeLcdF>
     86e:	69 e0       	ldi	r22, 0x09	; 9
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	83 e4       	ldi	r24, 0x43	; 67
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	2f de       	rcall	.-930    	; 0x4d6 <writeLcdF>
     878:	60 e3       	ldi	r22, 0x30	; 48
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	83 e4       	ldi	r24, 0x43	; 67
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	2a de       	rcall	.-940    	; 0x4d6 <writeLcdF>
     882:	6c e0       	ldi	r22, 0x0C	; 12
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	83 e4       	ldi	r24, 0x43	; 67
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	25 de       	rcall	.-950    	; 0x4d6 <writeLcdF>
     88c:	d0 df       	rcall	.-96     	; 0x82e <lcdClear>
     88e:	67 e0       	ldi	r22, 0x07	; 7
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	83 e4       	ldi	r24, 0x43	; 67
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	1f de       	rcall	.-962    	; 0x4d6 <writeLcdF>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	12 ce       	rjmp	.-988    	; 0x4c0 <lcdLight>
     89c:	08 95       	ret

0000089e <initBoard>:
     89e:	4f 92       	push	r4
     8a0:	5f 92       	push	r5
     8a2:	6f 92       	push	r6
     8a4:	7f 92       	push	r7
     8a6:	8f 92       	push	r8
     8a8:	9f 92       	push	r9
     8aa:	af 92       	push	r10
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	c8 2f       	mov	r28, r24
     8c0:	85 b7       	in	r24, 0x35	; 53
     8c2:	85 bf       	out	0x35, r24	; 53
     8c4:	12 b8       	out	0x02, r1	; 2
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	81 b9       	out	0x01, r24	; 1
     8ca:	15 b8       	out	0x05, r1	; 5
     8cc:	84 b9       	out	0x04, r24	; 4
     8ce:	88 b9       	out	0x08, r24	; 8
     8d0:	17 b8       	out	0x07, r1	; 7
     8d2:	8b b9       	out	0x0b, r24	; 11
     8d4:	1a b8       	out	0x0a, r1	; 10
     8d6:	8e b9       	out	0x0e, r24	; 14
     8d8:	1d b8       	out	0x0d, r1	; 13
     8da:	72 98       	cbi	0x0e, 2	; 14
     8dc:	11 ba       	out	0x11, r1	; 17
     8de:	10 ba       	out	0x10, r1	; 16
     8e0:	94 e0       	ldi	r25, 0x04	; 4
     8e2:	94 bb       	out	0x14, r25	; 20
     8e4:	93 b3       	in	r25, 0x13	; 19
     8e6:	93 60       	ori	r25, 0x03	; 3
     8e8:	93 bb       	out	0x13, r25	; 19
     8ea:	9d 9a       	sbi	0x13, 5	; 19
     8ec:	97 ec       	ldi	r25, 0xC7	; 199
     8ee:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     8f2:	98 e3       	ldi	r25, 0x38	; 56
     8f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     8f8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     8fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
     900:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     904:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     908:	8c e3       	ldi	r24, 0x3C	; 60
     90a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     90e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
     912:	78 94       	sei
     914:	73 dd       	rcall	.-1306   	; 0x3fc <startSystemTimeMs>
     916:	a2 df       	rcall	.-188    	; 0x85c <initLcd>
     918:	7b dd       	rcall	.-1290   	; 0x410 <initAdc>
     91a:	b2 dd       	rcall	.-1180   	; 0x480 <initRgb>
     91c:	cc 23       	and	r28, r28
     91e:	09 f4       	brne	.+2      	; 0x922 <initBoard+0x84>
     920:	b8 c0       	rjmp	.+368    	; 0xa92 <initBoard+0x1f4>
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	cd dd       	rcall	.-1126   	; 0x4c0 <lcdLight>
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	6f ef       	ldi	r22, 0xFF	; 255
     92c:	73 e0       	ldi	r23, 0x03	; 3
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	8f dd       	rcall	.-1250   	; 0x452 <rgbWrite>
     934:	83 e4       	ldi	r24, 0x43	; 67
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	9f 93       	push	r25
     93a:	8f 93       	push	r24
     93c:	1f 92       	push	r1
     93e:	1f 92       	push	r1
     940:	42 de       	rcall	.-892    	; 0x5c6 <lcdWriteText>
     942:	88 e5       	ldi	r24, 0x58	; 88
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	1f 92       	push	r1
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	8f 93       	push	r24
     950:	3a de       	rcall	.-908    	; 0x5c6 <lcdWriteText>
     952:	8e e2       	ldi	r24, 0x2E	; 46
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	1f 92       	push	r1
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	8f 93       	push	r24
     960:	32 de       	rcall	.-924    	; 0x5c6 <lcdWriteText>
     962:	8d e6       	ldi	r24, 0x6D	; 109
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	9f 93       	push	r25
     968:	8f 93       	push	r24
     96a:	1f 92       	push	r1
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	8f 93       	push	r24
     970:	2a de       	rcall	.-940    	; 0x5c6 <lcdWriteText>
     972:	8d b7       	in	r24, 0x3d	; 61
     974:	9e b7       	in	r25, 0x3e	; 62
     976:	40 96       	adiw	r24, 0x10	; 16
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	9e bf       	out	0x3e, r25	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	8d bf       	out	0x3d, r24	; 61
     982:	88 24       	eor	r8, r8
     984:	83 94       	inc	r8
     986:	c0 e0       	ldi	r28, 0x00	; 0
     988:	71 2c       	mov	r7, r1
     98a:	99 24       	eor	r9, r9
     98c:	93 94       	inc	r9
     98e:	d0 e0       	ldi	r29, 0x00	; 0
     990:	cc 24       	eor	r12, r12
     992:	c3 94       	inc	r12
     994:	d1 2c       	mov	r13, r1
     996:	e1 2c       	mov	r14, r1
     998:	68 94       	set
     99a:	ff 24       	eor	r15, r15
     99c:	f7 f8       	bld	r15, 7
     99e:	66 24       	eor	r6, r6
     9a0:	63 94       	inc	r6
     9a2:	51 2c       	mov	r5, r1
     9a4:	09 e0       	ldi	r16, 0x09	; 9
     9a6:	11 e0       	ldi	r17, 0x01	; 1
     9a8:	0f 2e       	mov	r0, r31
     9aa:	f2 e8       	ldi	r31, 0x82	; 130
     9ac:	af 2e       	mov	r10, r31
     9ae:	f2 e0       	ldi	r31, 0x02	; 2
     9b0:	bf 2e       	mov	r11, r31
     9b2:	f0 2d       	mov	r31, r0
     9b4:	0f 2e       	mov	r0, r31
     9b6:	f3 e0       	ldi	r31, 0x03	; 3
     9b8:	4f 2e       	mov	r4, r31
     9ba:	f0 2d       	mov	r31, r0
     9bc:	99 20       	and	r9, r9
     9be:	49 f0       	breq	.+18     	; 0x9d2 <initBoard+0x134>
     9c0:	c7 01       	movw	r24, r14
     9c2:	0d 2e       	mov	r0, r29
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <initBoard+0x12c>
     9c6:	96 95       	lsr	r25
     9c8:	87 95       	ror	r24
     9ca:	0a 94       	dec	r0
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <initBoard+0x128>
     9ce:	0e dd       	rcall	.-1508   	; 0x3ec <ledWriteAll>
     9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <initBoard+0x144>
     9d2:	c6 01       	movw	r24, r12
     9d4:	0d 2e       	mov	r0, r29
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <initBoard+0x13e>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	0a 94       	dec	r0
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <initBoard+0x13a>
     9e0:	05 dd       	rcall	.-1526   	; 0x3ec <ledWriteAll>
     9e2:	df 5f       	subi	r29, 0xFF	; 255
     9e4:	d1 31       	cpi	r29, 0x11	; 17
     9e6:	28 f0       	brcs	.+10     	; 0x9f2 <initBoard+0x154>
     9e8:	86 2d       	mov	r24, r6
     9ea:	91 10       	cpse	r9, r1
     9ec:	85 2d       	mov	r24, r5
     9ee:	98 2e       	mov	r9, r24
     9f0:	d0 e0       	ldi	r29, 0x00	; 0
     9f2:	88 20       	and	r8, r8
     9f4:	11 f0       	breq	.+4      	; 0x9fa <initBoard+0x15c>
     9f6:	ce 5f       	subi	r28, 0xFE	; 254
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <initBoard+0x15e>
     9fa:	c2 50       	subi	r28, 0x02	; 2
     9fc:	8c 2f       	mov	r24, r28
     9fe:	60 dd       	rcall	.-1344   	; 0x4c0 <lcdLight>
     a00:	ce 3f       	cpi	r28, 0xFE	; 254
     a02:	21 f0       	breq	.+8      	; 0xa0c <initBoard+0x16e>
     a04:	c8 37       	cpi	r28, 0x78	; 120
     a06:	19 f4       	brne	.+6      	; 0xa0e <initBoard+0x170>
     a08:	86 2c       	mov	r8, r6
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <initBoard+0x170>
     a0c:	85 2c       	mov	r8, r5
     a0e:	71 10       	cpse	r7, r1
     a10:	3b c0       	rjmp	.+118    	; 0xa88 <initBoard+0x1ea>
     a12:	f8 01       	movw	r30, r16
     a14:	80 81       	ld	r24, Z
     a16:	83 7c       	andi	r24, 0xC3	; 195
     a18:	91 f0       	breq	.+36     	; 0xa3e <initBoard+0x1a0>
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	66 e2       	ldi	r22, 0x26	; 38
     a20:	72 e0       	ldi	r23, 0x02	; 2
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	93 e0       	ldi	r25, 0x03	; 3
     a26:	15 dd       	rcall	.-1494   	; 0x452 <rgbWrite>
     a28:	bf 92       	push	r11
     a2a:	af 92       	push	r10
     a2c:	1f 92       	push	r1
     a2e:	4f 92       	push	r4
     a30:	ca dd       	rcall	.-1132   	; 0x5c6 <lcdWriteText>
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	76 2c       	mov	r7, r6
     a3c:	25 c0       	rjmp	.+74     	; 0xa88 <initBoard+0x1ea>
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	9c e7       	ldi	r25, 0x7C	; 124
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <initBoard+0x1a4>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <initBoard+0x1aa>
     a48:	00 00       	nop
     a4a:	b8 cf       	rjmp	.-144    	; 0x9bc <initBoard+0x11e>
     a4c:	f0 de       	rcall	.-544    	; 0x82e <lcdClear>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	37 dd       	rcall	.-1426   	; 0x4c0 <lcdLight>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	ca dc       	rcall	.-1644   	; 0x3ec <ledWriteAll>
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	f6 dc       	rcall	.-1556   	; 0x452 <rgbWrite>
     a66:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <systemTimeMs>
     a6a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <systemTimeMs+0x1>
     a6e:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <systemTimeMs+0x2>
     a72:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <systemTimeMs+0x3>
     a76:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <systemTimeMs+0x4>
     a7a:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <systemTimeMs+0x5>
     a7e:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <systemTimeMs+0x6>
     a82:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <systemTimeMs+0x7>
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <initBoard+0x1f4>
     a88:	f8 01       	movw	r30, r16
     a8a:	80 81       	ld	r24, Z
     a8c:	83 7c       	andi	r24, 0xC3	; 195
     a8e:	b9 f6       	brne	.-82     	; 0xa3e <initBoard+0x1a0>
     a90:	dd cf       	rjmp	.-70     	; 0xa4c <initBoard+0x1ae>
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	bf 90       	pop	r11
     aa4:	af 90       	pop	r10
     aa6:	9f 90       	pop	r9
     aa8:	8f 90       	pop	r8
     aaa:	7f 90       	pop	r7
     aac:	6f 90       	pop	r6
     aae:	5f 90       	pop	r5
     ab0:	4f 90       	pop	r4
     ab2:	08 95       	ret

00000ab4 <lcdLog>:
     ab4:	6f 92       	push	r6
     ab6:	7f 92       	push	r7
     ab8:	8f 92       	push	r8
     aba:	9f 92       	push	r9
     abc:	af 92       	push	r10
     abe:	bf 92       	push	r11
     ac0:	cf 92       	push	r12
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	60 97       	sbiw	r28, 0x10	; 16
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     ae4:	88 23       	and	r24, r24
     ae6:	b1 f1       	breq	.+108    	; 0xb54 <lcdLog+0xa0>
     ae8:	a2 de       	rcall	.-700    	; 0x82e <lcdClear>
     aea:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
     aee:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <nummer.2616+0x1>
     af2:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <nummer.2616>
     af6:	0f 2e       	mov	r0, r31
     af8:	fe ed       	ldi	r31, 0xDE	; 222
     afa:	8f 2e       	mov	r8, r31
     afc:	f2 e0       	ldi	r31, 0x02	; 2
     afe:	9f 2e       	mov	r9, r31
     b00:	f0 2d       	mov	r31, r0
     b02:	0e e9       	ldi	r16, 0x9E	; 158
     b04:	12 e0       	ldi	r17, 0x02	; 2
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	40 e2       	ldi	r20, 0x20	; 32
     b0c:	bd 01       	movw	r22, r26
     b0e:	f4 01       	movw	r30, r8
     b10:	11 92       	st	Z+, r1
     b12:	11 92       	st	Z+, r1
     b14:	4f 01       	movw	r8, r30
     b16:	f8 01       	movw	r30, r16
     b18:	41 93       	st	Z+, r20
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	13 c0       	rjmp	.+38     	; 0xb46 <lcdLog+0x92>
     b20:	62 95       	swap	r22
     b22:	72 95       	swap	r23
     b24:	70 7f       	andi	r23, 0xF0	; 240
     b26:	76 27       	eor	r23, r22
     b28:	60 7f       	andi	r22, 0xF0	; 240
     b2a:	76 27       	eor	r23, r22
     b2c:	62 56       	subi	r22, 0x62	; 98
     b2e:	7d 4f       	sbci	r23, 0xFD	; 253
     b30:	fb 01       	movw	r30, r22
     b32:	e2 0f       	add	r30, r18
     b34:	f3 1f       	adc	r31, r19
     b36:	10 82       	st	Z, r1
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	00 5f       	subi	r16, 0xF0	; 240
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	a4 30       	cpi	r26, 0x04	; 4
     b40:	b1 05       	cpc	r27, r1
     b42:	21 f7       	brne	.-56     	; 0xb0c <lcdLog+0x58>
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <lcdLog+0xa0>
     b46:	9c 01       	movw	r18, r24
     b48:	41 93       	st	Z+, r20
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	80 31       	cpi	r24, 0x10	; 16
     b4e:	91 05       	cpc	r25, r1
     b50:	d1 f7       	brne	.-12     	; 0xb46 <lcdLog+0x92>
     b52:	e6 cf       	rjmp	.-52     	; 0xb20 <lcdLog+0x6c>
     b54:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <nummer.2616>
     b58:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <nummer.2616+0x1>
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <nummer.2616+0x1>
     b62:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <nummer.2616>
     b66:	9e 01       	movw	r18, r28
     b68:	2c 5d       	subi	r18, 0xDC	; 220
     b6a:	3f 4f       	sbci	r19, 0xFF	; 255
     b6c:	4a a1       	ldd	r20, Y+34	; 0x22
     b6e:	5b a1       	ldd	r21, Y+35	; 0x23
     b70:	60 e1       	ldi	r22, 0x10	; 16
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	02 d2       	rcall	.+1028   	; 0xf7e <vsnprintf>
     b7a:	8e 01       	movw	r16, r28
     b7c:	0f 5f       	subi	r16, 0xFF	; 255
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	4e 01       	movw	r8, r28
     b82:	f1 e1       	ldi	r31, 0x11	; 17
     b84:	8f 0e       	add	r8, r31
     b86:	91 1c       	adc	r9, r1
     b88:	f8 01       	movw	r30, r16
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	30 e2       	ldi	r19, 0x20	; 32
     b8e:	21 e0       	ldi	r18, 0x01	; 1
     b90:	df 01       	movw	r26, r30
     b92:	80 81       	ld	r24, Z
     b94:	88 23       	and	r24, r24
     b96:	19 f0       	breq	.+6      	; 0xb9e <lcdLog+0xea>
     b98:	99 23       	and	r25, r25
     b9a:	19 f0       	breq	.+6      	; 0xba2 <lcdLog+0xee>
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <lcdLog+0xec>
     b9e:	92 2f       	mov	r25, r18
     ba0:	3c 93       	st	X, r19
     ba2:	31 96       	adiw	r30, 0x01	; 1
     ba4:	e8 15       	cp	r30, r8
     ba6:	f9 05       	cpc	r31, r9
     ba8:	99 f7       	brne	.-26     	; 0xb90 <lcdLog+0xdc>
     baa:	18 8a       	std	Y+16, r1	; 0x10
     bac:	6e e9       	ldi	r22, 0x9E	; 158
     bae:	72 e0       	ldi	r23, 0x02	; 2
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	db d1       	rcall	.+950    	; 0xf6c <strcmp>
     bb6:	88 23       	and	r24, r24
     bb8:	09 f4       	brne	.+2      	; 0xbbc <lcdLog+0x108>
     bba:	7e c0       	rjmp	.+252    	; 0xcb8 <lcdLog+0x204>
     bbc:	0f 2e       	mov	r0, r31
     bbe:	f4 ee       	ldi	r31, 0xE4	; 228
     bc0:	6f 2e       	mov	r6, r31
     bc2:	f2 e0       	ldi	r31, 0x02	; 2
     bc4:	7f 2e       	mov	r7, r31
     bc6:	f0 2d       	mov	r31, r0
     bc8:	6e ec       	ldi	r22, 0xCE	; 206
     bca:	72 e0       	ldi	r23, 0x02	; 2
     bcc:	4e e9       	ldi	r20, 0x9E	; 158
     bce:	52 e0       	ldi	r21, 0x02	; 2
     bd0:	f3 01       	movw	r30, r6
     bd2:	92 91       	ld	r25, -Z
     bd4:	82 91       	ld	r24, -Z
     bd6:	3f 01       	movw	r6, r30
     bd8:	93 83       	std	Z+3, r25	; 0x03
     bda:	82 83       	std	Z+2, r24	; 0x02
     bdc:	db 01       	movw	r26, r22
     bde:	50 97       	sbiw	r26, 0x10	; 16
     be0:	9b 01       	movw	r18, r22
     be2:	20 5f       	subi	r18, 0xF0	; 240
     be4:	3f 4f       	sbci	r19, 0xFF	; 255
     be6:	fb 01       	movw	r30, r22
     be8:	8d 91       	ld	r24, X+
     bea:	81 93       	st	Z+, r24
     bec:	e2 17       	cp	r30, r18
     bee:	f3 07       	cpc	r31, r19
     bf0:	d9 f7       	brne	.-10     	; 0xbe8 <lcdLog+0x134>
     bf2:	60 51       	subi	r22, 0x10	; 16
     bf4:	71 09       	sbc	r23, r1
     bf6:	64 17       	cp	r22, r20
     bf8:	75 07       	cpc	r23, r21
     bfa:	51 f7       	brne	.-44     	; 0xbd0 <lcdLog+0x11c>
     bfc:	f8 01       	movw	r30, r16
     bfe:	81 91       	ld	r24, Z+
     c00:	8f 01       	movw	r16, r30
     c02:	fa 01       	movw	r30, r20
     c04:	81 93       	st	Z+, r24
     c06:	af 01       	movw	r20, r30
     c08:	08 15       	cp	r16, r8
     c0a:	19 05       	cpc	r17, r9
     c0c:	b9 f7       	brne	.-18     	; 0xbfc <lcdLog+0x148>
     c0e:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <nummer.2616>
     c12:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <nummer.2616+0x1>
     c16:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <lcdPrintNr.2614+0x1>
     c1a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <lcdPrintNr.2614>
     c1e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <lcdLogZeilen>
     c22:	94 e0       	ldi	r25, 0x04	; 4
     c24:	d9 2e       	mov	r13, r25
     c26:	d8 1a       	sub	r13, r24
     c28:	f3 e0       	ldi	r31, 0x03	; 3
     c2a:	fd 15       	cp	r31, r13
     c2c:	08 f4       	brcc	.+2      	; 0xc30 <lcdLog+0x17c>
     c2e:	5b c0       	rjmp	.+182    	; 0xce6 <lcdLog+0x232>
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	b8 2e       	mov	r11, r24
     c34:	bd 18       	sub	r11, r13
     c36:	0f 2e       	mov	r0, r31
     c38:	f5 e0       	ldi	r31, 0x05	; 5
     c3a:	6f 2e       	mov	r6, r31
     c3c:	f0 2d       	mov	r31, r0
     c3e:	0f 2e       	mov	r0, r31
     c40:	f7 e9       	ldi	r31, 0x97	; 151
     c42:	8f 2e       	mov	r8, r31
     c44:	f2 e0       	ldi	r31, 0x02	; 2
     c46:	9f 2e       	mov	r9, r31
     c48:	f0 2d       	mov	r31, r0
     c4a:	68 94       	set
     c4c:	77 24       	eor	r7, r7
     c4e:	72 f8       	bld	r7, 2
     c50:	0b 2d       	mov	r16, r11
     c52:	10 e0       	ldi	r17, 0x00	; 0
     c54:	c8 01       	movw	r24, r16
     c56:	82 95       	swap	r24
     c58:	92 95       	swap	r25
     c5a:	90 7f       	andi	r25, 0xF0	; 240
     c5c:	98 27       	eor	r25, r24
     c5e:	80 7f       	andi	r24, 0xF0	; 240
     c60:	98 27       	eor	r25, r24
     c62:	82 56       	subi	r24, 0x62	; 98
     c64:	9d 4f       	sbci	r25, 0xFD	; 253
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	6f 92       	push	r6
     c6c:	df 92       	push	r13
     c6e:	ab dc       	rcall	.-1706   	; 0x5c6 <lcdWriteText>
     c70:	9f 92       	push	r9
     c72:	8f 92       	push	r8
     c74:	7f 92       	push	r7
     c76:	df 92       	push	r13
     c78:	a6 dc       	rcall	.-1716   	; 0x5c6 <lcdWriteText>
     c7a:	00 0f       	add	r16, r16
     c7c:	11 1f       	adc	r17, r17
     c7e:	f8 01       	movw	r30, r16
     c80:	e2 52       	subi	r30, 0x22	; 34
     c82:	fd 4f       	sbci	r31, 0xFD	; 253
     c84:	00 81       	ld	r16, Z
     c86:	11 81       	ldd	r17, Z+1	; 0x01
     c88:	a1 2c       	mov	r10, r1
     c8a:	c7 2c       	mov	r12, r7
     c8c:	e0 2e       	mov	r14, r16
     c8e:	f1 2e       	mov	r15, r17
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	8d 2d       	mov	r24, r13
     ca0:	ce dc       	rcall	.-1636   	; 0x63e <lcdWriteZahl>
     ca2:	d3 94       	inc	r13
     ca4:	ba 94       	dec	r11
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	94 e0       	ldi	r25, 0x04	; 4
     cb2:	d9 12       	cpse	r13, r25
     cb4:	cd cf       	rjmp	.-102    	; 0xc50 <lcdLog+0x19c>
     cb6:	17 c0       	rjmp	.+46     	; 0xce6 <lcdLog+0x232>
     cb8:	00 91 e6 02 	lds	r16, 0x02E6	; 0x8002e6 <nummer.2616>
     cbc:	10 91 e7 02 	lds	r17, 0x02E7	; 0x8002e7 <nummer.2616+0x1>
     cc0:	10 93 df 02 	sts	0x02DF, r17	; 0x8002df <lcdPrintNr.2614+0x1>
     cc4:	00 93 de 02 	sts	0x02DE, r16	; 0x8002de <lcdPrintNr.2614>
     cc8:	a1 2c       	mov	r10, r1
     cca:	68 94       	set
     ccc:	cc 24       	eor	r12, r12
     cce:	c2 f8       	bld	r12, 2
     cd0:	e0 2e       	mov	r14, r16
     cd2:	f1 2e       	mov	r15, r17
     cd4:	00 e0       	ldi	r16, 0x00	; 0
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	ac dc       	rcall	.-1704   	; 0x63e <lcdWriteZahl>
     ce6:	60 96       	adiw	r28, 0x10	; 16
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	bf 90       	pop	r11
     d04:	af 90       	pop	r10
     d06:	9f 90       	pop	r9
     d08:	8f 90       	pop	r8
     d0a:	7f 90       	pop	r7
     d0c:	6f 90       	pop	r6
     d0e:	08 95       	ret

00000d10 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	28 97       	sbiw	r28, 0x08	; 8
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
     d24:	88 e0       	ldi	r24, 0x08	; 8
     d26:	e2 e0       	ldi	r30, 0x02	; 2
     d28:	f2 e0       	ldi	r31, 0x02	; 2
     d2a:	de 01       	movw	r26, r28
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	01 90       	ld	r0, Z+
     d30:	0d 92       	st	X+, r0
     d32:	8a 95       	dec	r24
     d34:	e1 f7       	brne	.-8      	; 0xd2e <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
     d36:	e5 e0       	ldi	r30, 0x05	; 5
     d38:	f1 e0       	ldi	r31, 0x01	; 1
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7b       	andi	r24, 0xBF	; 191
     d3e:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
     d40:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <Zeilen_Nr.2731>
     d44:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <Zeilen_Nr.2731+0x1>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	8c 0f       	add	r24, r28
     d4e:	9d 1f       	adc	r25, r29
     d50:	e8 0f       	add	r30, r24
     d52:	f9 1f       	adc	r31, r25
     d54:	80 81       	ld	r24, Z
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <__data_end+0x1>
     d5c:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__data_end>
     d60:	a2 e6       	ldi	r26, 0x62	; 98
     d62:	b3 e0       	ldi	r27, 0x03	; 3
     d64:	22 ef       	ldi	r18, 0xF2	; 242
     d66:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
     d68:	e5 e0       	ldi	r30, 0x05	; 5
     d6a:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
     d6c:	5e 91       	ld	r21, -X
     d6e:	4e 91       	ld	r20, -X
     d70:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <__data_end>
     d74:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <__data_end+0x1>
     d78:	84 23       	and	r24, r20
     d7a:	95 23       	and	r25, r21
     d7c:	89 2b       	or	r24, r25
     d7e:	21 f0       	breq	.+8      	; 0xd88 <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
     d80:	80 81       	ld	r24, Z
     d82:	80 62       	ori	r24, 0x20	; 32
     d84:	80 83       	st	Z, r24
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
     d88:	80 81       	ld	r24, Z
     d8a:	8f 7d       	andi	r24, 0xDF	; 223
     d8c:	80 83       	st	Z, r24
        }
        CLOCK_1;
     d8e:	80 81       	ld	r24, Z
     d90:	80 61       	ori	r24, 0x10	; 16
     d92:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
     d94:	80 81       	ld	r24, Z
     d96:	8f 7e       	andi	r24, 0xEF	; 239
     d98:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
     d9a:	a2 17       	cp	r26, r18
     d9c:	b3 07       	cpc	r27, r19
     d9e:	31 f7       	brne	.-52     	; 0xd6c <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
     da0:	e5 e0       	ldi	r30, 0x05	; 5
     da2:	f1 e0       	ldi	r31, 0x01	; 1
     da4:	80 81       	ld	r24, Z
     da6:	87 7f       	andi	r24, 0xF7	; 247
     da8:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
     daa:	80 81       	ld	r24, Z
     dac:	88 7f       	andi	r24, 0xF8	; 248
     dae:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
     db0:	90 81       	ld	r25, Z
     db2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <Zeilen_Nr.2731>
     db6:	89 2b       	or	r24, r25
     db8:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
     dba:	80 81       	ld	r24, Z
     dbc:	80 64       	ori	r24, 0x40	; 64
     dbe:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
     dc0:	80 81       	ld	r24, Z
     dc2:	88 60       	ori	r24, 0x08	; 8
     dc4:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
     dc6:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <Zeilen_Nr.2731>
     dca:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <Zeilen_Nr.2731+0x1>
     dce:	87 30       	cpi	r24, 0x07	; 7
     dd0:	91 05       	cpc	r25, r1
     dd2:	30 f4       	brcc	.+12     	; 0xde0 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <Zeilen_Nr.2731+0x1>
     dda:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <Zeilen_Nr.2731>
     dde:	07 c0       	rjmp	.+14     	; 0xdee <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
     de0:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <Zeilen_Nr.2731+0x1>
     de4:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <Zeilen_Nr.2731>
        writeTextFinished = 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <writeTextFinished>
    }
    
     dee:	28 96       	adiw	r28, 0x08	; 8
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	0b b6       	in	r0, 0x3b	; 59
     e0c:	0f 92       	push	r0
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	4f 93       	push	r20
     e14:	5f 93       	push	r21
     e16:	6f 93       	push	r22
     e18:	7f 93       	push	r23
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	af 93       	push	r26
     e20:	bf 93       	push	r27
     e22:	ef 93       	push	r30
     e24:	ff 93       	push	r31
    systemTimeMs += 1;
     e26:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <systemTimeMs>
     e2a:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <systemTimeMs+0x1>
     e2e:	40 91 eb 02 	lds	r20, 0x02EB	; 0x8002eb <systemTimeMs+0x2>
     e32:	50 91 ec 02 	lds	r21, 0x02EC	; 0x8002ec <systemTimeMs+0x3>
     e36:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <systemTimeMs+0x4>
     e3a:	70 91 ee 02 	lds	r23, 0x02EE	; 0x8002ee <systemTimeMs+0x5>
     e3e:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <systemTimeMs+0x6>
     e42:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <systemTimeMs+0x7>
     e46:	a1 e0       	ldi	r26, 0x01	; 1
     e48:	85 d0       	rcall	.+266    	; 0xf54 <__adddi3_s8>
     e4a:	20 93 e9 02 	sts	0x02E9, r18	; 0x8002e9 <systemTimeMs>
     e4e:	30 93 ea 02 	sts	0x02EA, r19	; 0x8002ea <systemTimeMs+0x1>
     e52:	40 93 eb 02 	sts	0x02EB, r20	; 0x8002eb <systemTimeMs+0x2>
     e56:	50 93 ec 02 	sts	0x02EC, r21	; 0x8002ec <systemTimeMs+0x3>
     e5a:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <systemTimeMs+0x4>
     e5e:	70 93 ee 02 	sts	0x02EE, r23	; 0x8002ee <systemTimeMs+0x5>
     e62:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <systemTimeMs+0x6>
     e66:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
     e6a:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <matrixRunning>
     e6e:	81 11       	cpse	r24, r1
     e70:	4f df       	rcall	.-354    	; 0xd10 <matrixWriteNextLine>
}
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0b be       	out	0x3b, r0	; 59
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <__umoddi3>:
     e98:	68 94       	set
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <__udivdi3_umoddi3>

00000e9c <__udivdi3>:
     e9c:	e8 94       	clt

00000e9e <__udivdi3_umoddi3>:
     e9e:	8f 92       	push	r8
     ea0:	9f 92       	push	r9
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	05 d0       	rcall	.+10     	; 0xeb2 <__udivmod64>
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	08 95       	ret

00000eb2 <__udivmod64>:
     eb2:	88 24       	eor	r8, r8
     eb4:	99 24       	eor	r9, r9
     eb6:	f4 01       	movw	r30, r8
     eb8:	e4 01       	movw	r28, r8
     eba:	b0 e4       	ldi	r27, 0x40	; 64
     ebc:	9f 93       	push	r25
     ebe:	aa 27       	eor	r26, r26
     ec0:	9a 15       	cp	r25, r10
     ec2:	8b 04       	cpc	r8, r11
     ec4:	9c 04       	cpc	r9, r12
     ec6:	ed 05       	cpc	r30, r13
     ec8:	fe 05       	cpc	r31, r14
     eca:	cf 05       	cpc	r28, r15
     ecc:	d0 07       	cpc	r29, r16
     ece:	a1 07       	cpc	r26, r17
     ed0:	98 f4       	brcc	.+38     	; 0xef8 <__udivmod64+0x46>
     ed2:	ad 2f       	mov	r26, r29
     ed4:	dc 2f       	mov	r29, r28
     ed6:	cf 2f       	mov	r28, r31
     ed8:	fe 2f       	mov	r31, r30
     eda:	e9 2d       	mov	r30, r9
     edc:	98 2c       	mov	r9, r8
     ede:	89 2e       	mov	r8, r25
     ee0:	98 2f       	mov	r25, r24
     ee2:	87 2f       	mov	r24, r23
     ee4:	76 2f       	mov	r23, r22
     ee6:	65 2f       	mov	r22, r21
     ee8:	54 2f       	mov	r21, r20
     eea:	43 2f       	mov	r20, r19
     eec:	32 2f       	mov	r19, r18
     eee:	22 27       	eor	r18, r18
     ef0:	b8 50       	subi	r27, 0x08	; 8
     ef2:	31 f7       	brne	.-52     	; 0xec0 <__udivmod64+0xe>
     ef4:	bf 91       	pop	r27
     ef6:	27 c0       	rjmp	.+78     	; 0xf46 <__udivmod64+0x94>
     ef8:	1b 2e       	mov	r1, r27
     efa:	bf 91       	pop	r27
     efc:	bb 27       	eor	r27, r27
     efe:	22 0f       	add	r18, r18
     f00:	33 1f       	adc	r19, r19
     f02:	44 1f       	adc	r20, r20
     f04:	55 1f       	adc	r21, r21
     f06:	66 1f       	adc	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	88 1f       	adc	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	88 1c       	adc	r8, r8
     f10:	99 1c       	adc	r9, r9
     f12:	ee 1f       	adc	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	cc 1f       	adc	r28, r28
     f18:	dd 1f       	adc	r29, r29
     f1a:	aa 1f       	adc	r26, r26
     f1c:	bb 1f       	adc	r27, r27
     f1e:	8a 14       	cp	r8, r10
     f20:	9b 04       	cpc	r9, r11
     f22:	ec 05       	cpc	r30, r12
     f24:	fd 05       	cpc	r31, r13
     f26:	ce 05       	cpc	r28, r14
     f28:	df 05       	cpc	r29, r15
     f2a:	a0 07       	cpc	r26, r16
     f2c:	b1 07       	cpc	r27, r17
     f2e:	48 f0       	brcs	.+18     	; 0xf42 <__udivmod64+0x90>
     f30:	8a 18       	sub	r8, r10
     f32:	9b 08       	sbc	r9, r11
     f34:	ec 09       	sbc	r30, r12
     f36:	fd 09       	sbc	r31, r13
     f38:	ce 09       	sbc	r28, r14
     f3a:	df 09       	sbc	r29, r15
     f3c:	a0 0b       	sbc	r26, r16
     f3e:	b1 0b       	sbc	r27, r17
     f40:	21 60       	ori	r18, 0x01	; 1
     f42:	1a 94       	dec	r1
     f44:	e1 f6       	brne	.-72     	; 0xefe <__udivmod64+0x4c>
     f46:	2e f4       	brtc	.+10     	; 0xf52 <__udivmod64+0xa0>
     f48:	94 01       	movw	r18, r8
     f4a:	af 01       	movw	r20, r30
     f4c:	be 01       	movw	r22, r28
     f4e:	cd 01       	movw	r24, r26
     f50:	00 0c       	add	r0, r0
     f52:	08 95       	ret

00000f54 <__adddi3_s8>:
     f54:	00 24       	eor	r0, r0
     f56:	a7 fd       	sbrc	r26, 7
     f58:	00 94       	com	r0
     f5a:	2a 0f       	add	r18, r26
     f5c:	30 1d       	adc	r19, r0
     f5e:	40 1d       	adc	r20, r0
     f60:	50 1d       	adc	r21, r0
     f62:	60 1d       	adc	r22, r0
     f64:	70 1d       	adc	r23, r0
     f66:	80 1d       	adc	r24, r0
     f68:	90 1d       	adc	r25, r0
     f6a:	08 95       	ret

00000f6c <strcmp>:
     f6c:	fb 01       	movw	r30, r22
     f6e:	dc 01       	movw	r26, r24
     f70:	8d 91       	ld	r24, X+
     f72:	01 90       	ld	r0, Z+
     f74:	80 19       	sub	r24, r0
     f76:	01 10       	cpse	r0, r1
     f78:	d9 f3       	breq	.-10     	; 0xf70 <strcmp+0x4>
     f7a:	99 0b       	sbc	r25, r25
     f7c:	08 95       	ret

00000f7e <vsnprintf>:
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	2e 97       	sbiw	r28, 0x0e	; 14
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	8c 01       	movw	r16, r24
     f98:	fa 01       	movw	r30, r20
     f9a:	86 e0       	ldi	r24, 0x06	; 6
     f9c:	8c 83       	std	Y+4, r24	; 0x04
     f9e:	1a 83       	std	Y+2, r17	; 0x02
     fa0:	09 83       	std	Y+1, r16	; 0x01
     fa2:	77 ff       	sbrs	r23, 7
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <vsnprintf+0x2c>
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	70 e8       	ldi	r23, 0x80	; 128
     faa:	cb 01       	movw	r24, r22
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	a9 01       	movw	r20, r18
     fb4:	bf 01       	movw	r22, r30
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	19 d0       	rcall	.+50     	; 0xfee <vfprintf>
     fbc:	4d 81       	ldd	r20, Y+5	; 0x05
     fbe:	5e 81       	ldd	r21, Y+6	; 0x06
     fc0:	57 fd       	sbrc	r21, 7
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <vsnprintf+0x5a>
     fc4:	2f 81       	ldd	r18, Y+7	; 0x07
     fc6:	38 85       	ldd	r19, Y+8	; 0x08
     fc8:	42 17       	cp	r20, r18
     fca:	53 07       	cpc	r21, r19
     fcc:	0c f4       	brge	.+2      	; 0xfd0 <vsnprintf+0x52>
     fce:	9a 01       	movw	r18, r20
     fd0:	f8 01       	movw	r30, r16
     fd2:	e2 0f       	add	r30, r18
     fd4:	f3 1f       	adc	r31, r19
     fd6:	10 82       	st	Z, r1
     fd8:	2e 96       	adiw	r28, 0x0e	; 14
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <vfprintf>:
     fee:	2f 92       	push	r2
     ff0:	3f 92       	push	r3
     ff2:	4f 92       	push	r4
     ff4:	5f 92       	push	r5
     ff6:	6f 92       	push	r6
     ff8:	7f 92       	push	r7
     ffa:	8f 92       	push	r8
     ffc:	9f 92       	push	r9
     ffe:	af 92       	push	r10
    1000:	bf 92       	push	r11
    1002:	cf 92       	push	r12
    1004:	df 92       	push	r13
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	2b 97       	sbiw	r28, 0x0b	; 11
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	6c 01       	movw	r12, r24
    1024:	7b 01       	movw	r14, r22
    1026:	8a 01       	movw	r16, r20
    1028:	fc 01       	movw	r30, r24
    102a:	17 82       	std	Z+7, r1	; 0x07
    102c:	16 82       	std	Z+6, r1	; 0x06
    102e:	83 81       	ldd	r24, Z+3	; 0x03
    1030:	81 ff       	sbrs	r24, 1
    1032:	bf c1       	rjmp	.+894    	; 0x13b2 <vfprintf+0x3c4>
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	3c 01       	movw	r6, r24
    103a:	f6 01       	movw	r30, r12
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	f7 01       	movw	r30, r14
    1040:	93 fd       	sbrc	r25, 3
    1042:	85 91       	lpm	r24, Z+
    1044:	93 ff       	sbrs	r25, 3
    1046:	81 91       	ld	r24, Z+
    1048:	7f 01       	movw	r14, r30
    104a:	88 23       	and	r24, r24
    104c:	09 f4       	brne	.+2      	; 0x1050 <vfprintf+0x62>
    104e:	ad c1       	rjmp	.+858    	; 0x13aa <vfprintf+0x3bc>
    1050:	85 32       	cpi	r24, 0x25	; 37
    1052:	39 f4       	brne	.+14     	; 0x1062 <vfprintf+0x74>
    1054:	93 fd       	sbrc	r25, 3
    1056:	85 91       	lpm	r24, Z+
    1058:	93 ff       	sbrs	r25, 3
    105a:	81 91       	ld	r24, Z+
    105c:	7f 01       	movw	r14, r30
    105e:	85 32       	cpi	r24, 0x25	; 37
    1060:	21 f4       	brne	.+8      	; 0x106a <vfprintf+0x7c>
    1062:	b6 01       	movw	r22, r12
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	d6 d1       	rcall	.+940    	; 0x1414 <fputc>
    1068:	e8 cf       	rjmp	.-48     	; 0x103a <vfprintf+0x4c>
    106a:	91 2c       	mov	r9, r1
    106c:	21 2c       	mov	r2, r1
    106e:	31 2c       	mov	r3, r1
    1070:	ff e1       	ldi	r31, 0x1F	; 31
    1072:	f3 15       	cp	r31, r3
    1074:	d8 f0       	brcs	.+54     	; 0x10ac <vfprintf+0xbe>
    1076:	8b 32       	cpi	r24, 0x2B	; 43
    1078:	79 f0       	breq	.+30     	; 0x1098 <vfprintf+0xaa>
    107a:	38 f4       	brcc	.+14     	; 0x108a <vfprintf+0x9c>
    107c:	80 32       	cpi	r24, 0x20	; 32
    107e:	79 f0       	breq	.+30     	; 0x109e <vfprintf+0xb0>
    1080:	83 32       	cpi	r24, 0x23	; 35
    1082:	a1 f4       	brne	.+40     	; 0x10ac <vfprintf+0xbe>
    1084:	23 2d       	mov	r18, r3
    1086:	20 61       	ori	r18, 0x10	; 16
    1088:	1d c0       	rjmp	.+58     	; 0x10c4 <vfprintf+0xd6>
    108a:	8d 32       	cpi	r24, 0x2D	; 45
    108c:	61 f0       	breq	.+24     	; 0x10a6 <vfprintf+0xb8>
    108e:	80 33       	cpi	r24, 0x30	; 48
    1090:	69 f4       	brne	.+26     	; 0x10ac <vfprintf+0xbe>
    1092:	23 2d       	mov	r18, r3
    1094:	21 60       	ori	r18, 0x01	; 1
    1096:	16 c0       	rjmp	.+44     	; 0x10c4 <vfprintf+0xd6>
    1098:	83 2d       	mov	r24, r3
    109a:	82 60       	ori	r24, 0x02	; 2
    109c:	38 2e       	mov	r3, r24
    109e:	e3 2d       	mov	r30, r3
    10a0:	e4 60       	ori	r30, 0x04	; 4
    10a2:	3e 2e       	mov	r3, r30
    10a4:	2a c0       	rjmp	.+84     	; 0x10fa <vfprintf+0x10c>
    10a6:	f3 2d       	mov	r31, r3
    10a8:	f8 60       	ori	r31, 0x08	; 8
    10aa:	1d c0       	rjmp	.+58     	; 0x10e6 <vfprintf+0xf8>
    10ac:	37 fc       	sbrc	r3, 7
    10ae:	2d c0       	rjmp	.+90     	; 0x110a <vfprintf+0x11c>
    10b0:	20 ed       	ldi	r18, 0xD0	; 208
    10b2:	28 0f       	add	r18, r24
    10b4:	2a 30       	cpi	r18, 0x0A	; 10
    10b6:	40 f0       	brcs	.+16     	; 0x10c8 <vfprintf+0xda>
    10b8:	8e 32       	cpi	r24, 0x2E	; 46
    10ba:	b9 f4       	brne	.+46     	; 0x10ea <vfprintf+0xfc>
    10bc:	36 fc       	sbrc	r3, 6
    10be:	75 c1       	rjmp	.+746    	; 0x13aa <vfprintf+0x3bc>
    10c0:	23 2d       	mov	r18, r3
    10c2:	20 64       	ori	r18, 0x40	; 64
    10c4:	32 2e       	mov	r3, r18
    10c6:	19 c0       	rjmp	.+50     	; 0x10fa <vfprintf+0x10c>
    10c8:	36 fe       	sbrs	r3, 6
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <vfprintf+0xea>
    10cc:	8a e0       	ldi	r24, 0x0A	; 10
    10ce:	98 9e       	mul	r9, r24
    10d0:	20 0d       	add	r18, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	92 2e       	mov	r9, r18
    10d6:	11 c0       	rjmp	.+34     	; 0x10fa <vfprintf+0x10c>
    10d8:	ea e0       	ldi	r30, 0x0A	; 10
    10da:	2e 9e       	mul	r2, r30
    10dc:	20 0d       	add	r18, r0
    10de:	11 24       	eor	r1, r1
    10e0:	22 2e       	mov	r2, r18
    10e2:	f3 2d       	mov	r31, r3
    10e4:	f0 62       	ori	r31, 0x20	; 32
    10e6:	3f 2e       	mov	r3, r31
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <vfprintf+0x10c>
    10ea:	8c 36       	cpi	r24, 0x6C	; 108
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <vfprintf+0x108>
    10ee:	83 2d       	mov	r24, r3
    10f0:	80 68       	ori	r24, 0x80	; 128
    10f2:	38 2e       	mov	r3, r24
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <vfprintf+0x10c>
    10f6:	88 36       	cpi	r24, 0x68	; 104
    10f8:	41 f4       	brne	.+16     	; 0x110a <vfprintf+0x11c>
    10fa:	f7 01       	movw	r30, r14
    10fc:	93 fd       	sbrc	r25, 3
    10fe:	85 91       	lpm	r24, Z+
    1100:	93 ff       	sbrs	r25, 3
    1102:	81 91       	ld	r24, Z+
    1104:	7f 01       	movw	r14, r30
    1106:	81 11       	cpse	r24, r1
    1108:	b3 cf       	rjmp	.-154    	; 0x1070 <vfprintf+0x82>
    110a:	98 2f       	mov	r25, r24
    110c:	9f 7d       	andi	r25, 0xDF	; 223
    110e:	95 54       	subi	r25, 0x45	; 69
    1110:	93 30       	cpi	r25, 0x03	; 3
    1112:	28 f4       	brcc	.+10     	; 0x111e <vfprintf+0x130>
    1114:	0c 5f       	subi	r16, 0xFC	; 252
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	9f e3       	ldi	r25, 0x3F	; 63
    111a:	99 83       	std	Y+1, r25	; 0x01
    111c:	0d c0       	rjmp	.+26     	; 0x1138 <vfprintf+0x14a>
    111e:	83 36       	cpi	r24, 0x63	; 99
    1120:	31 f0       	breq	.+12     	; 0x112e <vfprintf+0x140>
    1122:	83 37       	cpi	r24, 0x73	; 115
    1124:	71 f0       	breq	.+28     	; 0x1142 <vfprintf+0x154>
    1126:	83 35       	cpi	r24, 0x53	; 83
    1128:	09 f0       	breq	.+2      	; 0x112c <vfprintf+0x13e>
    112a:	55 c0       	rjmp	.+170    	; 0x11d6 <vfprintf+0x1e8>
    112c:	20 c0       	rjmp	.+64     	; 0x116e <vfprintf+0x180>
    112e:	f8 01       	movw	r30, r16
    1130:	80 81       	ld	r24, Z
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	0e 5f       	subi	r16, 0xFE	; 254
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	88 24       	eor	r8, r8
    113a:	83 94       	inc	r8
    113c:	91 2c       	mov	r9, r1
    113e:	53 01       	movw	r10, r6
    1140:	12 c0       	rjmp	.+36     	; 0x1166 <vfprintf+0x178>
    1142:	28 01       	movw	r4, r16
    1144:	f2 e0       	ldi	r31, 0x02	; 2
    1146:	4f 0e       	add	r4, r31
    1148:	51 1c       	adc	r5, r1
    114a:	f8 01       	movw	r30, r16
    114c:	a0 80       	ld	r10, Z
    114e:	b1 80       	ldd	r11, Z+1	; 0x01
    1150:	36 fe       	sbrs	r3, 6
    1152:	03 c0       	rjmp	.+6      	; 0x115a <vfprintf+0x16c>
    1154:	69 2d       	mov	r22, r9
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <vfprintf+0x170>
    115a:	6f ef       	ldi	r22, 0xFF	; 255
    115c:	7f ef       	ldi	r23, 0xFF	; 255
    115e:	c5 01       	movw	r24, r10
    1160:	4e d1       	rcall	.+668    	; 0x13fe <strnlen>
    1162:	4c 01       	movw	r8, r24
    1164:	82 01       	movw	r16, r4
    1166:	f3 2d       	mov	r31, r3
    1168:	ff 77       	andi	r31, 0x7F	; 127
    116a:	3f 2e       	mov	r3, r31
    116c:	15 c0       	rjmp	.+42     	; 0x1198 <vfprintf+0x1aa>
    116e:	28 01       	movw	r4, r16
    1170:	22 e0       	ldi	r18, 0x02	; 2
    1172:	42 0e       	add	r4, r18
    1174:	51 1c       	adc	r5, r1
    1176:	f8 01       	movw	r30, r16
    1178:	a0 80       	ld	r10, Z
    117a:	b1 80       	ldd	r11, Z+1	; 0x01
    117c:	36 fe       	sbrs	r3, 6
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <vfprintf+0x198>
    1180:	69 2d       	mov	r22, r9
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x19c>
    1186:	6f ef       	ldi	r22, 0xFF	; 255
    1188:	7f ef       	ldi	r23, 0xFF	; 255
    118a:	c5 01       	movw	r24, r10
    118c:	2d d1       	rcall	.+602    	; 0x13e8 <strnlen_P>
    118e:	4c 01       	movw	r8, r24
    1190:	f3 2d       	mov	r31, r3
    1192:	f0 68       	ori	r31, 0x80	; 128
    1194:	3f 2e       	mov	r3, r31
    1196:	82 01       	movw	r16, r4
    1198:	33 fc       	sbrc	r3, 3
    119a:	19 c0       	rjmp	.+50     	; 0x11ce <vfprintf+0x1e0>
    119c:	82 2d       	mov	r24, r2
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	88 16       	cp	r8, r24
    11a2:	99 06       	cpc	r9, r25
    11a4:	a0 f4       	brcc	.+40     	; 0x11ce <vfprintf+0x1e0>
    11a6:	b6 01       	movw	r22, r12
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	33 d1       	rcall	.+614    	; 0x1414 <fputc>
    11ae:	2a 94       	dec	r2
    11b0:	f5 cf       	rjmp	.-22     	; 0x119c <vfprintf+0x1ae>
    11b2:	f5 01       	movw	r30, r10
    11b4:	37 fc       	sbrc	r3, 7
    11b6:	85 91       	lpm	r24, Z+
    11b8:	37 fe       	sbrs	r3, 7
    11ba:	81 91       	ld	r24, Z+
    11bc:	5f 01       	movw	r10, r30
    11be:	b6 01       	movw	r22, r12
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	28 d1       	rcall	.+592    	; 0x1414 <fputc>
    11c4:	21 10       	cpse	r2, r1
    11c6:	2a 94       	dec	r2
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	82 1a       	sub	r8, r18
    11cc:	91 08       	sbc	r9, r1
    11ce:	81 14       	cp	r8, r1
    11d0:	91 04       	cpc	r9, r1
    11d2:	79 f7       	brne	.-34     	; 0x11b2 <vfprintf+0x1c4>
    11d4:	e1 c0       	rjmp	.+450    	; 0x1398 <vfprintf+0x3aa>
    11d6:	84 36       	cpi	r24, 0x64	; 100
    11d8:	11 f0       	breq	.+4      	; 0x11de <vfprintf+0x1f0>
    11da:	89 36       	cpi	r24, 0x69	; 105
    11dc:	39 f5       	brne	.+78     	; 0x122c <vfprintf+0x23e>
    11de:	f8 01       	movw	r30, r16
    11e0:	37 fe       	sbrs	r3, 7
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <vfprintf+0x204>
    11e4:	60 81       	ld	r22, Z
    11e6:	71 81       	ldd	r23, Z+1	; 0x01
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	0c 5f       	subi	r16, 0xFC	; 252
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <vfprintf+0x214>
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	07 2e       	mov	r0, r23
    11f8:	00 0c       	add	r0, r0
    11fa:	88 0b       	sbc	r24, r24
    11fc:	99 0b       	sbc	r25, r25
    11fe:	0e 5f       	subi	r16, 0xFE	; 254
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	f3 2d       	mov	r31, r3
    1204:	ff 76       	andi	r31, 0x6F	; 111
    1206:	3f 2e       	mov	r3, r31
    1208:	97 ff       	sbrs	r25, 7
    120a:	09 c0       	rjmp	.+18     	; 0x121e <vfprintf+0x230>
    120c:	90 95       	com	r25
    120e:	80 95       	com	r24
    1210:	70 95       	com	r23
    1212:	61 95       	neg	r22
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	8f 4f       	sbci	r24, 0xFF	; 255
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	f0 68       	ori	r31, 0x80	; 128
    121c:	3f 2e       	mov	r3, r31
    121e:	2a e0       	ldi	r18, 0x0A	; 10
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	a3 01       	movw	r20, r6
    1224:	33 d1       	rcall	.+614    	; 0x148c <__ultoa_invert>
    1226:	88 2e       	mov	r8, r24
    1228:	86 18       	sub	r8, r6
    122a:	44 c0       	rjmp	.+136    	; 0x12b4 <vfprintf+0x2c6>
    122c:	85 37       	cpi	r24, 0x75	; 117
    122e:	31 f4       	brne	.+12     	; 0x123c <vfprintf+0x24e>
    1230:	23 2d       	mov	r18, r3
    1232:	2f 7e       	andi	r18, 0xEF	; 239
    1234:	b2 2e       	mov	r11, r18
    1236:	2a e0       	ldi	r18, 0x0A	; 10
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	25 c0       	rjmp	.+74     	; 0x1286 <vfprintf+0x298>
    123c:	93 2d       	mov	r25, r3
    123e:	99 7f       	andi	r25, 0xF9	; 249
    1240:	b9 2e       	mov	r11, r25
    1242:	8f 36       	cpi	r24, 0x6F	; 111
    1244:	c1 f0       	breq	.+48     	; 0x1276 <vfprintf+0x288>
    1246:	18 f4       	brcc	.+6      	; 0x124e <vfprintf+0x260>
    1248:	88 35       	cpi	r24, 0x58	; 88
    124a:	79 f0       	breq	.+30     	; 0x126a <vfprintf+0x27c>
    124c:	ae c0       	rjmp	.+348    	; 0x13aa <vfprintf+0x3bc>
    124e:	80 37       	cpi	r24, 0x70	; 112
    1250:	19 f0       	breq	.+6      	; 0x1258 <vfprintf+0x26a>
    1252:	88 37       	cpi	r24, 0x78	; 120
    1254:	21 f0       	breq	.+8      	; 0x125e <vfprintf+0x270>
    1256:	a9 c0       	rjmp	.+338    	; 0x13aa <vfprintf+0x3bc>
    1258:	e9 2f       	mov	r30, r25
    125a:	e0 61       	ori	r30, 0x10	; 16
    125c:	be 2e       	mov	r11, r30
    125e:	b4 fe       	sbrs	r11, 4
    1260:	0d c0       	rjmp	.+26     	; 0x127c <vfprintf+0x28e>
    1262:	fb 2d       	mov	r31, r11
    1264:	f4 60       	ori	r31, 0x04	; 4
    1266:	bf 2e       	mov	r11, r31
    1268:	09 c0       	rjmp	.+18     	; 0x127c <vfprintf+0x28e>
    126a:	34 fe       	sbrs	r3, 4
    126c:	0a c0       	rjmp	.+20     	; 0x1282 <vfprintf+0x294>
    126e:	29 2f       	mov	r18, r25
    1270:	26 60       	ori	r18, 0x06	; 6
    1272:	b2 2e       	mov	r11, r18
    1274:	06 c0       	rjmp	.+12     	; 0x1282 <vfprintf+0x294>
    1276:	28 e0       	ldi	r18, 0x08	; 8
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <vfprintf+0x298>
    127c:	20 e1       	ldi	r18, 0x10	; 16
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <vfprintf+0x298>
    1282:	20 e1       	ldi	r18, 0x10	; 16
    1284:	32 e0       	ldi	r19, 0x02	; 2
    1286:	f8 01       	movw	r30, r16
    1288:	b7 fe       	sbrs	r11, 7
    128a:	07 c0       	rjmp	.+14     	; 0x129a <vfprintf+0x2ac>
    128c:	60 81       	ld	r22, Z
    128e:	71 81       	ldd	r23, Z+1	; 0x01
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	0c 5f       	subi	r16, 0xFC	; 252
    1296:	1f 4f       	sbci	r17, 0xFF	; 255
    1298:	06 c0       	rjmp	.+12     	; 0x12a6 <vfprintf+0x2b8>
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 5f       	subi	r16, 0xFE	; 254
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	a3 01       	movw	r20, r6
    12a8:	f1 d0       	rcall	.+482    	; 0x148c <__ultoa_invert>
    12aa:	88 2e       	mov	r8, r24
    12ac:	86 18       	sub	r8, r6
    12ae:	fb 2d       	mov	r31, r11
    12b0:	ff 77       	andi	r31, 0x7F	; 127
    12b2:	3f 2e       	mov	r3, r31
    12b4:	36 fe       	sbrs	r3, 6
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <vfprintf+0x2e4>
    12b8:	23 2d       	mov	r18, r3
    12ba:	2e 7f       	andi	r18, 0xFE	; 254
    12bc:	a2 2e       	mov	r10, r18
    12be:	89 14       	cp	r8, r9
    12c0:	58 f4       	brcc	.+22     	; 0x12d8 <vfprintf+0x2ea>
    12c2:	34 fe       	sbrs	r3, 4
    12c4:	0b c0       	rjmp	.+22     	; 0x12dc <vfprintf+0x2ee>
    12c6:	32 fc       	sbrc	r3, 2
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <vfprintf+0x2ee>
    12ca:	83 2d       	mov	r24, r3
    12cc:	8e 7e       	andi	r24, 0xEE	; 238
    12ce:	a8 2e       	mov	r10, r24
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <vfprintf+0x2ee>
    12d2:	b8 2c       	mov	r11, r8
    12d4:	a3 2c       	mov	r10, r3
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <vfprintf+0x2f0>
    12d8:	b8 2c       	mov	r11, r8
    12da:	01 c0       	rjmp	.+2      	; 0x12de <vfprintf+0x2f0>
    12dc:	b9 2c       	mov	r11, r9
    12de:	a4 fe       	sbrs	r10, 4
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <vfprintf+0x312>
    12e2:	fe 01       	movw	r30, r28
    12e4:	e8 0d       	add	r30, r8
    12e6:	f1 1d       	adc	r31, r1
    12e8:	80 81       	ld	r24, Z
    12ea:	80 33       	cpi	r24, 0x30	; 48
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <vfprintf+0x308>
    12ee:	9a 2d       	mov	r25, r10
    12f0:	99 7e       	andi	r25, 0xE9	; 233
    12f2:	a9 2e       	mov	r10, r25
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <vfprintf+0x31a>
    12f6:	a2 fe       	sbrs	r10, 2
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <vfprintf+0x318>
    12fa:	b3 94       	inc	r11
    12fc:	b3 94       	inc	r11
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <vfprintf+0x31a>
    1300:	8a 2d       	mov	r24, r10
    1302:	86 78       	andi	r24, 0x86	; 134
    1304:	09 f0       	breq	.+2      	; 0x1308 <vfprintf+0x31a>
    1306:	b3 94       	inc	r11
    1308:	a3 fc       	sbrc	r10, 3
    130a:	10 c0       	rjmp	.+32     	; 0x132c <vfprintf+0x33e>
    130c:	a0 fe       	sbrs	r10, 0
    130e:	06 c0       	rjmp	.+12     	; 0x131c <vfprintf+0x32e>
    1310:	b2 14       	cp	r11, r2
    1312:	80 f4       	brcc	.+32     	; 0x1334 <vfprintf+0x346>
    1314:	28 0c       	add	r2, r8
    1316:	92 2c       	mov	r9, r2
    1318:	9b 18       	sub	r9, r11
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <vfprintf+0x348>
    131c:	b2 14       	cp	r11, r2
    131e:	58 f4       	brcc	.+22     	; 0x1336 <vfprintf+0x348>
    1320:	b6 01       	movw	r22, r12
    1322:	80 e2       	ldi	r24, 0x20	; 32
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	76 d0       	rcall	.+236    	; 0x1414 <fputc>
    1328:	b3 94       	inc	r11
    132a:	f8 cf       	rjmp	.-16     	; 0x131c <vfprintf+0x32e>
    132c:	b2 14       	cp	r11, r2
    132e:	18 f4       	brcc	.+6      	; 0x1336 <vfprintf+0x348>
    1330:	2b 18       	sub	r2, r11
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <vfprintf+0x34a>
    1334:	98 2c       	mov	r9, r8
    1336:	21 2c       	mov	r2, r1
    1338:	a4 fe       	sbrs	r10, 4
    133a:	0f c0       	rjmp	.+30     	; 0x135a <vfprintf+0x36c>
    133c:	b6 01       	movw	r22, r12
    133e:	80 e3       	ldi	r24, 0x30	; 48
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	68 d0       	rcall	.+208    	; 0x1414 <fputc>
    1344:	a2 fe       	sbrs	r10, 2
    1346:	16 c0       	rjmp	.+44     	; 0x1374 <vfprintf+0x386>
    1348:	a1 fc       	sbrc	r10, 1
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <vfprintf+0x364>
    134c:	88 e7       	ldi	r24, 0x78	; 120
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <vfprintf+0x368>
    1352:	88 e5       	ldi	r24, 0x58	; 88
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	b6 01       	movw	r22, r12
    1358:	0c c0       	rjmp	.+24     	; 0x1372 <vfprintf+0x384>
    135a:	8a 2d       	mov	r24, r10
    135c:	86 78       	andi	r24, 0x86	; 134
    135e:	51 f0       	breq	.+20     	; 0x1374 <vfprintf+0x386>
    1360:	a1 fe       	sbrs	r10, 1
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0x37a>
    1364:	8b e2       	ldi	r24, 0x2B	; 43
    1366:	01 c0       	rjmp	.+2      	; 0x136a <vfprintf+0x37c>
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	a7 fc       	sbrc	r10, 7
    136c:	8d e2       	ldi	r24, 0x2D	; 45
    136e:	b6 01       	movw	r22, r12
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	50 d0       	rcall	.+160    	; 0x1414 <fputc>
    1374:	89 14       	cp	r8, r9
    1376:	30 f4       	brcc	.+12     	; 0x1384 <vfprintf+0x396>
    1378:	b6 01       	movw	r22, r12
    137a:	80 e3       	ldi	r24, 0x30	; 48
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	4a d0       	rcall	.+148    	; 0x1414 <fputc>
    1380:	9a 94       	dec	r9
    1382:	f8 cf       	rjmp	.-16     	; 0x1374 <vfprintf+0x386>
    1384:	8a 94       	dec	r8
    1386:	f3 01       	movw	r30, r6
    1388:	e8 0d       	add	r30, r8
    138a:	f1 1d       	adc	r31, r1
    138c:	80 81       	ld	r24, Z
    138e:	b6 01       	movw	r22, r12
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	40 d0       	rcall	.+128    	; 0x1414 <fputc>
    1394:	81 10       	cpse	r8, r1
    1396:	f6 cf       	rjmp	.-20     	; 0x1384 <vfprintf+0x396>
    1398:	22 20       	and	r2, r2
    139a:	09 f4       	brne	.+2      	; 0x139e <vfprintf+0x3b0>
    139c:	4e ce       	rjmp	.-868    	; 0x103a <vfprintf+0x4c>
    139e:	b6 01       	movw	r22, r12
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	37 d0       	rcall	.+110    	; 0x1414 <fputc>
    13a6:	2a 94       	dec	r2
    13a8:	f7 cf       	rjmp	.-18     	; 0x1398 <vfprintf+0x3aa>
    13aa:	f6 01       	movw	r30, r12
    13ac:	86 81       	ldd	r24, Z+6	; 0x06
    13ae:	97 81       	ldd	r25, Z+7	; 0x07
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0x3c8>
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	9f ef       	ldi	r25, 0xFF	; 255
    13b6:	2b 96       	adiw	r28, 0x0b	; 11
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	af 90       	pop	r10
    13d6:	9f 90       	pop	r9
    13d8:	8f 90       	pop	r8
    13da:	7f 90       	pop	r7
    13dc:	6f 90       	pop	r6
    13de:	5f 90       	pop	r5
    13e0:	4f 90       	pop	r4
    13e2:	3f 90       	pop	r3
    13e4:	2f 90       	pop	r2
    13e6:	08 95       	ret

000013e8 <strnlen_P>:
    13e8:	fc 01       	movw	r30, r24
    13ea:	05 90       	lpm	r0, Z+
    13ec:	61 50       	subi	r22, 0x01	; 1
    13ee:	70 40       	sbci	r23, 0x00	; 0
    13f0:	01 10       	cpse	r0, r1
    13f2:	d8 f7       	brcc	.-10     	; 0x13ea <strnlen_P+0x2>
    13f4:	80 95       	com	r24
    13f6:	90 95       	com	r25
    13f8:	8e 0f       	add	r24, r30
    13fa:	9f 1f       	adc	r25, r31
    13fc:	08 95       	ret

000013fe <strnlen>:
    13fe:	fc 01       	movw	r30, r24
    1400:	61 50       	subi	r22, 0x01	; 1
    1402:	70 40       	sbci	r23, 0x00	; 0
    1404:	01 90       	ld	r0, Z+
    1406:	01 10       	cpse	r0, r1
    1408:	d8 f7       	brcc	.-10     	; 0x1400 <strnlen+0x2>
    140a:	80 95       	com	r24
    140c:	90 95       	com	r25
    140e:	8e 0f       	add	r24, r30
    1410:	9f 1f       	adc	r25, r31
    1412:	08 95       	ret

00001414 <fputc>:
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	fb 01       	movw	r30, r22
    141e:	23 81       	ldd	r18, Z+3	; 0x03
    1420:	21 fd       	sbrc	r18, 1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <fputc+0x16>
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	9f ef       	ldi	r25, 0xFF	; 255
    1428:	2c c0       	rjmp	.+88     	; 0x1482 <fputc+0x6e>
    142a:	22 ff       	sbrs	r18, 2
    142c:	16 c0       	rjmp	.+44     	; 0x145a <fputc+0x46>
    142e:	46 81       	ldd	r20, Z+6	; 0x06
    1430:	57 81       	ldd	r21, Z+7	; 0x07
    1432:	24 81       	ldd	r18, Z+4	; 0x04
    1434:	35 81       	ldd	r19, Z+5	; 0x05
    1436:	42 17       	cp	r20, r18
    1438:	53 07       	cpc	r21, r19
    143a:	44 f4       	brge	.+16     	; 0x144c <fputc+0x38>
    143c:	a0 81       	ld	r26, Z
    143e:	b1 81       	ldd	r27, Z+1	; 0x01
    1440:	9d 01       	movw	r18, r26
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	31 83       	std	Z+1, r19	; 0x01
    1448:	20 83       	st	Z, r18
    144a:	8c 93       	st	X, r24
    144c:	26 81       	ldd	r18, Z+6	; 0x06
    144e:	37 81       	ldd	r19, Z+7	; 0x07
    1450:	2f 5f       	subi	r18, 0xFF	; 255
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	37 83       	std	Z+7, r19	; 0x07
    1456:	26 83       	std	Z+6, r18	; 0x06
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <fputc+0x6e>
    145a:	8b 01       	movw	r16, r22
    145c:	ec 01       	movw	r28, r24
    145e:	fb 01       	movw	r30, r22
    1460:	00 84       	ldd	r0, Z+8	; 0x08
    1462:	f1 85       	ldd	r31, Z+9	; 0x09
    1464:	e0 2d       	mov	r30, r0
    1466:	19 95       	eicall
    1468:	89 2b       	or	r24, r25
    146a:	e1 f6       	brne	.-72     	; 0x1424 <fputc+0x10>
    146c:	d8 01       	movw	r26, r16
    146e:	16 96       	adiw	r26, 0x06	; 6
    1470:	8d 91       	ld	r24, X+
    1472:	9c 91       	ld	r25, X
    1474:	17 97       	sbiw	r26, 0x07	; 7
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	17 96       	adiw	r26, 0x07	; 7
    147a:	9c 93       	st	X, r25
    147c:	8e 93       	st	-X, r24
    147e:	16 97       	sbiw	r26, 0x06	; 6
    1480:	ce 01       	movw	r24, r28
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	08 95       	ret

0000148c <__ultoa_invert>:
    148c:	fa 01       	movw	r30, r20
    148e:	aa 27       	eor	r26, r26
    1490:	28 30       	cpi	r18, 0x08	; 8
    1492:	51 f1       	breq	.+84     	; 0x14e8 <__ultoa_invert+0x5c>
    1494:	20 31       	cpi	r18, 0x10	; 16
    1496:	81 f1       	breq	.+96     	; 0x14f8 <__ultoa_invert+0x6c>
    1498:	e8 94       	clt
    149a:	6f 93       	push	r22
    149c:	6e 7f       	andi	r22, 0xFE	; 254
    149e:	6e 5f       	subi	r22, 0xFE	; 254
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	af 4f       	sbci	r26, 0xFF	; 255
    14a8:	b1 e0       	ldi	r27, 0x01	; 1
    14aa:	3e d0       	rcall	.+124    	; 0x1528 <__ultoa_invert+0x9c>
    14ac:	b4 e0       	ldi	r27, 0x04	; 4
    14ae:	3c d0       	rcall	.+120    	; 0x1528 <__ultoa_invert+0x9c>
    14b0:	67 0f       	add	r22, r23
    14b2:	78 1f       	adc	r23, r24
    14b4:	89 1f       	adc	r24, r25
    14b6:	9a 1f       	adc	r25, r26
    14b8:	a1 1d       	adc	r26, r1
    14ba:	68 0f       	add	r22, r24
    14bc:	79 1f       	adc	r23, r25
    14be:	8a 1f       	adc	r24, r26
    14c0:	91 1d       	adc	r25, r1
    14c2:	a1 1d       	adc	r26, r1
    14c4:	6a 0f       	add	r22, r26
    14c6:	71 1d       	adc	r23, r1
    14c8:	81 1d       	adc	r24, r1
    14ca:	91 1d       	adc	r25, r1
    14cc:	a1 1d       	adc	r26, r1
    14ce:	20 d0       	rcall	.+64     	; 0x1510 <__ultoa_invert+0x84>
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <__ultoa_invert+0x48>
    14d2:	68 94       	set
    14d4:	3f 91       	pop	r19
    14d6:	2a e0       	ldi	r18, 0x0A	; 10
    14d8:	26 9f       	mul	r18, r22
    14da:	11 24       	eor	r1, r1
    14dc:	30 19       	sub	r19, r0
    14de:	30 5d       	subi	r19, 0xD0	; 208
    14e0:	31 93       	st	Z+, r19
    14e2:	de f6       	brtc	.-74     	; 0x149a <__ultoa_invert+0xe>
    14e4:	cf 01       	movw	r24, r30
    14e6:	08 95       	ret
    14e8:	46 2f       	mov	r20, r22
    14ea:	47 70       	andi	r20, 0x07	; 7
    14ec:	40 5d       	subi	r20, 0xD0	; 208
    14ee:	41 93       	st	Z+, r20
    14f0:	b3 e0       	ldi	r27, 0x03	; 3
    14f2:	0f d0       	rcall	.+30     	; 0x1512 <__ultoa_invert+0x86>
    14f4:	c9 f7       	brne	.-14     	; 0x14e8 <__ultoa_invert+0x5c>
    14f6:	f6 cf       	rjmp	.-20     	; 0x14e4 <__ultoa_invert+0x58>
    14f8:	46 2f       	mov	r20, r22
    14fa:	4f 70       	andi	r20, 0x0F	; 15
    14fc:	40 5d       	subi	r20, 0xD0	; 208
    14fe:	4a 33       	cpi	r20, 0x3A	; 58
    1500:	18 f0       	brcs	.+6      	; 0x1508 <__ultoa_invert+0x7c>
    1502:	49 5d       	subi	r20, 0xD9	; 217
    1504:	31 fd       	sbrc	r19, 1
    1506:	40 52       	subi	r20, 0x20	; 32
    1508:	41 93       	st	Z+, r20
    150a:	02 d0       	rcall	.+4      	; 0x1510 <__ultoa_invert+0x84>
    150c:	a9 f7       	brne	.-22     	; 0x14f8 <__ultoa_invert+0x6c>
    150e:	ea cf       	rjmp	.-44     	; 0x14e4 <__ultoa_invert+0x58>
    1510:	b4 e0       	ldi	r27, 0x04	; 4
    1512:	a6 95       	lsr	r26
    1514:	97 95       	ror	r25
    1516:	87 95       	ror	r24
    1518:	77 95       	ror	r23
    151a:	67 95       	ror	r22
    151c:	ba 95       	dec	r27
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__ultoa_invert+0x86>
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 05       	cpc	r22, r1
    1524:	71 05       	cpc	r23, r1
    1526:	08 95       	ret
    1528:	9b 01       	movw	r18, r22
    152a:	ac 01       	movw	r20, r24
    152c:	0a 2e       	mov	r0, r26
    152e:	06 94       	lsr	r0
    1530:	57 95       	ror	r21
    1532:	47 95       	ror	r20
    1534:	37 95       	ror	r19
    1536:	27 95       	ror	r18
    1538:	ba 95       	dec	r27
    153a:	c9 f7       	brne	.-14     	; 0x152e <__ultoa_invert+0xa2>
    153c:	62 0f       	add	r22, r18
    153e:	73 1f       	adc	r23, r19
    1540:	84 1f       	adc	r24, r20
    1542:	95 1f       	adc	r25, r21
    1544:	a0 1d       	adc	r26, r0
    1546:	08 95       	ret

00001548 <_exit>:
    1548:	f8 94       	cli

0000154a <__stop_program>:
    154a:	ff cf       	rjmp	.-2      	; 0x154a <__stop_program>
