
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000eee  00000f82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00000ff6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025ac  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000feb  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001581  00000000  00000000  00004813  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00005d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d9d  00000000  00000000  0000641c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002009  00000000  00000000  000071b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000091c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	09 c4       	rjmp	.+2066   	; 0x870 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ee       	ldi	r30, 0xEE	; 238
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 37       	cpi	r26, 0x74	; 116
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e7       	ldi	r26, 0x74	; 116
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3f       	cpi	r26, 0xF2	; 242
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	e4 c6       	rjmp	.+3528   	; 0xeea <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:


#define PROGRAMTAKT_MS                      10
//Hauptprogramm
int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <main+0x6>
 12a:	1f 92       	push	r1
 12c:	1f 92       	push	r1
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
    uint16_t timerFehlerfunktionOn=0;
    uint16_t timerFehlerfunktionOff=0;
    uint16_t timerAlarmFehler=0;

    //Initialisieren
    initBoard(1);                                                                           //Initialisieren
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	1a d2       	rcall	.+1076   	; 0x56a <initBoard>
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
    
    uint16_t timerFehlerfunktionOn=0;
    uint16_t timerFehlerfunktionOff=0;
    uint16_t timerAlarmFehler=0;
 136:	a1 2c       	mov	r10, r1
 138:	b1 2c       	mov	r11, r1
    
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
    
    uint16_t timerFehlerfunktionOn=0;
    uint16_t timerFehlerfunktionOff=0;
 13a:	c1 2c       	mov	r12, r1
 13c:	d1 2c       	mov	r13, r1
    uint16_t valveLed=0;
    
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
    
    uint16_t timerFehlerfunktionOn=0;
 13e:	e1 2c       	mov	r14, r1
 140:	f1 2c       	mov	r15, r1
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
    uint16_t valveLed=0;
    
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
 142:	00 e0       	ldi	r16, 0x00	; 0
 144:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
    uint16_t valveLed=0;
    
    uint16_t blinken=0;
 146:	1a 82       	std	Y+2, r1	; 0x02
 148:	19 82       	std	Y+1, r1	; 0x01
    
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
 14a:	21 2c       	mov	r2, r1
 14c:	31 2c       	mov	r3, r1
    uint8_t posflanke=0;
    
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
 14e:	81 2c       	mov	r8, r1
 150:	91 2c       	mov	r9, r1
    uint8_t neuTaster=0;
    uint8_t posflanke=0;
    
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
 152:	1d 82       	std	Y+5, r1	; 0x05
 154:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t alarmQuitSchalter=0;
    uint8_t disorderQuitSchalter=0;                                                         //Variabeln auf 0 setzen
    uint8_t ozonSensor=0;
    
    uint8_t altTaster=0;
    uint8_t neuTaster=0;
 156:	1b 82       	std	Y+3, r1	; 0x03
 158:	61 2c       	mov	r6, r1
    //Unendlichschlaufe                                                                     //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        altTaster =neuTaster;
        neuTaster = buttonReadAllPL();
 15a:	71 2c       	mov	r7, r1
 15c:	aa d0       	rcall	.+340    	; 0x2b2 <buttonReadAllPL>
        posflanke = (altTaster ^ neuTaster) & neuTaster;
        
        powerSchalter = switchReadAll() & IM_MASKE_POWER_SCHALTER;                          //Power schalter
 15e:	58 2e       	mov	r5, r24
 160:	a6 d0       	rcall	.+332    	; 0x2ae <switchReadAll>
        alarmQuitSchalter = posflanke & IM_MASKE_ALARM_QUIT_SCHALTER;                 //alarm quit schalter
        disorderQuitSchalter = posflanke & IM_MASKE_DISORDER_QUIT_SCHALTER;           //disorder quit schalter
        ozonSensor = switchReadAll() & IM_MASKE_OZON_SENSOR;                                //Ozon Sensor
 162:	48 2e       	mov	r4, r24
 164:	a4 d0       	rcall	.+328    	; 0x2ae <switchReadAll>
        //Verarbeitung-------------------------------------------------------------
        if (powerSchalter)                                                                  //Power schalter ?
 166:	44 20       	and	r4, r4
 168:	0c f0       	brlt	.+2      	; 0x16c <main+0x48>
 16a:	70 c0       	rjmp	.+224    	; 0x24c <main+0x128>
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        altTaster =neuTaster;
        neuTaster = buttonReadAllPL();
        posflanke = (altTaster ^ neuTaster) & neuTaster;
 16c:	9b 81       	ldd	r25, Y+3	; 0x03
 16e:	90 95       	com	r25
 170:	95 21       	and	r25, r5
        ozonSensor = switchReadAll() & IM_MASKE_OZON_SENSOR;                                //Ozon Sensor
        //Verarbeitung-------------------------------------------------------------
        if (powerSchalter)                                                                  //Power schalter ?
        {
            powerLed = OUT_POWER_LED;                                                       //Power Ledauf 1 setzen
            if (ozonSensor)                                                                 //Ozon sensor ?
 172:	83 ff       	sbrs	r24, 3
 174:	12 c0       	rjmp	.+36     	; 0x19a <main+0x76>
            {
                valveLed = OUT_VALVE_LED;                                                   //vave led auf 1 setzen
                if (alarmQuitSchalter)                                                      //alarm quit schalter ?
 176:	96 fd       	sbrc	r25, 6
 178:	81 c0       	rjmp	.+258    	; 0x27c <main+0x158>
                    alarmLed= OFF;                                                          //alarm led auf 0 setzen
                    timerFehlerfunktionOn = 0;                                              //timerFehlerfunktionOn auf 0 setzen
                    timerAlarmFehler = 0;                                                   //timerAlarmFehler auf 0 setzen
                }
                
                if (timerFehlerfunktionOn >= FEHLER_FUNKTION_ON)                            //timerFehlerfunktionOn grösser gleich FEHLER_FUNKTION_ON ?
 17a:	50 e4       	ldi	r21, 0x40	; 64
 17c:	e5 16       	cp	r14, r21
 17e:	5f e1       	ldi	r21, 0x1F	; 31
 180:	f5 06       	cpc	r15, r21
 182:	e8 f0       	brcs	.+58     	; 0x1be <main+0x9a>
                {
                    
                    blinken = 1;                                                            //blinken auf 1 setzen
                    disorderLed = OFF;                                                      //disorder led auf 0 setzen
                    timerFehlerfunktionOff = 0;                                             //timerFehlerfunktionOff auf 0 setzen
                    if (timerAlarmFehler>= ALARM_FEHLER)                                    //timerAlarmFehler grösser gleich ALARM_FEHLER ?
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	a8 16       	cp	r10, r24
 188:	8e e3       	ldi	r24, 0x3E	; 62
 18a:	b8 06       	cpc	r11, r24
 18c:	08 f4       	brcc	.+2      	; 0x190 <main+0x6c>
 18e:	56 c0       	rjmp	.+172    	; 0x23c <main+0x118>
                    {
                        remoteAlarmLed = OUT_REMOTE_ALARM_LED;                              //remoteAlarm Led auf 1 setzen
 190:	68 94       	set
 192:	22 24       	eor	r2, r2
 194:	23 f8       	bld	r2, 3
 196:	31 2c       	mov	r3, r1
 198:	51 c0       	rjmp	.+162    	; 0x23c <main+0x118>
            else
            {
                alarmLed= OFF;                                                              //alarm led auf 0 setzen
                blinken = 0;                                                                //blinken auf 0 setzen
                valveLed = OFF;                                                             //valve Led auf 0 setzen
                if (disorderQuitSchalter)                                                   //disorder Quit Schalter ?
 19a:	99 23       	and	r25, r25
 19c:	0c f4       	brge	.+2      	; 0x1a0 <main+0x7c>
 19e:	75 c0       	rjmp	.+234    	; 0x28a <main+0x166>
                    
                    disorderLed= OFF;                                                       //disorder Led auf 1 setzen
                    timerFehlerfunktionOff = 0;                                             //timerFehlerfunktionOff auf 0 setzen
                }
                
                if (timerFehlerfunktionOff >= FEHLER_FUNKTION_OFF)                          //timerFehlerfunktionOff grösser gleichFEHLER_FUNKTION_OFF ?
 1a0:	90 e4       	ldi	r25, 0x40	; 64
 1a2:	c9 16       	cp	r12, r25
 1a4:	9f e1       	ldi	r25, 0x1F	; 31
 1a6:	d9 06       	cpc	r13, r25
 1a8:	08 f4       	brcc	.+2      	; 0x1ac <main+0x88>
 1aa:	5d c0       	rjmp	.+186    	; 0x266 <main+0x142>
                {
                    alarmLed= OFF;                                                          //alarm Led auf 0 setzen
                    disorderLed = OUT_DISORDER_LED;                                         //disorder Led auf 1 setzen
                    timerFehlerfunktionOn = 0;                                              //timerFehlerfunktionOn auf 0 setzen
 1ac:	e1 2c       	mov	r14, r1
 1ae:	f1 2c       	mov	r15, r1
                }
                
                if (timerFehlerfunktionOff >= FEHLER_FUNKTION_OFF)                          //timerFehlerfunktionOff grösser gleichFEHLER_FUNKTION_OFF ?
                {
                    alarmLed= OFF;                                                          //alarm Led auf 0 setzen
                    disorderLed = OUT_DISORDER_LED;                                         //disorder Led auf 1 setzen
 1b0:	68 94       	set
 1b2:	88 24       	eor	r8, r8
 1b4:	82 f8       	bld	r8, 2
 1b6:	91 2c       	mov	r9, r1
        disorderQuitSchalter = posflanke & IM_MASKE_DISORDER_QUIT_SCHALTER;           //disorder quit schalter
        ozonSensor = switchReadAll() & IM_MASKE_OZON_SENSOR;                                //Ozon Sensor
        //Verarbeitung-------------------------------------------------------------
        if (powerSchalter)                                                                  //Power schalter ?
        {
            powerLed = OUT_POWER_LED;                                                       //Power Ledauf 1 setzen
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	56 c0       	rjmp	.+172    	; 0x26a <main+0x146>
            timerFehlerfunktionOn=0;                                                        //timerFehlerfunktionOn auf 0 setzen
            timerFehlerfunktionOff=0;                                                       //timerFehlerfunktionOff auf 0 setzen
            timerAlarmFehler=0;                                                             //timerAlarmFehler auf 0 setzen
        }
        //Ausgabe------------------------------------------------------------------
        if (blinken)                                                                        //blinken auf 1 setzen
 1be:	49 81       	ldd	r20, Y+1	; 0x01
 1c0:	5a 81       	ldd	r21, Y+2	; 0x02
 1c2:	45 2b       	or	r20, r21
 1c4:	91 f0       	breq	.+36     	; 0x1ea <main+0xc6>
        {
            if (timerBlinken>= ON_TIME)                                                     //timerBlinken grösser gleich ON_TIME ?
 1c6:	06 39       	cpi	r16, 0x96	; 150
 1c8:	11 05       	cpc	r17, r1
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <main+0xac>
            {
                alarmLed = OFF;                                                             //alarm Led 0 setzen
 1cc:	6c 82       	std	Y+4, r6	; 0x04
 1ce:	7d 82       	std	Y+5, r7	; 0x05
            }
            if (timerBlinken>= PERIODE)                                                     //timerBlinken grösser gleich PERIODE ?
 1d0:	08 3c       	cpi	r16, 0xC8	; 200
 1d2:	11 05       	cpc	r17, r1
 1d4:	88 f0       	brcs	.+34     	; 0x1f8 <main+0xd4>
 1d6:	80 e1       	ldi	r24, 0x10	; 16
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
            {
                alarmLed = OUT_ALARM_LED;                                                   //alarm Led 1 setzen
                timerBlinken = 0;                                                           //timerBlinken auf 0 setzen
 1de:	00 e0       	ldi	r16, 0x00	; 0
 1e0:	10 e0       	ldi	r17, 0x00	; 0
            {
                alarmLed = OFF;                                                             //alarm Led 0 setzen
            }
            if (timerBlinken>= PERIODE)                                                     //timerBlinken grösser gleich PERIODE ?
            {
                alarmLed = OUT_ALARM_LED;                                                   //alarm Led 1 setzen
 1e2:	52 e0       	ldi	r21, 0x02	; 2
 1e4:	5c 83       	std	Y+4, r21	; 0x04
 1e6:	1d 82       	std	Y+5, r1	; 0x05
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <main+0xdc>
        if (powerSchalter)                                                                  //Power schalter ?
        {
            powerLed = OUT_POWER_LED;                                                       //Power Ledauf 1 setzen
            if (ozonSensor)                                                                 //Ozon sensor ?
            {
                valveLed = OUT_VALVE_LED;                                                   //vave led auf 1 setzen
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
                timerBlinken = 0;                                                           //timerBlinken auf 0 setzen
            }
        }
        else
        {
            timerBlinken = PERIODE;                                                         //timerBlinken gleich PERIODE
 1f2:	08 ec       	ldi	r16, 0xC8	; 200
 1f4:	10 e0       	ldi	r17, 0x00	; 0
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <main+0xdc>
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
        }
        ledWriteAll(powerLed | alarmLed | disorderLed | remoteAlarmLed | valveLed);        //alle led's ausgeben
 200:	4c 81       	ldd	r20, Y+4	; 0x04
 202:	5d 81       	ldd	r21, Y+5	; 0x05
 204:	24 2b       	or	r18, r20
 206:	35 2b       	or	r19, r21
 208:	28 29       	or	r18, r8
 20a:	39 29       	or	r19, r9
 20c:	22 29       	or	r18, r2
 20e:	33 29       	or	r19, r3
 210:	82 2b       	or	r24, r18
 212:	93 2b       	or	r25, r19
 214:	49 d0       	rcall	.+146    	; 0x2a8 <ledWriteAll>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	8f e3       	ldi	r24, 0x3F	; 63
 218:	9c e9       	ldi	r25, 0x9C	; 156
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0xf6>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0xfc>
 220:	00 00       	nop
        //Warten------------------------------------------------------------------
        _delay_ms(PROGRAMTAKT_MS);                                                          //PROGRAMTAKT (10ms) abwarten
        timerFehlerfunktionOn = timerFehlerfunktionOn +PROGRAMTAKT_MS;                      // timerFehlerfunktionOn hochzählen (10ms)
 222:	9a e0       	ldi	r25, 0x0A	; 10
 224:	e9 0e       	add	r14, r25
 226:	f1 1c       	adc	r15, r1
        timerFehlerfunktionOff = timerFehlerfunktionOff +PROGRAMTAKT_MS;                    //timerFehlerfunktionOff hochzählen (10ms)
 228:	4a e0       	ldi	r20, 0x0A	; 10
 22a:	c4 0e       	add	r12, r20
 22c:	d1 1c       	adc	r13, r1
        timerAlarmFehler = timerAlarmFehler +PROGRAMTAKT_MS;                                //timerAlarmFehler hochzählen (10ms)
 22e:	5a e0       	ldi	r21, 0x0A	; 10
 230:	a5 0e       	add	r10, r21
 232:	b1 1c       	adc	r11, r1
        timerBlinken = timerBlinken + PROGRAMTAKT_MS;                                       //timerBlinken hochzählen (10ms)
 234:	06 5f       	subi	r16, 0xF6	; 246
 236:	1f 4f       	sbci	r17, 0xFF	; 255
    //Unendlichschlaufe                                                                     //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        altTaster =neuTaster;
        neuTaster = buttonReadAllPL();
 238:	5b 82       	std	Y+3, r5	; 0x03
        _delay_ms(PROGRAMTAKT_MS);                                                          //PROGRAMTAKT (10ms) abwarten
        timerFehlerfunktionOn = timerFehlerfunktionOn +PROGRAMTAKT_MS;                      // timerFehlerfunktionOn hochzählen (10ms)
        timerFehlerfunktionOff = timerFehlerfunktionOff +PROGRAMTAKT_MS;                    //timerFehlerfunktionOff hochzählen (10ms)
        timerAlarmFehler = timerAlarmFehler +PROGRAMTAKT_MS;                                //timerAlarmFehler hochzählen (10ms)
        timerBlinken = timerBlinken + PROGRAMTAKT_MS;                                       //timerBlinken hochzählen (10ms)
    }
 23a:	90 cf       	rjmp	.-224    	; 0x15c <main+0x38>
    uint8_t alarmQuitSchalter=0;
    uint8_t disorderQuitSchalter=0;                                                         //Variabeln auf 0 setzen
    uint8_t ozonSensor=0;
    
    uint8_t altTaster=0;
    uint8_t neuTaster=0;
 23c:	c1 2c       	mov	r12, r1
 23e:	d1 2c       	mov	r13, r1
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	1a 82       	std	Y+2, r1	; 0x02
 246:	86 2c       	mov	r8, r6
 248:	97 2c       	mov	r9, r7
 24a:	bd cf       	rjmp	.-134    	; 0x1c6 <main+0xa2>
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
            blinken = 0;                                                                    //blinken auf 0 setzen
            timerFehlerfunktionOn=0;                                                        //timerFehlerfunktionOn auf 0 setzen
            timerFehlerfunktionOff=0;                                                       //timerFehlerfunktionOff auf 0 setzen
            timerAlarmFehler=0;                                                             //timerAlarmFehler auf 0 setzen
 24c:	a1 2c       	mov	r10, r1
 24e:	b1 2c       	mov	r11, r1
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
            blinken = 0;                                                                    //blinken auf 0 setzen
            timerFehlerfunktionOn=0;                                                        //timerFehlerfunktionOn auf 0 setzen
            timerFehlerfunktionOff=0;                                                       //timerFehlerfunktionOff auf 0 setzen
 250:	c1 2c       	mov	r12, r1
 252:	d1 2c       	mov	r13, r1
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
            blinken = 0;                                                                    //blinken auf 0 setzen
            timerFehlerfunktionOn=0;                                                        //timerFehlerfunktionOn auf 0 setzen
 254:	e1 2c       	mov	r14, r1
 256:	f1 2c       	mov	r15, r1
        else
        {
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
 258:	26 2c       	mov	r2, r6
 25a:	37 2c       	mov	r3, r7
        }
        else
        {
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
 25c:	86 2c       	mov	r8, r6
 25e:	97 2c       	mov	r9, r7
                }
            }
        }
        else
        {
            powerLed= OFF;                                                                  //power Led auf 0 setzen
 260:	26 2d       	mov	r18, r6
 262:	37 2d       	mov	r19, r7
 264:	02 c0       	rjmp	.+4      	; 0x26a <main+0x146>
        disorderQuitSchalter = posflanke & IM_MASKE_DISORDER_QUIT_SCHALTER;           //disorder quit schalter
        ozonSensor = switchReadAll() & IM_MASKE_OZON_SENSOR;                                //Ozon Sensor
        //Verarbeitung-------------------------------------------------------------
        if (powerSchalter)                                                                  //Power schalter ?
        {
            powerLed = OUT_POWER_LED;                                                       //Power Ledauf 1 setzen
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	69 82       	std	Y+1, r6	; 0x01
 26c:	7a 82       	std	Y+2, r7	; 0x02
 26e:	86 2d       	mov	r24, r6
 270:	97 2d       	mov	r25, r7
                timerBlinken = 0;                                                           //timerBlinken auf 0 setzen
            }
        }
        else
        {
            timerBlinken = PERIODE;                                                         //timerBlinken gleich PERIODE
 272:	08 ec       	ldi	r16, 0xC8	; 200
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	6c 82       	std	Y+4, r6	; 0x04
 278:	7d 82       	std	Y+5, r7	; 0x05
 27a:	c2 cf       	rjmp	.-124    	; 0x200 <main+0xdc>
                if (alarmQuitSchalter)                                                      //alarm quit schalter ?
                {
                    blinken = 0;                                                            //blinken auf 0 setzen
                    alarmLed= OFF;                                                          //alarm led auf 0 setzen
                    timerFehlerfunktionOn = 0;                                              //timerFehlerfunktionOn auf 0 setzen
                    timerAlarmFehler = 0;                                                   //timerAlarmFehler auf 0 setzen
 27c:	a1 2c       	mov	r10, r1
 27e:	b1 2c       	mov	r11, r1
                valveLed = OUT_VALVE_LED;                                                   //vave led auf 1 setzen
                if (alarmQuitSchalter)                                                      //alarm quit schalter ?
                {
                    blinken = 0;                                                            //blinken auf 0 setzen
                    alarmLed= OFF;                                                          //alarm led auf 0 setzen
                    timerFehlerfunktionOn = 0;                                              //timerFehlerfunktionOn auf 0 setzen
 280:	e1 2c       	mov	r14, r1
 282:	f1 2c       	mov	r15, r1
        if (powerSchalter)                                                                  //Power schalter ?
        {
            powerLed = OUT_POWER_LED;                                                       //Power Ledauf 1 setzen
            if (ozonSensor)                                                                 //Ozon sensor ?
            {
                valveLed = OUT_VALVE_LED;                                                   //vave led auf 1 setzen
 284:	80 e1       	ldi	r24, 0x10	; 16
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	06 c0       	rjmp	.+12     	; 0x296 <main+0x172>
                valveLed = OFF;                                                             //valve Led auf 0 setzen
                if (disorderQuitSchalter)                                                   //disorder Quit Schalter ?
                {
                    
                    disorderLed= OFF;                                                       //disorder Led auf 1 setzen
                    timerFehlerfunktionOff = 0;                                             //timerFehlerfunktionOff auf 0 setzen
 28a:	c1 2c       	mov	r12, r1
 28c:	d1 2c       	mov	r13, r1
            }
            else
            {
                alarmLed= OFF;                                                              //alarm led auf 0 setzen
                blinken = 0;                                                                //blinken auf 0 setzen
                valveLed = OFF;                                                             //valve Led auf 0 setzen
 28e:	86 2d       	mov	r24, r6
 290:	97 2d       	mov	r25, r7
                if (disorderQuitSchalter)                                                   //disorder Quit Schalter ?
                {
                    
                    disorderLed= OFF;                                                       //disorder Led auf 1 setzen
 292:	86 2c       	mov	r8, r6
 294:	97 2c       	mov	r9, r7
                timerBlinken = 0;                                                           //timerBlinken auf 0 setzen
            }
        }
        else
        {
            timerBlinken = PERIODE;                                                         //timerBlinken gleich PERIODE
 296:	69 82       	std	Y+1, r6	; 0x01
 298:	7a 82       	std	Y+2, r7	; 0x02
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	08 ec       	ldi	r16, 0xC8	; 200
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	6c 82       	std	Y+4, r6	; 0x04
 2a4:	7d 82       	std	Y+5, r7	; 0x05
 2a6:	ac cf       	rjmp	.-168    	; 0x200 <main+0xdc>

000002a8 <ledWriteAll>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 2a8:	82 b9       	out	0x02, r24	; 2
 2aa:	95 b9       	out	0x05, r25	; 5
 2ac:	08 95       	ret

000002ae <switchReadAll>:
 2ae:	86 b1       	in	r24, 0x06	; 6
 2b0:	08 95       	ret

000002b2 <buttonReadAllPL>:
 2b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 2b6:	08 95       	ret

000002b8 <startSystemTimeMs>:
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	84 bd       	out	0x24, r24	; 36
 2bc:	8b e0       	ldi	r24, 0x0B	; 11
 2be:	85 bd       	out	0x25, r24	; 37
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 2c6:	89 ef       	ldi	r24, 0xF9	; 249
 2c8:	87 bd       	out	0x27, r24	; 39
 2ca:	08 95       	ret

000002cc <initAdc>:
 2cc:	11 ba       	out	0x11, r1	; 17
 2ce:	10 ba       	out	0x10, r1	; 16
 2d0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 2d4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 2d8:	80 e4       	ldi	r24, 0x40	; 64
 2da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 2de:	8f e0       	ldi	r24, 0x0F	; 15
 2e0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 2ea:	ea e7       	ldi	r30, 0x7A	; 122
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	87 ea       	ldi	r24, 0xA7	; 167
 2f0:	80 83       	st	Z, r24
 2f2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 2f6:	80 81       	ld	r24, Z
 2f8:	80 64       	ori	r24, 0x40	; 64
 2fa:	80 83       	st	Z, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	84 ff       	sbrs	r24, 4
 300:	fd cf       	rjmp	.-6      	; 0x2fc <initAdc+0x30>
 302:	ea e7       	ldi	r30, 0x7A	; 122
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	8f 7e       	andi	r24, 0xEF	; 239
 30a:	80 83       	st	Z, r24
 30c:	08 95       	ret

0000030e <rgbWrite>:
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	33 e0       	ldi	r19, 0x03	; 3
 312:	f9 01       	movw	r30, r18
 314:	e8 1b       	sub	r30, r24
 316:	f9 0b       	sbc	r31, r25
 318:	c9 01       	movw	r24, r18
 31a:	86 1b       	sub	r24, r22
 31c:	97 0b       	sbc	r25, r23
 31e:	24 1b       	sub	r18, r20
 320:	35 0b       	sbc	r19, r21
 322:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 326:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 32a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 32e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 332:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 336:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 33a:	08 95       	ret

0000033c <initRgb>:
 33c:	8e ef       	ldi	r24, 0xFE	; 254
 33e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 342:	8b e1       	ldi	r24, 0x1B	; 27
 344:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	d6 cf       	rjmp	.-84     	; 0x30e <rgbWrite>
 362:	08 95       	ret

00000364 <lcdSid>:
 364:	88 23       	and	r24, r24
 366:	11 f0       	breq	.+4      	; 0x36c <lcdSid+0x8>
 368:	a0 9a       	sbi	0x14, 0	; 20
 36a:	08 95       	ret
 36c:	a0 98       	cbi	0x14, 0	; 20
 36e:	08 95       	ret

00000370 <lcdSclk>:
 370:	88 23       	and	r24, r24
 372:	11 f0       	breq	.+4      	; 0x378 <lcdSclk+0x8>
 374:	a1 9a       	sbi	0x14, 1	; 20
 376:	08 95       	ret
 378:	a1 98       	cbi	0x14, 1	; 20
 37a:	08 95       	ret

0000037c <lcdLight>:
 37c:	81 11       	cpse	r24, r1
 37e:	04 c0       	rjmp	.+8      	; 0x388 <lcdLight+0xc>
 380:	84 b5       	in	r24, 0x24	; 36
 382:	8f 7d       	andi	r24, 0xDF	; 223
 384:	84 bd       	out	0x24, r24	; 36
 386:	08 95       	ret
 388:	94 b5       	in	r25, 0x24	; 36
 38a:	90 62       	ori	r25, 0x20	; 32
 38c:	94 bd       	out	0x24, r25	; 36
 38e:	88 bd       	out	0x28, r24	; 40
 390:	08 95       	ret

00000392 <writeLcdF>:
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	7c 01       	movw	r14, r24
 3a0:	eb 01       	movw	r28, r22
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	df df       	rcall	.-66     	; 0x364 <lcdSid>
 3a6:	05 e0       	ldi	r16, 0x05	; 5
 3a8:	10 e0       	ldi	r17, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	e1 df       	rcall	.-62     	; 0x370 <lcdSclk>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	df df       	rcall	.-66     	; 0x370 <lcdSclk>
 3b2:	01 50       	subi	r16, 0x01	; 1
 3b4:	11 09       	sbc	r17, r1
 3b6:	c9 f7       	brne	.-14     	; 0x3aa <writeLcdF+0x18>
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	d4 df       	rcall	.-88     	; 0x364 <lcdSid>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	d8 df       	rcall	.-80     	; 0x370 <lcdSclk>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	d6 df       	rcall	.-84     	; 0x370 <lcdSclk>
 3c4:	83 e4       	ldi	r24, 0x43	; 67
 3c6:	e8 16       	cp	r14, r24
 3c8:	f1 04       	cpc	r15, r1
 3ca:	19 f4       	brne	.+6      	; 0x3d2 <writeLcdF+0x40>
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	ca df       	rcall	.-108    	; 0x364 <lcdSid>
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <writeLcdF+0x44>
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	c7 df       	rcall	.-114    	; 0x364 <lcdSid>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	cb df       	rcall	.-106    	; 0x370 <lcdSclk>
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	c9 df       	rcall	.-110    	; 0x370 <lcdSclk>
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	c1 df       	rcall	.-126    	; 0x364 <lcdSid>
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	c5 df       	rcall	.-118    	; 0x370 <lcdSclk>
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	c3 df       	rcall	.-122    	; 0x370 <lcdSclk>
 3ea:	04 e0       	ldi	r16, 0x04	; 4
 3ec:	10 e0       	ldi	r17, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	bf df       	rcall	.-130    	; 0x370 <lcdSclk>
 3f2:	c0 ff       	sbrs	r28, 0
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <writeLcdF+0x6a>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	b5 df       	rcall	.-150    	; 0x364 <lcdSid>
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	b2 df       	rcall	.-156    	; 0x364 <lcdSid>
 400:	d6 95       	lsr	r29
 402:	c7 95       	ror	r28
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	b4 df       	rcall	.-152    	; 0x370 <lcdSclk>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	b2 df       	rcall	.-156    	; 0x370 <lcdSclk>
 40c:	01 50       	subi	r16, 0x01	; 1
 40e:	11 09       	sbc	r17, r1
 410:	71 f7       	brne	.-36     	; 0x3ee <writeLcdF+0x5c>
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	a7 df       	rcall	.-178    	; 0x364 <lcdSid>
 416:	04 e0       	ldi	r16, 0x04	; 4
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	a9 df       	rcall	.-174    	; 0x370 <lcdSclk>
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	a7 df       	rcall	.-178    	; 0x370 <lcdSclk>
 422:	01 50       	subi	r16, 0x01	; 1
 424:	11 09       	sbc	r17, r1
 426:	c9 f7       	brne	.-14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 428:	04 e0       	ldi	r16, 0x04	; 4
 42a:	10 e0       	ldi	r17, 0x00	; 0
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	a0 df       	rcall	.-192    	; 0x370 <lcdSclk>
 430:	c0 ff       	sbrs	r28, 0
 432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	96 df       	rcall	.-212    	; 0x364 <lcdSid>
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	93 df       	rcall	.-218    	; 0x364 <lcdSid>
 43e:	d6 95       	lsr	r29
 440:	c7 95       	ror	r28
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	95 df       	rcall	.-214    	; 0x370 <lcdSclk>
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	93 df       	rcall	.-218    	; 0x370 <lcdSclk>
 44a:	01 50       	subi	r16, 0x01	; 1
 44c:	11 09       	sbc	r17, r1
 44e:	71 f7       	brne	.-36     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	88 df       	rcall	.-240    	; 0x364 <lcdSid>
 454:	c4 e0       	ldi	r28, 0x04	; 4
 456:	d0 e0       	ldi	r29, 0x00	; 0
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	8a df       	rcall	.-236    	; 0x370 <lcdSclk>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	88 df       	rcall	.-240    	; 0x370 <lcdSclk>
 460:	21 97       	sbiw	r28, 0x01	; 1
 462:	d1 f7       	brne	.-12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	7e df       	rcall	.-260    	; 0x364 <lcdSid>
 468:	87 ec       	ldi	r24, 0xC7	; 199
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 472:	00 00       	nop
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	08 95       	ret

00000482 <lcdWriteText>:
 482:	1f 93       	push	r17
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	65 97       	sbiw	r28, 0x15	; 21
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	9e 01       	movw	r18, r28
 49a:	20 5e       	subi	r18, 0xE0	; 224
 49c:	3f 4f       	sbci	r19, 0xFF	; 255
 49e:	4e 8d       	ldd	r20, Y+30	; 0x1e
 4a0:	5f 8d       	ldd	r21, Y+31	; 0x1f
 4a2:	65 e1       	ldi	r22, 0x15	; 21
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	ce 01       	movw	r24, r28
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	3a d2       	rcall	.+1140   	; 0x920 <vsnprintf>
 4ac:	6d 8d       	ldd	r22, Y+29	; 0x1d
 4ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4b0:	90 e2       	ldi	r25, 0x20	; 32
 4b2:	89 9f       	mul	r24, r25
 4b4:	60 0d       	add	r22, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	60 68       	ori	r22, 0x80	; 128
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	83 e4       	ldi	r24, 0x43	; 67
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	68 df       	rcall	.-304    	; 0x392 <writeLcdF>
 4c2:	69 81       	ldd	r22, Y+1	; 0x01
 4c4:	66 23       	and	r22, r22
 4c6:	79 f0       	breq	.+30     	; 0x4e6 <lcdWriteText+0x64>
 4c8:	10 e0       	ldi	r17, 0x00	; 0
 4ca:	1f 5f       	subi	r17, 0xFF	; 255
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	84 e4       	ldi	r24, 0x44	; 68
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	5f df       	rcall	.-322    	; 0x392 <writeLcdF>
 4d4:	e1 e0       	ldi	r30, 0x01	; 1
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	ec 0f       	add	r30, r28
 4da:	fd 1f       	adc	r31, r29
 4dc:	e1 0f       	add	r30, r17
 4de:	f1 1d       	adc	r31, r1
 4e0:	60 81       	ld	r22, Z
 4e2:	61 11       	cpse	r22, r1
 4e4:	f2 cf       	rjmp	.-28     	; 0x4ca <lcdWriteText+0x48>
 4e6:	65 96       	adiw	r28, 0x15	; 21
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <lcdClear>:
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	83 e4       	ldi	r24, 0x43	; 67
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	47 df       	rcall	.-370    	; 0x392 <writeLcdF>
 504:	8f e3       	ldi	r24, 0x3F	; 63
 506:	9f e1       	ldi	r25, 0x1F	; 31
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <lcdClear+0xe>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <lcdClear+0x14>
 50e:	00 00       	nop
 510:	80 e3       	ldi	r24, 0x30	; 48
 512:	92 e0       	ldi	r25, 0x02	; 2
 514:	9f 93       	push	r25
 516:	8f 93       	push	r24
 518:	1f 92       	push	r1
 51a:	1f 92       	push	r1
 51c:	b2 df       	rcall	.-156    	; 0x482 <lcdWriteText>
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	08 95       	ret

00000528 <initLcd>:
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	22 df       	rcall	.-444    	; 0x370 <lcdSclk>
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	1a df       	rcall	.-460    	; 0x364 <lcdSid>
 530:	64 e3       	ldi	r22, 0x34	; 52
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	83 e4       	ldi	r24, 0x43	; 67
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	2c df       	rcall	.-424    	; 0x392 <writeLcdF>
 53a:	69 e0       	ldi	r22, 0x09	; 9
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	83 e4       	ldi	r24, 0x43	; 67
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	27 df       	rcall	.-434    	; 0x392 <writeLcdF>
 544:	60 e3       	ldi	r22, 0x30	; 48
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	83 e4       	ldi	r24, 0x43	; 67
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	22 df       	rcall	.-444    	; 0x392 <writeLcdF>
 54e:	6c e0       	ldi	r22, 0x0C	; 12
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	83 e4       	ldi	r24, 0x43	; 67
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	1d df       	rcall	.-454    	; 0x392 <writeLcdF>
 558:	d0 df       	rcall	.-96     	; 0x4fa <lcdClear>
 55a:	67 e0       	ldi	r22, 0x07	; 7
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	83 e4       	ldi	r24, 0x43	; 67
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	17 df       	rcall	.-466    	; 0x392 <writeLcdF>
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0a cf       	rjmp	.-492    	; 0x37c <lcdLight>
 568:	08 95       	ret

0000056a <initBoard>:
 56a:	4f 92       	push	r4
 56c:	5f 92       	push	r5
 56e:	6f 92       	push	r6
 570:	7f 92       	push	r7
 572:	8f 92       	push	r8
 574:	9f 92       	push	r9
 576:	af 92       	push	r10
 578:	bf 92       	push	r11
 57a:	cf 92       	push	r12
 57c:	df 92       	push	r13
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	c8 2f       	mov	r28, r24
 58c:	85 b7       	in	r24, 0x35	; 53
 58e:	85 bf       	out	0x35, r24	; 53
 590:	12 b8       	out	0x02, r1	; 2
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	81 b9       	out	0x01, r24	; 1
 596:	15 b8       	out	0x05, r1	; 5
 598:	84 b9       	out	0x04, r24	; 4
 59a:	88 b9       	out	0x08, r24	; 8
 59c:	17 b8       	out	0x07, r1	; 7
 59e:	8b b9       	out	0x0b, r24	; 11
 5a0:	1a b8       	out	0x0a, r1	; 10
 5a2:	8e b9       	out	0x0e, r24	; 14
 5a4:	1d b8       	out	0x0d, r1	; 13
 5a6:	72 98       	cbi	0x0e, 2	; 14
 5a8:	11 ba       	out	0x11, r1	; 17
 5aa:	10 ba       	out	0x10, r1	; 16
 5ac:	94 e0       	ldi	r25, 0x04	; 4
 5ae:	94 bb       	out	0x14, r25	; 20
 5b0:	93 b3       	in	r25, 0x13	; 19
 5b2:	93 60       	ori	r25, 0x03	; 3
 5b4:	93 bb       	out	0x13, r25	; 19
 5b6:	9d 9a       	sbi	0x13, 5	; 19
 5b8:	97 ec       	ldi	r25, 0xC7	; 199
 5ba:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 5be:	98 e3       	ldi	r25, 0x38	; 56
 5c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 5c4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 5c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 5cc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 5d0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 5d4:	8c e3       	ldi	r24, 0x3C	; 60
 5d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 5da:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 5de:	78 94       	sei
 5e0:	6b de       	rcall	.-810    	; 0x2b8 <startSystemTimeMs>
 5e2:	a2 df       	rcall	.-188    	; 0x528 <initLcd>
 5e4:	73 de       	rcall	.-794    	; 0x2cc <initAdc>
 5e6:	aa de       	rcall	.-684    	; 0x33c <initRgb>
 5e8:	cc 23       	and	r28, r28
 5ea:	09 f4       	brne	.+2      	; 0x5ee <initBoard+0x84>
 5ec:	b8 c0       	rjmp	.+368    	; 0x75e <initBoard+0x1f4>
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	c5 de       	rcall	.-630    	; 0x37c <lcdLight>
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	6f ef       	ldi	r22, 0xFF	; 255
 5f8:	73 e0       	ldi	r23, 0x03	; 3
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	87 de       	rcall	.-754    	; 0x30e <rgbWrite>
 600:	8d e1       	ldi	r24, 0x1D	; 29
 602:	92 e0       	ldi	r25, 0x02	; 2
 604:	9f 93       	push	r25
 606:	8f 93       	push	r24
 608:	1f 92       	push	r1
 60a:	1f 92       	push	r1
 60c:	3a df       	rcall	.-396    	; 0x482 <lcdWriteText>
 60e:	82 e3       	ldi	r24, 0x32	; 50
 610:	92 e0       	ldi	r25, 0x02	; 2
 612:	9f 93       	push	r25
 614:	8f 93       	push	r24
 616:	1f 92       	push	r1
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	8f 93       	push	r24
 61c:	32 df       	rcall	.-412    	; 0x482 <lcdWriteText>
 61e:	88 e0       	ldi	r24, 0x08	; 8
 620:	92 e0       	ldi	r25, 0x02	; 2
 622:	9f 93       	push	r25
 624:	8f 93       	push	r24
 626:	1f 92       	push	r1
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	8f 93       	push	r24
 62c:	2a df       	rcall	.-428    	; 0x482 <lcdWriteText>
 62e:	87 e4       	ldi	r24, 0x47	; 71
 630:	92 e0       	ldi	r25, 0x02	; 2
 632:	9f 93       	push	r25
 634:	8f 93       	push	r24
 636:	1f 92       	push	r1
 638:	83 e0       	ldi	r24, 0x03	; 3
 63a:	8f 93       	push	r24
 63c:	22 df       	rcall	.-444    	; 0x482 <lcdWriteText>
 63e:	8d b7       	in	r24, 0x3d	; 61
 640:	9e b7       	in	r25, 0x3e	; 62
 642:	40 96       	adiw	r24, 0x10	; 16
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	9e bf       	out	0x3e, r25	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	8d bf       	out	0x3d, r24	; 61
 64e:	88 24       	eor	r8, r8
 650:	83 94       	inc	r8
 652:	c0 e0       	ldi	r28, 0x00	; 0
 654:	71 2c       	mov	r7, r1
 656:	99 24       	eor	r9, r9
 658:	93 94       	inc	r9
 65a:	d0 e0       	ldi	r29, 0x00	; 0
 65c:	cc 24       	eor	r12, r12
 65e:	c3 94       	inc	r12
 660:	d1 2c       	mov	r13, r1
 662:	e1 2c       	mov	r14, r1
 664:	68 94       	set
 666:	ff 24       	eor	r15, r15
 668:	f7 f8       	bld	r15, 7
 66a:	66 24       	eor	r6, r6
 66c:	63 94       	inc	r6
 66e:	51 2c       	mov	r5, r1
 670:	09 e0       	ldi	r16, 0x09	; 9
 672:	11 e0       	ldi	r17, 0x01	; 1
 674:	0f 2e       	mov	r0, r31
 676:	fc e5       	ldi	r31, 0x5C	; 92
 678:	af 2e       	mov	r10, r31
 67a:	f2 e0       	ldi	r31, 0x02	; 2
 67c:	bf 2e       	mov	r11, r31
 67e:	f0 2d       	mov	r31, r0
 680:	0f 2e       	mov	r0, r31
 682:	f3 e0       	ldi	r31, 0x03	; 3
 684:	4f 2e       	mov	r4, r31
 686:	f0 2d       	mov	r31, r0
 688:	99 20       	and	r9, r9
 68a:	49 f0       	breq	.+18     	; 0x69e <initBoard+0x134>
 68c:	c7 01       	movw	r24, r14
 68e:	0d 2e       	mov	r0, r29
 690:	02 c0       	rjmp	.+4      	; 0x696 <initBoard+0x12c>
 692:	96 95       	lsr	r25
 694:	87 95       	ror	r24
 696:	0a 94       	dec	r0
 698:	e2 f7       	brpl	.-8      	; 0x692 <initBoard+0x128>
 69a:	06 de       	rcall	.-1012   	; 0x2a8 <ledWriteAll>
 69c:	08 c0       	rjmp	.+16     	; 0x6ae <initBoard+0x144>
 69e:	c6 01       	movw	r24, r12
 6a0:	0d 2e       	mov	r0, r29
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <initBoard+0x13e>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	0a 94       	dec	r0
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <initBoard+0x13a>
 6ac:	fd dd       	rcall	.-1030   	; 0x2a8 <ledWriteAll>
 6ae:	df 5f       	subi	r29, 0xFF	; 255
 6b0:	d1 31       	cpi	r29, 0x11	; 17
 6b2:	28 f0       	brcs	.+10     	; 0x6be <initBoard+0x154>
 6b4:	86 2d       	mov	r24, r6
 6b6:	91 10       	cpse	r9, r1
 6b8:	85 2d       	mov	r24, r5
 6ba:	98 2e       	mov	r9, r24
 6bc:	d0 e0       	ldi	r29, 0x00	; 0
 6be:	88 20       	and	r8, r8
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <initBoard+0x15c>
 6c2:	ce 5f       	subi	r28, 0xFE	; 254
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <initBoard+0x15e>
 6c6:	c2 50       	subi	r28, 0x02	; 2
 6c8:	8c 2f       	mov	r24, r28
 6ca:	58 de       	rcall	.-848    	; 0x37c <lcdLight>
 6cc:	ce 3f       	cpi	r28, 0xFE	; 254
 6ce:	21 f0       	breq	.+8      	; 0x6d8 <initBoard+0x16e>
 6d0:	c8 37       	cpi	r28, 0x78	; 120
 6d2:	19 f4       	brne	.+6      	; 0x6da <initBoard+0x170>
 6d4:	86 2c       	mov	r8, r6
 6d6:	01 c0       	rjmp	.+2      	; 0x6da <initBoard+0x170>
 6d8:	85 2c       	mov	r8, r5
 6da:	71 10       	cpse	r7, r1
 6dc:	3b c0       	rjmp	.+118    	; 0x754 <initBoard+0x1ea>
 6de:	f8 01       	movw	r30, r16
 6e0:	80 81       	ld	r24, Z
 6e2:	83 7c       	andi	r24, 0xC3	; 195
 6e4:	91 f0       	breq	.+36     	; 0x70a <initBoard+0x1a0>
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	50 e0       	ldi	r21, 0x00	; 0
 6ea:	66 e2       	ldi	r22, 0x26	; 38
 6ec:	72 e0       	ldi	r23, 0x02	; 2
 6ee:	8f ef       	ldi	r24, 0xFF	; 255
 6f0:	93 e0       	ldi	r25, 0x03	; 3
 6f2:	0d de       	rcall	.-998    	; 0x30e <rgbWrite>
 6f4:	bf 92       	push	r11
 6f6:	af 92       	push	r10
 6f8:	1f 92       	push	r1
 6fa:	4f 92       	push	r4
 6fc:	c2 de       	rcall	.-636    	; 0x482 <lcdWriteText>
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	0f 90       	pop	r0
 706:	76 2c       	mov	r7, r6
 708:	25 c0       	rjmp	.+74     	; 0x754 <initBoard+0x1ea>
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	9c e7       	ldi	r25, 0x7C	; 124
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <initBoard+0x1a4>
 712:	00 c0       	rjmp	.+0      	; 0x714 <initBoard+0x1aa>
 714:	00 00       	nop
 716:	b8 cf       	rjmp	.-144    	; 0x688 <initBoard+0x11e>
 718:	f0 de       	rcall	.-544    	; 0x4fa <lcdClear>
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	2f de       	rcall	.-930    	; 0x37c <lcdLight>
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	c2 dd       	rcall	.-1148   	; 0x2a8 <ledWriteAll>
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	50 e0       	ldi	r21, 0x00	; 0
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	ee dd       	rcall	.-1060   	; 0x30e <rgbWrite>
 732:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
 736:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
 73a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
 73e:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
 742:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
 746:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
 74a:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
 74e:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
 752:	05 c0       	rjmp	.+10     	; 0x75e <initBoard+0x1f4>
 754:	f8 01       	movw	r30, r16
 756:	80 81       	ld	r24, Z
 758:	83 7c       	andi	r24, 0xC3	; 195
 75a:	b9 f6       	brne	.-82     	; 0x70a <initBoard+0x1a0>
 75c:	dd cf       	rjmp	.-70     	; 0x718 <initBoard+0x1ae>
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	bf 90       	pop	r11
 770:	af 90       	pop	r10
 772:	9f 90       	pop	r9
 774:	8f 90       	pop	r8
 776:	7f 90       	pop	r7
 778:	6f 90       	pop	r6
 77a:	5f 90       	pop	r5
 77c:	4f 90       	pop	r4
 77e:	08 95       	ret

00000780 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	28 97       	sbiw	r28, 0x08	; 8
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 794:	88 e0       	ldi	r24, 0x08	; 8
 796:	e0 e0       	ldi	r30, 0x00	; 0
 798:	f2 e0       	ldi	r31, 0x02	; 2
 79a:	de 01       	movw	r26, r28
 79c:	11 96       	adiw	r26, 0x01	; 1
 79e:	01 90       	ld	r0, Z+
 7a0:	0d 92       	st	X+, r0
 7a2:	8a 95       	dec	r24
 7a4:	e1 f7       	brne	.-8      	; 0x79e <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 7a6:	e5 e0       	ldi	r30, 0x05	; 5
 7a8:	f1 e0       	ldi	r31, 0x01	; 1
 7aa:	80 81       	ld	r24, Z
 7ac:	8f 7b       	andi	r24, 0xBF	; 191
 7ae:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 7b0:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 7b4:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	8c 0f       	add	r24, r28
 7be:	9d 1f       	adc	r25, r29
 7c0:	e8 0f       	add	r30, r24
 7c2:	f9 1f       	adc	r31, r25
 7c4:	80 81       	ld	r24, Z
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
 7cc:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
 7d0:	a2 ef       	ldi	r26, 0xF2	; 242
 7d2:	b2 e0       	ldi	r27, 0x02	; 2
 7d4:	22 e8       	ldi	r18, 0x82	; 130
 7d6:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 7d8:	e5 e0       	ldi	r30, 0x05	; 5
 7da:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 7dc:	5e 91       	ld	r21, -X
 7de:	4e 91       	ld	r20, -X
 7e0:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
 7e4:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
 7e8:	84 23       	and	r24, r20
 7ea:	95 23       	and	r25, r21
 7ec:	89 2b       	or	r24, r25
 7ee:	21 f0       	breq	.+8      	; 0x7f8 <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 7f0:	80 81       	ld	r24, Z
 7f2:	80 62       	ori	r24, 0x20	; 32
 7f4:	80 83       	st	Z, r24
 7f6:	03 c0       	rjmp	.+6      	; 0x7fe <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 7f8:	80 81       	ld	r24, Z
 7fa:	8f 7d       	andi	r24, 0xDF	; 223
 7fc:	80 83       	st	Z, r24
        }
        CLOCK_1;
 7fe:	80 81       	ld	r24, Z
 800:	80 61       	ori	r24, 0x10	; 16
 802:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 804:	80 81       	ld	r24, Z
 806:	8f 7e       	andi	r24, 0xEF	; 239
 808:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 80a:	a2 17       	cp	r26, r18
 80c:	b3 07       	cpc	r27, r19
 80e:	31 f7       	brne	.-52     	; 0x7dc <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 810:	e5 e0       	ldi	r30, 0x05	; 5
 812:	f1 e0       	ldi	r31, 0x01	; 1
 814:	80 81       	ld	r24, Z
 816:	87 7f       	andi	r24, 0xF7	; 247
 818:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 81a:	80 81       	ld	r24, Z
 81c:	88 7f       	andi	r24, 0xF8	; 248
 81e:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 820:	90 81       	ld	r25, Z
 822:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 826:	89 2b       	or	r24, r25
 828:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 82a:	80 81       	ld	r24, Z
 82c:	80 64       	ori	r24, 0x40	; 64
 82e:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 830:	80 81       	ld	r24, Z
 832:	88 60       	ori	r24, 0x08	; 8
 834:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 836:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 83a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 83e:	87 30       	cpi	r24, 0x07	; 7
 840:	91 05       	cpc	r25, r1
 842:	30 f4       	brcc	.+12     	; 0x850 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
 844:	01 96       	adiw	r24, 0x01	; 1
 846:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2731+0x1>
 84a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2731>
 84e:	07 c0       	rjmp	.+14     	; 0x85e <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
 850:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2731+0x1>
 854:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2731>
        writeTextFinished = 1;
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
 85e:	28 96       	adiw	r28, 0x08	; 8
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	f8 94       	cli
 864:	de bf       	out	0x3e, r29	; 62
 866:	0f be       	out	0x3f, r0	; 63
 868:	cd bf       	out	0x3d, r28	; 61
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 870:	1f 92       	push	r1
 872:	0f 92       	push	r0
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	0f 92       	push	r0
 878:	11 24       	eor	r1, r1
 87a:	0b b6       	in	r0, 0x3b	; 59
 87c:	0f 92       	push	r0
 87e:	2f 93       	push	r18
 880:	3f 93       	push	r19
 882:	4f 93       	push	r20
 884:	5f 93       	push	r21
 886:	6f 93       	push	r22
 888:	7f 93       	push	r23
 88a:	8f 93       	push	r24
 88c:	9f 93       	push	r25
 88e:	af 93       	push	r26
 890:	bf 93       	push	r27
 892:	ef 93       	push	r30
 894:	ff 93       	push	r31
    systemTimeMs += 1;
 896:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
 89a:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
 89e:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
 8a2:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
 8a6:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
 8aa:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
 8ae:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
 8b2:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
 8b6:	a1 e0       	ldi	r26, 0x01	; 1
 8b8:	27 d0       	rcall	.+78     	; 0x908 <__adddi3_s8>
 8ba:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
 8be:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
 8c2:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
 8c6:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
 8ca:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
 8ce:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
 8d2:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
 8d6:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 8da:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
 8de:	81 11       	cpse	r24, r1
 8e0:	4f df       	rcall	.-354    	; 0x780 <matrixWriteNextLine>
}
 8e2:	ff 91       	pop	r31
 8e4:	ef 91       	pop	r30
 8e6:	bf 91       	pop	r27
 8e8:	af 91       	pop	r26
 8ea:	9f 91       	pop	r25
 8ec:	8f 91       	pop	r24
 8ee:	7f 91       	pop	r23
 8f0:	6f 91       	pop	r22
 8f2:	5f 91       	pop	r21
 8f4:	4f 91       	pop	r20
 8f6:	3f 91       	pop	r19
 8f8:	2f 91       	pop	r18
 8fa:	0f 90       	pop	r0
 8fc:	0b be       	out	0x3b, r0	; 59
 8fe:	0f 90       	pop	r0
 900:	0f be       	out	0x3f, r0	; 63
 902:	0f 90       	pop	r0
 904:	1f 90       	pop	r1
 906:	18 95       	reti

00000908 <__adddi3_s8>:
 908:	00 24       	eor	r0, r0
 90a:	a7 fd       	sbrc	r26, 7
 90c:	00 94       	com	r0
 90e:	2a 0f       	add	r18, r26
 910:	30 1d       	adc	r19, r0
 912:	40 1d       	adc	r20, r0
 914:	50 1d       	adc	r21, r0
 916:	60 1d       	adc	r22, r0
 918:	70 1d       	adc	r23, r0
 91a:	80 1d       	adc	r24, r0
 91c:	90 1d       	adc	r25, r0
 91e:	08 95       	ret

00000920 <vsnprintf>:
 920:	0f 93       	push	r16
 922:	1f 93       	push	r17
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	cd b7       	in	r28, 0x3d	; 61
 92a:	de b7       	in	r29, 0x3e	; 62
 92c:	2e 97       	sbiw	r28, 0x0e	; 14
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	f8 94       	cli
 932:	de bf       	out	0x3e, r29	; 62
 934:	0f be       	out	0x3f, r0	; 63
 936:	cd bf       	out	0x3d, r28	; 61
 938:	8c 01       	movw	r16, r24
 93a:	fa 01       	movw	r30, r20
 93c:	86 e0       	ldi	r24, 0x06	; 6
 93e:	8c 83       	std	Y+4, r24	; 0x04
 940:	1a 83       	std	Y+2, r17	; 0x02
 942:	09 83       	std	Y+1, r16	; 0x01
 944:	77 ff       	sbrs	r23, 7
 946:	02 c0       	rjmp	.+4      	; 0x94c <vsnprintf+0x2c>
 948:	60 e0       	ldi	r22, 0x00	; 0
 94a:	70 e8       	ldi	r23, 0x80	; 128
 94c:	cb 01       	movw	r24, r22
 94e:	01 97       	sbiw	r24, 0x01	; 1
 950:	9e 83       	std	Y+6, r25	; 0x06
 952:	8d 83       	std	Y+5, r24	; 0x05
 954:	a9 01       	movw	r20, r18
 956:	bf 01       	movw	r22, r30
 958:	ce 01       	movw	r24, r28
 95a:	01 96       	adiw	r24, 0x01	; 1
 95c:	19 d0       	rcall	.+50     	; 0x990 <vfprintf>
 95e:	4d 81       	ldd	r20, Y+5	; 0x05
 960:	5e 81       	ldd	r21, Y+6	; 0x06
 962:	57 fd       	sbrc	r21, 7
 964:	0a c0       	rjmp	.+20     	; 0x97a <vsnprintf+0x5a>
 966:	2f 81       	ldd	r18, Y+7	; 0x07
 968:	38 85       	ldd	r19, Y+8	; 0x08
 96a:	42 17       	cp	r20, r18
 96c:	53 07       	cpc	r21, r19
 96e:	0c f4       	brge	.+2      	; 0x972 <vsnprintf+0x52>
 970:	9a 01       	movw	r18, r20
 972:	f8 01       	movw	r30, r16
 974:	e2 0f       	add	r30, r18
 976:	f3 1f       	adc	r31, r19
 978:	10 82       	st	Z, r1
 97a:	2e 96       	adiw	r28, 0x0e	; 14
 97c:	0f b6       	in	r0, 0x3f	; 63
 97e:	f8 94       	cli
 980:	de bf       	out	0x3e, r29	; 62
 982:	0f be       	out	0x3f, r0	; 63
 984:	cd bf       	out	0x3d, r28	; 61
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	08 95       	ret

00000990 <vfprintf>:
 990:	2f 92       	push	r2
 992:	3f 92       	push	r3
 994:	4f 92       	push	r4
 996:	5f 92       	push	r5
 998:	6f 92       	push	r6
 99a:	7f 92       	push	r7
 99c:	8f 92       	push	r8
 99e:	9f 92       	push	r9
 9a0:	af 92       	push	r10
 9a2:	bf 92       	push	r11
 9a4:	cf 92       	push	r12
 9a6:	df 92       	push	r13
 9a8:	ef 92       	push	r14
 9aa:	ff 92       	push	r15
 9ac:	0f 93       	push	r16
 9ae:	1f 93       	push	r17
 9b0:	cf 93       	push	r28
 9b2:	df 93       	push	r29
 9b4:	cd b7       	in	r28, 0x3d	; 61
 9b6:	de b7       	in	r29, 0x3e	; 62
 9b8:	2b 97       	sbiw	r28, 0x0b	; 11
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	f8 94       	cli
 9be:	de bf       	out	0x3e, r29	; 62
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	cd bf       	out	0x3d, r28	; 61
 9c4:	6c 01       	movw	r12, r24
 9c6:	7b 01       	movw	r14, r22
 9c8:	8a 01       	movw	r16, r20
 9ca:	fc 01       	movw	r30, r24
 9cc:	17 82       	std	Z+7, r1	; 0x07
 9ce:	16 82       	std	Z+6, r1	; 0x06
 9d0:	83 81       	ldd	r24, Z+3	; 0x03
 9d2:	81 ff       	sbrs	r24, 1
 9d4:	bf c1       	rjmp	.+894    	; 0xd54 <vfprintf+0x3c4>
 9d6:	ce 01       	movw	r24, r28
 9d8:	01 96       	adiw	r24, 0x01	; 1
 9da:	3c 01       	movw	r6, r24
 9dc:	f6 01       	movw	r30, r12
 9de:	93 81       	ldd	r25, Z+3	; 0x03
 9e0:	f7 01       	movw	r30, r14
 9e2:	93 fd       	sbrc	r25, 3
 9e4:	85 91       	lpm	r24, Z+
 9e6:	93 ff       	sbrs	r25, 3
 9e8:	81 91       	ld	r24, Z+
 9ea:	7f 01       	movw	r14, r30
 9ec:	88 23       	and	r24, r24
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <vfprintf+0x62>
 9f0:	ad c1       	rjmp	.+858    	; 0xd4c <vfprintf+0x3bc>
 9f2:	85 32       	cpi	r24, 0x25	; 37
 9f4:	39 f4       	brne	.+14     	; 0xa04 <vfprintf+0x74>
 9f6:	93 fd       	sbrc	r25, 3
 9f8:	85 91       	lpm	r24, Z+
 9fa:	93 ff       	sbrs	r25, 3
 9fc:	81 91       	ld	r24, Z+
 9fe:	7f 01       	movw	r14, r30
 a00:	85 32       	cpi	r24, 0x25	; 37
 a02:	21 f4       	brne	.+8      	; 0xa0c <vfprintf+0x7c>
 a04:	b6 01       	movw	r22, r12
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	d6 d1       	rcall	.+940    	; 0xdb6 <fputc>
 a0a:	e8 cf       	rjmp	.-48     	; 0x9dc <vfprintf+0x4c>
 a0c:	91 2c       	mov	r9, r1
 a0e:	21 2c       	mov	r2, r1
 a10:	31 2c       	mov	r3, r1
 a12:	ff e1       	ldi	r31, 0x1F	; 31
 a14:	f3 15       	cp	r31, r3
 a16:	d8 f0       	brcs	.+54     	; 0xa4e <vfprintf+0xbe>
 a18:	8b 32       	cpi	r24, 0x2B	; 43
 a1a:	79 f0       	breq	.+30     	; 0xa3a <vfprintf+0xaa>
 a1c:	38 f4       	brcc	.+14     	; 0xa2c <vfprintf+0x9c>
 a1e:	80 32       	cpi	r24, 0x20	; 32
 a20:	79 f0       	breq	.+30     	; 0xa40 <vfprintf+0xb0>
 a22:	83 32       	cpi	r24, 0x23	; 35
 a24:	a1 f4       	brne	.+40     	; 0xa4e <vfprintf+0xbe>
 a26:	23 2d       	mov	r18, r3
 a28:	20 61       	ori	r18, 0x10	; 16
 a2a:	1d c0       	rjmp	.+58     	; 0xa66 <vfprintf+0xd6>
 a2c:	8d 32       	cpi	r24, 0x2D	; 45
 a2e:	61 f0       	breq	.+24     	; 0xa48 <vfprintf+0xb8>
 a30:	80 33       	cpi	r24, 0x30	; 48
 a32:	69 f4       	brne	.+26     	; 0xa4e <vfprintf+0xbe>
 a34:	23 2d       	mov	r18, r3
 a36:	21 60       	ori	r18, 0x01	; 1
 a38:	16 c0       	rjmp	.+44     	; 0xa66 <vfprintf+0xd6>
 a3a:	83 2d       	mov	r24, r3
 a3c:	82 60       	ori	r24, 0x02	; 2
 a3e:	38 2e       	mov	r3, r24
 a40:	e3 2d       	mov	r30, r3
 a42:	e4 60       	ori	r30, 0x04	; 4
 a44:	3e 2e       	mov	r3, r30
 a46:	2a c0       	rjmp	.+84     	; 0xa9c <vfprintf+0x10c>
 a48:	f3 2d       	mov	r31, r3
 a4a:	f8 60       	ori	r31, 0x08	; 8
 a4c:	1d c0       	rjmp	.+58     	; 0xa88 <vfprintf+0xf8>
 a4e:	37 fc       	sbrc	r3, 7
 a50:	2d c0       	rjmp	.+90     	; 0xaac <vfprintf+0x11c>
 a52:	20 ed       	ldi	r18, 0xD0	; 208
 a54:	28 0f       	add	r18, r24
 a56:	2a 30       	cpi	r18, 0x0A	; 10
 a58:	40 f0       	brcs	.+16     	; 0xa6a <vfprintf+0xda>
 a5a:	8e 32       	cpi	r24, 0x2E	; 46
 a5c:	b9 f4       	brne	.+46     	; 0xa8c <vfprintf+0xfc>
 a5e:	36 fc       	sbrc	r3, 6
 a60:	75 c1       	rjmp	.+746    	; 0xd4c <vfprintf+0x3bc>
 a62:	23 2d       	mov	r18, r3
 a64:	20 64       	ori	r18, 0x40	; 64
 a66:	32 2e       	mov	r3, r18
 a68:	19 c0       	rjmp	.+50     	; 0xa9c <vfprintf+0x10c>
 a6a:	36 fe       	sbrs	r3, 6
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <vfprintf+0xea>
 a6e:	8a e0       	ldi	r24, 0x0A	; 10
 a70:	98 9e       	mul	r9, r24
 a72:	20 0d       	add	r18, r0
 a74:	11 24       	eor	r1, r1
 a76:	92 2e       	mov	r9, r18
 a78:	11 c0       	rjmp	.+34     	; 0xa9c <vfprintf+0x10c>
 a7a:	ea e0       	ldi	r30, 0x0A	; 10
 a7c:	2e 9e       	mul	r2, r30
 a7e:	20 0d       	add	r18, r0
 a80:	11 24       	eor	r1, r1
 a82:	22 2e       	mov	r2, r18
 a84:	f3 2d       	mov	r31, r3
 a86:	f0 62       	ori	r31, 0x20	; 32
 a88:	3f 2e       	mov	r3, r31
 a8a:	08 c0       	rjmp	.+16     	; 0xa9c <vfprintf+0x10c>
 a8c:	8c 36       	cpi	r24, 0x6C	; 108
 a8e:	21 f4       	brne	.+8      	; 0xa98 <vfprintf+0x108>
 a90:	83 2d       	mov	r24, r3
 a92:	80 68       	ori	r24, 0x80	; 128
 a94:	38 2e       	mov	r3, r24
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <vfprintf+0x10c>
 a98:	88 36       	cpi	r24, 0x68	; 104
 a9a:	41 f4       	brne	.+16     	; 0xaac <vfprintf+0x11c>
 a9c:	f7 01       	movw	r30, r14
 a9e:	93 fd       	sbrc	r25, 3
 aa0:	85 91       	lpm	r24, Z+
 aa2:	93 ff       	sbrs	r25, 3
 aa4:	81 91       	ld	r24, Z+
 aa6:	7f 01       	movw	r14, r30
 aa8:	81 11       	cpse	r24, r1
 aaa:	b3 cf       	rjmp	.-154    	; 0xa12 <vfprintf+0x82>
 aac:	98 2f       	mov	r25, r24
 aae:	9f 7d       	andi	r25, 0xDF	; 223
 ab0:	95 54       	subi	r25, 0x45	; 69
 ab2:	93 30       	cpi	r25, 0x03	; 3
 ab4:	28 f4       	brcc	.+10     	; 0xac0 <vfprintf+0x130>
 ab6:	0c 5f       	subi	r16, 0xFC	; 252
 ab8:	1f 4f       	sbci	r17, 0xFF	; 255
 aba:	9f e3       	ldi	r25, 0x3F	; 63
 abc:	99 83       	std	Y+1, r25	; 0x01
 abe:	0d c0       	rjmp	.+26     	; 0xada <vfprintf+0x14a>
 ac0:	83 36       	cpi	r24, 0x63	; 99
 ac2:	31 f0       	breq	.+12     	; 0xad0 <vfprintf+0x140>
 ac4:	83 37       	cpi	r24, 0x73	; 115
 ac6:	71 f0       	breq	.+28     	; 0xae4 <vfprintf+0x154>
 ac8:	83 35       	cpi	r24, 0x53	; 83
 aca:	09 f0       	breq	.+2      	; 0xace <vfprintf+0x13e>
 acc:	55 c0       	rjmp	.+170    	; 0xb78 <vfprintf+0x1e8>
 ace:	20 c0       	rjmp	.+64     	; 0xb10 <vfprintf+0x180>
 ad0:	f8 01       	movw	r30, r16
 ad2:	80 81       	ld	r24, Z
 ad4:	89 83       	std	Y+1, r24	; 0x01
 ad6:	0e 5f       	subi	r16, 0xFE	; 254
 ad8:	1f 4f       	sbci	r17, 0xFF	; 255
 ada:	88 24       	eor	r8, r8
 adc:	83 94       	inc	r8
 ade:	91 2c       	mov	r9, r1
 ae0:	53 01       	movw	r10, r6
 ae2:	12 c0       	rjmp	.+36     	; 0xb08 <vfprintf+0x178>
 ae4:	28 01       	movw	r4, r16
 ae6:	f2 e0       	ldi	r31, 0x02	; 2
 ae8:	4f 0e       	add	r4, r31
 aea:	51 1c       	adc	r5, r1
 aec:	f8 01       	movw	r30, r16
 aee:	a0 80       	ld	r10, Z
 af0:	b1 80       	ldd	r11, Z+1	; 0x01
 af2:	36 fe       	sbrs	r3, 6
 af4:	03 c0       	rjmp	.+6      	; 0xafc <vfprintf+0x16c>
 af6:	69 2d       	mov	r22, r9
 af8:	70 e0       	ldi	r23, 0x00	; 0
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <vfprintf+0x170>
 afc:	6f ef       	ldi	r22, 0xFF	; 255
 afe:	7f ef       	ldi	r23, 0xFF	; 255
 b00:	c5 01       	movw	r24, r10
 b02:	4e d1       	rcall	.+668    	; 0xda0 <strnlen>
 b04:	4c 01       	movw	r8, r24
 b06:	82 01       	movw	r16, r4
 b08:	f3 2d       	mov	r31, r3
 b0a:	ff 77       	andi	r31, 0x7F	; 127
 b0c:	3f 2e       	mov	r3, r31
 b0e:	15 c0       	rjmp	.+42     	; 0xb3a <vfprintf+0x1aa>
 b10:	28 01       	movw	r4, r16
 b12:	22 e0       	ldi	r18, 0x02	; 2
 b14:	42 0e       	add	r4, r18
 b16:	51 1c       	adc	r5, r1
 b18:	f8 01       	movw	r30, r16
 b1a:	a0 80       	ld	r10, Z
 b1c:	b1 80       	ldd	r11, Z+1	; 0x01
 b1e:	36 fe       	sbrs	r3, 6
 b20:	03 c0       	rjmp	.+6      	; 0xb28 <vfprintf+0x198>
 b22:	69 2d       	mov	r22, r9
 b24:	70 e0       	ldi	r23, 0x00	; 0
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <vfprintf+0x19c>
 b28:	6f ef       	ldi	r22, 0xFF	; 255
 b2a:	7f ef       	ldi	r23, 0xFF	; 255
 b2c:	c5 01       	movw	r24, r10
 b2e:	2d d1       	rcall	.+602    	; 0xd8a <strnlen_P>
 b30:	4c 01       	movw	r8, r24
 b32:	f3 2d       	mov	r31, r3
 b34:	f0 68       	ori	r31, 0x80	; 128
 b36:	3f 2e       	mov	r3, r31
 b38:	82 01       	movw	r16, r4
 b3a:	33 fc       	sbrc	r3, 3
 b3c:	19 c0       	rjmp	.+50     	; 0xb70 <vfprintf+0x1e0>
 b3e:	82 2d       	mov	r24, r2
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	88 16       	cp	r8, r24
 b44:	99 06       	cpc	r9, r25
 b46:	a0 f4       	brcc	.+40     	; 0xb70 <vfprintf+0x1e0>
 b48:	b6 01       	movw	r22, r12
 b4a:	80 e2       	ldi	r24, 0x20	; 32
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	33 d1       	rcall	.+614    	; 0xdb6 <fputc>
 b50:	2a 94       	dec	r2
 b52:	f5 cf       	rjmp	.-22     	; 0xb3e <vfprintf+0x1ae>
 b54:	f5 01       	movw	r30, r10
 b56:	37 fc       	sbrc	r3, 7
 b58:	85 91       	lpm	r24, Z+
 b5a:	37 fe       	sbrs	r3, 7
 b5c:	81 91       	ld	r24, Z+
 b5e:	5f 01       	movw	r10, r30
 b60:	b6 01       	movw	r22, r12
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	28 d1       	rcall	.+592    	; 0xdb6 <fputc>
 b66:	21 10       	cpse	r2, r1
 b68:	2a 94       	dec	r2
 b6a:	21 e0       	ldi	r18, 0x01	; 1
 b6c:	82 1a       	sub	r8, r18
 b6e:	91 08       	sbc	r9, r1
 b70:	81 14       	cp	r8, r1
 b72:	91 04       	cpc	r9, r1
 b74:	79 f7       	brne	.-34     	; 0xb54 <vfprintf+0x1c4>
 b76:	e1 c0       	rjmp	.+450    	; 0xd3a <vfprintf+0x3aa>
 b78:	84 36       	cpi	r24, 0x64	; 100
 b7a:	11 f0       	breq	.+4      	; 0xb80 <vfprintf+0x1f0>
 b7c:	89 36       	cpi	r24, 0x69	; 105
 b7e:	39 f5       	brne	.+78     	; 0xbce <vfprintf+0x23e>
 b80:	f8 01       	movw	r30, r16
 b82:	37 fe       	sbrs	r3, 7
 b84:	07 c0       	rjmp	.+14     	; 0xb94 <vfprintf+0x204>
 b86:	60 81       	ld	r22, Z
 b88:	71 81       	ldd	r23, Z+1	; 0x01
 b8a:	82 81       	ldd	r24, Z+2	; 0x02
 b8c:	93 81       	ldd	r25, Z+3	; 0x03
 b8e:	0c 5f       	subi	r16, 0xFC	; 252
 b90:	1f 4f       	sbci	r17, 0xFF	; 255
 b92:	08 c0       	rjmp	.+16     	; 0xba4 <vfprintf+0x214>
 b94:	60 81       	ld	r22, Z
 b96:	71 81       	ldd	r23, Z+1	; 0x01
 b98:	07 2e       	mov	r0, r23
 b9a:	00 0c       	add	r0, r0
 b9c:	88 0b       	sbc	r24, r24
 b9e:	99 0b       	sbc	r25, r25
 ba0:	0e 5f       	subi	r16, 0xFE	; 254
 ba2:	1f 4f       	sbci	r17, 0xFF	; 255
 ba4:	f3 2d       	mov	r31, r3
 ba6:	ff 76       	andi	r31, 0x6F	; 111
 ba8:	3f 2e       	mov	r3, r31
 baa:	97 ff       	sbrs	r25, 7
 bac:	09 c0       	rjmp	.+18     	; 0xbc0 <vfprintf+0x230>
 bae:	90 95       	com	r25
 bb0:	80 95       	com	r24
 bb2:	70 95       	com	r23
 bb4:	61 95       	neg	r22
 bb6:	7f 4f       	sbci	r23, 0xFF	; 255
 bb8:	8f 4f       	sbci	r24, 0xFF	; 255
 bba:	9f 4f       	sbci	r25, 0xFF	; 255
 bbc:	f0 68       	ori	r31, 0x80	; 128
 bbe:	3f 2e       	mov	r3, r31
 bc0:	2a e0       	ldi	r18, 0x0A	; 10
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	a3 01       	movw	r20, r6
 bc6:	33 d1       	rcall	.+614    	; 0xe2e <__ultoa_invert>
 bc8:	88 2e       	mov	r8, r24
 bca:	86 18       	sub	r8, r6
 bcc:	44 c0       	rjmp	.+136    	; 0xc56 <vfprintf+0x2c6>
 bce:	85 37       	cpi	r24, 0x75	; 117
 bd0:	31 f4       	brne	.+12     	; 0xbde <vfprintf+0x24e>
 bd2:	23 2d       	mov	r18, r3
 bd4:	2f 7e       	andi	r18, 0xEF	; 239
 bd6:	b2 2e       	mov	r11, r18
 bd8:	2a e0       	ldi	r18, 0x0A	; 10
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	25 c0       	rjmp	.+74     	; 0xc28 <vfprintf+0x298>
 bde:	93 2d       	mov	r25, r3
 be0:	99 7f       	andi	r25, 0xF9	; 249
 be2:	b9 2e       	mov	r11, r25
 be4:	8f 36       	cpi	r24, 0x6F	; 111
 be6:	c1 f0       	breq	.+48     	; 0xc18 <vfprintf+0x288>
 be8:	18 f4       	brcc	.+6      	; 0xbf0 <vfprintf+0x260>
 bea:	88 35       	cpi	r24, 0x58	; 88
 bec:	79 f0       	breq	.+30     	; 0xc0c <vfprintf+0x27c>
 bee:	ae c0       	rjmp	.+348    	; 0xd4c <vfprintf+0x3bc>
 bf0:	80 37       	cpi	r24, 0x70	; 112
 bf2:	19 f0       	breq	.+6      	; 0xbfa <vfprintf+0x26a>
 bf4:	88 37       	cpi	r24, 0x78	; 120
 bf6:	21 f0       	breq	.+8      	; 0xc00 <vfprintf+0x270>
 bf8:	a9 c0       	rjmp	.+338    	; 0xd4c <vfprintf+0x3bc>
 bfa:	e9 2f       	mov	r30, r25
 bfc:	e0 61       	ori	r30, 0x10	; 16
 bfe:	be 2e       	mov	r11, r30
 c00:	b4 fe       	sbrs	r11, 4
 c02:	0d c0       	rjmp	.+26     	; 0xc1e <vfprintf+0x28e>
 c04:	fb 2d       	mov	r31, r11
 c06:	f4 60       	ori	r31, 0x04	; 4
 c08:	bf 2e       	mov	r11, r31
 c0a:	09 c0       	rjmp	.+18     	; 0xc1e <vfprintf+0x28e>
 c0c:	34 fe       	sbrs	r3, 4
 c0e:	0a c0       	rjmp	.+20     	; 0xc24 <vfprintf+0x294>
 c10:	29 2f       	mov	r18, r25
 c12:	26 60       	ori	r18, 0x06	; 6
 c14:	b2 2e       	mov	r11, r18
 c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0x294>
 c18:	28 e0       	ldi	r18, 0x08	; 8
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	05 c0       	rjmp	.+10     	; 0xc28 <vfprintf+0x298>
 c1e:	20 e1       	ldi	r18, 0x10	; 16
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <vfprintf+0x298>
 c24:	20 e1       	ldi	r18, 0x10	; 16
 c26:	32 e0       	ldi	r19, 0x02	; 2
 c28:	f8 01       	movw	r30, r16
 c2a:	b7 fe       	sbrs	r11, 7
 c2c:	07 c0       	rjmp	.+14     	; 0xc3c <vfprintf+0x2ac>
 c2e:	60 81       	ld	r22, Z
 c30:	71 81       	ldd	r23, Z+1	; 0x01
 c32:	82 81       	ldd	r24, Z+2	; 0x02
 c34:	93 81       	ldd	r25, Z+3	; 0x03
 c36:	0c 5f       	subi	r16, 0xFC	; 252
 c38:	1f 4f       	sbci	r17, 0xFF	; 255
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0x2b8>
 c3c:	60 81       	ld	r22, Z
 c3e:	71 81       	ldd	r23, Z+1	; 0x01
 c40:	80 e0       	ldi	r24, 0x00	; 0
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	0e 5f       	subi	r16, 0xFE	; 254
 c46:	1f 4f       	sbci	r17, 0xFF	; 255
 c48:	a3 01       	movw	r20, r6
 c4a:	f1 d0       	rcall	.+482    	; 0xe2e <__ultoa_invert>
 c4c:	88 2e       	mov	r8, r24
 c4e:	86 18       	sub	r8, r6
 c50:	fb 2d       	mov	r31, r11
 c52:	ff 77       	andi	r31, 0x7F	; 127
 c54:	3f 2e       	mov	r3, r31
 c56:	36 fe       	sbrs	r3, 6
 c58:	0d c0       	rjmp	.+26     	; 0xc74 <vfprintf+0x2e4>
 c5a:	23 2d       	mov	r18, r3
 c5c:	2e 7f       	andi	r18, 0xFE	; 254
 c5e:	a2 2e       	mov	r10, r18
 c60:	89 14       	cp	r8, r9
 c62:	58 f4       	brcc	.+22     	; 0xc7a <vfprintf+0x2ea>
 c64:	34 fe       	sbrs	r3, 4
 c66:	0b c0       	rjmp	.+22     	; 0xc7e <vfprintf+0x2ee>
 c68:	32 fc       	sbrc	r3, 2
 c6a:	09 c0       	rjmp	.+18     	; 0xc7e <vfprintf+0x2ee>
 c6c:	83 2d       	mov	r24, r3
 c6e:	8e 7e       	andi	r24, 0xEE	; 238
 c70:	a8 2e       	mov	r10, r24
 c72:	05 c0       	rjmp	.+10     	; 0xc7e <vfprintf+0x2ee>
 c74:	b8 2c       	mov	r11, r8
 c76:	a3 2c       	mov	r10, r3
 c78:	03 c0       	rjmp	.+6      	; 0xc80 <vfprintf+0x2f0>
 c7a:	b8 2c       	mov	r11, r8
 c7c:	01 c0       	rjmp	.+2      	; 0xc80 <vfprintf+0x2f0>
 c7e:	b9 2c       	mov	r11, r9
 c80:	a4 fe       	sbrs	r10, 4
 c82:	0f c0       	rjmp	.+30     	; 0xca2 <vfprintf+0x312>
 c84:	fe 01       	movw	r30, r28
 c86:	e8 0d       	add	r30, r8
 c88:	f1 1d       	adc	r31, r1
 c8a:	80 81       	ld	r24, Z
 c8c:	80 33       	cpi	r24, 0x30	; 48
 c8e:	21 f4       	brne	.+8      	; 0xc98 <vfprintf+0x308>
 c90:	9a 2d       	mov	r25, r10
 c92:	99 7e       	andi	r25, 0xE9	; 233
 c94:	a9 2e       	mov	r10, r25
 c96:	09 c0       	rjmp	.+18     	; 0xcaa <vfprintf+0x31a>
 c98:	a2 fe       	sbrs	r10, 2
 c9a:	06 c0       	rjmp	.+12     	; 0xca8 <vfprintf+0x318>
 c9c:	b3 94       	inc	r11
 c9e:	b3 94       	inc	r11
 ca0:	04 c0       	rjmp	.+8      	; 0xcaa <vfprintf+0x31a>
 ca2:	8a 2d       	mov	r24, r10
 ca4:	86 78       	andi	r24, 0x86	; 134
 ca6:	09 f0       	breq	.+2      	; 0xcaa <vfprintf+0x31a>
 ca8:	b3 94       	inc	r11
 caa:	a3 fc       	sbrc	r10, 3
 cac:	10 c0       	rjmp	.+32     	; 0xcce <vfprintf+0x33e>
 cae:	a0 fe       	sbrs	r10, 0
 cb0:	06 c0       	rjmp	.+12     	; 0xcbe <vfprintf+0x32e>
 cb2:	b2 14       	cp	r11, r2
 cb4:	80 f4       	brcc	.+32     	; 0xcd6 <vfprintf+0x346>
 cb6:	28 0c       	add	r2, r8
 cb8:	92 2c       	mov	r9, r2
 cba:	9b 18       	sub	r9, r11
 cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <vfprintf+0x348>
 cbe:	b2 14       	cp	r11, r2
 cc0:	58 f4       	brcc	.+22     	; 0xcd8 <vfprintf+0x348>
 cc2:	b6 01       	movw	r22, r12
 cc4:	80 e2       	ldi	r24, 0x20	; 32
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	76 d0       	rcall	.+236    	; 0xdb6 <fputc>
 cca:	b3 94       	inc	r11
 ccc:	f8 cf       	rjmp	.-16     	; 0xcbe <vfprintf+0x32e>
 cce:	b2 14       	cp	r11, r2
 cd0:	18 f4       	brcc	.+6      	; 0xcd8 <vfprintf+0x348>
 cd2:	2b 18       	sub	r2, r11
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x34a>
 cd6:	98 2c       	mov	r9, r8
 cd8:	21 2c       	mov	r2, r1
 cda:	a4 fe       	sbrs	r10, 4
 cdc:	0f c0       	rjmp	.+30     	; 0xcfc <vfprintf+0x36c>
 cde:	b6 01       	movw	r22, r12
 ce0:	80 e3       	ldi	r24, 0x30	; 48
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	68 d0       	rcall	.+208    	; 0xdb6 <fputc>
 ce6:	a2 fe       	sbrs	r10, 2
 ce8:	16 c0       	rjmp	.+44     	; 0xd16 <vfprintf+0x386>
 cea:	a1 fc       	sbrc	r10, 1
 cec:	03 c0       	rjmp	.+6      	; 0xcf4 <vfprintf+0x364>
 cee:	88 e7       	ldi	r24, 0x78	; 120
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0x368>
 cf4:	88 e5       	ldi	r24, 0x58	; 88
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	b6 01       	movw	r22, r12
 cfa:	0c c0       	rjmp	.+24     	; 0xd14 <vfprintf+0x384>
 cfc:	8a 2d       	mov	r24, r10
 cfe:	86 78       	andi	r24, 0x86	; 134
 d00:	51 f0       	breq	.+20     	; 0xd16 <vfprintf+0x386>
 d02:	a1 fe       	sbrs	r10, 1
 d04:	02 c0       	rjmp	.+4      	; 0xd0a <vfprintf+0x37a>
 d06:	8b e2       	ldi	r24, 0x2B	; 43
 d08:	01 c0       	rjmp	.+2      	; 0xd0c <vfprintf+0x37c>
 d0a:	80 e2       	ldi	r24, 0x20	; 32
 d0c:	a7 fc       	sbrc	r10, 7
 d0e:	8d e2       	ldi	r24, 0x2D	; 45
 d10:	b6 01       	movw	r22, r12
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	50 d0       	rcall	.+160    	; 0xdb6 <fputc>
 d16:	89 14       	cp	r8, r9
 d18:	30 f4       	brcc	.+12     	; 0xd26 <vfprintf+0x396>
 d1a:	b6 01       	movw	r22, r12
 d1c:	80 e3       	ldi	r24, 0x30	; 48
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	4a d0       	rcall	.+148    	; 0xdb6 <fputc>
 d22:	9a 94       	dec	r9
 d24:	f8 cf       	rjmp	.-16     	; 0xd16 <vfprintf+0x386>
 d26:	8a 94       	dec	r8
 d28:	f3 01       	movw	r30, r6
 d2a:	e8 0d       	add	r30, r8
 d2c:	f1 1d       	adc	r31, r1
 d2e:	80 81       	ld	r24, Z
 d30:	b6 01       	movw	r22, r12
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	40 d0       	rcall	.+128    	; 0xdb6 <fputc>
 d36:	81 10       	cpse	r8, r1
 d38:	f6 cf       	rjmp	.-20     	; 0xd26 <vfprintf+0x396>
 d3a:	22 20       	and	r2, r2
 d3c:	09 f4       	brne	.+2      	; 0xd40 <vfprintf+0x3b0>
 d3e:	4e ce       	rjmp	.-868    	; 0x9dc <vfprintf+0x4c>
 d40:	b6 01       	movw	r22, r12
 d42:	80 e2       	ldi	r24, 0x20	; 32
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	37 d0       	rcall	.+110    	; 0xdb6 <fputc>
 d48:	2a 94       	dec	r2
 d4a:	f7 cf       	rjmp	.-18     	; 0xd3a <vfprintf+0x3aa>
 d4c:	f6 01       	movw	r30, r12
 d4e:	86 81       	ldd	r24, Z+6	; 0x06
 d50:	97 81       	ldd	r25, Z+7	; 0x07
 d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfprintf+0x3c8>
 d54:	8f ef       	ldi	r24, 0xFF	; 255
 d56:	9f ef       	ldi	r25, 0xFF	; 255
 d58:	2b 96       	adiw	r28, 0x0b	; 11
 d5a:	0f b6       	in	r0, 0x3f	; 63
 d5c:	f8 94       	cli
 d5e:	de bf       	out	0x3e, r29	; 62
 d60:	0f be       	out	0x3f, r0	; 63
 d62:	cd bf       	out	0x3d, r28	; 61
 d64:	df 91       	pop	r29
 d66:	cf 91       	pop	r28
 d68:	1f 91       	pop	r17
 d6a:	0f 91       	pop	r16
 d6c:	ff 90       	pop	r15
 d6e:	ef 90       	pop	r14
 d70:	df 90       	pop	r13
 d72:	cf 90       	pop	r12
 d74:	bf 90       	pop	r11
 d76:	af 90       	pop	r10
 d78:	9f 90       	pop	r9
 d7a:	8f 90       	pop	r8
 d7c:	7f 90       	pop	r7
 d7e:	6f 90       	pop	r6
 d80:	5f 90       	pop	r5
 d82:	4f 90       	pop	r4
 d84:	3f 90       	pop	r3
 d86:	2f 90       	pop	r2
 d88:	08 95       	ret

00000d8a <strnlen_P>:
 d8a:	fc 01       	movw	r30, r24
 d8c:	05 90       	lpm	r0, Z+
 d8e:	61 50       	subi	r22, 0x01	; 1
 d90:	70 40       	sbci	r23, 0x00	; 0
 d92:	01 10       	cpse	r0, r1
 d94:	d8 f7       	brcc	.-10     	; 0xd8c <strnlen_P+0x2>
 d96:	80 95       	com	r24
 d98:	90 95       	com	r25
 d9a:	8e 0f       	add	r24, r30
 d9c:	9f 1f       	adc	r25, r31
 d9e:	08 95       	ret

00000da0 <strnlen>:
 da0:	fc 01       	movw	r30, r24
 da2:	61 50       	subi	r22, 0x01	; 1
 da4:	70 40       	sbci	r23, 0x00	; 0
 da6:	01 90       	ld	r0, Z+
 da8:	01 10       	cpse	r0, r1
 daa:	d8 f7       	brcc	.-10     	; 0xda2 <strnlen+0x2>
 dac:	80 95       	com	r24
 dae:	90 95       	com	r25
 db0:	8e 0f       	add	r24, r30
 db2:	9f 1f       	adc	r25, r31
 db4:	08 95       	ret

00000db6 <fputc>:
 db6:	0f 93       	push	r16
 db8:	1f 93       	push	r17
 dba:	cf 93       	push	r28
 dbc:	df 93       	push	r29
 dbe:	fb 01       	movw	r30, r22
 dc0:	23 81       	ldd	r18, Z+3	; 0x03
 dc2:	21 fd       	sbrc	r18, 1
 dc4:	03 c0       	rjmp	.+6      	; 0xdcc <fputc+0x16>
 dc6:	8f ef       	ldi	r24, 0xFF	; 255
 dc8:	9f ef       	ldi	r25, 0xFF	; 255
 dca:	2c c0       	rjmp	.+88     	; 0xe24 <fputc+0x6e>
 dcc:	22 ff       	sbrs	r18, 2
 dce:	16 c0       	rjmp	.+44     	; 0xdfc <fputc+0x46>
 dd0:	46 81       	ldd	r20, Z+6	; 0x06
 dd2:	57 81       	ldd	r21, Z+7	; 0x07
 dd4:	24 81       	ldd	r18, Z+4	; 0x04
 dd6:	35 81       	ldd	r19, Z+5	; 0x05
 dd8:	42 17       	cp	r20, r18
 dda:	53 07       	cpc	r21, r19
 ddc:	44 f4       	brge	.+16     	; 0xdee <fputc+0x38>
 dde:	a0 81       	ld	r26, Z
 de0:	b1 81       	ldd	r27, Z+1	; 0x01
 de2:	9d 01       	movw	r18, r26
 de4:	2f 5f       	subi	r18, 0xFF	; 255
 de6:	3f 4f       	sbci	r19, 0xFF	; 255
 de8:	31 83       	std	Z+1, r19	; 0x01
 dea:	20 83       	st	Z, r18
 dec:	8c 93       	st	X, r24
 dee:	26 81       	ldd	r18, Z+6	; 0x06
 df0:	37 81       	ldd	r19, Z+7	; 0x07
 df2:	2f 5f       	subi	r18, 0xFF	; 255
 df4:	3f 4f       	sbci	r19, 0xFF	; 255
 df6:	37 83       	std	Z+7, r19	; 0x07
 df8:	26 83       	std	Z+6, r18	; 0x06
 dfa:	14 c0       	rjmp	.+40     	; 0xe24 <fputc+0x6e>
 dfc:	8b 01       	movw	r16, r22
 dfe:	ec 01       	movw	r28, r24
 e00:	fb 01       	movw	r30, r22
 e02:	00 84       	ldd	r0, Z+8	; 0x08
 e04:	f1 85       	ldd	r31, Z+9	; 0x09
 e06:	e0 2d       	mov	r30, r0
 e08:	19 95       	eicall
 e0a:	89 2b       	or	r24, r25
 e0c:	e1 f6       	brne	.-72     	; 0xdc6 <fputc+0x10>
 e0e:	d8 01       	movw	r26, r16
 e10:	16 96       	adiw	r26, 0x06	; 6
 e12:	8d 91       	ld	r24, X+
 e14:	9c 91       	ld	r25, X
 e16:	17 97       	sbiw	r26, 0x07	; 7
 e18:	01 96       	adiw	r24, 0x01	; 1
 e1a:	17 96       	adiw	r26, 0x07	; 7
 e1c:	9c 93       	st	X, r25
 e1e:	8e 93       	st	-X, r24
 e20:	16 97       	sbiw	r26, 0x06	; 6
 e22:	ce 01       	movw	r24, r28
 e24:	df 91       	pop	r29
 e26:	cf 91       	pop	r28
 e28:	1f 91       	pop	r17
 e2a:	0f 91       	pop	r16
 e2c:	08 95       	ret

00000e2e <__ultoa_invert>:
 e2e:	fa 01       	movw	r30, r20
 e30:	aa 27       	eor	r26, r26
 e32:	28 30       	cpi	r18, 0x08	; 8
 e34:	51 f1       	breq	.+84     	; 0xe8a <__ultoa_invert+0x5c>
 e36:	20 31       	cpi	r18, 0x10	; 16
 e38:	81 f1       	breq	.+96     	; 0xe9a <__ultoa_invert+0x6c>
 e3a:	e8 94       	clt
 e3c:	6f 93       	push	r22
 e3e:	6e 7f       	andi	r22, 0xFE	; 254
 e40:	6e 5f       	subi	r22, 0xFE	; 254
 e42:	7f 4f       	sbci	r23, 0xFF	; 255
 e44:	8f 4f       	sbci	r24, 0xFF	; 255
 e46:	9f 4f       	sbci	r25, 0xFF	; 255
 e48:	af 4f       	sbci	r26, 0xFF	; 255
 e4a:	b1 e0       	ldi	r27, 0x01	; 1
 e4c:	3e d0       	rcall	.+124    	; 0xeca <__ultoa_invert+0x9c>
 e4e:	b4 e0       	ldi	r27, 0x04	; 4
 e50:	3c d0       	rcall	.+120    	; 0xeca <__ultoa_invert+0x9c>
 e52:	67 0f       	add	r22, r23
 e54:	78 1f       	adc	r23, r24
 e56:	89 1f       	adc	r24, r25
 e58:	9a 1f       	adc	r25, r26
 e5a:	a1 1d       	adc	r26, r1
 e5c:	68 0f       	add	r22, r24
 e5e:	79 1f       	adc	r23, r25
 e60:	8a 1f       	adc	r24, r26
 e62:	91 1d       	adc	r25, r1
 e64:	a1 1d       	adc	r26, r1
 e66:	6a 0f       	add	r22, r26
 e68:	71 1d       	adc	r23, r1
 e6a:	81 1d       	adc	r24, r1
 e6c:	91 1d       	adc	r25, r1
 e6e:	a1 1d       	adc	r26, r1
 e70:	20 d0       	rcall	.+64     	; 0xeb2 <__ultoa_invert+0x84>
 e72:	09 f4       	brne	.+2      	; 0xe76 <__ultoa_invert+0x48>
 e74:	68 94       	set
 e76:	3f 91       	pop	r19
 e78:	2a e0       	ldi	r18, 0x0A	; 10
 e7a:	26 9f       	mul	r18, r22
 e7c:	11 24       	eor	r1, r1
 e7e:	30 19       	sub	r19, r0
 e80:	30 5d       	subi	r19, 0xD0	; 208
 e82:	31 93       	st	Z+, r19
 e84:	de f6       	brtc	.-74     	; 0xe3c <__ultoa_invert+0xe>
 e86:	cf 01       	movw	r24, r30
 e88:	08 95       	ret
 e8a:	46 2f       	mov	r20, r22
 e8c:	47 70       	andi	r20, 0x07	; 7
 e8e:	40 5d       	subi	r20, 0xD0	; 208
 e90:	41 93       	st	Z+, r20
 e92:	b3 e0       	ldi	r27, 0x03	; 3
 e94:	0f d0       	rcall	.+30     	; 0xeb4 <__ultoa_invert+0x86>
 e96:	c9 f7       	brne	.-14     	; 0xe8a <__ultoa_invert+0x5c>
 e98:	f6 cf       	rjmp	.-20     	; 0xe86 <__ultoa_invert+0x58>
 e9a:	46 2f       	mov	r20, r22
 e9c:	4f 70       	andi	r20, 0x0F	; 15
 e9e:	40 5d       	subi	r20, 0xD0	; 208
 ea0:	4a 33       	cpi	r20, 0x3A	; 58
 ea2:	18 f0       	brcs	.+6      	; 0xeaa <__ultoa_invert+0x7c>
 ea4:	49 5d       	subi	r20, 0xD9	; 217
 ea6:	31 fd       	sbrc	r19, 1
 ea8:	40 52       	subi	r20, 0x20	; 32
 eaa:	41 93       	st	Z+, r20
 eac:	02 d0       	rcall	.+4      	; 0xeb2 <__ultoa_invert+0x84>
 eae:	a9 f7       	brne	.-22     	; 0xe9a <__ultoa_invert+0x6c>
 eb0:	ea cf       	rjmp	.-44     	; 0xe86 <__ultoa_invert+0x58>
 eb2:	b4 e0       	ldi	r27, 0x04	; 4
 eb4:	a6 95       	lsr	r26
 eb6:	97 95       	ror	r25
 eb8:	87 95       	ror	r24
 eba:	77 95       	ror	r23
 ebc:	67 95       	ror	r22
 ebe:	ba 95       	dec	r27
 ec0:	c9 f7       	brne	.-14     	; 0xeb4 <__ultoa_invert+0x86>
 ec2:	00 97       	sbiw	r24, 0x00	; 0
 ec4:	61 05       	cpc	r22, r1
 ec6:	71 05       	cpc	r23, r1
 ec8:	08 95       	ret
 eca:	9b 01       	movw	r18, r22
 ecc:	ac 01       	movw	r20, r24
 ece:	0a 2e       	mov	r0, r26
 ed0:	06 94       	lsr	r0
 ed2:	57 95       	ror	r21
 ed4:	47 95       	ror	r20
 ed6:	37 95       	ror	r19
 ed8:	27 95       	ror	r18
 eda:	ba 95       	dec	r27
 edc:	c9 f7       	brne	.-14     	; 0xed0 <__ultoa_invert+0xa2>
 ede:	62 0f       	add	r22, r18
 ee0:	73 1f       	adc	r23, r19
 ee2:	84 1f       	adc	r24, r20
 ee4:	95 1f       	adc	r25, r21
 ee6:	a0 1d       	adc	r26, r0
 ee8:	08 95       	ret

00000eea <_exit>:
 eea:	f8 94       	cli

00000eec <__stop_program>:
 eec:	ff cf       	rjmp	.-2      	; 0xeec <__stop_program>
