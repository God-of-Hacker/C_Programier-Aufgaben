
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800200  000016fa  0000178e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  008002b0  008002b0  0000183e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000183e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000264a  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000102b  00000000  00000000  0000410e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e9  00000000  00000000  00005139  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00006824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db1  00000000  00000000  00006eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000248a  00000000  00000000  00007c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000a0e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a8 c7       	rjmp	.+3920   	; 0xfae <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ef       	ldi	r30, 0xFA	; 250
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3b       	cpi	r26, 0xB0	; 176
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 eb       	ldi	r26, 0xB0	; 176
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 37       	cpi	r26, 0x78	; 120
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	03 d0       	rcall	.+6      	; 0x126 <main>
     120:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <main>:
typedef enum zustand_t {AUS, ZU_VIEL_OZON, ZU_WENIG_OZON, ALARM} zustand_t;

#define PROGRAMTAKT_MS                      10
//Hauptprogramm
int main(void)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	6c 97       	sbiw	r28, 0x1c	; 28
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	f8 94       	cli
     134:	de bf       	out	0x3e, r29	; 62
     136:	0f be       	out	0x3f, r0	; 63
     138:	cd bf       	out	0x3d, r28	; 61
    uint64_t timerDisorder=0;
    uint64_t timerRemote=0;
    zustand_t state = AUS;

    //Initialisieren
    initBoard(1);                                                                           //Hardware Initialisieren
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	87 d4       	rcall	.+2318   	; 0xa4c <initBoard>
    uint16_t timerBlinken=0;
    
    uint64_t timerAlarm=0;
    uint64_t timerDisorder=0;
    uint64_t timerRemote=0;
    zustand_t state = AUS;
     13e:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
    
    uint64_t timerAlarm=0;
    uint64_t timerDisorder=0;
    uint64_t timerRemote=0;
     140:	1e 86       	std	Y+14, r1	; 0x0e
     142:	1f 86       	std	Y+15, r1	; 0x0f
     144:	18 8a       	std	Y+16, r1	; 0x10
     146:	19 8a       	std	Y+17, r1	; 0x11
     148:	1a 8a       	std	Y+18, r1	; 0x12
     14a:	1b 8a       	std	Y+19, r1	; 0x13
     14c:	1c 8a       	std	Y+20, r1	; 0x14
     14e:	1d 8a       	std	Y+21, r1	; 0x15
    
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
    
    uint64_t timerAlarm=0;
    uint64_t timerDisorder=0;
     150:	c1 2c       	mov	r12, r1
     152:	e1 2c       	mov	r14, r1
     154:	f1 2c       	mov	r15, r1
     156:	19 82       	std	Y+1, r1	; 0x01
     158:	71 2c       	mov	r7, r1
     15a:	81 2c       	mov	r8, r1
    uint16_t valveLed=0;
    
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
    
    uint64_t timerAlarm=0;
     15c:	1c 82       	std	Y+4, r1	; 0x04
     15e:	1d 82       	std	Y+5, r1	; 0x05
     160:	91 2c       	mov	r9, r1
     162:	1e 82       	std	Y+6, r1	; 0x06
     164:	1f 82       	std	Y+7, r1	; 0x07
     166:	18 86       	std	Y+8, r1	; 0x08
     168:	19 86       	std	Y+9, r1	; 0x09
     16a:	1a 86       	std	Y+10, r1	; 0x0a
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
    uint16_t valveLed=0;
    
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
     16c:	a1 2c       	mov	r10, r1
     16e:	b1 2c       	mov	r11, r1
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
    uint16_t valveLed=0;
    
    uint16_t blinken=0;
     170:	1a 8e       	std	Y+26, r1	; 0x1a
     172:	19 8e       	std	Y+25, r1	; 0x19
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
    uint16_t valveLed=0;
     174:	1b 82       	std	Y+3, r1	; 0x03
     176:	1a 82       	std	Y+2, r1	; 0x02
    
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
     178:	18 8e       	std	Y+24, r1	; 0x18
     17a:	1f 8a       	std	Y+23, r1	; 0x17
    uint8_t posflanke=0;
    
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
     17c:	1d 86       	std	Y+13, r1	; 0x0d
     17e:	1c 86       	std	Y+12, r1	; 0x0c
    uint8_t neuTaster=0;
    uint8_t posflanke=0;
    
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
     180:	41 2c       	mov	r4, r1
     182:	51 2c       	mov	r5, r1
    uint8_t altTaster=0;
    uint8_t neuTaster=0;
    uint8_t posflanke=0;
    
    
    uint16_t powerLed=0;
     184:	21 2c       	mov	r2, r1
     186:	31 2c       	mov	r3, r1
    uint8_t alarmQuitTaster=0;
    uint8_t disorderQuitTaster=0;                                                         //Variabeln auf 0 setzen
    uint8_t ozonSensor=0;
    
    uint8_t altTaster=0;
    uint8_t neuTaster=0;
     188:	20 e0       	ldi	r18, 0x00	; 0
            lcdLog("ALARM              ");
            blinken = 1;
            timerDisorder = OFF;
            if (timerRemote>= ALARM_FEHLER)                                    //timerAlarmFehler grösser gleich ALARM_FEHLER ?
            {
                remoteAlarmLed = OUT_REMOTE_ALARM_LED;                              //remoteAlarm Led auf 1 setzen
     18a:	2b 8f       	std	Y+27, r18	; 0x1b
     18c:	9b 86       	std	Y+11, r9	; 0x0b
    //Unendlichschlaufe                                                                     //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        altTaster =neuTaster;                                                               //Alter Buttonzustand
        neuTaster = buttonReadAllPL();                                                      //Neuer Buttonzustand
     18e:	61 2c       	mov	r6, r1
     190:	09 d2       	rcall	.+1042   	; 0x5a4 <buttonReadAllPL>
     192:	d8 2e       	mov	r13, r24
        posflanke = (altTaster ^ neuTaster) & neuTaster;                                    //Positive Flanken aus altem und neuem Buttonzustand auslessen
     194:	3b 8d       	ldd	r19, Y+27	; 0x1b
     196:	30 95       	com	r19
     198:	38 23       	and	r19, r24
     19a:	3c 8f       	std	Y+28, r19	; 0x1c
        alarmQuitTaster = posflanke & IM_MASKE_ALARM_QUIT_TASTER;                       //alarm quit Taster  aus positive Flanken auslessen
        disorderQuitTaster = posflanke & IM_MASKE_DISORDER_QUIT_SCHALTER;                 //disorder quit schalterdisorder quit Taster  aus positive Flanken auslessen
     19c:	30 78       	andi	r19, 0x80	; 128
        powerSchalter = switchReadAll() & IM_MASKE_POWER_SCHALTER;                          //Power schalter
     19e:	3e 8b       	std	Y+22, r19	; 0x16
     1a0:	ff d1       	rcall	.+1022   	; 0x5a0 <switchReadAll>
     1a2:	08 2f       	mov	r16, r24
        ozonSensor = switchReadAll() & IM_MASKE_OZON_SENSOR;                                //Ozon Sensor
     1a4:	00 78       	andi	r16, 0x80	; 128
     1a6:	fc d1       	rcall	.+1016   	; 0x5a0 <switchReadAll>
     1a8:	80 74       	andi	r24, 0x40	; 64
     1aa:	8b 8f       	std	Y+27, r24	; 0x1b
        //Verarbeitung-------------------------------------------------------------
        if (powerSchalter)
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <main+0x8c>
     1b0:	ef c1       	rjmp	.+990    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
        }
        else
        {
            state = AUS;
        }
        if (disorderQuitTaster)                                                   //disorder Quit Schalter ?
     1b2:	8e 89       	ldd	r24, Y+22	; 0x16
     1b4:	81 11       	cpse	r24, r1
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <main+0x9a>
        powerSchalter = switchReadAll() & IM_MASKE_POWER_SCHALTER;                          //Power schalter
        ozonSensor = switchReadAll() & IM_MASKE_OZON_SENSOR;                                //Ozon Sensor
        //Verarbeitung-------------------------------------------------------------
        if (powerSchalter)
        {
            powerLed = OUT_POWER_LED;
     1b8:	22 24       	eor	r2, r2
     1ba:	23 94       	inc	r2
     1bc:	31 2c       	mov	r3, r1
     1be:	0d c0       	rjmp	.+26     	; 0x1da <main+0xb4>
     1c0:	22 24       	eor	r2, r2
     1c2:	23 94       	inc	r2
     1c4:	31 2c       	mov	r3, r1
            state = AUS;
        }
        if (disorderQuitTaster)                                                   //disorder Quit Schalter ?
        {
            disorderLed = OFF;
            timerDisorder = 0;
     1c6:	c1 2c       	mov	r12, r1
     1c8:	91 2c       	mov	r9, r1
     1ca:	e1 2c       	mov	r14, r1
     1cc:	f1 2c       	mov	r15, r1
     1ce:	61 2c       	mov	r6, r1
     1d0:	19 82       	std	Y+1, r1	; 0x01
     1d2:	71 2c       	mov	r7, r1
     1d4:	81 2c       	mov	r8, r1
        {
            state = AUS;
        }
        if (disorderQuitTaster)                                                   //disorder Quit Schalter ?
        {
            disorderLed = OFF;
     1d6:	1c 86       	std	Y+12, r1	; 0x0c
     1d8:	1d 86       	std	Y+13, r1	; 0x0d
            timerDisorder = 0;
        }
        if (!state == ZU_VIEL_OZON)
     1da:	11 23       	and	r17, r17
     1dc:	51 f0       	breq	.+20     	; 0x1f2 <main+0xcc>
        }
        if (!state == ALARM)
        {
            timerRemote = OFF;
        }
        switch(state)
     1de:	11 30       	cpi	r17, 0x01	; 1
     1e0:	59 f1       	breq	.+86     	; 0x238 <main+0x112>
     1e2:	38 f0       	brcs	.+14     	; 0x1f2 <main+0xcc>
     1e4:	12 30       	cpi	r17, 0x02	; 2
     1e6:	09 f4       	brne	.+2      	; 0x1ea <main+0xc4>
     1e8:	5b c0       	rjmp	.+182    	; 0x2a0 <main+0x17a>
     1ea:	13 30       	cpi	r17, 0x03	; 3
     1ec:	09 f4       	brne	.+2      	; 0x1f0 <main+0xca>
     1ee:	88 c0       	rjmp	.+272    	; 0x300 <main+0x1da>
     1f0:	ec c0       	rjmp	.+472    	; 0x3ca <main+0x2a4>
        {
            case AUS:
            lcdLog("Aus                 ");
     1f2:	2a e0       	ldi	r18, 0x0A	; 10
     1f4:	32 e0       	ldi	r19, 0x02	; 2
     1f6:	3f 93       	push	r19
     1f8:	2f 93       	push	r18
     1fa:	33 d5       	rcall	.+2662   	; 0xc62 <lcdLog>
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
            blinken = 0;                                                                    //blinken auf 0 setzen
            timerAlarm=0;                                                          //timerFehlerfunktionOn auf 0 setzen
            timerDisorder=0;                                                         //timerFehlerfunktionOff auf 0 setzen
            timerRemote=0;                                                             //timerAlarmFehler auf 0 setzen
            if (powerSchalter)
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	00 23       	and	r16, r16
     202:	09 f4       	brne	.+2      	; 0x206 <main+0xe0>
     204:	76 c1       	rjmp	.+748    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
            {
                //powerLed = OUT_POWER_LED;
                state = ZU_WENIG_OZON;
            }
            if (ozonSensor && powerSchalter)
     206:	9b 8d       	ldd	r25, Y+27	; 0x1b
     208:	99 23       	and	r25, r25
     20a:	09 f4       	brne	.+2      	; 0x20e <main+0xe8>
     20c:	84 c1       	rjmp	.+776    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     20e:	00 23       	and	r16, r16
     210:	09 f4       	brne	.+2      	; 0x214 <main+0xee>
     212:	93 c1       	rjmp	.+806    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
            {
                state = ZU_VIEL_OZON;
     214:	11 e0       	ldi	r17, 0x01	; 1
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
            blinken = 0;                                                                    //blinken auf 0 setzen
            timerAlarm=0;                                                          //timerFehlerfunktionOn auf 0 setzen
            timerDisorder=0;                                                         //timerFehlerfunktionOff auf 0 setzen
            timerRemote=0;                                                             //timerAlarmFehler auf 0 setzen
     216:	1e 86       	std	Y+14, r1	; 0x0e
     218:	1f 86       	std	Y+15, r1	; 0x0f
     21a:	18 8a       	std	Y+16, r1	; 0x10
     21c:	19 8a       	std	Y+17, r1	; 0x11
     21e:	1a 8a       	std	Y+18, r1	; 0x12
     220:	1b 8a       	std	Y+19, r1	; 0x13
     222:	1c 8a       	std	Y+20, r1	; 0x14
     224:	1d 8a       	std	Y+21, r1	; 0x15
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
     226:	1a 82       	std	Y+2, r1	; 0x02
     228:	1b 82       	std	Y+3, r1	; 0x03
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
     22a:	1f 8a       	std	Y+23, r1	; 0x17
     22c:	18 8e       	std	Y+24, r1	; 0x18
        {
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
     22e:	1c 86       	std	Y+12, r1	; 0x0c
     230:	1d 86       	std	Y+13, r1	; 0x0d
        }
        switch(state)
        {
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
     232:	21 2c       	mov	r2, r1
     234:	31 2c       	mov	r3, r1
            {
                state = ZU_VIEL_OZON;
            }
            break;
            case ZU_VIEL_OZON:
            lcdLog("ZU VIEL OZON");
     236:	92 c1       	rjmp	.+804    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     238:	2f e1       	ldi	r18, 0x1F	; 31
     23a:	32 e0       	ldi	r19, 0x02	; 2
     23c:	3f 93       	push	r19
     23e:	2f 93       	push	r18
     240:	10 d5       	rcall	.+2592   	; 0xc62 <lcdLog>
            valveLed = OFF;
            timerDisorder=0;
            timerRemote = 0;
            if (timerAlarm >= DAUER_BIS_FEHLFUNKTION)                          //timerFehlerfunktionOn grösser gleich FEHLER_FUNKTION_ON ?
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	2c 81       	ldd	r18, Y+4	; 0x04
     248:	3d 81       	ldd	r19, Y+5	; 0x05
     24a:	4b 85       	ldd	r20, Y+11	; 0x0b
     24c:	5e 81       	ldd	r21, Y+6	; 0x06
     24e:	6f 81       	ldd	r22, Y+7	; 0x07
     250:	78 85       	ldd	r23, Y+8	; 0x08
     252:	89 85       	ldd	r24, Y+9	; 0x09
     254:	9a 85       	ldd	r25, Y+10	; 0x0a
     256:	2f 33       	cpi	r18, 0x3F	; 63
     258:	3f 41       	sbci	r19, 0x1F	; 31
     25a:	41 05       	cpc	r20, r1
     25c:	51 05       	cpc	r21, r1
     25e:	61 05       	cpc	r22, r1
     260:	71 05       	cpc	r23, r1
     262:	81 05       	cpc	r24, r1
     264:	91 05       	cpc	r25, r1
     266:	11 f0       	breq	.+4      	; 0x26c <main+0x146>
     268:	08 f0       	brcs	.+2      	; 0x26c <main+0x146>
            {
                state = ALARM;
     26a:	13 e0       	ldi	r17, 0x03	; 3
            }
            if (!ozonSensor && powerSchalter)
     26c:	2b 8d       	ldd	r18, Y+27	; 0x1b
     26e:	21 11       	cpse	r18, r1
     270:	6f c0       	rjmp	.+222    	; 0x350 <main+0x22a>
     272:	00 23       	and	r16, r16
     274:	09 f4       	brne	.+2      	; 0x278 <main+0x152>
     276:	7f c0       	rjmp	.+254    	; 0x376 <main+0x250>
            {
                state = ZU_WENIG_OZON;
     278:	12 e0       	ldi	r17, 0x02	; 2
            break;
            case ZU_VIEL_OZON:
            lcdLog("ZU VIEL OZON");
            valveLed = OFF;
            timerDisorder=0;
            timerRemote = 0;
     27a:	1e 86       	std	Y+14, r1	; 0x0e
     27c:	1f 86       	std	Y+15, r1	; 0x0f
     27e:	18 8a       	std	Y+16, r1	; 0x10
     280:	19 8a       	std	Y+17, r1	; 0x11
     282:	1a 8a       	std	Y+18, r1	; 0x12
     284:	1b 8a       	std	Y+19, r1	; 0x13
     286:	1c 8a       	std	Y+20, r1	; 0x14
     288:	1d 8a       	std	Y+21, r1	; 0x15
            }
            break;
            case ZU_VIEL_OZON:
            lcdLog("ZU VIEL OZON");
            valveLed = OFF;
            timerDisorder=0;
     28a:	c1 2c       	mov	r12, r1
     28c:	91 2c       	mov	r9, r1
     28e:	e1 2c       	mov	r14, r1
     290:	f1 2c       	mov	r15, r1
     292:	61 2c       	mov	r6, r1
     294:	19 82       	std	Y+1, r1	; 0x01
     296:	71 2c       	mov	r7, r1
     298:	81 2c       	mov	r8, r1
                state = ZU_VIEL_OZON;
            }
            break;
            case ZU_VIEL_OZON:
            lcdLog("ZU VIEL OZON");
            valveLed = OFF;
     29a:	1a 82       	std	Y+2, r1	; 0x02
     29c:	1b 82       	std	Y+3, r1	; 0x03
            {
                state = ZU_WENIG_OZON;
            }
            break;
            case ZU_WENIG_OZON:
            lcdLog("ZU WENIG OZON");
     29e:	95 c0       	rjmp	.+298    	; 0x3ca <main+0x2a4>
     2a0:	8c e2       	ldi	r24, 0x2C	; 44
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	9f 93       	push	r25
     2a6:	8f 93       	push	r24
     2a8:	dc d4       	rcall	.+2488   	; 0xc62 <lcdLog>
            valveLed = OUT_VALVE_LED;
            timerAlarm = 0;
            if (timerDisorder >= DAUER_BIS_FEHLFUNKTION)                          //timerFehlerfunktionOn grösser gleich FEHLER_FUNKTION_ON ?
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	2c 2d       	mov	r18, r12
     2b0:	39 2d       	mov	r19, r9
     2b2:	4e 2d       	mov	r20, r14
     2b4:	5f 2d       	mov	r21, r15
     2b6:	66 2d       	mov	r22, r6
     2b8:	79 81       	ldd	r23, Y+1	; 0x01
     2ba:	87 2d       	mov	r24, r7
     2bc:	98 2d       	mov	r25, r8
     2be:	2f 33       	cpi	r18, 0x3F	; 63
     2c0:	3f 41       	sbci	r19, 0x1F	; 31
     2c2:	41 05       	cpc	r20, r1
     2c4:	51 05       	cpc	r21, r1
     2c6:	61 05       	cpc	r22, r1
     2c8:	71 05       	cpc	r23, r1
     2ca:	81 05       	cpc	r24, r1
     2cc:	91 05       	cpc	r25, r1
     2ce:	21 f0       	breq	.+8      	; 0x2d8 <main+0x1b2>
     2d0:	18 f0       	brcs	.+6      	; 0x2d8 <main+0x1b2>
            {
                disorderLed = OUT_DISORDER_LED;
     2d2:	24 e0       	ldi	r18, 0x04	; 4
     2d4:	2c 87       	std	Y+12, r18	; 0x0c
     2d6:	1d 86       	std	Y+13, r1	; 0x0d
            }
            
            if (ozonSensor && powerSchalter)
     2d8:	3b 8d       	ldd	r19, Y+27	; 0x1b
     2da:	33 23       	and	r19, r19
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <main+0x1ba>
     2de:	5e c0       	rjmp	.+188    	; 0x39c <main+0x276>
     2e0:	00 23       	and	r16, r16
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <main+0x1c0>
     2e4:	67 c0       	rjmp	.+206    	; 0x3b4 <main+0x28e>
            {
                state = ZU_VIEL_OZON;
     2e6:	11 e0       	ldi	r17, 0x01	; 1
            }
            break;
            case ZU_WENIG_OZON:
            lcdLog("ZU WENIG OZON");
            valveLed = OUT_VALVE_LED;
            timerAlarm = 0;
     2e8:	1c 82       	std	Y+4, r1	; 0x04
     2ea:	1d 82       	std	Y+5, r1	; 0x05
     2ec:	1b 86       	std	Y+11, r1	; 0x0b
     2ee:	1e 82       	std	Y+6, r1	; 0x06
     2f0:	1f 82       	std	Y+7, r1	; 0x07
     2f2:	18 86       	std	Y+8, r1	; 0x08
     2f4:	19 86       	std	Y+9, r1	; 0x09
     2f6:	1a 86       	std	Y+10, r1	; 0x0a
                state = ZU_WENIG_OZON;
            }
            break;
            case ZU_WENIG_OZON:
            lcdLog("ZU WENIG OZON");
            valveLed = OUT_VALVE_LED;
     2f8:	80 e1       	ldi	r24, 0x10	; 16
     2fa:	8a 83       	std	Y+2, r24	; 0x02
     2fc:	1b 82       	std	Y+3, r1	; 0x03
            {
                state = ZU_VIEL_OZON;
            }
            break;
            case ALARM:
            lcdLog("ALARM              ");
     2fe:	65 c0       	rjmp	.+202    	; 0x3ca <main+0x2a4>
     300:	2a e3       	ldi	r18, 0x3A	; 58
     302:	32 e0       	ldi	r19, 0x02	; 2
     304:	3f 93       	push	r19
     306:	2f 93       	push	r18
     308:	ac d4       	rcall	.+2392   	; 0xc62 <lcdLog>
            blinken = 1;
            timerDisorder = OFF;
            if (timerRemote>= ALARM_FEHLER)                                    //timerAlarmFehler grösser gleich ALARM_FEHLER ?
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	2e 85       	ldd	r18, Y+14	; 0x0e
     310:	3f 85       	ldd	r19, Y+15	; 0x0f
     312:	48 89       	ldd	r20, Y+16	; 0x10
     314:	59 89       	ldd	r21, Y+17	; 0x11
     316:	6a 89       	ldd	r22, Y+18	; 0x12
     318:	7b 89       	ldd	r23, Y+19	; 0x13
     31a:	8c 89       	ldd	r24, Y+20	; 0x14
     31c:	9d 89       	ldd	r25, Y+21	; 0x15
     31e:	2f 3b       	cpi	r18, 0xBF	; 191
     320:	3d 45       	sbci	r19, 0x5D	; 93
     322:	41 05       	cpc	r20, r1
     324:	51 05       	cpc	r21, r1
     326:	61 05       	cpc	r22, r1
     328:	71 05       	cpc	r23, r1
     32a:	81 05       	cpc	r24, r1
     32c:	91 05       	cpc	r25, r1
     32e:	21 f0       	breq	.+8      	; 0x338 <main+0x212>
     330:	18 f0       	brcs	.+6      	; 0x338 <main+0x212>
            {
                remoteAlarmLed = OUT_REMOTE_ALARM_LED;                              //remoteAlarm Led auf 1 setzen
     332:	28 e0       	ldi	r18, 0x08	; 8
     334:	2f 8b       	std	Y+23, r18	; 0x17
     336:	18 8e       	std	Y+24, r1	; 0x18
            }
            if (alarmQuitTaster)                                                      //alarm quit schalter ?
     338:	3c 8d       	ldd	r19, Y+28	; 0x1c
     33a:	36 ff       	sbrs	r19, 6
     33c:	4b c0       	rjmp	.+150    	; 0x3d4 <main+0x2ae>
            {
                alarmLed = OFF;
                blinken = 0;
                timerAlarm=0;
                if (ozonSensor && powerSchalter)
     33e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     340:	88 23       	and	r24, r24
     342:	09 f4       	brne	.+2      	; 0x346 <main+0x220>
     344:	b7 c0       	rjmp	.+366    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     346:	00 23       	and	r16, r16
     348:	09 f4       	brne	.+2      	; 0x34c <main+0x226>
     34a:	b9 c0       	rjmp	.+370    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
                {
                    state = ZU_VIEL_OZON;
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	b7 c0       	rjmp	.+366    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
            break;
            case ZU_VIEL_OZON:
            lcdLog("ZU VIEL OZON");
            valveLed = OFF;
            timerDisorder=0;
            timerRemote = 0;
     350:	1e 86       	std	Y+14, r1	; 0x0e
     352:	1f 86       	std	Y+15, r1	; 0x0f
     354:	18 8a       	std	Y+16, r1	; 0x10
     356:	19 8a       	std	Y+17, r1	; 0x11
     358:	1a 8a       	std	Y+18, r1	; 0x12
     35a:	1b 8a       	std	Y+19, r1	; 0x13
     35c:	1c 8a       	std	Y+20, r1	; 0x14
     35e:	1d 8a       	std	Y+21, r1	; 0x15
            }
            break;
            case ZU_VIEL_OZON:
            lcdLog("ZU VIEL OZON");
            valveLed = OFF;
            timerDisorder=0;
     360:	c1 2c       	mov	r12, r1
     362:	91 2c       	mov	r9, r1
     364:	e1 2c       	mov	r14, r1
     366:	f1 2c       	mov	r15, r1
     368:	61 2c       	mov	r6, r1
     36a:	19 82       	std	Y+1, r1	; 0x01
     36c:	71 2c       	mov	r7, r1
     36e:	81 2c       	mov	r8, r1
                state = ZU_VIEL_OZON;
            }
            break;
            case ZU_VIEL_OZON:
            lcdLog("ZU VIEL OZON");
            valveLed = OFF;
     370:	1a 82       	std	Y+2, r1	; 0x02
     372:	1b 82       	std	Y+3, r1	; 0x03
     374:	2a c0       	rjmp	.+84     	; 0x3ca <main+0x2a4>
            timerDisorder=0;
            timerRemote = 0;
     376:	1e 86       	std	Y+14, r1	; 0x0e
     378:	1f 86       	std	Y+15, r1	; 0x0f
     37a:	18 8a       	std	Y+16, r1	; 0x10
     37c:	19 8a       	std	Y+17, r1	; 0x11
     37e:	1a 8a       	std	Y+18, r1	; 0x12
     380:	1b 8a       	std	Y+19, r1	; 0x13
     382:	1c 8a       	std	Y+20, r1	; 0x14
     384:	1d 8a       	std	Y+21, r1	; 0x15
            }
            break;
            case ZU_VIEL_OZON:
            lcdLog("ZU VIEL OZON");
            valveLed = OFF;
            timerDisorder=0;
     386:	c1 2c       	mov	r12, r1
     388:	91 2c       	mov	r9, r1
     38a:	e1 2c       	mov	r14, r1
     38c:	f1 2c       	mov	r15, r1
     38e:	61 2c       	mov	r6, r1
     390:	19 82       	std	Y+1, r1	; 0x01
     392:	71 2c       	mov	r7, r1
     394:	81 2c       	mov	r8, r1
                state = ZU_VIEL_OZON;
            }
            break;
            case ZU_VIEL_OZON:
            lcdLog("ZU VIEL OZON");
            valveLed = OFF;
     396:	1a 82       	std	Y+2, r1	; 0x02
     398:	1b 82       	std	Y+3, r1	; 0x03
     39a:	17 c0       	rjmp	.+46     	; 0x3ca <main+0x2a4>
            }
            break;
            case ZU_WENIG_OZON:
            lcdLog("ZU WENIG OZON");
            valveLed = OUT_VALVE_LED;
            timerAlarm = 0;
     39c:	1c 82       	std	Y+4, r1	; 0x04
     39e:	1d 82       	std	Y+5, r1	; 0x05
     3a0:	1b 86       	std	Y+11, r1	; 0x0b
     3a2:	1e 82       	std	Y+6, r1	; 0x06
     3a4:	1f 82       	std	Y+7, r1	; 0x07
     3a6:	18 86       	std	Y+8, r1	; 0x08
     3a8:	19 86       	std	Y+9, r1	; 0x09
     3aa:	1a 86       	std	Y+10, r1	; 0x0a
                state = ZU_WENIG_OZON;
            }
            break;
            case ZU_WENIG_OZON:
            lcdLog("ZU WENIG OZON");
            valveLed = OUT_VALVE_LED;
     3ac:	90 e1       	ldi	r25, 0x10	; 16
     3ae:	9a 83       	std	Y+2, r25	; 0x02
     3b0:	1b 82       	std	Y+3, r1	; 0x03
     3b2:	0b c0       	rjmp	.+22     	; 0x3ca <main+0x2a4>
            timerAlarm = 0;
     3b4:	1c 82       	std	Y+4, r1	; 0x04
     3b6:	1d 82       	std	Y+5, r1	; 0x05
     3b8:	1b 86       	std	Y+11, r1	; 0x0b
     3ba:	1e 82       	std	Y+6, r1	; 0x06
     3bc:	1f 82       	std	Y+7, r1	; 0x07
     3be:	18 86       	std	Y+8, r1	; 0x08
     3c0:	19 86       	std	Y+9, r1	; 0x09
     3c2:	1a 86       	std	Y+10, r1	; 0x0a
                state = ZU_WENIG_OZON;
            }
            break;
            case ZU_WENIG_OZON:
            lcdLog("ZU WENIG OZON");
            valveLed = OUT_VALVE_LED;
     3c4:	e0 e1       	ldi	r30, 0x10	; 16
     3c6:	ea 83       	std	Y+2, r30	; 0x02
     3c8:	1b 82       	std	Y+3, r1	; 0x03
                }
            }
            break;
        }
        //Ausgabe------------------------------------------------------------------
        if (blinken)                                                                        //blinken auf 1 setzen
     3ca:	29 8d       	ldd	r18, Y+25	; 0x19
     3cc:	3a 8d       	ldd	r19, Y+26	; 0x1a
     3ce:	23 2b       	or	r18, r19
     3d0:	61 f4       	brne	.+24     	; 0x3ea <main+0x2c4>
     3d2:	1c c0       	rjmp	.+56     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
            }
            break;
            case ALARM:
            lcdLog("ALARM              ");
            blinken = 1;
            timerDisorder = OFF;
     3d4:	c1 2c       	mov	r12, r1
     3d6:	91 2c       	mov	r9, r1
     3d8:	e1 2c       	mov	r14, r1
     3da:	f1 2c       	mov	r15, r1
     3dc:	61 2c       	mov	r6, r1
     3de:	19 82       	std	Y+1, r1	; 0x01
     3e0:	71 2c       	mov	r7, r1
     3e2:	81 2c       	mov	r8, r1
                state = ZU_VIEL_OZON;
            }
            break;
            case ALARM:
            lcdLog("ALARM              ");
            blinken = 1;
     3e4:	31 e0       	ldi	r19, 0x01	; 1
     3e6:	39 8f       	std	Y+25, r19	; 0x19
     3e8:	1a 8e       	std	Y+26, r1	; 0x1a
            break;
        }
        //Ausgabe------------------------------------------------------------------
        if (blinken)                                                                        //blinken auf 1 setzen
        {
            if (timerBlinken>= ON_TIME)                                                     //timerBlinken grösser gleich ON_TIME 50ms ?
     3ea:	82 e3       	ldi	r24, 0x32	; 50
     3ec:	a8 16       	cp	r10, r24
     3ee:	b1 04       	cpc	r11, r1
     3f0:	10 f0       	brcs	.+4      	; 0x3f6 <main+0x2d0>
            {
                alarmLed = OFF;                                                             //alarm Led 0 setzen
     3f2:	41 2c       	mov	r4, r1
     3f4:	51 2c       	mov	r5, r1
            }
            if (timerBlinken>= PERIODE)                                                     //timerBlinken grösser gleich PERIODE ?
     3f6:	98 ec       	ldi	r25, 0xC8	; 200
     3f8:	a9 16       	cp	r10, r25
     3fa:	b1 04       	cpc	r11, r1
     3fc:	60 f0       	brcs	.+24     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
            {
                alarmLed = OUT_ALARM_LED;                                                   //alarm Led 1 setzen
                timerBlinken = 0;                                                           //timerBlinken auf 0 setzen
     3fe:	a1 2c       	mov	r10, r1
     400:	b1 2c       	mov	r11, r1
            {
                alarmLed = OFF;                                                             //alarm Led 0 setzen
            }
            if (timerBlinken>= PERIODE)                                                     //timerBlinken grösser gleich PERIODE ?
            {
                alarmLed = OUT_ALARM_LED;                                                   //alarm Led 1 setzen
     402:	68 94       	set
     404:	44 24       	eor	r4, r4
     406:	41 f8       	bld	r4, 1
     408:	51 2c       	mov	r5, r1
     40a:	05 c0       	rjmp	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
                timerBlinken = 0;                                                           //timerBlinken auf 0 setzen
            }
        }
        else
        {
            timerBlinken = PERIODE;                                                         //timerBlinken gleich PERIODE
     40c:	0f 2e       	mov	r0, r31
     40e:	f8 ec       	ldi	r31, 0xC8	; 200
     410:	af 2e       	mov	r10, r31
     412:	b1 2c       	mov	r11, r1
     414:	f0 2d       	mov	r31, r0
        }
        ledWriteAll(powerLed | alarmLed | disorderLed | remoteAlarmLed | valveLed);         //alle led's ausgeben
     416:	c2 01       	movw	r24, r4
     418:	82 29       	or	r24, r2
     41a:	93 29       	or	r25, r3
     41c:	2c 85       	ldd	r18, Y+12	; 0x0c
     41e:	3d 85       	ldd	r19, Y+13	; 0x0d
     420:	82 2b       	or	r24, r18
     422:	93 2b       	or	r25, r19
     424:	2f 89       	ldd	r18, Y+23	; 0x17
     426:	38 8d       	ldd	r19, Y+24	; 0x18
     428:	82 2b       	or	r24, r18
     42a:	93 2b       	or	r25, r19
     42c:	2a 81       	ldd	r18, Y+2	; 0x02
     42e:	3b 81       	ldd	r19, Y+3	; 0x03
     430:	82 2b       	or	r24, r18
     432:	93 2b       	or	r25, r19
     434:	b2 d0       	rcall	.+356    	; 0x59a <ledWriteAll>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     436:	8f e3       	ldi	r24, 0x3F	; 63
     438:	9c e9       	ldi	r25, 0x9C	; 156
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	f1 f7       	brne	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     440:	00 00       	nop
        //Warten------------------------------------------------------------------
        _delay_ms(PROGRAMTAKT_MS);                                                          //PROGRAMTAKT (10ms) abwarten
        timerAlarm = timerAlarm + PROGRAMTAKT_MS;                          // timerFehlerfunktionOn hochzählen (10ms)
     442:	2c 81       	ldd	r18, Y+4	; 0x04
     444:	3d 81       	ldd	r19, Y+5	; 0x05
     446:	4b 85       	ldd	r20, Y+11	; 0x0b
     448:	5e 81       	ldd	r21, Y+6	; 0x06
     44a:	6f 81       	ldd	r22, Y+7	; 0x07
     44c:	78 85       	ldd	r23, Y+8	; 0x08
     44e:	89 85       	ldd	r24, Y+9	; 0x09
     450:	9a 85       	ldd	r25, Y+10	; 0x0a
     452:	aa e0       	ldi	r26, 0x0A	; 10
     454:	56 d6       	rcall	.+3244   	; 0x1102 <__adddi3_s8>
     456:	2c 83       	std	Y+4, r18	; 0x04
     458:	3d 83       	std	Y+5, r19	; 0x05
     45a:	4b 87       	std	Y+11, r20	; 0x0b
     45c:	5e 83       	std	Y+6, r21	; 0x06
     45e:	6f 83       	std	Y+7, r22	; 0x07
     460:	78 87       	std	Y+8, r23	; 0x08
     462:	89 87       	std	Y+9, r24	; 0x09
        timerDisorder = timerDisorder + PROGRAMTAKT_MS;                        //timerFehlerfunktionOff hochzählen (10ms)
     464:	9a 87       	std	Y+10, r25	; 0x0a
     466:	2c 2d       	mov	r18, r12
     468:	39 2d       	mov	r19, r9
     46a:	4e 2d       	mov	r20, r14
     46c:	5f 2d       	mov	r21, r15
     46e:	66 2d       	mov	r22, r6
     470:	79 81       	ldd	r23, Y+1	; 0x01
     472:	87 2d       	mov	r24, r7
     474:	98 2d       	mov	r25, r8
     476:	45 d6       	rcall	.+3210   	; 0x1102 <__adddi3_s8>
     478:	c2 2e       	mov	r12, r18
     47a:	93 2e       	mov	r9, r19
     47c:	e4 2e       	mov	r14, r20
     47e:	f5 2e       	mov	r15, r21
     480:	66 2e       	mov	r6, r22
     482:	79 83       	std	Y+1, r23	; 0x01
     484:	78 2e       	mov	r7, r24
        timerRemote = timerRemote + PROGRAMTAKT_MS;                                //timerAlarmFehler hochzählen (10ms)
     486:	89 2e       	mov	r8, r25
     488:	2e 85       	ldd	r18, Y+14	; 0x0e
     48a:	3f 85       	ldd	r19, Y+15	; 0x0f
     48c:	48 89       	ldd	r20, Y+16	; 0x10
     48e:	59 89       	ldd	r21, Y+17	; 0x11
     490:	6a 89       	ldd	r22, Y+18	; 0x12
     492:	7b 89       	ldd	r23, Y+19	; 0x13
     494:	8c 89       	ldd	r24, Y+20	; 0x14
     496:	9d 89       	ldd	r25, Y+21	; 0x15
     498:	34 d6       	rcall	.+3176   	; 0x1102 <__adddi3_s8>
     49a:	2e 87       	std	Y+14, r18	; 0x0e
     49c:	3f 87       	std	Y+15, r19	; 0x0f
     49e:	48 8b       	std	Y+16, r20	; 0x10
     4a0:	59 8b       	std	Y+17, r21	; 0x11
     4a2:	6a 8b       	std	Y+18, r22	; 0x12
     4a4:	7b 8b       	std	Y+19, r23	; 0x13
     4a6:	8c 8b       	std	Y+20, r24	; 0x14
     4a8:	9d 8b       	std	Y+21, r25	; 0x15
        timerBlinken = timerBlinken + PROGRAMTAKT_MS;                                       //timerBlinken hochzählen (10ms)
     4aa:	9a e0       	ldi	r25, 0x0A	; 10
     4ac:	a9 0e       	add	r10, r25
     4ae:	b1 1c       	adc	r11, r1
    //Unendlichschlaufe                                                                     //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        altTaster =neuTaster;                                                               //Alter Buttonzustand
        neuTaster = buttonReadAllPL();                                                      //Neuer Buttonzustand
     4b0:	db 8e       	std	Y+27, r13	; 0x1b
        _delay_ms(PROGRAMTAKT_MS);                                                          //PROGRAMTAKT (10ms) abwarten
        timerAlarm = timerAlarm + PROGRAMTAKT_MS;                          // timerFehlerfunktionOn hochzählen (10ms)
        timerDisorder = timerDisorder + PROGRAMTAKT_MS;                        //timerFehlerfunktionOff hochzählen (10ms)
        timerRemote = timerRemote + PROGRAMTAKT_MS;                                //timerAlarmFehler hochzählen (10ms)
        timerBlinken = timerBlinken + PROGRAMTAKT_MS;                                       //timerBlinken hochzählen (10ms)
    }
     4b2:	6e ce       	rjmp	.-804    	; 0x190 <main+0x6a>
                timerAlarm=0;
                if (ozonSensor && powerSchalter)
                {
                    state = ZU_VIEL_OZON;
                }
                if (!ozonSensor && powerSchalter)
     4b4:	00 23       	and	r16, r16
     4b6:	09 f4       	brne	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	51 c0       	rjmp	.+162    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
                {
                    state = ZU_WENIG_OZON;
     4ba:	12 e0       	ldi	r17, 0x02	; 2
     4bc:	4f c0       	rjmp	.+158    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
            }
            break;
            case ALARM:
            lcdLog("ALARM              ");
            blinken = 1;
            timerDisorder = OFF;
     4be:	c1 2c       	mov	r12, r1
     4c0:	91 2c       	mov	r9, r1
     4c2:	e1 2c       	mov	r14, r1
     4c4:	f1 2c       	mov	r15, r1
     4c6:	61 2c       	mov	r6, r1
     4c8:	19 82       	std	Y+1, r1	; 0x01
     4ca:	71 2c       	mov	r7, r1
     4cc:	81 2c       	mov	r8, r1
            }
            if (alarmQuitTaster)                                                      //alarm quit schalter ?
            {
                alarmLed = OFF;
                blinken = 0;
                timerAlarm=0;
     4ce:	1c 82       	std	Y+4, r1	; 0x04
     4d0:	1d 82       	std	Y+5, r1	; 0x05
     4d2:	1b 86       	std	Y+11, r1	; 0x0b
     4d4:	1e 82       	std	Y+6, r1	; 0x06
     4d6:	1f 82       	std	Y+7, r1	; 0x07
     4d8:	18 86       	std	Y+8, r1	; 0x08
     4da:	19 86       	std	Y+9, r1	; 0x09
     4dc:	1a 86       	std	Y+10, r1	; 0x0a
     4de:	19 8e       	std	Y+25, r1	; 0x19
     4e0:	1a 8e       	std	Y+26, r1	; 0x1a
                timerBlinken = 0;                                                           //timerBlinken auf 0 setzen
            }
        }
        else
        {
            timerBlinken = PERIODE;                                                         //timerBlinken gleich PERIODE
     4e2:	0f 2e       	mov	r0, r31
     4e4:	f8 ec       	ldi	r31, 0xC8	; 200
     4e6:	af 2e       	mov	r10, r31
     4e8:	b1 2c       	mov	r11, r1
     4ea:	f0 2d       	mov	r31, r0
            {
                remoteAlarmLed = OUT_REMOTE_ALARM_LED;                              //remoteAlarm Led auf 1 setzen
            }
            if (alarmQuitTaster)                                                      //alarm quit schalter ?
            {
                alarmLed = OFF;
     4ec:	41 2c       	mov	r4, r1
     4ee:	51 2c       	mov	r5, r1
     4f0:	92 cf       	rjmp	.-220    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     4f2:	10 e0       	ldi	r17, 0x00	; 0
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
            blinken = 0;                                                                    //blinken auf 0 setzen
            timerAlarm=0;                                                          //timerFehlerfunktionOn auf 0 setzen
            timerDisorder=0;                                                         //timerFehlerfunktionOff auf 0 setzen
            timerRemote=0;                                                             //timerAlarmFehler auf 0 setzen
     4f4:	1e 86       	std	Y+14, r1	; 0x0e
     4f6:	1f 86       	std	Y+15, r1	; 0x0f
     4f8:	18 8a       	std	Y+16, r1	; 0x10
     4fa:	19 8a       	std	Y+17, r1	; 0x11
     4fc:	1a 8a       	std	Y+18, r1	; 0x12
     4fe:	1b 8a       	std	Y+19, r1	; 0x13
     500:	1c 8a       	std	Y+20, r1	; 0x14
     502:	1d 8a       	std	Y+21, r1	; 0x15
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
     504:	1a 82       	std	Y+2, r1	; 0x02
     506:	1b 82       	std	Y+3, r1	; 0x03
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
     508:	1f 8a       	std	Y+23, r1	; 0x17
     50a:	18 8e       	std	Y+24, r1	; 0x18
        {
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
     50c:	1c 86       	std	Y+12, r1	; 0x0c
     50e:	1d 86       	std	Y+13, r1	; 0x0d
        }
        switch(state)
        {
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
     510:	21 2c       	mov	r2, r1
     512:	31 2c       	mov	r3, r1
     514:	23 c0       	rjmp	.+70     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
            timerDisorder=0;                                                         //timerFehlerfunktionOff auf 0 setzen
            timerRemote=0;                                                             //timerAlarmFehler auf 0 setzen
            if (powerSchalter)
            {
                //powerLed = OUT_POWER_LED;
                state = ZU_WENIG_OZON;
     516:	12 e0       	ldi	r17, 0x02	; 2
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
            blinken = 0;                                                                    //blinken auf 0 setzen
            timerAlarm=0;                                                          //timerFehlerfunktionOn auf 0 setzen
            timerDisorder=0;                                                         //timerFehlerfunktionOff auf 0 setzen
            timerRemote=0;                                                             //timerAlarmFehler auf 0 setzen
     518:	1e 86       	std	Y+14, r1	; 0x0e
     51a:	1f 86       	std	Y+15, r1	; 0x0f
     51c:	18 8a       	std	Y+16, r1	; 0x10
     51e:	19 8a       	std	Y+17, r1	; 0x11
     520:	1a 8a       	std	Y+18, r1	; 0x12
     522:	1b 8a       	std	Y+19, r1	; 0x13
     524:	1c 8a       	std	Y+20, r1	; 0x14
     526:	1d 8a       	std	Y+21, r1	; 0x15
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
     528:	1a 82       	std	Y+2, r1	; 0x02
     52a:	1b 82       	std	Y+3, r1	; 0x03
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
     52c:	1f 8a       	std	Y+23, r1	; 0x17
     52e:	18 8e       	std	Y+24, r1	; 0x18
        {
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
     530:	1c 86       	std	Y+12, r1	; 0x0c
     532:	1d 86       	std	Y+13, r1	; 0x0d
        }
        switch(state)
        {
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
     534:	21 2c       	mov	r2, r1
     536:	31 2c       	mov	r3, r1
     538:	11 c0       	rjmp	.+34     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
            timerDisorder=0;                                                         //timerFehlerfunktionOff auf 0 setzen
            timerRemote=0;                                                             //timerAlarmFehler auf 0 setzen
            if (powerSchalter)
            {
                //powerLed = OUT_POWER_LED;
                state = ZU_WENIG_OZON;
     53a:	12 e0       	ldi	r17, 0x02	; 2
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
            blinken = 0;                                                                    //blinken auf 0 setzen
            timerAlarm=0;                                                          //timerFehlerfunktionOn auf 0 setzen
            timerDisorder=0;                                                         //timerFehlerfunktionOff auf 0 setzen
            timerRemote=0;                                                             //timerAlarmFehler auf 0 setzen
     53c:	1e 86       	std	Y+14, r1	; 0x0e
     53e:	1f 86       	std	Y+15, r1	; 0x0f
     540:	18 8a       	std	Y+16, r1	; 0x10
     542:	19 8a       	std	Y+17, r1	; 0x11
     544:	1a 8a       	std	Y+18, r1	; 0x12
     546:	1b 8a       	std	Y+19, r1	; 0x13
     548:	1c 8a       	std	Y+20, r1	; 0x14
     54a:	1d 8a       	std	Y+21, r1	; 0x15
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
            valveLed= OFF;                                                                  //valve Led auf 0 setzen
     54c:	1a 82       	std	Y+2, r1	; 0x02
     54e:	1b 82       	std	Y+3, r1	; 0x03
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
            remoteAlarmLed= OFF;                                                            //remoteAlarm Led auf 0 setzen
     550:	1f 8a       	std	Y+23, r1	; 0x17
     552:	18 8e       	std	Y+24, r1	; 0x18
        {
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
            alarmLed= OFF;                                                                  //alarm Led auf 0 setzen
            disorderLed= OFF;                                                               //disorder Led auf 0 setzen
     554:	1c 86       	std	Y+12, r1	; 0x0c
     556:	1d 86       	std	Y+13, r1	; 0x0d
        }
        switch(state)
        {
            case AUS:
            lcdLog("Aus                 ");
            powerLed= OFF;                                                                  //power Led auf 0 setzen
     558:	21 2c       	mov	r2, r1
     55a:	31 2c       	mov	r3, r1
                timerBlinken = 0;                                                           //timerBlinken auf 0 setzen
            }
        }
        else
        {
            timerBlinken = PERIODE;                                                         //timerBlinken gleich PERIODE
     55c:	c1 2c       	mov	r12, r1
     55e:	91 2c       	mov	r9, r1
     560:	e1 2c       	mov	r14, r1
     562:	f1 2c       	mov	r15, r1
     564:	61 2c       	mov	r6, r1
     566:	19 82       	std	Y+1, r1	; 0x01
     568:	71 2c       	mov	r7, r1
     56a:	81 2c       	mov	r8, r1
     56c:	1c 82       	std	Y+4, r1	; 0x04
     56e:	1d 82       	std	Y+5, r1	; 0x05
     570:	1b 86       	std	Y+11, r1	; 0x0b
     572:	1e 82       	std	Y+6, r1	; 0x06
     574:	1f 82       	std	Y+7, r1	; 0x07
     576:	18 86       	std	Y+8, r1	; 0x08
     578:	19 86       	std	Y+9, r1	; 0x09
     57a:	1a 86       	std	Y+10, r1	; 0x0a
     57c:	19 8e       	std	Y+25, r1	; 0x19
     57e:	1a 8e       	std	Y+26, r1	; 0x1a
     580:	0f 2e       	mov	r0, r31
     582:	f8 ec       	ldi	r31, 0xC8	; 200
     584:	af 2e       	mov	r10, r31
     586:	b1 2c       	mov	r11, r1
     588:	f0 2d       	mov	r31, r0
     58a:	41 2c       	mov	r4, r1
     58c:	51 2c       	mov	r5, r1
     58e:	43 cf       	rjmp	.-378    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
        }
        else
        {
            state = AUS;
        }
        if (disorderQuitTaster)                                                   //disorder Quit Schalter ?
     590:	ee 89       	ldd	r30, Y+22	; 0x16
     592:	e1 11       	cpse	r30, r1
     594:	2e ce       	rjmp	.-932    	; 0x1f2 <main+0xcc>
        {
            powerLed = OUT_POWER_LED;
        }
        else
        {
            state = AUS;
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	20 ce       	rjmp	.-960    	; 0x1da <main+0xb4>

0000059a <ledWriteAll>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
     59a:	82 b9       	out	0x02, r24	; 2
     59c:	95 b9       	out	0x05, r25	; 5
     59e:	08 95       	ret

000005a0 <switchReadAll>:
     5a0:	86 b1       	in	r24, 0x06	; 6
     5a2:	08 95       	ret

000005a4 <buttonReadAllPL>:
     5a4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     5a8:	08 95       	ret

000005aa <startSystemTimeMs>:
     5aa:	83 e0       	ldi	r24, 0x03	; 3
     5ac:	84 bd       	out	0x24, r24	; 36
     5ae:	8b e0       	ldi	r24, 0x0B	; 11
     5b0:	85 bd       	out	0x25, r24	; 37
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     5b8:	89 ef       	ldi	r24, 0xF9	; 249
     5ba:	87 bd       	out	0x27, r24	; 39
     5bc:	08 95       	ret

000005be <initAdc>:
     5be:	11 ba       	out	0x11, r1	; 17
     5c0:	10 ba       	out	0x10, r1	; 16
     5c2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     5c6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     5d0:	8f e0       	ldi	r24, 0x0F	; 15
     5d2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
     5dc:	ea e7       	ldi	r30, 0x7A	; 122
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	87 ea       	ldi	r24, 0xA7	; 167
     5e2:	80 83       	st	Z, r24
     5e4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     5e8:	80 81       	ld	r24, Z
     5ea:	80 64       	ori	r24, 0x40	; 64
     5ec:	80 83       	st	Z, r24
     5ee:	80 81       	ld	r24, Z
     5f0:	84 ff       	sbrs	r24, 4
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <initAdc+0x30>
     5f4:	ea e7       	ldi	r30, 0x7A	; 122
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	8f 7e       	andi	r24, 0xEF	; 239
     5fc:	80 83       	st	Z, r24
     5fe:	08 95       	ret

00000600 <rgbWrite>:
     600:	2f ef       	ldi	r18, 0xFF	; 255
     602:	33 e0       	ldi	r19, 0x03	; 3
     604:	f9 01       	movw	r30, r18
     606:	e8 1b       	sub	r30, r24
     608:	f9 0b       	sbc	r31, r25
     60a:	c9 01       	movw	r24, r18
     60c:	86 1b       	sub	r24, r22
     60e:	97 0b       	sbc	r25, r23
     610:	24 1b       	sub	r18, r20
     612:	35 0b       	sbc	r19, r21
     614:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     618:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     61c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     620:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
     624:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     628:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
     62c:	08 95       	ret

0000062e <initRgb>:
     62e:	8e ef       	ldi	r24, 0xFE	; 254
     630:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     634:	8b e1       	ldi	r24, 0x1B	; 27
     636:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     640:	8f ef       	ldi	r24, 0xFF	; 255
     642:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	d6 cf       	rjmp	.-84     	; 0x600 <rgbWrite>
     654:	08 95       	ret

00000656 <lcdSid>:
     656:	88 23       	and	r24, r24
     658:	11 f0       	breq	.+4      	; 0x65e <lcdSid+0x8>
     65a:	a0 9a       	sbi	0x14, 0	; 20
     65c:	08 95       	ret
     65e:	a0 98       	cbi	0x14, 0	; 20
     660:	08 95       	ret

00000662 <lcdSclk>:
     662:	88 23       	and	r24, r24
     664:	11 f0       	breq	.+4      	; 0x66a <lcdSclk+0x8>
     666:	a1 9a       	sbi	0x14, 1	; 20
     668:	08 95       	ret
     66a:	a1 98       	cbi	0x14, 1	; 20
     66c:	08 95       	ret

0000066e <lcdLight>:
     66e:	81 11       	cpse	r24, r1
     670:	04 c0       	rjmp	.+8      	; 0x67a <lcdLight+0xc>
     672:	84 b5       	in	r24, 0x24	; 36
     674:	8f 7d       	andi	r24, 0xDF	; 223
     676:	84 bd       	out	0x24, r24	; 36
     678:	08 95       	ret
     67a:	94 b5       	in	r25, 0x24	; 36
     67c:	90 62       	ori	r25, 0x20	; 32
     67e:	94 bd       	out	0x24, r25	; 36
     680:	88 bd       	out	0x28, r24	; 40
     682:	08 95       	ret

00000684 <writeLcdF>:
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	7c 01       	movw	r14, r24
     692:	eb 01       	movw	r28, r22
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	df df       	rcall	.-66     	; 0x656 <lcdSid>
     698:	05 e0       	ldi	r16, 0x05	; 5
     69a:	10 e0       	ldi	r17, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	e1 df       	rcall	.-62     	; 0x662 <lcdSclk>
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	df df       	rcall	.-66     	; 0x662 <lcdSclk>
     6a4:	01 50       	subi	r16, 0x01	; 1
     6a6:	11 09       	sbc	r17, r1
     6a8:	c9 f7       	brne	.-14     	; 0x69c <writeLcdF+0x18>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	d4 df       	rcall	.-88     	; 0x656 <lcdSid>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	d8 df       	rcall	.-80     	; 0x662 <lcdSclk>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	d6 df       	rcall	.-84     	; 0x662 <lcdSclk>
     6b6:	83 e4       	ldi	r24, 0x43	; 67
     6b8:	e8 16       	cp	r14, r24
     6ba:	f1 04       	cpc	r15, r1
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <writeLcdF+0x40>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	ca df       	rcall	.-108    	; 0x656 <lcdSid>
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <writeLcdF+0x44>
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	c7 df       	rcall	.-114    	; 0x656 <lcdSid>
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	cb df       	rcall	.-106    	; 0x662 <lcdSclk>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	c9 df       	rcall	.-110    	; 0x662 <lcdSclk>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	c1 df       	rcall	.-126    	; 0x656 <lcdSid>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	c5 df       	rcall	.-118    	; 0x662 <lcdSclk>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	c3 df       	rcall	.-122    	; 0x662 <lcdSclk>
     6dc:	04 e0       	ldi	r16, 0x04	; 4
     6de:	10 e0       	ldi	r17, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	bf df       	rcall	.-130    	; 0x662 <lcdSclk>
     6e4:	c0 ff       	sbrs	r28, 0
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <writeLcdF+0x6a>
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	b5 df       	rcall	.-150    	; 0x656 <lcdSid>
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <writeLcdF+0x6e>
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	b2 df       	rcall	.-156    	; 0x656 <lcdSid>
     6f2:	d6 95       	lsr	r29
     6f4:	c7 95       	ror	r28
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	b4 df       	rcall	.-152    	; 0x662 <lcdSclk>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	b2 df       	rcall	.-156    	; 0x662 <lcdSclk>
     6fe:	01 50       	subi	r16, 0x01	; 1
     700:	11 09       	sbc	r17, r1
     702:	71 f7       	brne	.-36     	; 0x6e0 <writeLcdF+0x5c>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	a7 df       	rcall	.-178    	; 0x656 <lcdSid>
     708:	04 e0       	ldi	r16, 0x04	; 4
     70a:	10 e0       	ldi	r17, 0x00	; 0
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	a9 df       	rcall	.-174    	; 0x662 <lcdSclk>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	a7 df       	rcall	.-178    	; 0x662 <lcdSclk>
     714:	01 50       	subi	r16, 0x01	; 1
     716:	11 09       	sbc	r17, r1
     718:	c9 f7       	brne	.-14     	; 0x70c <writeLcdF+0x88>
     71a:	04 e0       	ldi	r16, 0x04	; 4
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	a0 df       	rcall	.-192    	; 0x662 <lcdSclk>
     722:	c0 ff       	sbrs	r28, 0
     724:	03 c0       	rjmp	.+6      	; 0x72c <writeLcdF+0xa8>
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	96 df       	rcall	.-212    	; 0x656 <lcdSid>
     72a:	02 c0       	rjmp	.+4      	; 0x730 <writeLcdF+0xac>
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	93 df       	rcall	.-218    	; 0x656 <lcdSid>
     730:	d6 95       	lsr	r29
     732:	c7 95       	ror	r28
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	95 df       	rcall	.-214    	; 0x662 <lcdSclk>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	93 df       	rcall	.-218    	; 0x662 <lcdSclk>
     73c:	01 50       	subi	r16, 0x01	; 1
     73e:	11 09       	sbc	r17, r1
     740:	71 f7       	brne	.-36     	; 0x71e <writeLcdF+0x9a>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	88 df       	rcall	.-240    	; 0x656 <lcdSid>
     746:	c4 e0       	ldi	r28, 0x04	; 4
     748:	d0 e0       	ldi	r29, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	8a df       	rcall	.-236    	; 0x662 <lcdSclk>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	88 df       	rcall	.-240    	; 0x662 <lcdSclk>
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	d1 f7       	brne	.-12     	; 0x74a <writeLcdF+0xc6>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	7e df       	rcall	.-260    	; 0x656 <lcdSid>
     75a:	87 ec       	ldi	r24, 0xC7	; 199
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <writeLcdF+0xda>
     762:	00 c0       	rjmp	.+0      	; 0x764 <writeLcdF+0xe0>
     764:	00 00       	nop
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	08 95       	ret

00000774 <lcdWriteText>:
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	65 97       	sbiw	r28, 0x15	; 21
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	9e 01       	movw	r18, r28
     78c:	20 5e       	subi	r18, 0xE0	; 224
     78e:	3f 4f       	sbci	r19, 0xFF	; 255
     790:	4e 8d       	ldd	r20, Y+30	; 0x1e
     792:	5f 8d       	ldd	r21, Y+31	; 0x1f
     794:	65 e1       	ldi	r22, 0x15	; 21
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	c7 d4       	rcall	.+2446   	; 0x112c <vsnprintf>
     79e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7a2:	90 e2       	ldi	r25, 0x20	; 32
     7a4:	89 9f       	mul	r24, r25
     7a6:	60 0d       	add	r22, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	60 68       	ori	r22, 0x80	; 128
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	83 e4       	ldi	r24, 0x43	; 67
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	68 df       	rcall	.-304    	; 0x684 <writeLcdF>
     7b4:	69 81       	ldd	r22, Y+1	; 0x01
     7b6:	66 23       	and	r22, r22
     7b8:	79 f0       	breq	.+30     	; 0x7d8 <lcdWriteText+0x64>
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	1f 5f       	subi	r17, 0xFF	; 255
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	84 e4       	ldi	r24, 0x44	; 68
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	5f df       	rcall	.-322    	; 0x684 <writeLcdF>
     7c6:	e1 e0       	ldi	r30, 0x01	; 1
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	ec 0f       	add	r30, r28
     7cc:	fd 1f       	adc	r31, r29
     7ce:	e1 0f       	add	r30, r17
     7d0:	f1 1d       	adc	r31, r1
     7d2:	60 81       	ld	r22, Z
     7d4:	61 11       	cpse	r22, r1
     7d6:	f2 cf       	rjmp	.-28     	; 0x7bc <lcdWriteText+0x48>
     7d8:	65 96       	adiw	r28, 0x15	; 21
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	08 95       	ret

000007ec <lcdWriteZahl>:
     7ec:	2f 92       	push	r2
     7ee:	3f 92       	push	r3
     7f0:	4f 92       	push	r4
     7f2:	5f 92       	push	r5
     7f4:	6f 92       	push	r6
     7f6:	7f 92       	push	r7
     7f8:	8f 92       	push	r8
     7fa:	9f 92       	push	r9
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	e3 97       	sbiw	r28, 0x33	; 51
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	8a ab       	std	Y+50, r24	; 0x32
     822:	6b ab       	std	Y+51, r22	; 0x33
     824:	ed a6       	std	Y+45, r14	; 0x2d
     826:	fe a6       	std	Y+46, r15	; 0x2e
     828:	70 2e       	mov	r7, r16
     82a:	61 2e       	mov	r6, r17
     82c:	52 2e       	mov	r5, r18
     82e:	43 2e       	mov	r4, r19
     830:	cf a6       	std	Y+47, r12	; 0x2f
     832:	a8 aa       	std	Y+48, r10	; 0x30
     834:	8c 2d       	mov	r24, r12
     836:	8a 0d       	add	r24, r10
     838:	89 ab       	std	Y+49, r24	; 0x31
     83a:	85 31       	cpi	r24, 0x15	; 21
     83c:	70 f0       	brcs	.+28     	; 0x85a <lcdWriteZahl+0x6e>
     83e:	8e e4       	ldi	r24, 0x4E	; 78
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	9f 93       	push	r25
     844:	8f 93       	push	r24
     846:	9b a9       	ldd	r25, Y+51	; 0x33
     848:	9f 93       	push	r25
     84a:	ea a9       	ldd	r30, Y+50	; 0x32
     84c:	ef 93       	push	r30
     84e:	92 df       	rcall	.-220    	; 0x774 <lcdWriteText>
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	a8 c0       	rjmp	.+336    	; 0x9aa <lcdWriteZahl+0x1be>
     85a:	4e 01       	movw	r8, r28
     85c:	f5 e1       	ldi	r31, 0x15	; 21
     85e:	8f 0e       	add	r8, r31
     860:	91 1c       	adc	r9, r1
     862:	ce 01       	movw	r24, r28
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	9c a7       	std	Y+44, r25	; 0x2c
     868:	8b a7       	std	Y+43, r24	; 0x2b
     86a:	24 2e       	mov	r2, r20
     86c:	35 2e       	mov	r3, r21
     86e:	0f 2e       	mov	r0, r31
     870:	fa e0       	ldi	r31, 0x0A	; 10
     872:	af 2e       	mov	r10, r31
     874:	f0 2d       	mov	r31, r0
     876:	b1 2c       	mov	r11, r1
     878:	c1 2c       	mov	r12, r1
     87a:	d1 2c       	mov	r13, r1
     87c:	e1 2c       	mov	r14, r1
     87e:	f1 2c       	mov	r15, r1
     880:	00 e0       	ldi	r16, 0x00	; 0
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	2d a5       	ldd	r18, Y+45	; 0x2d
     886:	3e a5       	ldd	r19, Y+46	; 0x2e
     888:	47 2d       	mov	r20, r7
     88a:	56 2d       	mov	r21, r6
     88c:	65 2d       	mov	r22, r5
     88e:	74 2d       	mov	r23, r4
     890:	82 2d       	mov	r24, r2
     892:	93 2d       	mov	r25, r3
     894:	d8 d3       	rcall	.+1968   	; 0x1046 <__umoddi3>
     896:	20 5d       	subi	r18, 0xD0	; 208
     898:	f4 01       	movw	r30, r8
     89a:	22 93       	st	-Z, r18
     89c:	4f 01       	movw	r8, r30
     89e:	2d a5       	ldd	r18, Y+45	; 0x2d
     8a0:	3e a5       	ldd	r19, Y+46	; 0x2e
     8a2:	47 2d       	mov	r20, r7
     8a4:	56 2d       	mov	r21, r6
     8a6:	65 2d       	mov	r22, r5
     8a8:	74 2d       	mov	r23, r4
     8aa:	82 2d       	mov	r24, r2
     8ac:	93 2d       	mov	r25, r3
     8ae:	cd d3       	rcall	.+1946   	; 0x104a <__udivdi3>
     8b0:	2d a7       	std	Y+45, r18	; 0x2d
     8b2:	3e a7       	std	Y+46, r19	; 0x2e
     8b4:	74 2e       	mov	r7, r20
     8b6:	65 2e       	mov	r6, r21
     8b8:	56 2e       	mov	r5, r22
     8ba:	47 2e       	mov	r4, r23
     8bc:	28 2e       	mov	r2, r24
     8be:	39 2e       	mov	r3, r25
     8c0:	8b a5       	ldd	r24, Y+43	; 0x2b
     8c2:	9c a5       	ldd	r25, Y+44	; 0x2c
     8c4:	88 15       	cp	r24, r8
     8c6:	99 05       	cpc	r25, r9
     8c8:	91 f6       	brne	.-92     	; 0x86e <lcdWriteZahl+0x82>
     8ca:	84 e1       	ldi	r24, 0x14	; 20
     8cc:	99 a9       	ldd	r25, Y+49	; 0x31
     8ce:	89 1b       	sub	r24, r25
     8d0:	ef a5       	ldd	r30, Y+47	; 0x2f
     8d2:	ee 23       	and	r30, r30
     8d4:	89 f0       	breq	.+34     	; 0x8f8 <lcdWriteZahl+0x10c>
     8d6:	fe 01       	movw	r30, r28
     8d8:	75 96       	adiw	r30, 0x15	; 21
     8da:	2f a5       	ldd	r18, Y+47	; 0x2f
     8dc:	28 0f       	add	r18, r24
     8de:	a1 e0       	ldi	r26, 0x01	; 1
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	ac 0f       	add	r26, r28
     8e4:	bd 1f       	adc	r27, r29
     8e6:	a8 0f       	add	r26, r24
     8e8:	b1 1d       	adc	r27, r1
     8ea:	9c 91       	ld	r25, X
     8ec:	91 93       	st	Z+, r25
     8ee:	8f 5f       	subi	r24, 0xFF	; 255
     8f0:	82 13       	cpse	r24, r18
     8f2:	f5 cf       	rjmp	.-22     	; 0x8de <lcdWriteZahl+0xf2>
     8f4:	3f a5       	ldd	r19, Y+47	; 0x2f
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <lcdWriteZahl+0x110>
     8f8:	28 2f       	mov	r18, r24
     8fa:	3f a5       	ldd	r19, Y+47	; 0x2f
     8fc:	f8 a9       	ldd	r31, Y+48	; 0x30
     8fe:	ff 23       	and	r31, r31
     900:	f1 f0       	breq	.+60     	; 0x93e <lcdWriteZahl+0x152>
     902:	fe 01       	movw	r30, r28
     904:	e3 0f       	add	r30, r19
     906:	f1 1d       	adc	r31, r1
     908:	8e e2       	ldi	r24, 0x2E	; 46
     90a:	85 8b       	std	Z+21, r24	; 0x15
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	93 0f       	add	r25, r19
     910:	38 a9       	ldd	r19, Y+48	; 0x30
     912:	39 0f       	add	r19, r25
     914:	89 2f       	mov	r24, r25
     916:	29 1b       	sub	r18, r25
     918:	e5 e1       	ldi	r30, 0x15	; 21
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	ec 0f       	add	r30, r28
     91e:	fd 1f       	adc	r31, r29
     920:	e8 0f       	add	r30, r24
     922:	f1 1d       	adc	r31, r1
     924:	92 2f       	mov	r25, r18
     926:	98 0f       	add	r25, r24
     928:	a1 e0       	ldi	r26, 0x01	; 1
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	ac 0f       	add	r26, r28
     92e:	bd 1f       	adc	r27, r29
     930:	a9 0f       	add	r26, r25
     932:	b1 1d       	adc	r27, r1
     934:	9c 91       	ld	r25, X
     936:	90 83       	st	Z, r25
     938:	8f 5f       	subi	r24, 0xFF	; 255
     93a:	38 13       	cpse	r19, r24
     93c:	ed cf       	rjmp	.-38     	; 0x918 <lcdWriteZahl+0x12c>
     93e:	fe 01       	movw	r30, r28
     940:	e3 0f       	add	r30, r19
     942:	f1 1d       	adc	r31, r1
     944:	15 8a       	std	Z+21, r1	; 0x15
     946:	8d 89       	ldd	r24, Y+21	; 0x15
     948:	80 33       	cpi	r24, 0x30	; 48
     94a:	11 f5       	brne	.+68     	; 0x990 <lcdWriteZahl+0x1a4>
     94c:	8f a5       	ldd	r24, Y+47	; 0x2f
     94e:	48 2f       	mov	r20, r24
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	41 50       	subi	r20, 0x01	; 1
     954:	51 09       	sbc	r21, r1
     956:	14 16       	cp	r1, r20
     958:	15 06       	cpc	r1, r21
     95a:	d4 f4       	brge	.+52     	; 0x990 <lcdWriteZahl+0x1a4>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	60 e2       	ldi	r22, 0x20	; 32
     964:	2f 5f       	subi	r18, 0xFF	; 255
     966:	e5 e1       	ldi	r30, 0x15	; 21
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	ec 0f       	add	r30, r28
     96c:	fd 1f       	adc	r31, r29
     96e:	e8 0f       	add	r30, r24
     970:	f9 1f       	adc	r31, r25
     972:	60 83       	st	Z, r22
     974:	82 2f       	mov	r24, r18
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	e5 e1       	ldi	r30, 0x15	; 21
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	ec 0f       	add	r30, r28
     97e:	fd 1f       	adc	r31, r29
     980:	e8 0f       	add	r30, r24
     982:	f9 1f       	adc	r31, r25
     984:	30 81       	ld	r19, Z
     986:	30 33       	cpi	r19, 0x30	; 48
     988:	19 f4       	brne	.+6      	; 0x990 <lcdWriteZahl+0x1a4>
     98a:	84 17       	cp	r24, r20
     98c:	95 07       	cpc	r25, r21
     98e:	54 f3       	brlt	.-44     	; 0x964 <lcdWriteZahl+0x178>
     990:	ce 01       	movw	r24, r28
     992:	45 96       	adiw	r24, 0x15	; 21
     994:	9f 93       	push	r25
     996:	8f 93       	push	r24
     998:	9b a9       	ldd	r25, Y+51	; 0x33
     99a:	9f 93       	push	r25
     99c:	ea a9       	ldd	r30, Y+50	; 0x32
     99e:	ef 93       	push	r30
     9a0:	e9 de       	rcall	.-558    	; 0x774 <lcdWriteText>
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	e3 96       	adiw	r28, 0x33	; 51
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	df 90       	pop	r13
     9c4:	cf 90       	pop	r12
     9c6:	bf 90       	pop	r11
     9c8:	af 90       	pop	r10
     9ca:	9f 90       	pop	r9
     9cc:	8f 90       	pop	r8
     9ce:	7f 90       	pop	r7
     9d0:	6f 90       	pop	r6
     9d2:	5f 90       	pop	r5
     9d4:	4f 90       	pop	r4
     9d6:	3f 90       	pop	r3
     9d8:	2f 90       	pop	r2
     9da:	08 95       	ret

000009dc <lcdClear>:
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	83 e4       	ldi	r24, 0x43	; 67
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	4f de       	rcall	.-866    	; 0x684 <writeLcdF>
     9e6:	8f e3       	ldi	r24, 0x3F	; 63
     9e8:	9f e1       	ldi	r25, 0x1F	; 31
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <lcdClear+0xe>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <lcdClear+0x14>
     9f0:	00 00       	nop
     9f2:	8d e1       	ldi	r24, 0x1D	; 29
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	9f 93       	push	r25
     9f8:	8f 93       	push	r24
     9fa:	1f 92       	push	r1
     9fc:	1f 92       	push	r1
     9fe:	ba de       	rcall	.-652    	; 0x774 <lcdWriteText>
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	08 95       	ret

00000a0a <initLcd>:
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	2a de       	rcall	.-940    	; 0x662 <lcdSclk>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	22 de       	rcall	.-956    	; 0x656 <lcdSid>
     a12:	64 e3       	ldi	r22, 0x34	; 52
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	83 e4       	ldi	r24, 0x43	; 67
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	34 de       	rcall	.-920    	; 0x684 <writeLcdF>
     a1c:	69 e0       	ldi	r22, 0x09	; 9
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	83 e4       	ldi	r24, 0x43	; 67
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	2f de       	rcall	.-930    	; 0x684 <writeLcdF>
     a26:	60 e3       	ldi	r22, 0x30	; 48
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	83 e4       	ldi	r24, 0x43	; 67
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	2a de       	rcall	.-940    	; 0x684 <writeLcdF>
     a30:	6c e0       	ldi	r22, 0x0C	; 12
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	83 e4       	ldi	r24, 0x43	; 67
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	25 de       	rcall	.-950    	; 0x684 <writeLcdF>
     a3a:	d0 df       	rcall	.-96     	; 0x9dc <lcdClear>
     a3c:	67 e0       	ldi	r22, 0x07	; 7
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	83 e4       	ldi	r24, 0x43	; 67
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	1f de       	rcall	.-962    	; 0x684 <writeLcdF>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	12 ce       	rjmp	.-988    	; 0x66e <lcdLight>
     a4a:	08 95       	ret

00000a4c <initBoard>:
     a4c:	4f 92       	push	r4
     a4e:	5f 92       	push	r5
     a50:	6f 92       	push	r6
     a52:	7f 92       	push	r7
     a54:	8f 92       	push	r8
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	c8 2f       	mov	r28, r24
     a6e:	85 b7       	in	r24, 0x35	; 53
     a70:	85 bf       	out	0x35, r24	; 53
     a72:	12 b8       	out	0x02, r1	; 2
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	81 b9       	out	0x01, r24	; 1
     a78:	15 b8       	out	0x05, r1	; 5
     a7a:	84 b9       	out	0x04, r24	; 4
     a7c:	88 b9       	out	0x08, r24	; 8
     a7e:	17 b8       	out	0x07, r1	; 7
     a80:	8b b9       	out	0x0b, r24	; 11
     a82:	1a b8       	out	0x0a, r1	; 10
     a84:	8e b9       	out	0x0e, r24	; 14
     a86:	1d b8       	out	0x0d, r1	; 13
     a88:	72 98       	cbi	0x0e, 2	; 14
     a8a:	11 ba       	out	0x11, r1	; 17
     a8c:	10 ba       	out	0x10, r1	; 16
     a8e:	94 e0       	ldi	r25, 0x04	; 4
     a90:	94 bb       	out	0x14, r25	; 20
     a92:	93 b3       	in	r25, 0x13	; 19
     a94:	93 60       	ori	r25, 0x03	; 3
     a96:	93 bb       	out	0x13, r25	; 19
     a98:	9d 9a       	sbi	0x13, 5	; 19
     a9a:	97 ec       	ldi	r25, 0xC7	; 199
     a9c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     aa0:	98 e3       	ldi	r25, 0x38	; 56
     aa2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     aa6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     aaa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
     aae:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     ab2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     ab6:	8c e3       	ldi	r24, 0x3C	; 60
     ab8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     abc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
     ac0:	78 94       	sei
     ac2:	73 dd       	rcall	.-1306   	; 0x5aa <startSystemTimeMs>
     ac4:	a2 df       	rcall	.-188    	; 0xa0a <initLcd>
     ac6:	7b dd       	rcall	.-1290   	; 0x5be <initAdc>
     ac8:	b2 dd       	rcall	.-1180   	; 0x62e <initRgb>
     aca:	cc 23       	and	r28, r28
     acc:	09 f4       	brne	.+2      	; 0xad0 <initBoard+0x84>
     ace:	b8 c0       	rjmp	.+368    	; 0xc40 <initBoard+0x1f4>
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	cd dd       	rcall	.-1126   	; 0x66e <lcdLight>
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	6f ef       	ldi	r22, 0xFF	; 255
     ada:	73 e0       	ldi	r23, 0x03	; 3
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	8f dd       	rcall	.-1250   	; 0x600 <rgbWrite>
     ae2:	83 e6       	ldi	r24, 0x63	; 99
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	1f 92       	push	r1
     aec:	1f 92       	push	r1
     aee:	42 de       	rcall	.-892    	; 0x774 <lcdWriteText>
     af0:	87 e7       	ldi	r24, 0x77	; 119
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	1f 92       	push	r1
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	8f 93       	push	r24
     afe:	3a de       	rcall	.-908    	; 0x774 <lcdWriteText>
     b00:	8e e4       	ldi	r24, 0x4E	; 78
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	9f 93       	push	r25
     b06:	8f 93       	push	r24
     b08:	1f 92       	push	r1
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	8f 93       	push	r24
     b0e:	32 de       	rcall	.-924    	; 0x774 <lcdWriteText>
     b10:	86 e8       	ldi	r24, 0x86	; 134
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	9f 93       	push	r25
     b16:	8f 93       	push	r24
     b18:	1f 92       	push	r1
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	8f 93       	push	r24
     b1e:	2a de       	rcall	.-940    	; 0x774 <lcdWriteText>
     b20:	8d b7       	in	r24, 0x3d	; 61
     b22:	9e b7       	in	r25, 0x3e	; 62
     b24:	40 96       	adiw	r24, 0x10	; 16
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	9e bf       	out	0x3e, r25	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	8d bf       	out	0x3d, r24	; 61
     b30:	88 24       	eor	r8, r8
     b32:	83 94       	inc	r8
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	71 2c       	mov	r7, r1
     b38:	99 24       	eor	r9, r9
     b3a:	93 94       	inc	r9
     b3c:	d0 e0       	ldi	r29, 0x00	; 0
     b3e:	cc 24       	eor	r12, r12
     b40:	c3 94       	inc	r12
     b42:	d1 2c       	mov	r13, r1
     b44:	e1 2c       	mov	r14, r1
     b46:	68 94       	set
     b48:	ff 24       	eor	r15, r15
     b4a:	f7 f8       	bld	r15, 7
     b4c:	66 24       	eor	r6, r6
     b4e:	63 94       	inc	r6
     b50:	51 2c       	mov	r5, r1
     b52:	09 e0       	ldi	r16, 0x09	; 9
     b54:	11 e0       	ldi	r17, 0x01	; 1
     b56:	0f 2e       	mov	r0, r31
     b58:	f9 e9       	ldi	r31, 0x99	; 153
     b5a:	af 2e       	mov	r10, r31
     b5c:	f2 e0       	ldi	r31, 0x02	; 2
     b5e:	bf 2e       	mov	r11, r31
     b60:	f0 2d       	mov	r31, r0
     b62:	0f 2e       	mov	r0, r31
     b64:	f3 e0       	ldi	r31, 0x03	; 3
     b66:	4f 2e       	mov	r4, r31
     b68:	f0 2d       	mov	r31, r0
     b6a:	99 20       	and	r9, r9
     b6c:	49 f0       	breq	.+18     	; 0xb80 <initBoard+0x134>
     b6e:	c7 01       	movw	r24, r14
     b70:	0d 2e       	mov	r0, r29
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <initBoard+0x12c>
     b74:	96 95       	lsr	r25
     b76:	87 95       	ror	r24
     b78:	0a 94       	dec	r0
     b7a:	e2 f7       	brpl	.-8      	; 0xb74 <initBoard+0x128>
     b7c:	0e dd       	rcall	.-1508   	; 0x59a <ledWriteAll>
     b7e:	08 c0       	rjmp	.+16     	; 0xb90 <initBoard+0x144>
     b80:	c6 01       	movw	r24, r12
     b82:	0d 2e       	mov	r0, r29
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <initBoard+0x13e>
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	0a 94       	dec	r0
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <initBoard+0x13a>
     b8e:	05 dd       	rcall	.-1526   	; 0x59a <ledWriteAll>
     b90:	df 5f       	subi	r29, 0xFF	; 255
     b92:	d1 31       	cpi	r29, 0x11	; 17
     b94:	28 f0       	brcs	.+10     	; 0xba0 <initBoard+0x154>
     b96:	86 2d       	mov	r24, r6
     b98:	91 10       	cpse	r9, r1
     b9a:	85 2d       	mov	r24, r5
     b9c:	98 2e       	mov	r9, r24
     b9e:	d0 e0       	ldi	r29, 0x00	; 0
     ba0:	88 20       	and	r8, r8
     ba2:	11 f0       	breq	.+4      	; 0xba8 <initBoard+0x15c>
     ba4:	ce 5f       	subi	r28, 0xFE	; 254
     ba6:	01 c0       	rjmp	.+2      	; 0xbaa <initBoard+0x15e>
     ba8:	c2 50       	subi	r28, 0x02	; 2
     baa:	8c 2f       	mov	r24, r28
     bac:	60 dd       	rcall	.-1344   	; 0x66e <lcdLight>
     bae:	ce 3f       	cpi	r28, 0xFE	; 254
     bb0:	21 f0       	breq	.+8      	; 0xbba <initBoard+0x16e>
     bb2:	c8 37       	cpi	r28, 0x78	; 120
     bb4:	19 f4       	brne	.+6      	; 0xbbc <initBoard+0x170>
     bb6:	86 2c       	mov	r8, r6
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <initBoard+0x170>
     bba:	85 2c       	mov	r8, r5
     bbc:	71 10       	cpse	r7, r1
     bbe:	3b c0       	rjmp	.+118    	; 0xc36 <initBoard+0x1ea>
     bc0:	f8 01       	movw	r30, r16
     bc2:	80 81       	ld	r24, Z
     bc4:	83 7c       	andi	r24, 0xC3	; 195
     bc6:	91 f0       	breq	.+36     	; 0xbec <initBoard+0x1a0>
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	66 e2       	ldi	r22, 0x26	; 38
     bce:	72 e0       	ldi	r23, 0x02	; 2
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	15 dd       	rcall	.-1494   	; 0x600 <rgbWrite>
     bd6:	bf 92       	push	r11
     bd8:	af 92       	push	r10
     bda:	1f 92       	push	r1
     bdc:	4f 92       	push	r4
     bde:	ca dd       	rcall	.-1132   	; 0x774 <lcdWriteText>
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	76 2c       	mov	r7, r6
     bea:	25 c0       	rjmp	.+74     	; 0xc36 <initBoard+0x1ea>
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	9c e7       	ldi	r25, 0x7C	; 124
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <initBoard+0x1a4>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <initBoard+0x1aa>
     bf6:	00 00       	nop
     bf8:	b8 cf       	rjmp	.-144    	; 0xb6a <initBoard+0x11e>
     bfa:	f0 de       	rcall	.-544    	; 0x9dc <lcdClear>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	37 dd       	rcall	.-1426   	; 0x66e <lcdLight>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	ca dc       	rcall	.-1644   	; 0x59a <ledWriteAll>
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	f6 dc       	rcall	.-1556   	; 0x600 <rgbWrite>
     c14:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <systemTimeMs>
     c18:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <systemTimeMs+0x1>
     c1c:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <systemTimeMs+0x2>
     c20:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <systemTimeMs+0x3>
     c24:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <systemTimeMs+0x4>
     c28:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <systemTimeMs+0x5>
     c2c:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <systemTimeMs+0x6>
     c30:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <systemTimeMs+0x7>
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <initBoard+0x1f4>
     c36:	f8 01       	movw	r30, r16
     c38:	80 81       	ld	r24, Z
     c3a:	83 7c       	andi	r24, 0xC3	; 195
     c3c:	b9 f6       	brne	.-82     	; 0xbec <initBoard+0x1a0>
     c3e:	dd cf       	rjmp	.-70     	; 0xbfa <initBoard+0x1ae>
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	bf 90       	pop	r11
     c52:	af 90       	pop	r10
     c54:	9f 90       	pop	r9
     c56:	8f 90       	pop	r8
     c58:	7f 90       	pop	r7
     c5a:	6f 90       	pop	r6
     c5c:	5f 90       	pop	r5
     c5e:	4f 90       	pop	r4
     c60:	08 95       	ret

00000c62 <lcdLog>:
     c62:	6f 92       	push	r6
     c64:	7f 92       	push	r7
     c66:	8f 92       	push	r8
     c68:	9f 92       	push	r9
     c6a:	af 92       	push	r10
     c6c:	bf 92       	push	r11
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	60 97       	sbiw	r28, 0x10	; 16
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     c92:	88 23       	and	r24, r24
     c94:	b1 f1       	breq	.+108    	; 0xd02 <lcdLog+0xa0>
     c96:	a2 de       	rcall	.-700    	; 0x9dc <lcdClear>
     c98:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
     c9c:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <nummer.2616+0x1>
     ca0:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <nummer.2616>
     ca4:	0f 2e       	mov	r0, r31
     ca6:	f4 ef       	ldi	r31, 0xF4	; 244
     ca8:	8f 2e       	mov	r8, r31
     caa:	f2 e0       	ldi	r31, 0x02	; 2
     cac:	9f 2e       	mov	r9, r31
     cae:	f0 2d       	mov	r31, r0
     cb0:	04 eb       	ldi	r16, 0xB4	; 180
     cb2:	12 e0       	ldi	r17, 0x02	; 2
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	40 e2       	ldi	r20, 0x20	; 32
     cba:	bd 01       	movw	r22, r26
     cbc:	f4 01       	movw	r30, r8
     cbe:	11 92       	st	Z+, r1
     cc0:	11 92       	st	Z+, r1
     cc2:	4f 01       	movw	r8, r30
     cc4:	f8 01       	movw	r30, r16
     cc6:	41 93       	st	Z+, r20
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	13 c0       	rjmp	.+38     	; 0xcf4 <lcdLog+0x92>
     cce:	62 95       	swap	r22
     cd0:	72 95       	swap	r23
     cd2:	70 7f       	andi	r23, 0xF0	; 240
     cd4:	76 27       	eor	r23, r22
     cd6:	60 7f       	andi	r22, 0xF0	; 240
     cd8:	76 27       	eor	r23, r22
     cda:	6c 54       	subi	r22, 0x4C	; 76
     cdc:	7d 4f       	sbci	r23, 0xFD	; 253
     cde:	fb 01       	movw	r30, r22
     ce0:	e2 0f       	add	r30, r18
     ce2:	f3 1f       	adc	r31, r19
     ce4:	10 82       	st	Z, r1
     ce6:	11 96       	adiw	r26, 0x01	; 1
     ce8:	00 5f       	subi	r16, 0xF0	; 240
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	a4 30       	cpi	r26, 0x04	; 4
     cee:	b1 05       	cpc	r27, r1
     cf0:	21 f7       	brne	.-56     	; 0xcba <lcdLog+0x58>
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <lcdLog+0xa0>
     cf4:	9c 01       	movw	r18, r24
     cf6:	41 93       	st	Z+, r20
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	80 31       	cpi	r24, 0x10	; 16
     cfc:	91 05       	cpc	r25, r1
     cfe:	d1 f7       	brne	.-12     	; 0xcf4 <lcdLog+0x92>
     d00:	e6 cf       	rjmp	.-52     	; 0xcce <lcdLog+0x6c>
     d02:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <nummer.2616>
     d06:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <nummer.2616+0x1>
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <nummer.2616+0x1>
     d10:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <nummer.2616>
     d14:	9e 01       	movw	r18, r28
     d16:	2c 5d       	subi	r18, 0xDC	; 220
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	4a a1       	ldd	r20, Y+34	; 0x22
     d1c:	5b a1       	ldd	r21, Y+35	; 0x23
     d1e:	60 e1       	ldi	r22, 0x10	; 16
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	ce 01       	movw	r24, r28
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	02 d2       	rcall	.+1028   	; 0x112c <vsnprintf>
     d28:	8e 01       	movw	r16, r28
     d2a:	0f 5f       	subi	r16, 0xFF	; 255
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
     d2e:	4e 01       	movw	r8, r28
     d30:	f1 e1       	ldi	r31, 0x11	; 17
     d32:	8f 0e       	add	r8, r31
     d34:	91 1c       	adc	r9, r1
     d36:	f8 01       	movw	r30, r16
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	30 e2       	ldi	r19, 0x20	; 32
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	df 01       	movw	r26, r30
     d40:	80 81       	ld	r24, Z
     d42:	88 23       	and	r24, r24
     d44:	19 f0       	breq	.+6      	; 0xd4c <lcdLog+0xea>
     d46:	99 23       	and	r25, r25
     d48:	19 f0       	breq	.+6      	; 0xd50 <lcdLog+0xee>
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <lcdLog+0xec>
     d4c:	92 2f       	mov	r25, r18
     d4e:	3c 93       	st	X, r19
     d50:	31 96       	adiw	r30, 0x01	; 1
     d52:	e8 15       	cp	r30, r8
     d54:	f9 05       	cpc	r31, r9
     d56:	99 f7       	brne	.-26     	; 0xd3e <lcdLog+0xdc>
     d58:	18 8a       	std	Y+16, r1	; 0x10
     d5a:	64 eb       	ldi	r22, 0xB4	; 180
     d5c:	72 e0       	ldi	r23, 0x02	; 2
     d5e:	ce 01       	movw	r24, r28
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	db d1       	rcall	.+950    	; 0x111a <strcmp>
     d64:	88 23       	and	r24, r24
     d66:	09 f4       	brne	.+2      	; 0xd6a <lcdLog+0x108>
     d68:	7e c0       	rjmp	.+252    	; 0xe66 <lcdLog+0x204>
     d6a:	0f 2e       	mov	r0, r31
     d6c:	fa ef       	ldi	r31, 0xFA	; 250
     d6e:	6f 2e       	mov	r6, r31
     d70:	f2 e0       	ldi	r31, 0x02	; 2
     d72:	7f 2e       	mov	r7, r31
     d74:	f0 2d       	mov	r31, r0
     d76:	64 ee       	ldi	r22, 0xE4	; 228
     d78:	72 e0       	ldi	r23, 0x02	; 2
     d7a:	44 eb       	ldi	r20, 0xB4	; 180
     d7c:	52 e0       	ldi	r21, 0x02	; 2
     d7e:	f3 01       	movw	r30, r6
     d80:	92 91       	ld	r25, -Z
     d82:	82 91       	ld	r24, -Z
     d84:	3f 01       	movw	r6, r30
     d86:	93 83       	std	Z+3, r25	; 0x03
     d88:	82 83       	std	Z+2, r24	; 0x02
     d8a:	db 01       	movw	r26, r22
     d8c:	50 97       	sbiw	r26, 0x10	; 16
     d8e:	9b 01       	movw	r18, r22
     d90:	20 5f       	subi	r18, 0xF0	; 240
     d92:	3f 4f       	sbci	r19, 0xFF	; 255
     d94:	fb 01       	movw	r30, r22
     d96:	8d 91       	ld	r24, X+
     d98:	81 93       	st	Z+, r24
     d9a:	e2 17       	cp	r30, r18
     d9c:	f3 07       	cpc	r31, r19
     d9e:	d9 f7       	brne	.-10     	; 0xd96 <lcdLog+0x134>
     da0:	60 51       	subi	r22, 0x10	; 16
     da2:	71 09       	sbc	r23, r1
     da4:	64 17       	cp	r22, r20
     da6:	75 07       	cpc	r23, r21
     da8:	51 f7       	brne	.-44     	; 0xd7e <lcdLog+0x11c>
     daa:	f8 01       	movw	r30, r16
     dac:	81 91       	ld	r24, Z+
     dae:	8f 01       	movw	r16, r30
     db0:	fa 01       	movw	r30, r20
     db2:	81 93       	st	Z+, r24
     db4:	af 01       	movw	r20, r30
     db6:	08 15       	cp	r16, r8
     db8:	19 05       	cpc	r17, r9
     dba:	b9 f7       	brne	.-18     	; 0xdaa <lcdLog+0x148>
     dbc:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <nummer.2616>
     dc0:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <nummer.2616+0x1>
     dc4:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <lcdPrintNr.2614+0x1>
     dc8:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <lcdPrintNr.2614>
     dcc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <lcdLogZeilen>
     dd0:	94 e0       	ldi	r25, 0x04	; 4
     dd2:	d9 2e       	mov	r13, r25
     dd4:	d8 1a       	sub	r13, r24
     dd6:	f3 e0       	ldi	r31, 0x03	; 3
     dd8:	fd 15       	cp	r31, r13
     dda:	08 f4       	brcc	.+2      	; 0xdde <lcdLog+0x17c>
     ddc:	5b c0       	rjmp	.+182    	; 0xe94 <lcdLog+0x232>
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	b8 2e       	mov	r11, r24
     de2:	bd 18       	sub	r11, r13
     de4:	0f 2e       	mov	r0, r31
     de6:	f5 e0       	ldi	r31, 0x05	; 5
     de8:	6f 2e       	mov	r6, r31
     dea:	f0 2d       	mov	r31, r0
     dec:	0f 2e       	mov	r0, r31
     dee:	fe ea       	ldi	r31, 0xAE	; 174
     df0:	8f 2e       	mov	r8, r31
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	9f 2e       	mov	r9, r31
     df6:	f0 2d       	mov	r31, r0
     df8:	68 94       	set
     dfa:	77 24       	eor	r7, r7
     dfc:	72 f8       	bld	r7, 2
     dfe:	0b 2d       	mov	r16, r11
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	c8 01       	movw	r24, r16
     e04:	82 95       	swap	r24
     e06:	92 95       	swap	r25
     e08:	90 7f       	andi	r25, 0xF0	; 240
     e0a:	98 27       	eor	r25, r24
     e0c:	80 7f       	andi	r24, 0xF0	; 240
     e0e:	98 27       	eor	r25, r24
     e10:	8c 54       	subi	r24, 0x4C	; 76
     e12:	9d 4f       	sbci	r25, 0xFD	; 253
     e14:	9f 93       	push	r25
     e16:	8f 93       	push	r24
     e18:	6f 92       	push	r6
     e1a:	df 92       	push	r13
     e1c:	ab dc       	rcall	.-1706   	; 0x774 <lcdWriteText>
     e1e:	9f 92       	push	r9
     e20:	8f 92       	push	r8
     e22:	7f 92       	push	r7
     e24:	df 92       	push	r13
     e26:	a6 dc       	rcall	.-1716   	; 0x774 <lcdWriteText>
     e28:	00 0f       	add	r16, r16
     e2a:	11 1f       	adc	r17, r17
     e2c:	f8 01       	movw	r30, r16
     e2e:	ec 50       	subi	r30, 0x0C	; 12
     e30:	fd 4f       	sbci	r31, 0xFD	; 253
     e32:	00 81       	ld	r16, Z
     e34:	11 81       	ldd	r17, Z+1	; 0x01
     e36:	a1 2c       	mov	r10, r1
     e38:	c7 2c       	mov	r12, r7
     e3a:	e0 2e       	mov	r14, r16
     e3c:	f1 2e       	mov	r15, r17
     e3e:	00 e0       	ldi	r16, 0x00	; 0
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	8d 2d       	mov	r24, r13
     e4e:	ce dc       	rcall	.-1636   	; 0x7ec <lcdWriteZahl>
     e50:	d3 94       	inc	r13
     e52:	ba 94       	dec	r11
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	94 e0       	ldi	r25, 0x04	; 4
     e60:	d9 12       	cpse	r13, r25
     e62:	cd cf       	rjmp	.-102    	; 0xdfe <lcdLog+0x19c>
     e64:	17 c0       	rjmp	.+46     	; 0xe94 <lcdLog+0x232>
     e66:	00 91 fc 02 	lds	r16, 0x02FC	; 0x8002fc <nummer.2616>
     e6a:	10 91 fd 02 	lds	r17, 0x02FD	; 0x8002fd <nummer.2616+0x1>
     e6e:	10 93 f5 02 	sts	0x02F5, r17	; 0x8002f5 <lcdPrintNr.2614+0x1>
     e72:	00 93 f4 02 	sts	0x02F4, r16	; 0x8002f4 <lcdPrintNr.2614>
     e76:	a1 2c       	mov	r10, r1
     e78:	68 94       	set
     e7a:	cc 24       	eor	r12, r12
     e7c:	c2 f8       	bld	r12, 2
     e7e:	e0 2e       	mov	r14, r16
     e80:	f1 2e       	mov	r15, r17
     e82:	00 e0       	ldi	r16, 0x00	; 0
     e84:	10 e0       	ldi	r17, 0x00	; 0
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	ac dc       	rcall	.-1704   	; 0x7ec <lcdWriteZahl>
     e94:	60 96       	adiw	r28, 0x10	; 16
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	bf 90       	pop	r11
     eb2:	af 90       	pop	r10
     eb4:	9f 90       	pop	r9
     eb6:	8f 90       	pop	r8
     eb8:	7f 90       	pop	r7
     eba:	6f 90       	pop	r6
     ebc:	08 95       	ret

00000ebe <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	28 97       	sbiw	r28, 0x08	; 8
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
     ed2:	88 e0       	ldi	r24, 0x08	; 8
     ed4:	e2 e0       	ldi	r30, 0x02	; 2
     ed6:	f2 e0       	ldi	r31, 0x02	; 2
     ed8:	de 01       	movw	r26, r28
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	01 90       	ld	r0, Z+
     ede:	0d 92       	st	X+, r0
     ee0:	8a 95       	dec	r24
     ee2:	e1 f7       	brne	.-8      	; 0xedc <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
     ee4:	e5 e0       	ldi	r30, 0x05	; 5
     ee6:	f1 e0       	ldi	r31, 0x01	; 1
     ee8:	80 81       	ld	r24, Z
     eea:	8f 7b       	andi	r24, 0xBF	; 191
     eec:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
     eee:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <Zeilen_Nr.2731>
     ef2:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <Zeilen_Nr.2731+0x1>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	8c 0f       	add	r24, r28
     efc:	9d 1f       	adc	r25, r29
     efe:	e8 0f       	add	r30, r24
     f00:	f9 1f       	adc	r31, r25
     f02:	80 81       	ld	r24, Z
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <__data_end+0x1>
     f0a:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__data_end>
     f0e:	a8 e7       	ldi	r26, 0x78	; 120
     f10:	b3 e0       	ldi	r27, 0x03	; 3
     f12:	28 e0       	ldi	r18, 0x08	; 8
     f14:	33 e0       	ldi	r19, 0x03	; 3
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
     f16:	e5 e0       	ldi	r30, 0x05	; 5
     f18:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
     f1a:	5e 91       	ld	r21, -X
     f1c:	4e 91       	ld	r20, -X
     f1e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     f22:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <__data_end+0x1>
     f26:	84 23       	and	r24, r20
     f28:	95 23       	and	r25, r21
     f2a:	89 2b       	or	r24, r25
     f2c:	21 f0       	breq	.+8      	; 0xf36 <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
     f2e:	80 81       	ld	r24, Z
     f30:	80 62       	ori	r24, 0x20	; 32
     f32:	80 83       	st	Z, r24
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
     f36:	80 81       	ld	r24, Z
     f38:	8f 7d       	andi	r24, 0xDF	; 223
     f3a:	80 83       	st	Z, r24
        }
        CLOCK_1;
     f3c:	80 81       	ld	r24, Z
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
     f42:	80 81       	ld	r24, Z
     f44:	8f 7e       	andi	r24, 0xEF	; 239
     f46:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
     f48:	a2 17       	cp	r26, r18
     f4a:	b3 07       	cpc	r27, r19
     f4c:	31 f7       	brne	.-52     	; 0xf1a <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
     f4e:	e5 e0       	ldi	r30, 0x05	; 5
     f50:	f1 e0       	ldi	r31, 0x01	; 1
     f52:	80 81       	ld	r24, Z
     f54:	87 7f       	andi	r24, 0xF7	; 247
     f56:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
     f58:	80 81       	ld	r24, Z
     f5a:	88 7f       	andi	r24, 0xF8	; 248
     f5c:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
     f5e:	90 81       	ld	r25, Z
     f60:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <Zeilen_Nr.2731>
     f64:	89 2b       	or	r24, r25
     f66:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
     f68:	80 81       	ld	r24, Z
     f6a:	80 64       	ori	r24, 0x40	; 64
     f6c:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
     f6e:	80 81       	ld	r24, Z
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
     f74:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <Zeilen_Nr.2731>
     f78:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <Zeilen_Nr.2731+0x1>
     f7c:	87 30       	cpi	r24, 0x07	; 7
     f7e:	91 05       	cpc	r25, r1
     f80:	30 f4       	brcc	.+12     	; 0xf8e <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <Zeilen_Nr.2731+0x1>
     f88:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <Zeilen_Nr.2731>
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
     f8e:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <Zeilen_Nr.2731+0x1>
     f92:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <Zeilen_Nr.2731>
        writeTextFinished = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <writeTextFinished>
    }
    
     f9c:	28 96       	adiw	r28, 0x08	; 8
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	0b b6       	in	r0, 0x3b	; 59
     fba:	0f 92       	push	r0
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
    systemTimeMs += 1;
     fd4:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <systemTimeMs>
     fd8:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <systemTimeMs+0x1>
     fdc:	40 91 01 03 	lds	r20, 0x0301	; 0x800301 <systemTimeMs+0x2>
     fe0:	50 91 02 03 	lds	r21, 0x0302	; 0x800302 <systemTimeMs+0x3>
     fe4:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <systemTimeMs+0x4>
     fe8:	70 91 04 03 	lds	r23, 0x0304	; 0x800304 <systemTimeMs+0x5>
     fec:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <systemTimeMs+0x6>
     ff0:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <systemTimeMs+0x7>
     ff4:	a1 e0       	ldi	r26, 0x01	; 1
     ff6:	85 d0       	rcall	.+266    	; 0x1102 <__adddi3_s8>
     ff8:	20 93 ff 02 	sts	0x02FF, r18	; 0x8002ff <systemTimeMs>
     ffc:	30 93 00 03 	sts	0x0300, r19	; 0x800300 <systemTimeMs+0x1>
    1000:	40 93 01 03 	sts	0x0301, r20	; 0x800301 <systemTimeMs+0x2>
    1004:	50 93 02 03 	sts	0x0302, r21	; 0x800302 <systemTimeMs+0x3>
    1008:	60 93 03 03 	sts	0x0303, r22	; 0x800303 <systemTimeMs+0x4>
    100c:	70 93 04 03 	sts	0x0304, r23	; 0x800304 <systemTimeMs+0x5>
    1010:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <systemTimeMs+0x6>
    1014:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
    1018:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <matrixRunning>
    101c:	81 11       	cpse	r24, r1
    101e:	4f df       	rcall	.-354    	; 0xebe <matrixWriteNextLine>
}
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0b be       	out	0x3b, r0	; 59
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <__umoddi3>:
    1046:	68 94       	set
    1048:	01 c0       	rjmp	.+2      	; 0x104c <__udivdi3_umoddi3>

0000104a <__udivdi3>:
    104a:	e8 94       	clt

0000104c <__udivdi3_umoddi3>:
    104c:	8f 92       	push	r8
    104e:	9f 92       	push	r9
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	05 d0       	rcall	.+10     	; 0x1060 <__udivmod64>
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	9f 90       	pop	r9
    105c:	8f 90       	pop	r8
    105e:	08 95       	ret

00001060 <__udivmod64>:
    1060:	88 24       	eor	r8, r8
    1062:	99 24       	eor	r9, r9
    1064:	f4 01       	movw	r30, r8
    1066:	e4 01       	movw	r28, r8
    1068:	b0 e4       	ldi	r27, 0x40	; 64
    106a:	9f 93       	push	r25
    106c:	aa 27       	eor	r26, r26
    106e:	9a 15       	cp	r25, r10
    1070:	8b 04       	cpc	r8, r11
    1072:	9c 04       	cpc	r9, r12
    1074:	ed 05       	cpc	r30, r13
    1076:	fe 05       	cpc	r31, r14
    1078:	cf 05       	cpc	r28, r15
    107a:	d0 07       	cpc	r29, r16
    107c:	a1 07       	cpc	r26, r17
    107e:	98 f4       	brcc	.+38     	; 0x10a6 <__udivmod64+0x46>
    1080:	ad 2f       	mov	r26, r29
    1082:	dc 2f       	mov	r29, r28
    1084:	cf 2f       	mov	r28, r31
    1086:	fe 2f       	mov	r31, r30
    1088:	e9 2d       	mov	r30, r9
    108a:	98 2c       	mov	r9, r8
    108c:	89 2e       	mov	r8, r25
    108e:	98 2f       	mov	r25, r24
    1090:	87 2f       	mov	r24, r23
    1092:	76 2f       	mov	r23, r22
    1094:	65 2f       	mov	r22, r21
    1096:	54 2f       	mov	r21, r20
    1098:	43 2f       	mov	r20, r19
    109a:	32 2f       	mov	r19, r18
    109c:	22 27       	eor	r18, r18
    109e:	b8 50       	subi	r27, 0x08	; 8
    10a0:	31 f7       	brne	.-52     	; 0x106e <__udivmod64+0xe>
    10a2:	bf 91       	pop	r27
    10a4:	27 c0       	rjmp	.+78     	; 0x10f4 <__udivmod64+0x94>
    10a6:	1b 2e       	mov	r1, r27
    10a8:	bf 91       	pop	r27
    10aa:	bb 27       	eor	r27, r27
    10ac:	22 0f       	add	r18, r18
    10ae:	33 1f       	adc	r19, r19
    10b0:	44 1f       	adc	r20, r20
    10b2:	55 1f       	adc	r21, r21
    10b4:	66 1f       	adc	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	88 1f       	adc	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	88 1c       	adc	r8, r8
    10be:	99 1c       	adc	r9, r9
    10c0:	ee 1f       	adc	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	cc 1f       	adc	r28, r28
    10c6:	dd 1f       	adc	r29, r29
    10c8:	aa 1f       	adc	r26, r26
    10ca:	bb 1f       	adc	r27, r27
    10cc:	8a 14       	cp	r8, r10
    10ce:	9b 04       	cpc	r9, r11
    10d0:	ec 05       	cpc	r30, r12
    10d2:	fd 05       	cpc	r31, r13
    10d4:	ce 05       	cpc	r28, r14
    10d6:	df 05       	cpc	r29, r15
    10d8:	a0 07       	cpc	r26, r16
    10da:	b1 07       	cpc	r27, r17
    10dc:	48 f0       	brcs	.+18     	; 0x10f0 <__udivmod64+0x90>
    10de:	8a 18       	sub	r8, r10
    10e0:	9b 08       	sbc	r9, r11
    10e2:	ec 09       	sbc	r30, r12
    10e4:	fd 09       	sbc	r31, r13
    10e6:	ce 09       	sbc	r28, r14
    10e8:	df 09       	sbc	r29, r15
    10ea:	a0 0b       	sbc	r26, r16
    10ec:	b1 0b       	sbc	r27, r17
    10ee:	21 60       	ori	r18, 0x01	; 1
    10f0:	1a 94       	dec	r1
    10f2:	e1 f6       	brne	.-72     	; 0x10ac <__udivmod64+0x4c>
    10f4:	2e f4       	brtc	.+10     	; 0x1100 <__udivmod64+0xa0>
    10f6:	94 01       	movw	r18, r8
    10f8:	af 01       	movw	r20, r30
    10fa:	be 01       	movw	r22, r28
    10fc:	cd 01       	movw	r24, r26
    10fe:	00 0c       	add	r0, r0
    1100:	08 95       	ret

00001102 <__adddi3_s8>:
    1102:	00 24       	eor	r0, r0
    1104:	a7 fd       	sbrc	r26, 7
    1106:	00 94       	com	r0
    1108:	2a 0f       	add	r18, r26
    110a:	30 1d       	adc	r19, r0
    110c:	40 1d       	adc	r20, r0
    110e:	50 1d       	adc	r21, r0
    1110:	60 1d       	adc	r22, r0
    1112:	70 1d       	adc	r23, r0
    1114:	80 1d       	adc	r24, r0
    1116:	90 1d       	adc	r25, r0
    1118:	08 95       	ret

0000111a <strcmp>:
    111a:	fb 01       	movw	r30, r22
    111c:	dc 01       	movw	r26, r24
    111e:	8d 91       	ld	r24, X+
    1120:	01 90       	ld	r0, Z+
    1122:	80 19       	sub	r24, r0
    1124:	01 10       	cpse	r0, r1
    1126:	d9 f3       	breq	.-10     	; 0x111e <strcmp+0x4>
    1128:	99 0b       	sbc	r25, r25
    112a:	08 95       	ret

0000112c <vsnprintf>:
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	2e 97       	sbiw	r28, 0x0e	; 14
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	8c 01       	movw	r16, r24
    1146:	fa 01       	movw	r30, r20
    1148:	86 e0       	ldi	r24, 0x06	; 6
    114a:	8c 83       	std	Y+4, r24	; 0x04
    114c:	1a 83       	std	Y+2, r17	; 0x02
    114e:	09 83       	std	Y+1, r16	; 0x01
    1150:	77 ff       	sbrs	r23, 7
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <vsnprintf+0x2c>
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	70 e8       	ldi	r23, 0x80	; 128
    1158:	cb 01       	movw	r24, r22
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	a9 01       	movw	r20, r18
    1162:	bf 01       	movw	r22, r30
    1164:	ce 01       	movw	r24, r28
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	19 d0       	rcall	.+50     	; 0x119c <vfprintf>
    116a:	4d 81       	ldd	r20, Y+5	; 0x05
    116c:	5e 81       	ldd	r21, Y+6	; 0x06
    116e:	57 fd       	sbrc	r21, 7
    1170:	0a c0       	rjmp	.+20     	; 0x1186 <vsnprintf+0x5a>
    1172:	2f 81       	ldd	r18, Y+7	; 0x07
    1174:	38 85       	ldd	r19, Y+8	; 0x08
    1176:	42 17       	cp	r20, r18
    1178:	53 07       	cpc	r21, r19
    117a:	0c f4       	brge	.+2      	; 0x117e <vsnprintf+0x52>
    117c:	9a 01       	movw	r18, r20
    117e:	f8 01       	movw	r30, r16
    1180:	e2 0f       	add	r30, r18
    1182:	f3 1f       	adc	r31, r19
    1184:	10 82       	st	Z, r1
    1186:	2e 96       	adiw	r28, 0x0e	; 14
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <vfprintf>:
    119c:	2f 92       	push	r2
    119e:	3f 92       	push	r3
    11a0:	4f 92       	push	r4
    11a2:	5f 92       	push	r5
    11a4:	6f 92       	push	r6
    11a6:	7f 92       	push	r7
    11a8:	8f 92       	push	r8
    11aa:	9f 92       	push	r9
    11ac:	af 92       	push	r10
    11ae:	bf 92       	push	r11
    11b0:	cf 92       	push	r12
    11b2:	df 92       	push	r13
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	2b 97       	sbiw	r28, 0x0b	; 11
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	6c 01       	movw	r12, r24
    11d2:	7b 01       	movw	r14, r22
    11d4:	8a 01       	movw	r16, r20
    11d6:	fc 01       	movw	r30, r24
    11d8:	17 82       	std	Z+7, r1	; 0x07
    11da:	16 82       	std	Z+6, r1	; 0x06
    11dc:	83 81       	ldd	r24, Z+3	; 0x03
    11de:	81 ff       	sbrs	r24, 1
    11e0:	bf c1       	rjmp	.+894    	; 0x1560 <vfprintf+0x3c4>
    11e2:	ce 01       	movw	r24, r28
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	3c 01       	movw	r6, r24
    11e8:	f6 01       	movw	r30, r12
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	f7 01       	movw	r30, r14
    11ee:	93 fd       	sbrc	r25, 3
    11f0:	85 91       	lpm	r24, Z+
    11f2:	93 ff       	sbrs	r25, 3
    11f4:	81 91       	ld	r24, Z+
    11f6:	7f 01       	movw	r14, r30
    11f8:	88 23       	and	r24, r24
    11fa:	09 f4       	brne	.+2      	; 0x11fe <vfprintf+0x62>
    11fc:	ad c1       	rjmp	.+858    	; 0x1558 <vfprintf+0x3bc>
    11fe:	85 32       	cpi	r24, 0x25	; 37
    1200:	39 f4       	brne	.+14     	; 0x1210 <vfprintf+0x74>
    1202:	93 fd       	sbrc	r25, 3
    1204:	85 91       	lpm	r24, Z+
    1206:	93 ff       	sbrs	r25, 3
    1208:	81 91       	ld	r24, Z+
    120a:	7f 01       	movw	r14, r30
    120c:	85 32       	cpi	r24, 0x25	; 37
    120e:	21 f4       	brne	.+8      	; 0x1218 <vfprintf+0x7c>
    1210:	b6 01       	movw	r22, r12
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	d6 d1       	rcall	.+940    	; 0x15c2 <fputc>
    1216:	e8 cf       	rjmp	.-48     	; 0x11e8 <vfprintf+0x4c>
    1218:	91 2c       	mov	r9, r1
    121a:	21 2c       	mov	r2, r1
    121c:	31 2c       	mov	r3, r1
    121e:	ff e1       	ldi	r31, 0x1F	; 31
    1220:	f3 15       	cp	r31, r3
    1222:	d8 f0       	brcs	.+54     	; 0x125a <vfprintf+0xbe>
    1224:	8b 32       	cpi	r24, 0x2B	; 43
    1226:	79 f0       	breq	.+30     	; 0x1246 <vfprintf+0xaa>
    1228:	38 f4       	brcc	.+14     	; 0x1238 <vfprintf+0x9c>
    122a:	80 32       	cpi	r24, 0x20	; 32
    122c:	79 f0       	breq	.+30     	; 0x124c <vfprintf+0xb0>
    122e:	83 32       	cpi	r24, 0x23	; 35
    1230:	a1 f4       	brne	.+40     	; 0x125a <vfprintf+0xbe>
    1232:	23 2d       	mov	r18, r3
    1234:	20 61       	ori	r18, 0x10	; 16
    1236:	1d c0       	rjmp	.+58     	; 0x1272 <vfprintf+0xd6>
    1238:	8d 32       	cpi	r24, 0x2D	; 45
    123a:	61 f0       	breq	.+24     	; 0x1254 <vfprintf+0xb8>
    123c:	80 33       	cpi	r24, 0x30	; 48
    123e:	69 f4       	brne	.+26     	; 0x125a <vfprintf+0xbe>
    1240:	23 2d       	mov	r18, r3
    1242:	21 60       	ori	r18, 0x01	; 1
    1244:	16 c0       	rjmp	.+44     	; 0x1272 <vfprintf+0xd6>
    1246:	83 2d       	mov	r24, r3
    1248:	82 60       	ori	r24, 0x02	; 2
    124a:	38 2e       	mov	r3, r24
    124c:	e3 2d       	mov	r30, r3
    124e:	e4 60       	ori	r30, 0x04	; 4
    1250:	3e 2e       	mov	r3, r30
    1252:	2a c0       	rjmp	.+84     	; 0x12a8 <vfprintf+0x10c>
    1254:	f3 2d       	mov	r31, r3
    1256:	f8 60       	ori	r31, 0x08	; 8
    1258:	1d c0       	rjmp	.+58     	; 0x1294 <vfprintf+0xf8>
    125a:	37 fc       	sbrc	r3, 7
    125c:	2d c0       	rjmp	.+90     	; 0x12b8 <vfprintf+0x11c>
    125e:	20 ed       	ldi	r18, 0xD0	; 208
    1260:	28 0f       	add	r18, r24
    1262:	2a 30       	cpi	r18, 0x0A	; 10
    1264:	40 f0       	brcs	.+16     	; 0x1276 <vfprintf+0xda>
    1266:	8e 32       	cpi	r24, 0x2E	; 46
    1268:	b9 f4       	brne	.+46     	; 0x1298 <vfprintf+0xfc>
    126a:	36 fc       	sbrc	r3, 6
    126c:	75 c1       	rjmp	.+746    	; 0x1558 <vfprintf+0x3bc>
    126e:	23 2d       	mov	r18, r3
    1270:	20 64       	ori	r18, 0x40	; 64
    1272:	32 2e       	mov	r3, r18
    1274:	19 c0       	rjmp	.+50     	; 0x12a8 <vfprintf+0x10c>
    1276:	36 fe       	sbrs	r3, 6
    1278:	06 c0       	rjmp	.+12     	; 0x1286 <vfprintf+0xea>
    127a:	8a e0       	ldi	r24, 0x0A	; 10
    127c:	98 9e       	mul	r9, r24
    127e:	20 0d       	add	r18, r0
    1280:	11 24       	eor	r1, r1
    1282:	92 2e       	mov	r9, r18
    1284:	11 c0       	rjmp	.+34     	; 0x12a8 <vfprintf+0x10c>
    1286:	ea e0       	ldi	r30, 0x0A	; 10
    1288:	2e 9e       	mul	r2, r30
    128a:	20 0d       	add	r18, r0
    128c:	11 24       	eor	r1, r1
    128e:	22 2e       	mov	r2, r18
    1290:	f3 2d       	mov	r31, r3
    1292:	f0 62       	ori	r31, 0x20	; 32
    1294:	3f 2e       	mov	r3, r31
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <vfprintf+0x10c>
    1298:	8c 36       	cpi	r24, 0x6C	; 108
    129a:	21 f4       	brne	.+8      	; 0x12a4 <vfprintf+0x108>
    129c:	83 2d       	mov	r24, r3
    129e:	80 68       	ori	r24, 0x80	; 128
    12a0:	38 2e       	mov	r3, r24
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <vfprintf+0x10c>
    12a4:	88 36       	cpi	r24, 0x68	; 104
    12a6:	41 f4       	brne	.+16     	; 0x12b8 <vfprintf+0x11c>
    12a8:	f7 01       	movw	r30, r14
    12aa:	93 fd       	sbrc	r25, 3
    12ac:	85 91       	lpm	r24, Z+
    12ae:	93 ff       	sbrs	r25, 3
    12b0:	81 91       	ld	r24, Z+
    12b2:	7f 01       	movw	r14, r30
    12b4:	81 11       	cpse	r24, r1
    12b6:	b3 cf       	rjmp	.-154    	; 0x121e <vfprintf+0x82>
    12b8:	98 2f       	mov	r25, r24
    12ba:	9f 7d       	andi	r25, 0xDF	; 223
    12bc:	95 54       	subi	r25, 0x45	; 69
    12be:	93 30       	cpi	r25, 0x03	; 3
    12c0:	28 f4       	brcc	.+10     	; 0x12cc <vfprintf+0x130>
    12c2:	0c 5f       	subi	r16, 0xFC	; 252
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	9f e3       	ldi	r25, 0x3F	; 63
    12c8:	99 83       	std	Y+1, r25	; 0x01
    12ca:	0d c0       	rjmp	.+26     	; 0x12e6 <vfprintf+0x14a>
    12cc:	83 36       	cpi	r24, 0x63	; 99
    12ce:	31 f0       	breq	.+12     	; 0x12dc <vfprintf+0x140>
    12d0:	83 37       	cpi	r24, 0x73	; 115
    12d2:	71 f0       	breq	.+28     	; 0x12f0 <vfprintf+0x154>
    12d4:	83 35       	cpi	r24, 0x53	; 83
    12d6:	09 f0       	breq	.+2      	; 0x12da <vfprintf+0x13e>
    12d8:	55 c0       	rjmp	.+170    	; 0x1384 <vfprintf+0x1e8>
    12da:	20 c0       	rjmp	.+64     	; 0x131c <vfprintf+0x180>
    12dc:	f8 01       	movw	r30, r16
    12de:	80 81       	ld	r24, Z
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	0e 5f       	subi	r16, 0xFE	; 254
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	88 24       	eor	r8, r8
    12e8:	83 94       	inc	r8
    12ea:	91 2c       	mov	r9, r1
    12ec:	53 01       	movw	r10, r6
    12ee:	12 c0       	rjmp	.+36     	; 0x1314 <vfprintf+0x178>
    12f0:	28 01       	movw	r4, r16
    12f2:	f2 e0       	ldi	r31, 0x02	; 2
    12f4:	4f 0e       	add	r4, r31
    12f6:	51 1c       	adc	r5, r1
    12f8:	f8 01       	movw	r30, r16
    12fa:	a0 80       	ld	r10, Z
    12fc:	b1 80       	ldd	r11, Z+1	; 0x01
    12fe:	36 fe       	sbrs	r3, 6
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <vfprintf+0x16c>
    1302:	69 2d       	mov	r22, r9
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	02 c0       	rjmp	.+4      	; 0x130c <vfprintf+0x170>
    1308:	6f ef       	ldi	r22, 0xFF	; 255
    130a:	7f ef       	ldi	r23, 0xFF	; 255
    130c:	c5 01       	movw	r24, r10
    130e:	4e d1       	rcall	.+668    	; 0x15ac <strnlen>
    1310:	4c 01       	movw	r8, r24
    1312:	82 01       	movw	r16, r4
    1314:	f3 2d       	mov	r31, r3
    1316:	ff 77       	andi	r31, 0x7F	; 127
    1318:	3f 2e       	mov	r3, r31
    131a:	15 c0       	rjmp	.+42     	; 0x1346 <vfprintf+0x1aa>
    131c:	28 01       	movw	r4, r16
    131e:	22 e0       	ldi	r18, 0x02	; 2
    1320:	42 0e       	add	r4, r18
    1322:	51 1c       	adc	r5, r1
    1324:	f8 01       	movw	r30, r16
    1326:	a0 80       	ld	r10, Z
    1328:	b1 80       	ldd	r11, Z+1	; 0x01
    132a:	36 fe       	sbrs	r3, 6
    132c:	03 c0       	rjmp	.+6      	; 0x1334 <vfprintf+0x198>
    132e:	69 2d       	mov	r22, r9
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <vfprintf+0x19c>
    1334:	6f ef       	ldi	r22, 0xFF	; 255
    1336:	7f ef       	ldi	r23, 0xFF	; 255
    1338:	c5 01       	movw	r24, r10
    133a:	2d d1       	rcall	.+602    	; 0x1596 <strnlen_P>
    133c:	4c 01       	movw	r8, r24
    133e:	f3 2d       	mov	r31, r3
    1340:	f0 68       	ori	r31, 0x80	; 128
    1342:	3f 2e       	mov	r3, r31
    1344:	82 01       	movw	r16, r4
    1346:	33 fc       	sbrc	r3, 3
    1348:	19 c0       	rjmp	.+50     	; 0x137c <vfprintf+0x1e0>
    134a:	82 2d       	mov	r24, r2
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	88 16       	cp	r8, r24
    1350:	99 06       	cpc	r9, r25
    1352:	a0 f4       	brcc	.+40     	; 0x137c <vfprintf+0x1e0>
    1354:	b6 01       	movw	r22, r12
    1356:	80 e2       	ldi	r24, 0x20	; 32
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	33 d1       	rcall	.+614    	; 0x15c2 <fputc>
    135c:	2a 94       	dec	r2
    135e:	f5 cf       	rjmp	.-22     	; 0x134a <vfprintf+0x1ae>
    1360:	f5 01       	movw	r30, r10
    1362:	37 fc       	sbrc	r3, 7
    1364:	85 91       	lpm	r24, Z+
    1366:	37 fe       	sbrs	r3, 7
    1368:	81 91       	ld	r24, Z+
    136a:	5f 01       	movw	r10, r30
    136c:	b6 01       	movw	r22, r12
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	28 d1       	rcall	.+592    	; 0x15c2 <fputc>
    1372:	21 10       	cpse	r2, r1
    1374:	2a 94       	dec	r2
    1376:	21 e0       	ldi	r18, 0x01	; 1
    1378:	82 1a       	sub	r8, r18
    137a:	91 08       	sbc	r9, r1
    137c:	81 14       	cp	r8, r1
    137e:	91 04       	cpc	r9, r1
    1380:	79 f7       	brne	.-34     	; 0x1360 <vfprintf+0x1c4>
    1382:	e1 c0       	rjmp	.+450    	; 0x1546 <vfprintf+0x3aa>
    1384:	84 36       	cpi	r24, 0x64	; 100
    1386:	11 f0       	breq	.+4      	; 0x138c <vfprintf+0x1f0>
    1388:	89 36       	cpi	r24, 0x69	; 105
    138a:	39 f5       	brne	.+78     	; 0x13da <vfprintf+0x23e>
    138c:	f8 01       	movw	r30, r16
    138e:	37 fe       	sbrs	r3, 7
    1390:	07 c0       	rjmp	.+14     	; 0x13a0 <vfprintf+0x204>
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	0c 5f       	subi	r16, 0xFC	; 252
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	08 c0       	rjmp	.+16     	; 0x13b0 <vfprintf+0x214>
    13a0:	60 81       	ld	r22, Z
    13a2:	71 81       	ldd	r23, Z+1	; 0x01
    13a4:	07 2e       	mov	r0, r23
    13a6:	00 0c       	add	r0, r0
    13a8:	88 0b       	sbc	r24, r24
    13aa:	99 0b       	sbc	r25, r25
    13ac:	0e 5f       	subi	r16, 0xFE	; 254
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	f3 2d       	mov	r31, r3
    13b2:	ff 76       	andi	r31, 0x6F	; 111
    13b4:	3f 2e       	mov	r3, r31
    13b6:	97 ff       	sbrs	r25, 7
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <vfprintf+0x230>
    13ba:	90 95       	com	r25
    13bc:	80 95       	com	r24
    13be:	70 95       	com	r23
    13c0:	61 95       	neg	r22
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	f0 68       	ori	r31, 0x80	; 128
    13ca:	3f 2e       	mov	r3, r31
    13cc:	2a e0       	ldi	r18, 0x0A	; 10
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	a3 01       	movw	r20, r6
    13d2:	33 d1       	rcall	.+614    	; 0x163a <__ultoa_invert>
    13d4:	88 2e       	mov	r8, r24
    13d6:	86 18       	sub	r8, r6
    13d8:	44 c0       	rjmp	.+136    	; 0x1462 <vfprintf+0x2c6>
    13da:	85 37       	cpi	r24, 0x75	; 117
    13dc:	31 f4       	brne	.+12     	; 0x13ea <vfprintf+0x24e>
    13de:	23 2d       	mov	r18, r3
    13e0:	2f 7e       	andi	r18, 0xEF	; 239
    13e2:	b2 2e       	mov	r11, r18
    13e4:	2a e0       	ldi	r18, 0x0A	; 10
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	25 c0       	rjmp	.+74     	; 0x1434 <vfprintf+0x298>
    13ea:	93 2d       	mov	r25, r3
    13ec:	99 7f       	andi	r25, 0xF9	; 249
    13ee:	b9 2e       	mov	r11, r25
    13f0:	8f 36       	cpi	r24, 0x6F	; 111
    13f2:	c1 f0       	breq	.+48     	; 0x1424 <vfprintf+0x288>
    13f4:	18 f4       	brcc	.+6      	; 0x13fc <vfprintf+0x260>
    13f6:	88 35       	cpi	r24, 0x58	; 88
    13f8:	79 f0       	breq	.+30     	; 0x1418 <vfprintf+0x27c>
    13fa:	ae c0       	rjmp	.+348    	; 0x1558 <vfprintf+0x3bc>
    13fc:	80 37       	cpi	r24, 0x70	; 112
    13fe:	19 f0       	breq	.+6      	; 0x1406 <vfprintf+0x26a>
    1400:	88 37       	cpi	r24, 0x78	; 120
    1402:	21 f0       	breq	.+8      	; 0x140c <vfprintf+0x270>
    1404:	a9 c0       	rjmp	.+338    	; 0x1558 <vfprintf+0x3bc>
    1406:	e9 2f       	mov	r30, r25
    1408:	e0 61       	ori	r30, 0x10	; 16
    140a:	be 2e       	mov	r11, r30
    140c:	b4 fe       	sbrs	r11, 4
    140e:	0d c0       	rjmp	.+26     	; 0x142a <vfprintf+0x28e>
    1410:	fb 2d       	mov	r31, r11
    1412:	f4 60       	ori	r31, 0x04	; 4
    1414:	bf 2e       	mov	r11, r31
    1416:	09 c0       	rjmp	.+18     	; 0x142a <vfprintf+0x28e>
    1418:	34 fe       	sbrs	r3, 4
    141a:	0a c0       	rjmp	.+20     	; 0x1430 <vfprintf+0x294>
    141c:	29 2f       	mov	r18, r25
    141e:	26 60       	ori	r18, 0x06	; 6
    1420:	b2 2e       	mov	r11, r18
    1422:	06 c0       	rjmp	.+12     	; 0x1430 <vfprintf+0x294>
    1424:	28 e0       	ldi	r18, 0x08	; 8
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <vfprintf+0x298>
    142a:	20 e1       	ldi	r18, 0x10	; 16
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x298>
    1430:	20 e1       	ldi	r18, 0x10	; 16
    1432:	32 e0       	ldi	r19, 0x02	; 2
    1434:	f8 01       	movw	r30, r16
    1436:	b7 fe       	sbrs	r11, 7
    1438:	07 c0       	rjmp	.+14     	; 0x1448 <vfprintf+0x2ac>
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	0c 5f       	subi	r16, 0xFC	; 252
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <vfprintf+0x2b8>
    1448:	60 81       	ld	r22, Z
    144a:	71 81       	ldd	r23, Z+1	; 0x01
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 5f       	subi	r16, 0xFE	; 254
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	a3 01       	movw	r20, r6
    1456:	f1 d0       	rcall	.+482    	; 0x163a <__ultoa_invert>
    1458:	88 2e       	mov	r8, r24
    145a:	86 18       	sub	r8, r6
    145c:	fb 2d       	mov	r31, r11
    145e:	ff 77       	andi	r31, 0x7F	; 127
    1460:	3f 2e       	mov	r3, r31
    1462:	36 fe       	sbrs	r3, 6
    1464:	0d c0       	rjmp	.+26     	; 0x1480 <vfprintf+0x2e4>
    1466:	23 2d       	mov	r18, r3
    1468:	2e 7f       	andi	r18, 0xFE	; 254
    146a:	a2 2e       	mov	r10, r18
    146c:	89 14       	cp	r8, r9
    146e:	58 f4       	brcc	.+22     	; 0x1486 <vfprintf+0x2ea>
    1470:	34 fe       	sbrs	r3, 4
    1472:	0b c0       	rjmp	.+22     	; 0x148a <vfprintf+0x2ee>
    1474:	32 fc       	sbrc	r3, 2
    1476:	09 c0       	rjmp	.+18     	; 0x148a <vfprintf+0x2ee>
    1478:	83 2d       	mov	r24, r3
    147a:	8e 7e       	andi	r24, 0xEE	; 238
    147c:	a8 2e       	mov	r10, r24
    147e:	05 c0       	rjmp	.+10     	; 0x148a <vfprintf+0x2ee>
    1480:	b8 2c       	mov	r11, r8
    1482:	a3 2c       	mov	r10, r3
    1484:	03 c0       	rjmp	.+6      	; 0x148c <vfprintf+0x2f0>
    1486:	b8 2c       	mov	r11, r8
    1488:	01 c0       	rjmp	.+2      	; 0x148c <vfprintf+0x2f0>
    148a:	b9 2c       	mov	r11, r9
    148c:	a4 fe       	sbrs	r10, 4
    148e:	0f c0       	rjmp	.+30     	; 0x14ae <vfprintf+0x312>
    1490:	fe 01       	movw	r30, r28
    1492:	e8 0d       	add	r30, r8
    1494:	f1 1d       	adc	r31, r1
    1496:	80 81       	ld	r24, Z
    1498:	80 33       	cpi	r24, 0x30	; 48
    149a:	21 f4       	brne	.+8      	; 0x14a4 <vfprintf+0x308>
    149c:	9a 2d       	mov	r25, r10
    149e:	99 7e       	andi	r25, 0xE9	; 233
    14a0:	a9 2e       	mov	r10, r25
    14a2:	09 c0       	rjmp	.+18     	; 0x14b6 <vfprintf+0x31a>
    14a4:	a2 fe       	sbrs	r10, 2
    14a6:	06 c0       	rjmp	.+12     	; 0x14b4 <vfprintf+0x318>
    14a8:	b3 94       	inc	r11
    14aa:	b3 94       	inc	r11
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <vfprintf+0x31a>
    14ae:	8a 2d       	mov	r24, r10
    14b0:	86 78       	andi	r24, 0x86	; 134
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <vfprintf+0x31a>
    14b4:	b3 94       	inc	r11
    14b6:	a3 fc       	sbrc	r10, 3
    14b8:	10 c0       	rjmp	.+32     	; 0x14da <vfprintf+0x33e>
    14ba:	a0 fe       	sbrs	r10, 0
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <vfprintf+0x32e>
    14be:	b2 14       	cp	r11, r2
    14c0:	80 f4       	brcc	.+32     	; 0x14e2 <vfprintf+0x346>
    14c2:	28 0c       	add	r2, r8
    14c4:	92 2c       	mov	r9, r2
    14c6:	9b 18       	sub	r9, r11
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <vfprintf+0x348>
    14ca:	b2 14       	cp	r11, r2
    14cc:	58 f4       	brcc	.+22     	; 0x14e4 <vfprintf+0x348>
    14ce:	b6 01       	movw	r22, r12
    14d0:	80 e2       	ldi	r24, 0x20	; 32
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	76 d0       	rcall	.+236    	; 0x15c2 <fputc>
    14d6:	b3 94       	inc	r11
    14d8:	f8 cf       	rjmp	.-16     	; 0x14ca <vfprintf+0x32e>
    14da:	b2 14       	cp	r11, r2
    14dc:	18 f4       	brcc	.+6      	; 0x14e4 <vfprintf+0x348>
    14de:	2b 18       	sub	r2, r11
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <vfprintf+0x34a>
    14e2:	98 2c       	mov	r9, r8
    14e4:	21 2c       	mov	r2, r1
    14e6:	a4 fe       	sbrs	r10, 4
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <vfprintf+0x36c>
    14ea:	b6 01       	movw	r22, r12
    14ec:	80 e3       	ldi	r24, 0x30	; 48
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	68 d0       	rcall	.+208    	; 0x15c2 <fputc>
    14f2:	a2 fe       	sbrs	r10, 2
    14f4:	16 c0       	rjmp	.+44     	; 0x1522 <vfprintf+0x386>
    14f6:	a1 fc       	sbrc	r10, 1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <vfprintf+0x364>
    14fa:	88 e7       	ldi	r24, 0x78	; 120
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <vfprintf+0x368>
    1500:	88 e5       	ldi	r24, 0x58	; 88
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	b6 01       	movw	r22, r12
    1506:	0c c0       	rjmp	.+24     	; 0x1520 <vfprintf+0x384>
    1508:	8a 2d       	mov	r24, r10
    150a:	86 78       	andi	r24, 0x86	; 134
    150c:	51 f0       	breq	.+20     	; 0x1522 <vfprintf+0x386>
    150e:	a1 fe       	sbrs	r10, 1
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <vfprintf+0x37a>
    1512:	8b e2       	ldi	r24, 0x2B	; 43
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <vfprintf+0x37c>
    1516:	80 e2       	ldi	r24, 0x20	; 32
    1518:	a7 fc       	sbrc	r10, 7
    151a:	8d e2       	ldi	r24, 0x2D	; 45
    151c:	b6 01       	movw	r22, r12
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	50 d0       	rcall	.+160    	; 0x15c2 <fputc>
    1522:	89 14       	cp	r8, r9
    1524:	30 f4       	brcc	.+12     	; 0x1532 <vfprintf+0x396>
    1526:	b6 01       	movw	r22, r12
    1528:	80 e3       	ldi	r24, 0x30	; 48
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	4a d0       	rcall	.+148    	; 0x15c2 <fputc>
    152e:	9a 94       	dec	r9
    1530:	f8 cf       	rjmp	.-16     	; 0x1522 <vfprintf+0x386>
    1532:	8a 94       	dec	r8
    1534:	f3 01       	movw	r30, r6
    1536:	e8 0d       	add	r30, r8
    1538:	f1 1d       	adc	r31, r1
    153a:	80 81       	ld	r24, Z
    153c:	b6 01       	movw	r22, r12
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	40 d0       	rcall	.+128    	; 0x15c2 <fputc>
    1542:	81 10       	cpse	r8, r1
    1544:	f6 cf       	rjmp	.-20     	; 0x1532 <vfprintf+0x396>
    1546:	22 20       	and	r2, r2
    1548:	09 f4       	brne	.+2      	; 0x154c <vfprintf+0x3b0>
    154a:	4e ce       	rjmp	.-868    	; 0x11e8 <vfprintf+0x4c>
    154c:	b6 01       	movw	r22, r12
    154e:	80 e2       	ldi	r24, 0x20	; 32
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	37 d0       	rcall	.+110    	; 0x15c2 <fputc>
    1554:	2a 94       	dec	r2
    1556:	f7 cf       	rjmp	.-18     	; 0x1546 <vfprintf+0x3aa>
    1558:	f6 01       	movw	r30, r12
    155a:	86 81       	ldd	r24, Z+6	; 0x06
    155c:	97 81       	ldd	r25, Z+7	; 0x07
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <vfprintf+0x3c8>
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	2b 96       	adiw	r28, 0x0b	; 11
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	df 90       	pop	r13
    157e:	cf 90       	pop	r12
    1580:	bf 90       	pop	r11
    1582:	af 90       	pop	r10
    1584:	9f 90       	pop	r9
    1586:	8f 90       	pop	r8
    1588:	7f 90       	pop	r7
    158a:	6f 90       	pop	r6
    158c:	5f 90       	pop	r5
    158e:	4f 90       	pop	r4
    1590:	3f 90       	pop	r3
    1592:	2f 90       	pop	r2
    1594:	08 95       	ret

00001596 <strnlen_P>:
    1596:	fc 01       	movw	r30, r24
    1598:	05 90       	lpm	r0, Z+
    159a:	61 50       	subi	r22, 0x01	; 1
    159c:	70 40       	sbci	r23, 0x00	; 0
    159e:	01 10       	cpse	r0, r1
    15a0:	d8 f7       	brcc	.-10     	; 0x1598 <strnlen_P+0x2>
    15a2:	80 95       	com	r24
    15a4:	90 95       	com	r25
    15a6:	8e 0f       	add	r24, r30
    15a8:	9f 1f       	adc	r25, r31
    15aa:	08 95       	ret

000015ac <strnlen>:
    15ac:	fc 01       	movw	r30, r24
    15ae:	61 50       	subi	r22, 0x01	; 1
    15b0:	70 40       	sbci	r23, 0x00	; 0
    15b2:	01 90       	ld	r0, Z+
    15b4:	01 10       	cpse	r0, r1
    15b6:	d8 f7       	brcc	.-10     	; 0x15ae <strnlen+0x2>
    15b8:	80 95       	com	r24
    15ba:	90 95       	com	r25
    15bc:	8e 0f       	add	r24, r30
    15be:	9f 1f       	adc	r25, r31
    15c0:	08 95       	ret

000015c2 <fputc>:
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	fb 01       	movw	r30, r22
    15cc:	23 81       	ldd	r18, Z+3	; 0x03
    15ce:	21 fd       	sbrc	r18, 1
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <fputc+0x16>
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	9f ef       	ldi	r25, 0xFF	; 255
    15d6:	2c c0       	rjmp	.+88     	; 0x1630 <fputc+0x6e>
    15d8:	22 ff       	sbrs	r18, 2
    15da:	16 c0       	rjmp	.+44     	; 0x1608 <fputc+0x46>
    15dc:	46 81       	ldd	r20, Z+6	; 0x06
    15de:	57 81       	ldd	r21, Z+7	; 0x07
    15e0:	24 81       	ldd	r18, Z+4	; 0x04
    15e2:	35 81       	ldd	r19, Z+5	; 0x05
    15e4:	42 17       	cp	r20, r18
    15e6:	53 07       	cpc	r21, r19
    15e8:	44 f4       	brge	.+16     	; 0x15fa <fputc+0x38>
    15ea:	a0 81       	ld	r26, Z
    15ec:	b1 81       	ldd	r27, Z+1	; 0x01
    15ee:	9d 01       	movw	r18, r26
    15f0:	2f 5f       	subi	r18, 0xFF	; 255
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	31 83       	std	Z+1, r19	; 0x01
    15f6:	20 83       	st	Z, r18
    15f8:	8c 93       	st	X, r24
    15fa:	26 81       	ldd	r18, Z+6	; 0x06
    15fc:	37 81       	ldd	r19, Z+7	; 0x07
    15fe:	2f 5f       	subi	r18, 0xFF	; 255
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	37 83       	std	Z+7, r19	; 0x07
    1604:	26 83       	std	Z+6, r18	; 0x06
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <fputc+0x6e>
    1608:	8b 01       	movw	r16, r22
    160a:	ec 01       	movw	r28, r24
    160c:	fb 01       	movw	r30, r22
    160e:	00 84       	ldd	r0, Z+8	; 0x08
    1610:	f1 85       	ldd	r31, Z+9	; 0x09
    1612:	e0 2d       	mov	r30, r0
    1614:	19 95       	eicall
    1616:	89 2b       	or	r24, r25
    1618:	e1 f6       	brne	.-72     	; 0x15d2 <fputc+0x10>
    161a:	d8 01       	movw	r26, r16
    161c:	16 96       	adiw	r26, 0x06	; 6
    161e:	8d 91       	ld	r24, X+
    1620:	9c 91       	ld	r25, X
    1622:	17 97       	sbiw	r26, 0x07	; 7
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	17 96       	adiw	r26, 0x07	; 7
    1628:	9c 93       	st	X, r25
    162a:	8e 93       	st	-X, r24
    162c:	16 97       	sbiw	r26, 0x06	; 6
    162e:	ce 01       	movw	r24, r28
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	08 95       	ret

0000163a <__ultoa_invert>:
    163a:	fa 01       	movw	r30, r20
    163c:	aa 27       	eor	r26, r26
    163e:	28 30       	cpi	r18, 0x08	; 8
    1640:	51 f1       	breq	.+84     	; 0x1696 <__ultoa_invert+0x5c>
    1642:	20 31       	cpi	r18, 0x10	; 16
    1644:	81 f1       	breq	.+96     	; 0x16a6 <__ultoa_invert+0x6c>
    1646:	e8 94       	clt
    1648:	6f 93       	push	r22
    164a:	6e 7f       	andi	r22, 0xFE	; 254
    164c:	6e 5f       	subi	r22, 0xFE	; 254
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	8f 4f       	sbci	r24, 0xFF	; 255
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	af 4f       	sbci	r26, 0xFF	; 255
    1656:	b1 e0       	ldi	r27, 0x01	; 1
    1658:	3e d0       	rcall	.+124    	; 0x16d6 <__ultoa_invert+0x9c>
    165a:	b4 e0       	ldi	r27, 0x04	; 4
    165c:	3c d0       	rcall	.+120    	; 0x16d6 <__ultoa_invert+0x9c>
    165e:	67 0f       	add	r22, r23
    1660:	78 1f       	adc	r23, r24
    1662:	89 1f       	adc	r24, r25
    1664:	9a 1f       	adc	r25, r26
    1666:	a1 1d       	adc	r26, r1
    1668:	68 0f       	add	r22, r24
    166a:	79 1f       	adc	r23, r25
    166c:	8a 1f       	adc	r24, r26
    166e:	91 1d       	adc	r25, r1
    1670:	a1 1d       	adc	r26, r1
    1672:	6a 0f       	add	r22, r26
    1674:	71 1d       	adc	r23, r1
    1676:	81 1d       	adc	r24, r1
    1678:	91 1d       	adc	r25, r1
    167a:	a1 1d       	adc	r26, r1
    167c:	20 d0       	rcall	.+64     	; 0x16be <__ultoa_invert+0x84>
    167e:	09 f4       	brne	.+2      	; 0x1682 <__ultoa_invert+0x48>
    1680:	68 94       	set
    1682:	3f 91       	pop	r19
    1684:	2a e0       	ldi	r18, 0x0A	; 10
    1686:	26 9f       	mul	r18, r22
    1688:	11 24       	eor	r1, r1
    168a:	30 19       	sub	r19, r0
    168c:	30 5d       	subi	r19, 0xD0	; 208
    168e:	31 93       	st	Z+, r19
    1690:	de f6       	brtc	.-74     	; 0x1648 <__ultoa_invert+0xe>
    1692:	cf 01       	movw	r24, r30
    1694:	08 95       	ret
    1696:	46 2f       	mov	r20, r22
    1698:	47 70       	andi	r20, 0x07	; 7
    169a:	40 5d       	subi	r20, 0xD0	; 208
    169c:	41 93       	st	Z+, r20
    169e:	b3 e0       	ldi	r27, 0x03	; 3
    16a0:	0f d0       	rcall	.+30     	; 0x16c0 <__ultoa_invert+0x86>
    16a2:	c9 f7       	brne	.-14     	; 0x1696 <__ultoa_invert+0x5c>
    16a4:	f6 cf       	rjmp	.-20     	; 0x1692 <__ultoa_invert+0x58>
    16a6:	46 2f       	mov	r20, r22
    16a8:	4f 70       	andi	r20, 0x0F	; 15
    16aa:	40 5d       	subi	r20, 0xD0	; 208
    16ac:	4a 33       	cpi	r20, 0x3A	; 58
    16ae:	18 f0       	brcs	.+6      	; 0x16b6 <__ultoa_invert+0x7c>
    16b0:	49 5d       	subi	r20, 0xD9	; 217
    16b2:	31 fd       	sbrc	r19, 1
    16b4:	40 52       	subi	r20, 0x20	; 32
    16b6:	41 93       	st	Z+, r20
    16b8:	02 d0       	rcall	.+4      	; 0x16be <__ultoa_invert+0x84>
    16ba:	a9 f7       	brne	.-22     	; 0x16a6 <__ultoa_invert+0x6c>
    16bc:	ea cf       	rjmp	.-44     	; 0x1692 <__ultoa_invert+0x58>
    16be:	b4 e0       	ldi	r27, 0x04	; 4
    16c0:	a6 95       	lsr	r26
    16c2:	97 95       	ror	r25
    16c4:	87 95       	ror	r24
    16c6:	77 95       	ror	r23
    16c8:	67 95       	ror	r22
    16ca:	ba 95       	dec	r27
    16cc:	c9 f7       	brne	.-14     	; 0x16c0 <__ultoa_invert+0x86>
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	61 05       	cpc	r22, r1
    16d2:	71 05       	cpc	r23, r1
    16d4:	08 95       	ret
    16d6:	9b 01       	movw	r18, r22
    16d8:	ac 01       	movw	r20, r24
    16da:	0a 2e       	mov	r0, r26
    16dc:	06 94       	lsr	r0
    16de:	57 95       	ror	r21
    16e0:	47 95       	ror	r20
    16e2:	37 95       	ror	r19
    16e4:	27 95       	ror	r18
    16e6:	ba 95       	dec	r27
    16e8:	c9 f7       	brne	.-14     	; 0x16dc <__ultoa_invert+0xa2>
    16ea:	62 0f       	add	r22, r18
    16ec:	73 1f       	adc	r23, r19
    16ee:	84 1f       	adc	r24, r20
    16f0:	95 1f       	adc	r25, r21
    16f2:	a0 1d       	adc	r26, r0
    16f4:	08 95       	ret

000016f6 <_exit>:
    16f6:	f8 94       	cli

000016f8 <__stop_program>:
    16f8:	ff cf       	rjmp	.-2      	; 0x16f8 <__stop_program>
