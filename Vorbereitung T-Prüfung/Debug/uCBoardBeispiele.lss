
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000ede  00000f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00000fe6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000257b  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000feb  00000000  00000000  000037e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001579  00000000  00000000  000047d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00005d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d7f  00000000  00000000  000063d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001efc  00000000  00000000  00007153  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000904f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	01 c4       	rjmp	.+2050   	; 0x860 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ed       	ldi	r30, 0xDE	; 222
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 37       	cpi	r26, 0x74	; 116
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e7       	ldi	r26, 0x74	; 116
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3f       	cpi	r26, 0xF2	; 242
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	dc c6       	rjmp	.+3512   	; 0xeda <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:


#define PROGRAMTACKT_MS                      10
//Hauptprogramm
int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <main+0x6>
 12a:	1f 92       	push	r1
 12c:	1f 92       	push	r1
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
    uint16_t timerFehlerfunktionOn=0;
    uint16_t timerFehlerfunktionOff=0;
    uint16_t timerAlarmFehler=0;

    //Initialisieren
    initBoard(1);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	12 d2       	rcall	.+1060   	; 0x55a <initBoard>
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
    
    uint16_t timerFehlerfunktionOn=0;
    uint16_t timerFehlerfunktionOff=0;
    uint16_t timerAlarmFehler=0;
 136:	a1 2c       	mov	r10, r1
 138:	b1 2c       	mov	r11, r1
    
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
    
    uint16_t timerFehlerfunktionOn=0;
    uint16_t timerFehlerfunktionOff=0;
 13a:	c1 2c       	mov	r12, r1
 13c:	d1 2c       	mov	r13, r1
    uint16_t valveLed=0;
    
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
    
    uint16_t timerFehlerfunktionOn=0;
 13e:	e1 2c       	mov	r14, r1
 140:	f1 2c       	mov	r15, r1
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
    uint16_t valveLed=0;
    
    uint16_t blinken=0;
    uint16_t timerBlinken=0;
 142:	00 e0       	ldi	r16, 0x00	; 0
 144:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
    uint16_t valveLed=0;
    
    uint16_t blinken=0;
 146:	1a 82       	std	Y+2, r1	; 0x02
 148:	19 82       	std	Y+1, r1	; 0x01
    uint8_t ozonSensor=0;
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
    uint16_t remoteAlarmLed=0;
 14a:	21 2c       	mov	r2, r1
 14c:	31 2c       	mov	r3, r1
    uint8_t disorderQuitSchalter=0;
    uint8_t ozonSensor=0;
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
    uint16_t disorderLed=0;
 14e:	81 2c       	mov	r8, r1
 150:	91 2c       	mov	r9, r1
    uint8_t alarmQuitSchalter=0;
    uint8_t disorderQuitSchalter=0;
    uint8_t ozonSensor=0;
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
 152:	1d 82       	std	Y+5, r1	; 0x05
 154:	1c 82       	std	Y+4, r1	; 0x04
 156:	61 2c       	mov	r6, r1
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        powerSchalter = switchReadAll() & IM_MASKE_POWER_SCHALTER;
 158:	71 2c       	mov	r7, r1
 15a:	a4 d0       	rcall	.+328    	; 0x2a4 <switchReadAll>
        alarmQuitSchalter = switchReadAll() & IM_MASKE_ALARM_QUIT_SCHALTER;
 15c:	58 2e       	mov	r5, r24
 15e:	a2 d0       	rcall	.+324    	; 0x2a4 <switchReadAll>
        disorderQuitSchalter = switchReadAll() & IM_MASKE_DISORDER_QUIT_SCHALTER;
 160:	8b 83       	std	Y+3, r24	; 0x03
 162:	a0 d0       	rcall	.+320    	; 0x2a4 <switchReadAll>
 164:	48 2e       	mov	r4, r24
        ozonSensor = switchReadAll() & IM_MASKE_OZON_SENSOR;
 166:	9e d0       	rcall	.+316    	; 0x2a4 <switchReadAll>
 168:	55 20       	and	r5, r5
        //Verarbeitung-------------------------------------------------------------
        if (powerSchalter)
 16a:	0c f0       	brlt	.+2      	; 0x16e <main+0x4a>
 16c:	6e c0       	rjmp	.+220    	; 0x24a <main+0x126>
 16e:	83 ff       	sbrs	r24, 3
        {
            powerLed = OUT_POWER_LED;
            if (ozonSensor)
 170:	13 c0       	rjmp	.+38     	; 0x198 <main+0x74>
 172:	5b 81       	ldd	r21, Y+3	; 0x03
            {
                valveLed = OUT_VALVE_LED;
                if (alarmQuitSchalter)
 174:	51 fd       	sbrc	r21, 1
 176:	7f c0       	rjmp	.+254    	; 0x276 <main+0x152>
 178:	80 e4       	ldi	r24, 0x40	; 64
                    blinken = 0;
                    alarmLed= OFF;
                    timerFehlerfunktionOn = 0;
                }
                
                if (timerFehlerfunktionOn >= FEHLER_FUNKTION_ON)
 17a:	e8 16       	cp	r14, r24
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	f8 06       	cpc	r15, r24
 180:	f0 f0       	brcs	.+60     	; 0x1be <main+0x9a>
 182:	90 e8       	ldi	r25, 0x80	; 128
                {
                    
                    blinken = 1;
                    disorderLed = OFF;
                    timerFehlerfunktionOff = 0;
                    if (timerAlarmFehler>= ALARM_FEHLER)
 184:	a9 16       	cp	r10, r25
 186:	9e e3       	ldi	r25, 0x3E	; 62
 188:	b9 06       	cpc	r11, r25
 18a:	08 f4       	brcc	.+2      	; 0x18e <main+0x6a>
 18c:	56 c0       	rjmp	.+172    	; 0x23a <main+0x116>
 18e:	68 94       	set
                    {
                        remoteAlarmLed = OUT_REMOTE_ALARM_LED;
 190:	22 24       	eor	r2, r2
 192:	23 f8       	bld	r2, 3
 194:	31 2c       	mov	r3, r1
 196:	51 c0       	rjmp	.+162    	; 0x23a <main+0x116>
 198:	42 fc       	sbrc	r4, 2
                    }
                }
            }
            else
            {
                if (disorderQuitSchalter)
 19a:	74 c0       	rjmp	.+232    	; 0x284 <main+0x160>
 19c:	40 e4       	ldi	r20, 0x40	; 64
                    
                    disorderLed= OFF;
                    timerFehlerfunktionOff = 0;
                }
                blinken = 0;
                if (timerFehlerfunktionOff >= FEHLER_FUNKTION_OFF)
 19e:	c4 16       	cp	r12, r20
 1a0:	4f e1       	ldi	r20, 0x1F	; 31
 1a2:	d4 06       	cpc	r13, r20
 1a4:	08 f4       	brcc	.+2      	; 0x1a8 <main+0x84>
 1a6:	5e c0       	rjmp	.+188    	; 0x264 <main+0x140>
 1a8:	e1 2c       	mov	r14, r1
                {
                    alarmLed= OFF;
                    disorderLed = OUT_DISORDER_LED;
                    timerFehlerfunktionOn = 0;
 1aa:	f1 2c       	mov	r15, r1
 1ac:	68 94       	set
                }
                blinken = 0;
                if (timerFehlerfunktionOff >= FEHLER_FUNKTION_OFF)
                {
                    alarmLed= OFF;
                    disorderLed = OUT_DISORDER_LED;
 1ae:	88 24       	eor	r8, r8
 1b0:	82 f8       	bld	r8, 2
 1b2:	91 2c       	mov	r9, r1
 1b4:	6c 82       	std	Y+4, r6	; 0x04
                    timerFehlerfunktionOff = 0;
                }
                blinken = 0;
                if (timerFehlerfunktionOff >= FEHLER_FUNKTION_OFF)
                {
                    alarmLed= OFF;
 1b6:	7d 82       	std	Y+5, r7	; 0x05
 1b8:	21 e0       	ldi	r18, 0x01	; 1
        disorderQuitSchalter = switchReadAll() & IM_MASKE_DISORDER_QUIT_SCHALTER;
        ozonSensor = switchReadAll() & IM_MASKE_OZON_SENSOR;
        //Verarbeitung-------------------------------------------------------------
        if (powerSchalter)
        {
            powerLed = OUT_POWER_LED;
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	55 c0       	rjmp	.+170    	; 0x268 <main+0x144>
 1be:	89 81       	ldd	r24, Y+1	; 0x01
            timerFehlerfunktionOn=0;
            timerFehlerfunktionOff=0;
            
        }
        //Ausgabe------------------------------------------------------------------
        if (blinken)
 1c0:	9a 81       	ldd	r25, Y+2	; 0x02
 1c2:	89 2b       	or	r24, r25
 1c4:	91 f0       	breq	.+36     	; 0x1ea <main+0xc6>
 1c6:	06 39       	cpi	r16, 0x96	; 150
        {
            if (timerBlinken>= ON_TIME)
 1c8:	11 05       	cpc	r17, r1
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <main+0xac>
 1cc:	6c 82       	std	Y+4, r6	; 0x04
            {
                alarmLed = OFF;
 1ce:	7d 82       	std	Y+5, r7	; 0x05
 1d0:	08 3c       	cpi	r16, 0xC8	; 200
            }
            if (timerBlinken>= PERIODE)
 1d2:	11 05       	cpc	r17, r1
 1d4:	88 f0       	brcs	.+34     	; 0x1f8 <main+0xd4>
 1d6:	80 e1       	ldi	r24, 0x10	; 16
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	00 e0       	ldi	r16, 0x00	; 0
            {
                alarmLed = OUT_ALARM_LED;
                timerBlinken = 0;
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	42 e0       	ldi	r20, 0x02	; 2
            {
                alarmLed = OFF;
            }
            if (timerBlinken>= PERIODE)
            {
                alarmLed = OUT_ALARM_LED;
 1e4:	4c 83       	std	Y+4, r20	; 0x04
 1e6:	1d 82       	std	Y+5, r1	; 0x05
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <main+0xdc>
 1ea:	80 e1       	ldi	r24, 0x10	; 16
        if (powerSchalter)
        {
            powerLed = OUT_POWER_LED;
            if (ozonSensor)
            {
                valveLed = OUT_VALVE_LED;
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	08 ec       	ldi	r16, 0xC8	; 200
                timerBlinken = 0;
            }
        } 
        else
        {
            timerBlinken = PERIODE;
 1f4:	10 e0       	ldi	r17, 0x00	; 0
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <main+0xdc>
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	4c 81       	ldd	r20, Y+4	; 0x04
        }
         ledWriteAll(powerLed | alarmLed | disorderLed | remoteAlarmLed | valveLed);
 202:	5d 81       	ldd	r21, Y+5	; 0x05
 204:	24 2b       	or	r18, r20
 206:	35 2b       	or	r19, r21
 208:	28 29       	or	r18, r8
 20a:	39 29       	or	r19, r9
 20c:	22 29       	or	r18, r2
 20e:	33 29       	or	r19, r3
 210:	82 2b       	or	r24, r18
 212:	93 2b       	or	r25, r19
 214:	44 d0       	rcall	.+136    	; 0x29e <ledWriteAll>
 216:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	9c e9       	ldi	r25, 0x9C	; 156
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0xf6>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0xfc>
 220:	00 00       	nop
 222:	9a e0       	ldi	r25, 0x0A	; 10
        //Warten------------------------------------------------------------------
        _delay_ms(PROGRAMTACKT_MS);
        timerFehlerfunktionOn = timerFehlerfunktionOn +PROGRAMTACKT_MS;
 224:	e9 0e       	add	r14, r25
 226:	f1 1c       	adc	r15, r1
 228:	4a e0       	ldi	r20, 0x0A	; 10
        timerFehlerfunktionOff = timerFehlerfunktionOff +PROGRAMTACKT_MS;
 22a:	c4 0e       	add	r12, r20
 22c:	d1 1c       	adc	r13, r1
 22e:	5a e0       	ldi	r21, 0x0A	; 10
        timerAlarmFehler = timerAlarmFehler +PROGRAMTACKT_MS;
 230:	a5 0e       	add	r10, r21
 232:	b1 1c       	adc	r11, r1
 234:	06 5f       	subi	r16, 0xF6	; 246
        timerBlinken = timerBlinken + PROGRAMTACKT_MS;
 236:	1f 4f       	sbci	r17, 0xFF	; 255
 238:	90 cf       	rjmp	.-224    	; 0x15a <main+0x36>
    }
 23a:	c1 2c       	mov	r12, r1
    uint8_t alarmQuitSchalter=0;
    uint8_t disorderQuitSchalter=0;
    uint8_t ozonSensor=0;
    
    uint16_t powerLed=0;
    uint16_t alarmLed=0;
 23c:	d1 2c       	mov	r13, r1
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	1a 82       	std	Y+2, r1	; 0x02
 244:	86 2c       	mov	r8, r6
 246:	97 2c       	mov	r9, r7
 248:	be cf       	rjmp	.-132    	; 0x1c6 <main+0xa2>
 24a:	c1 2c       	mov	r12, r1
            disorderLed= OFF;
            remoteAlarmLed= OFF;
            valveLed= OFF;
            blinken = 0;
            timerFehlerfunktionOn=0;
            timerFehlerfunktionOff=0;
 24c:	d1 2c       	mov	r13, r1
 24e:	e1 2c       	mov	r14, r1
            alarmLed= OFF;
            disorderLed= OFF;
            remoteAlarmLed= OFF;
            valveLed= OFF;
            blinken = 0;
            timerFehlerfunktionOn=0;
 250:	f1 2c       	mov	r15, r1
 252:	26 2c       	mov	r2, r6
        else
        {
            powerLed= OFF;
            alarmLed= OFF;
            disorderLed= OFF;
            remoteAlarmLed= OFF;
 254:	37 2c       	mov	r3, r7
 256:	86 2c       	mov	r8, r6
        }
        else
        {
            powerLed= OFF;
            alarmLed= OFF;
            disorderLed= OFF;
 258:	97 2c       	mov	r9, r7
 25a:	6c 82       	std	Y+4, r6	; 0x04
            }
        }
        else
        {
            powerLed= OFF;
            alarmLed= OFF;
 25c:	7d 82       	std	Y+5, r7	; 0x05
 25e:	26 2d       	mov	r18, r6
                valveLed = OFF;
            }
        }
        else
        {
            powerLed= OFF;
 260:	37 2d       	mov	r19, r7
 262:	02 c0       	rjmp	.+4      	; 0x268 <main+0x144>
 264:	21 e0       	ldi	r18, 0x01	; 1
        disorderQuitSchalter = switchReadAll() & IM_MASKE_DISORDER_QUIT_SCHALTER;
        ozonSensor = switchReadAll() & IM_MASKE_OZON_SENSOR;
        //Verarbeitung-------------------------------------------------------------
        if (powerSchalter)
        {
            powerLed = OUT_POWER_LED;
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	69 82       	std	Y+1, r6	; 0x01
 26a:	7a 82       	std	Y+2, r7	; 0x02
 26c:	86 2d       	mov	r24, r6
 26e:	97 2d       	mov	r25, r7
 270:	08 ec       	ldi	r16, 0xC8	; 200
                timerBlinken = 0;
            }
        } 
        else
        {
            timerBlinken = PERIODE;
 272:	10 e0       	ldi	r17, 0x00	; 0
 274:	c5 cf       	rjmp	.-118    	; 0x200 <main+0xdc>
 276:	e1 2c       	mov	r14, r1
                valveLed = OUT_VALVE_LED;
                if (alarmQuitSchalter)
                {
                    blinken = 0;
                    alarmLed= OFF;
                    timerFehlerfunktionOn = 0;
 278:	f1 2c       	mov	r15, r1
 27a:	80 e1       	ldi	r24, 0x10	; 16
        if (powerSchalter)
        {
            powerLed = OUT_POWER_LED;
            if (ozonSensor)
            {
                valveLed = OUT_VALVE_LED;
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	6c 82       	std	Y+4, r6	; 0x04
                if (alarmQuitSchalter)
                {
                    blinken = 0;
                    alarmLed= OFF;
 280:	7d 82       	std	Y+5, r7	; 0x05
 282:	06 c0       	rjmp	.+12     	; 0x290 <main+0x16c>
 284:	c1 2c       	mov	r12, r1
            {
                if (disorderQuitSchalter)
                {
                    
                    disorderLed= OFF;
                    timerFehlerfunktionOff = 0;
 286:	d1 2c       	mov	r13, r1
 288:	86 2d       	mov	r24, r6
                {
                    alarmLed= OFF;
                    disorderLed = OUT_DISORDER_LED;
                    timerFehlerfunktionOn = 0;
                }
                valveLed = OFF;
 28a:	97 2d       	mov	r25, r7
 28c:	86 2c       	mov	r8, r6
            else
            {
                if (disorderQuitSchalter)
                {
                    
                    disorderLed= OFF;
 28e:	97 2c       	mov	r9, r7
 290:	69 82       	std	Y+1, r6	; 0x01
                timerBlinken = 0;
            }
        } 
        else
        {
            timerBlinken = PERIODE;
 292:	7a 82       	std	Y+2, r7	; 0x02
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	08 ec       	ldi	r16, 0xC8	; 200
 29a:	10 e0       	ldi	r17, 0x00	; 0
 29c:	b1 cf       	rjmp	.-158    	; 0x200 <main+0xdc>

0000029e <ledWriteAll>:
 29e:	82 b9       	out	0x02, r24	; 2
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 2a0:	95 b9       	out	0x05, r25	; 5
 2a2:	08 95       	ret

000002a4 <switchReadAll>:
 2a4:	86 b1       	in	r24, 0x06	; 6
 2a6:	08 95       	ret

000002a8 <startSystemTimeMs>:
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	84 bd       	out	0x24, r24	; 36
 2ac:	8b e0       	ldi	r24, 0x0B	; 11
 2ae:	85 bd       	out	0x25, r24	; 37
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 2b6:	89 ef       	ldi	r24, 0xF9	; 249
 2b8:	87 bd       	out	0x27, r24	; 39
 2ba:	08 95       	ret

000002bc <initAdc>:
 2bc:	11 ba       	out	0x11, r1	; 17
 2be:	10 ba       	out	0x10, r1	; 16
 2c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 2c4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 2ce:	8f e0       	ldi	r24, 0x0F	; 15
 2d0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 2da:	ea e7       	ldi	r30, 0x7A	; 122
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	87 ea       	ldi	r24, 0xA7	; 167
 2e0:	80 83       	st	Z, r24
 2e2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 2e6:	80 81       	ld	r24, Z
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	80 83       	st	Z, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	84 ff       	sbrs	r24, 4
 2f0:	fd cf       	rjmp	.-6      	; 0x2ec <initAdc+0x30>
 2f2:	ea e7       	ldi	r30, 0x7A	; 122
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8f 7e       	andi	r24, 0xEF	; 239
 2fa:	80 83       	st	Z, r24
 2fc:	08 95       	ret

000002fe <rgbWrite>:
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	33 e0       	ldi	r19, 0x03	; 3
 302:	f9 01       	movw	r30, r18
 304:	e8 1b       	sub	r30, r24
 306:	f9 0b       	sbc	r31, r25
 308:	c9 01       	movw	r24, r18
 30a:	86 1b       	sub	r24, r22
 30c:	97 0b       	sbc	r25, r23
 30e:	24 1b       	sub	r18, r20
 310:	35 0b       	sbc	r19, r21
 312:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 316:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 31a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 31e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 322:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 326:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 32a:	08 95       	ret

0000032c <initRgb>:
 32c:	8e ef       	ldi	r24, 0xFE	; 254
 32e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 332:	8b e1       	ldi	r24, 0x1B	; 27
 334:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	d6 cf       	rjmp	.-84     	; 0x2fe <rgbWrite>
 352:	08 95       	ret

00000354 <lcdSid>:
 354:	88 23       	and	r24, r24
 356:	11 f0       	breq	.+4      	; 0x35c <lcdSid+0x8>
 358:	a0 9a       	sbi	0x14, 0	; 20
 35a:	08 95       	ret
 35c:	a0 98       	cbi	0x14, 0	; 20
 35e:	08 95       	ret

00000360 <lcdSclk>:
 360:	88 23       	and	r24, r24
 362:	11 f0       	breq	.+4      	; 0x368 <lcdSclk+0x8>
 364:	a1 9a       	sbi	0x14, 1	; 20
 366:	08 95       	ret
 368:	a1 98       	cbi	0x14, 1	; 20
 36a:	08 95       	ret

0000036c <lcdLight>:
 36c:	81 11       	cpse	r24, r1
 36e:	04 c0       	rjmp	.+8      	; 0x378 <lcdLight+0xc>
 370:	84 b5       	in	r24, 0x24	; 36
 372:	8f 7d       	andi	r24, 0xDF	; 223
 374:	84 bd       	out	0x24, r24	; 36
 376:	08 95       	ret
 378:	94 b5       	in	r25, 0x24	; 36
 37a:	90 62       	ori	r25, 0x20	; 32
 37c:	94 bd       	out	0x24, r25	; 36
 37e:	88 bd       	out	0x28, r24	; 40
 380:	08 95       	ret

00000382 <writeLcdF>:
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	7c 01       	movw	r14, r24
 390:	eb 01       	movw	r28, r22
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	df df       	rcall	.-66     	; 0x354 <lcdSid>
 396:	05 e0       	ldi	r16, 0x05	; 5
 398:	10 e0       	ldi	r17, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	e1 df       	rcall	.-62     	; 0x360 <lcdSclk>
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	df df       	rcall	.-66     	; 0x360 <lcdSclk>
 3a2:	01 50       	subi	r16, 0x01	; 1
 3a4:	11 09       	sbc	r17, r1
 3a6:	c9 f7       	brne	.-14     	; 0x39a <writeLcdF+0x18>
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	d4 df       	rcall	.-88     	; 0x354 <lcdSid>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	d8 df       	rcall	.-80     	; 0x360 <lcdSclk>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	d6 df       	rcall	.-84     	; 0x360 <lcdSclk>
 3b4:	83 e4       	ldi	r24, 0x43	; 67
 3b6:	e8 16       	cp	r14, r24
 3b8:	f1 04       	cpc	r15, r1
 3ba:	19 f4       	brne	.+6      	; 0x3c2 <writeLcdF+0x40>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	ca df       	rcall	.-108    	; 0x354 <lcdSid>
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <writeLcdF+0x44>
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	c7 df       	rcall	.-114    	; 0x354 <lcdSid>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	cb df       	rcall	.-106    	; 0x360 <lcdSclk>
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	c9 df       	rcall	.-110    	; 0x360 <lcdSclk>
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	c1 df       	rcall	.-126    	; 0x354 <lcdSid>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	c5 df       	rcall	.-118    	; 0x360 <lcdSclk>
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	c3 df       	rcall	.-122    	; 0x360 <lcdSclk>
 3da:	04 e0       	ldi	r16, 0x04	; 4
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	bf df       	rcall	.-130    	; 0x360 <lcdSclk>
 3e2:	c0 ff       	sbrs	r28, 0
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <writeLcdF+0x6a>
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	b5 df       	rcall	.-150    	; 0x354 <lcdSid>
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <writeLcdF+0x6e>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	b2 df       	rcall	.-156    	; 0x354 <lcdSid>
 3f0:	d6 95       	lsr	r29
 3f2:	c7 95       	ror	r28
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	b4 df       	rcall	.-152    	; 0x360 <lcdSclk>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	b2 df       	rcall	.-156    	; 0x360 <lcdSclk>
 3fc:	01 50       	subi	r16, 0x01	; 1
 3fe:	11 09       	sbc	r17, r1
 400:	71 f7       	brne	.-36     	; 0x3de <writeLcdF+0x5c>
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	a7 df       	rcall	.-178    	; 0x354 <lcdSid>
 406:	04 e0       	ldi	r16, 0x04	; 4
 408:	10 e0       	ldi	r17, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	a9 df       	rcall	.-174    	; 0x360 <lcdSclk>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	a7 df       	rcall	.-178    	; 0x360 <lcdSclk>
 412:	01 50       	subi	r16, 0x01	; 1
 414:	11 09       	sbc	r17, r1
 416:	c9 f7       	brne	.-14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 418:	04 e0       	ldi	r16, 0x04	; 4
 41a:	10 e0       	ldi	r17, 0x00	; 0
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	a0 df       	rcall	.-192    	; 0x360 <lcdSclk>
 420:	c0 ff       	sbrs	r28, 0
 422:	03 c0       	rjmp	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	96 df       	rcall	.-212    	; 0x354 <lcdSid>
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	93 df       	rcall	.-218    	; 0x354 <lcdSid>
 42e:	d6 95       	lsr	r29
 430:	c7 95       	ror	r28
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	95 df       	rcall	.-214    	; 0x360 <lcdSclk>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	93 df       	rcall	.-218    	; 0x360 <lcdSclk>
 43a:	01 50       	subi	r16, 0x01	; 1
 43c:	11 09       	sbc	r17, r1
 43e:	71 f7       	brne	.-36     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	88 df       	rcall	.-240    	; 0x354 <lcdSid>
 444:	c4 e0       	ldi	r28, 0x04	; 4
 446:	d0 e0       	ldi	r29, 0x00	; 0
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	8a df       	rcall	.-236    	; 0x360 <lcdSclk>
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	88 df       	rcall	.-240    	; 0x360 <lcdSclk>
 450:	21 97       	sbiw	r28, 0x01	; 1
 452:	d1 f7       	brne	.-12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	7e df       	rcall	.-260    	; 0x354 <lcdSid>
 458:	87 ec       	ldi	r24, 0xC7	; 199
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 462:	00 00       	nop
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ff 90       	pop	r15
 46e:	ef 90       	pop	r14
 470:	08 95       	ret

00000472 <lcdWriteText>:
 472:	1f 93       	push	r17
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	65 97       	sbiw	r28, 0x15	; 21
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
 488:	9e 01       	movw	r18, r28
 48a:	20 5e       	subi	r18, 0xE0	; 224
 48c:	3f 4f       	sbci	r19, 0xFF	; 255
 48e:	4e 8d       	ldd	r20, Y+30	; 0x1e
 490:	5f 8d       	ldd	r21, Y+31	; 0x1f
 492:	65 e1       	ldi	r22, 0x15	; 21
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	3a d2       	rcall	.+1140   	; 0x910 <vsnprintf>
 49c:	6d 8d       	ldd	r22, Y+29	; 0x1d
 49e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4a0:	90 e2       	ldi	r25, 0x20	; 32
 4a2:	89 9f       	mul	r24, r25
 4a4:	60 0d       	add	r22, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	60 68       	ori	r22, 0x80	; 128
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	83 e4       	ldi	r24, 0x43	; 67
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	68 df       	rcall	.-304    	; 0x382 <writeLcdF>
 4b2:	69 81       	ldd	r22, Y+1	; 0x01
 4b4:	66 23       	and	r22, r22
 4b6:	79 f0       	breq	.+30     	; 0x4d6 <lcdWriteText+0x64>
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	1f 5f       	subi	r17, 0xFF	; 255
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	84 e4       	ldi	r24, 0x44	; 68
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	5f df       	rcall	.-322    	; 0x382 <writeLcdF>
 4c4:	e1 e0       	ldi	r30, 0x01	; 1
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	ec 0f       	add	r30, r28
 4ca:	fd 1f       	adc	r31, r29
 4cc:	e1 0f       	add	r30, r17
 4ce:	f1 1d       	adc	r31, r1
 4d0:	60 81       	ld	r22, Z
 4d2:	61 11       	cpse	r22, r1
 4d4:	f2 cf       	rjmp	.-28     	; 0x4ba <lcdWriteText+0x48>
 4d6:	65 96       	adiw	r28, 0x15	; 21
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	08 95       	ret

000004ea <lcdClear>:
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	83 e4       	ldi	r24, 0x43	; 67
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	47 df       	rcall	.-370    	; 0x382 <writeLcdF>
 4f4:	8f e3       	ldi	r24, 0x3F	; 63
 4f6:	9f e1       	ldi	r25, 0x1F	; 31
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcdClear+0xe>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcdClear+0x14>
 4fe:	00 00       	nop
 500:	80 e3       	ldi	r24, 0x30	; 48
 502:	92 e0       	ldi	r25, 0x02	; 2
 504:	9f 93       	push	r25
 506:	8f 93       	push	r24
 508:	1f 92       	push	r1
 50a:	1f 92       	push	r1
 50c:	b2 df       	rcall	.-156    	; 0x472 <lcdWriteText>
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	08 95       	ret

00000518 <initLcd>:
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	22 df       	rcall	.-444    	; 0x360 <lcdSclk>
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	1a df       	rcall	.-460    	; 0x354 <lcdSid>
 520:	64 e3       	ldi	r22, 0x34	; 52
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	83 e4       	ldi	r24, 0x43	; 67
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	2c df       	rcall	.-424    	; 0x382 <writeLcdF>
 52a:	69 e0       	ldi	r22, 0x09	; 9
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	83 e4       	ldi	r24, 0x43	; 67
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	27 df       	rcall	.-434    	; 0x382 <writeLcdF>
 534:	60 e3       	ldi	r22, 0x30	; 48
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	83 e4       	ldi	r24, 0x43	; 67
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	22 df       	rcall	.-444    	; 0x382 <writeLcdF>
 53e:	6c e0       	ldi	r22, 0x0C	; 12
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	83 e4       	ldi	r24, 0x43	; 67
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	1d df       	rcall	.-454    	; 0x382 <writeLcdF>
 548:	d0 df       	rcall	.-96     	; 0x4ea <lcdClear>
 54a:	67 e0       	ldi	r22, 0x07	; 7
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	83 e4       	ldi	r24, 0x43	; 67
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	17 df       	rcall	.-466    	; 0x382 <writeLcdF>
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0a cf       	rjmp	.-492    	; 0x36c <lcdLight>
 558:	08 95       	ret

0000055a <initBoard>:
 55a:	4f 92       	push	r4
 55c:	5f 92       	push	r5
 55e:	6f 92       	push	r6
 560:	7f 92       	push	r7
 562:	8f 92       	push	r8
 564:	9f 92       	push	r9
 566:	af 92       	push	r10
 568:	bf 92       	push	r11
 56a:	cf 92       	push	r12
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	c8 2f       	mov	r28, r24
 57c:	85 b7       	in	r24, 0x35	; 53
 57e:	85 bf       	out	0x35, r24	; 53
 580:	12 b8       	out	0x02, r1	; 2
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	81 b9       	out	0x01, r24	; 1
 586:	15 b8       	out	0x05, r1	; 5
 588:	84 b9       	out	0x04, r24	; 4
 58a:	88 b9       	out	0x08, r24	; 8
 58c:	17 b8       	out	0x07, r1	; 7
 58e:	8b b9       	out	0x0b, r24	; 11
 590:	1a b8       	out	0x0a, r1	; 10
 592:	8e b9       	out	0x0e, r24	; 14
 594:	1d b8       	out	0x0d, r1	; 13
 596:	72 98       	cbi	0x0e, 2	; 14
 598:	11 ba       	out	0x11, r1	; 17
 59a:	10 ba       	out	0x10, r1	; 16
 59c:	94 e0       	ldi	r25, 0x04	; 4
 59e:	94 bb       	out	0x14, r25	; 20
 5a0:	93 b3       	in	r25, 0x13	; 19
 5a2:	93 60       	ori	r25, 0x03	; 3
 5a4:	93 bb       	out	0x13, r25	; 19
 5a6:	9d 9a       	sbi	0x13, 5	; 19
 5a8:	97 ec       	ldi	r25, 0xC7	; 199
 5aa:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 5ae:	98 e3       	ldi	r25, 0x38	; 56
 5b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 5b4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 5b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 5bc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 5c0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 5c4:	8c e3       	ldi	r24, 0x3C	; 60
 5c6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 5ca:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 5ce:	78 94       	sei
 5d0:	6b de       	rcall	.-810    	; 0x2a8 <startSystemTimeMs>
 5d2:	a2 df       	rcall	.-188    	; 0x518 <initLcd>
 5d4:	73 de       	rcall	.-794    	; 0x2bc <initAdc>
 5d6:	aa de       	rcall	.-684    	; 0x32c <initRgb>
 5d8:	cc 23       	and	r28, r28
 5da:	09 f4       	brne	.+2      	; 0x5de <initBoard+0x84>
 5dc:	b8 c0       	rjmp	.+368    	; 0x74e <initBoard+0x1f4>
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	c5 de       	rcall	.-630    	; 0x36c <lcdLight>
 5e2:	40 e0       	ldi	r20, 0x00	; 0
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	6f ef       	ldi	r22, 0xFF	; 255
 5e8:	73 e0       	ldi	r23, 0x03	; 3
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	87 de       	rcall	.-754    	; 0x2fe <rgbWrite>
 5f0:	8d e1       	ldi	r24, 0x1D	; 29
 5f2:	92 e0       	ldi	r25, 0x02	; 2
 5f4:	9f 93       	push	r25
 5f6:	8f 93       	push	r24
 5f8:	1f 92       	push	r1
 5fa:	1f 92       	push	r1
 5fc:	3a df       	rcall	.-396    	; 0x472 <lcdWriteText>
 5fe:	82 e3       	ldi	r24, 0x32	; 50
 600:	92 e0       	ldi	r25, 0x02	; 2
 602:	9f 93       	push	r25
 604:	8f 93       	push	r24
 606:	1f 92       	push	r1
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	8f 93       	push	r24
 60c:	32 df       	rcall	.-412    	; 0x472 <lcdWriteText>
 60e:	88 e0       	ldi	r24, 0x08	; 8
 610:	92 e0       	ldi	r25, 0x02	; 2
 612:	9f 93       	push	r25
 614:	8f 93       	push	r24
 616:	1f 92       	push	r1
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	8f 93       	push	r24
 61c:	2a df       	rcall	.-428    	; 0x472 <lcdWriteText>
 61e:	87 e4       	ldi	r24, 0x47	; 71
 620:	92 e0       	ldi	r25, 0x02	; 2
 622:	9f 93       	push	r25
 624:	8f 93       	push	r24
 626:	1f 92       	push	r1
 628:	83 e0       	ldi	r24, 0x03	; 3
 62a:	8f 93       	push	r24
 62c:	22 df       	rcall	.-444    	; 0x472 <lcdWriteText>
 62e:	8d b7       	in	r24, 0x3d	; 61
 630:	9e b7       	in	r25, 0x3e	; 62
 632:	40 96       	adiw	r24, 0x10	; 16
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	f8 94       	cli
 638:	9e bf       	out	0x3e, r25	; 62
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	8d bf       	out	0x3d, r24	; 61
 63e:	88 24       	eor	r8, r8
 640:	83 94       	inc	r8
 642:	c0 e0       	ldi	r28, 0x00	; 0
 644:	71 2c       	mov	r7, r1
 646:	99 24       	eor	r9, r9
 648:	93 94       	inc	r9
 64a:	d0 e0       	ldi	r29, 0x00	; 0
 64c:	cc 24       	eor	r12, r12
 64e:	c3 94       	inc	r12
 650:	d1 2c       	mov	r13, r1
 652:	e1 2c       	mov	r14, r1
 654:	68 94       	set
 656:	ff 24       	eor	r15, r15
 658:	f7 f8       	bld	r15, 7
 65a:	66 24       	eor	r6, r6
 65c:	63 94       	inc	r6
 65e:	51 2c       	mov	r5, r1
 660:	09 e0       	ldi	r16, 0x09	; 9
 662:	11 e0       	ldi	r17, 0x01	; 1
 664:	0f 2e       	mov	r0, r31
 666:	fc e5       	ldi	r31, 0x5C	; 92
 668:	af 2e       	mov	r10, r31
 66a:	f2 e0       	ldi	r31, 0x02	; 2
 66c:	bf 2e       	mov	r11, r31
 66e:	f0 2d       	mov	r31, r0
 670:	0f 2e       	mov	r0, r31
 672:	f3 e0       	ldi	r31, 0x03	; 3
 674:	4f 2e       	mov	r4, r31
 676:	f0 2d       	mov	r31, r0
 678:	99 20       	and	r9, r9
 67a:	49 f0       	breq	.+18     	; 0x68e <initBoard+0x134>
 67c:	c7 01       	movw	r24, r14
 67e:	0d 2e       	mov	r0, r29
 680:	02 c0       	rjmp	.+4      	; 0x686 <initBoard+0x12c>
 682:	96 95       	lsr	r25
 684:	87 95       	ror	r24
 686:	0a 94       	dec	r0
 688:	e2 f7       	brpl	.-8      	; 0x682 <initBoard+0x128>
 68a:	09 de       	rcall	.-1006   	; 0x29e <ledWriteAll>
 68c:	08 c0       	rjmp	.+16     	; 0x69e <initBoard+0x144>
 68e:	c6 01       	movw	r24, r12
 690:	0d 2e       	mov	r0, r29
 692:	02 c0       	rjmp	.+4      	; 0x698 <initBoard+0x13e>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	0a 94       	dec	r0
 69a:	e2 f7       	brpl	.-8      	; 0x694 <initBoard+0x13a>
 69c:	00 de       	rcall	.-1024   	; 0x29e <ledWriteAll>
 69e:	df 5f       	subi	r29, 0xFF	; 255
 6a0:	d1 31       	cpi	r29, 0x11	; 17
 6a2:	28 f0       	brcs	.+10     	; 0x6ae <initBoard+0x154>
 6a4:	86 2d       	mov	r24, r6
 6a6:	91 10       	cpse	r9, r1
 6a8:	85 2d       	mov	r24, r5
 6aa:	98 2e       	mov	r9, r24
 6ac:	d0 e0       	ldi	r29, 0x00	; 0
 6ae:	88 20       	and	r8, r8
 6b0:	11 f0       	breq	.+4      	; 0x6b6 <initBoard+0x15c>
 6b2:	ce 5f       	subi	r28, 0xFE	; 254
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <initBoard+0x15e>
 6b6:	c2 50       	subi	r28, 0x02	; 2
 6b8:	8c 2f       	mov	r24, r28
 6ba:	58 de       	rcall	.-848    	; 0x36c <lcdLight>
 6bc:	ce 3f       	cpi	r28, 0xFE	; 254
 6be:	21 f0       	breq	.+8      	; 0x6c8 <initBoard+0x16e>
 6c0:	c8 37       	cpi	r28, 0x78	; 120
 6c2:	19 f4       	brne	.+6      	; 0x6ca <initBoard+0x170>
 6c4:	86 2c       	mov	r8, r6
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <initBoard+0x170>
 6c8:	85 2c       	mov	r8, r5
 6ca:	71 10       	cpse	r7, r1
 6cc:	3b c0       	rjmp	.+118    	; 0x744 <initBoard+0x1ea>
 6ce:	f8 01       	movw	r30, r16
 6d0:	80 81       	ld	r24, Z
 6d2:	83 7c       	andi	r24, 0xC3	; 195
 6d4:	91 f0       	breq	.+36     	; 0x6fa <initBoard+0x1a0>
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	66 e2       	ldi	r22, 0x26	; 38
 6dc:	72 e0       	ldi	r23, 0x02	; 2
 6de:	8f ef       	ldi	r24, 0xFF	; 255
 6e0:	93 e0       	ldi	r25, 0x03	; 3
 6e2:	0d de       	rcall	.-998    	; 0x2fe <rgbWrite>
 6e4:	bf 92       	push	r11
 6e6:	af 92       	push	r10
 6e8:	1f 92       	push	r1
 6ea:	4f 92       	push	r4
 6ec:	c2 de       	rcall	.-636    	; 0x472 <lcdWriteText>
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
 6f6:	76 2c       	mov	r7, r6
 6f8:	25 c0       	rjmp	.+74     	; 0x744 <initBoard+0x1ea>
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	9c e7       	ldi	r25, 0x7C	; 124
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <initBoard+0x1a4>
 702:	00 c0       	rjmp	.+0      	; 0x704 <initBoard+0x1aa>
 704:	00 00       	nop
 706:	b8 cf       	rjmp	.-144    	; 0x678 <initBoard+0x11e>
 708:	f0 de       	rcall	.-544    	; 0x4ea <lcdClear>
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	2f de       	rcall	.-930    	; 0x36c <lcdLight>
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	c5 dd       	rcall	.-1142   	; 0x29e <ledWriteAll>
 714:	40 e0       	ldi	r20, 0x00	; 0
 716:	50 e0       	ldi	r21, 0x00	; 0
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	ee dd       	rcall	.-1060   	; 0x2fe <rgbWrite>
 722:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
 726:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
 72a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
 72e:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
 732:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
 736:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
 73a:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
 73e:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
 742:	05 c0       	rjmp	.+10     	; 0x74e <initBoard+0x1f4>
 744:	f8 01       	movw	r30, r16
 746:	80 81       	ld	r24, Z
 748:	83 7c       	andi	r24, 0xC3	; 195
 74a:	b9 f6       	brne	.-82     	; 0x6fa <initBoard+0x1a0>
 74c:	dd cf       	rjmp	.-70     	; 0x708 <initBoard+0x1ae>
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	df 90       	pop	r13
 75c:	cf 90       	pop	r12
 75e:	bf 90       	pop	r11
 760:	af 90       	pop	r10
 762:	9f 90       	pop	r9
 764:	8f 90       	pop	r8
 766:	7f 90       	pop	r7
 768:	6f 90       	pop	r6
 76a:	5f 90       	pop	r5
 76c:	4f 90       	pop	r4
 76e:	08 95       	ret

00000770 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
 778:	28 97       	sbiw	r28, 0x08	; 8
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	f8 94       	cli
 77e:	de bf       	out	0x3e, r29	; 62
 780:	0f be       	out	0x3f, r0	; 63
 782:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 784:	88 e0       	ldi	r24, 0x08	; 8
 786:	e0 e0       	ldi	r30, 0x00	; 0
 788:	f2 e0       	ldi	r31, 0x02	; 2
 78a:	de 01       	movw	r26, r28
 78c:	11 96       	adiw	r26, 0x01	; 1
 78e:	01 90       	ld	r0, Z+
 790:	0d 92       	st	X+, r0
 792:	8a 95       	dec	r24
 794:	e1 f7       	brne	.-8      	; 0x78e <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 796:	e5 e0       	ldi	r30, 0x05	; 5
 798:	f1 e0       	ldi	r31, 0x01	; 1
 79a:	80 81       	ld	r24, Z
 79c:	8f 7b       	andi	r24, 0xBF	; 191
 79e:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 7a0:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 7a4:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	8c 0f       	add	r24, r28
 7ae:	9d 1f       	adc	r25, r29
 7b0:	e8 0f       	add	r30, r24
 7b2:	f9 1f       	adc	r31, r25
 7b4:	80 81       	ld	r24, Z
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
 7bc:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
 7c0:	a2 ef       	ldi	r26, 0xF2	; 242
 7c2:	b2 e0       	ldi	r27, 0x02	; 2
 7c4:	22 e8       	ldi	r18, 0x82	; 130
 7c6:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 7c8:	e5 e0       	ldi	r30, 0x05	; 5
 7ca:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 7cc:	5e 91       	ld	r21, -X
 7ce:	4e 91       	ld	r20, -X
 7d0:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
 7d4:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
 7d8:	84 23       	and	r24, r20
 7da:	95 23       	and	r25, r21
 7dc:	89 2b       	or	r24, r25
 7de:	21 f0       	breq	.+8      	; 0x7e8 <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 7e0:	80 81       	ld	r24, Z
 7e2:	80 62       	ori	r24, 0x20	; 32
 7e4:	80 83       	st	Z, r24
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 7e8:	80 81       	ld	r24, Z
 7ea:	8f 7d       	andi	r24, 0xDF	; 223
 7ec:	80 83       	st	Z, r24
        }
        CLOCK_1;
 7ee:	80 81       	ld	r24, Z
 7f0:	80 61       	ori	r24, 0x10	; 16
 7f2:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 7f4:	80 81       	ld	r24, Z
 7f6:	8f 7e       	andi	r24, 0xEF	; 239
 7f8:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 7fa:	a2 17       	cp	r26, r18
 7fc:	b3 07       	cpc	r27, r19
 7fe:	31 f7       	brne	.-52     	; 0x7cc <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 800:	e5 e0       	ldi	r30, 0x05	; 5
 802:	f1 e0       	ldi	r31, 0x01	; 1
 804:	80 81       	ld	r24, Z
 806:	87 7f       	andi	r24, 0xF7	; 247
 808:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 80a:	80 81       	ld	r24, Z
 80c:	88 7f       	andi	r24, 0xF8	; 248
 80e:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 810:	90 81       	ld	r25, Z
 812:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 816:	89 2b       	or	r24, r25
 818:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 81a:	80 81       	ld	r24, Z
 81c:	80 64       	ori	r24, 0x40	; 64
 81e:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 820:	80 81       	ld	r24, Z
 822:	88 60       	ori	r24, 0x08	; 8
 824:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 826:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 82a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 82e:	87 30       	cpi	r24, 0x07	; 7
 830:	91 05       	cpc	r25, r1
 832:	30 f4       	brcc	.+12     	; 0x840 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2731+0x1>
 83a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2731>
 83e:	07 c0       	rjmp	.+14     	; 0x84e <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
 840:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2731+0x1>
 844:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2731>
        writeTextFinished = 1;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
 84e:	28 96       	adiw	r28, 0x08	; 8
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 860:	1f 92       	push	r1
 862:	0f 92       	push	r0
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	0f 92       	push	r0
 868:	11 24       	eor	r1, r1
 86a:	0b b6       	in	r0, 0x3b	; 59
 86c:	0f 92       	push	r0
 86e:	2f 93       	push	r18
 870:	3f 93       	push	r19
 872:	4f 93       	push	r20
 874:	5f 93       	push	r21
 876:	6f 93       	push	r22
 878:	7f 93       	push	r23
 87a:	8f 93       	push	r24
 87c:	9f 93       	push	r25
 87e:	af 93       	push	r26
 880:	bf 93       	push	r27
 882:	ef 93       	push	r30
 884:	ff 93       	push	r31
    systemTimeMs += 1;
 886:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
 88a:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
 88e:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
 892:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
 896:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
 89a:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
 89e:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
 8a2:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
 8a6:	a1 e0       	ldi	r26, 0x01	; 1
 8a8:	27 d0       	rcall	.+78     	; 0x8f8 <__adddi3_s8>
 8aa:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
 8ae:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
 8b2:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
 8b6:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
 8ba:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
 8be:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
 8c2:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
 8c6:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 8ca:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
 8ce:	81 11       	cpse	r24, r1
 8d0:	4f df       	rcall	.-354    	; 0x770 <matrixWriteNextLine>
}
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	bf 91       	pop	r27
 8d8:	af 91       	pop	r26
 8da:	9f 91       	pop	r25
 8dc:	8f 91       	pop	r24
 8de:	7f 91       	pop	r23
 8e0:	6f 91       	pop	r22
 8e2:	5f 91       	pop	r21
 8e4:	4f 91       	pop	r20
 8e6:	3f 91       	pop	r19
 8e8:	2f 91       	pop	r18
 8ea:	0f 90       	pop	r0
 8ec:	0b be       	out	0x3b, r0	; 59
 8ee:	0f 90       	pop	r0
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	0f 90       	pop	r0
 8f4:	1f 90       	pop	r1
 8f6:	18 95       	reti

000008f8 <__adddi3_s8>:
 8f8:	00 24       	eor	r0, r0
 8fa:	a7 fd       	sbrc	r26, 7
 8fc:	00 94       	com	r0
 8fe:	2a 0f       	add	r18, r26
 900:	30 1d       	adc	r19, r0
 902:	40 1d       	adc	r20, r0
 904:	50 1d       	adc	r21, r0
 906:	60 1d       	adc	r22, r0
 908:	70 1d       	adc	r23, r0
 90a:	80 1d       	adc	r24, r0
 90c:	90 1d       	adc	r25, r0
 90e:	08 95       	ret

00000910 <vsnprintf>:
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	cd b7       	in	r28, 0x3d	; 61
 91a:	de b7       	in	r29, 0x3e	; 62
 91c:	2e 97       	sbiw	r28, 0x0e	; 14
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	f8 94       	cli
 922:	de bf       	out	0x3e, r29	; 62
 924:	0f be       	out	0x3f, r0	; 63
 926:	cd bf       	out	0x3d, r28	; 61
 928:	8c 01       	movw	r16, r24
 92a:	fa 01       	movw	r30, r20
 92c:	86 e0       	ldi	r24, 0x06	; 6
 92e:	8c 83       	std	Y+4, r24	; 0x04
 930:	1a 83       	std	Y+2, r17	; 0x02
 932:	09 83       	std	Y+1, r16	; 0x01
 934:	77 ff       	sbrs	r23, 7
 936:	02 c0       	rjmp	.+4      	; 0x93c <vsnprintf+0x2c>
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	70 e8       	ldi	r23, 0x80	; 128
 93c:	cb 01       	movw	r24, r22
 93e:	01 97       	sbiw	r24, 0x01	; 1
 940:	9e 83       	std	Y+6, r25	; 0x06
 942:	8d 83       	std	Y+5, r24	; 0x05
 944:	a9 01       	movw	r20, r18
 946:	bf 01       	movw	r22, r30
 948:	ce 01       	movw	r24, r28
 94a:	01 96       	adiw	r24, 0x01	; 1
 94c:	19 d0       	rcall	.+50     	; 0x980 <vfprintf>
 94e:	4d 81       	ldd	r20, Y+5	; 0x05
 950:	5e 81       	ldd	r21, Y+6	; 0x06
 952:	57 fd       	sbrc	r21, 7
 954:	0a c0       	rjmp	.+20     	; 0x96a <vsnprintf+0x5a>
 956:	2f 81       	ldd	r18, Y+7	; 0x07
 958:	38 85       	ldd	r19, Y+8	; 0x08
 95a:	42 17       	cp	r20, r18
 95c:	53 07       	cpc	r21, r19
 95e:	0c f4       	brge	.+2      	; 0x962 <vsnprintf+0x52>
 960:	9a 01       	movw	r18, r20
 962:	f8 01       	movw	r30, r16
 964:	e2 0f       	add	r30, r18
 966:	f3 1f       	adc	r31, r19
 968:	10 82       	st	Z, r1
 96a:	2e 96       	adiw	r28, 0x0e	; 14
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	f8 94       	cli
 970:	de bf       	out	0x3e, r29	; 62
 972:	0f be       	out	0x3f, r0	; 63
 974:	cd bf       	out	0x3d, r28	; 61
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	08 95       	ret

00000980 <vfprintf>:
 980:	2f 92       	push	r2
 982:	3f 92       	push	r3
 984:	4f 92       	push	r4
 986:	5f 92       	push	r5
 988:	6f 92       	push	r6
 98a:	7f 92       	push	r7
 98c:	8f 92       	push	r8
 98e:	9f 92       	push	r9
 990:	af 92       	push	r10
 992:	bf 92       	push	r11
 994:	cf 92       	push	r12
 996:	df 92       	push	r13
 998:	ef 92       	push	r14
 99a:	ff 92       	push	r15
 99c:	0f 93       	push	r16
 99e:	1f 93       	push	r17
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	cd b7       	in	r28, 0x3d	; 61
 9a6:	de b7       	in	r29, 0x3e	; 62
 9a8:	2b 97       	sbiw	r28, 0x0b	; 11
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	f8 94       	cli
 9ae:	de bf       	out	0x3e, r29	; 62
 9b0:	0f be       	out	0x3f, r0	; 63
 9b2:	cd bf       	out	0x3d, r28	; 61
 9b4:	6c 01       	movw	r12, r24
 9b6:	7b 01       	movw	r14, r22
 9b8:	8a 01       	movw	r16, r20
 9ba:	fc 01       	movw	r30, r24
 9bc:	17 82       	std	Z+7, r1	; 0x07
 9be:	16 82       	std	Z+6, r1	; 0x06
 9c0:	83 81       	ldd	r24, Z+3	; 0x03
 9c2:	81 ff       	sbrs	r24, 1
 9c4:	bf c1       	rjmp	.+894    	; 0xd44 <vfprintf+0x3c4>
 9c6:	ce 01       	movw	r24, r28
 9c8:	01 96       	adiw	r24, 0x01	; 1
 9ca:	3c 01       	movw	r6, r24
 9cc:	f6 01       	movw	r30, r12
 9ce:	93 81       	ldd	r25, Z+3	; 0x03
 9d0:	f7 01       	movw	r30, r14
 9d2:	93 fd       	sbrc	r25, 3
 9d4:	85 91       	lpm	r24, Z+
 9d6:	93 ff       	sbrs	r25, 3
 9d8:	81 91       	ld	r24, Z+
 9da:	7f 01       	movw	r14, r30
 9dc:	88 23       	and	r24, r24
 9de:	09 f4       	brne	.+2      	; 0x9e2 <vfprintf+0x62>
 9e0:	ad c1       	rjmp	.+858    	; 0xd3c <vfprintf+0x3bc>
 9e2:	85 32       	cpi	r24, 0x25	; 37
 9e4:	39 f4       	brne	.+14     	; 0x9f4 <vfprintf+0x74>
 9e6:	93 fd       	sbrc	r25, 3
 9e8:	85 91       	lpm	r24, Z+
 9ea:	93 ff       	sbrs	r25, 3
 9ec:	81 91       	ld	r24, Z+
 9ee:	7f 01       	movw	r14, r30
 9f0:	85 32       	cpi	r24, 0x25	; 37
 9f2:	21 f4       	brne	.+8      	; 0x9fc <vfprintf+0x7c>
 9f4:	b6 01       	movw	r22, r12
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	d6 d1       	rcall	.+940    	; 0xda6 <fputc>
 9fa:	e8 cf       	rjmp	.-48     	; 0x9cc <vfprintf+0x4c>
 9fc:	91 2c       	mov	r9, r1
 9fe:	21 2c       	mov	r2, r1
 a00:	31 2c       	mov	r3, r1
 a02:	ff e1       	ldi	r31, 0x1F	; 31
 a04:	f3 15       	cp	r31, r3
 a06:	d8 f0       	brcs	.+54     	; 0xa3e <vfprintf+0xbe>
 a08:	8b 32       	cpi	r24, 0x2B	; 43
 a0a:	79 f0       	breq	.+30     	; 0xa2a <vfprintf+0xaa>
 a0c:	38 f4       	brcc	.+14     	; 0xa1c <vfprintf+0x9c>
 a0e:	80 32       	cpi	r24, 0x20	; 32
 a10:	79 f0       	breq	.+30     	; 0xa30 <vfprintf+0xb0>
 a12:	83 32       	cpi	r24, 0x23	; 35
 a14:	a1 f4       	brne	.+40     	; 0xa3e <vfprintf+0xbe>
 a16:	23 2d       	mov	r18, r3
 a18:	20 61       	ori	r18, 0x10	; 16
 a1a:	1d c0       	rjmp	.+58     	; 0xa56 <vfprintf+0xd6>
 a1c:	8d 32       	cpi	r24, 0x2D	; 45
 a1e:	61 f0       	breq	.+24     	; 0xa38 <vfprintf+0xb8>
 a20:	80 33       	cpi	r24, 0x30	; 48
 a22:	69 f4       	brne	.+26     	; 0xa3e <vfprintf+0xbe>
 a24:	23 2d       	mov	r18, r3
 a26:	21 60       	ori	r18, 0x01	; 1
 a28:	16 c0       	rjmp	.+44     	; 0xa56 <vfprintf+0xd6>
 a2a:	83 2d       	mov	r24, r3
 a2c:	82 60       	ori	r24, 0x02	; 2
 a2e:	38 2e       	mov	r3, r24
 a30:	e3 2d       	mov	r30, r3
 a32:	e4 60       	ori	r30, 0x04	; 4
 a34:	3e 2e       	mov	r3, r30
 a36:	2a c0       	rjmp	.+84     	; 0xa8c <vfprintf+0x10c>
 a38:	f3 2d       	mov	r31, r3
 a3a:	f8 60       	ori	r31, 0x08	; 8
 a3c:	1d c0       	rjmp	.+58     	; 0xa78 <vfprintf+0xf8>
 a3e:	37 fc       	sbrc	r3, 7
 a40:	2d c0       	rjmp	.+90     	; 0xa9c <vfprintf+0x11c>
 a42:	20 ed       	ldi	r18, 0xD0	; 208
 a44:	28 0f       	add	r18, r24
 a46:	2a 30       	cpi	r18, 0x0A	; 10
 a48:	40 f0       	brcs	.+16     	; 0xa5a <vfprintf+0xda>
 a4a:	8e 32       	cpi	r24, 0x2E	; 46
 a4c:	b9 f4       	brne	.+46     	; 0xa7c <vfprintf+0xfc>
 a4e:	36 fc       	sbrc	r3, 6
 a50:	75 c1       	rjmp	.+746    	; 0xd3c <vfprintf+0x3bc>
 a52:	23 2d       	mov	r18, r3
 a54:	20 64       	ori	r18, 0x40	; 64
 a56:	32 2e       	mov	r3, r18
 a58:	19 c0       	rjmp	.+50     	; 0xa8c <vfprintf+0x10c>
 a5a:	36 fe       	sbrs	r3, 6
 a5c:	06 c0       	rjmp	.+12     	; 0xa6a <vfprintf+0xea>
 a5e:	8a e0       	ldi	r24, 0x0A	; 10
 a60:	98 9e       	mul	r9, r24
 a62:	20 0d       	add	r18, r0
 a64:	11 24       	eor	r1, r1
 a66:	92 2e       	mov	r9, r18
 a68:	11 c0       	rjmp	.+34     	; 0xa8c <vfprintf+0x10c>
 a6a:	ea e0       	ldi	r30, 0x0A	; 10
 a6c:	2e 9e       	mul	r2, r30
 a6e:	20 0d       	add	r18, r0
 a70:	11 24       	eor	r1, r1
 a72:	22 2e       	mov	r2, r18
 a74:	f3 2d       	mov	r31, r3
 a76:	f0 62       	ori	r31, 0x20	; 32
 a78:	3f 2e       	mov	r3, r31
 a7a:	08 c0       	rjmp	.+16     	; 0xa8c <vfprintf+0x10c>
 a7c:	8c 36       	cpi	r24, 0x6C	; 108
 a7e:	21 f4       	brne	.+8      	; 0xa88 <vfprintf+0x108>
 a80:	83 2d       	mov	r24, r3
 a82:	80 68       	ori	r24, 0x80	; 128
 a84:	38 2e       	mov	r3, r24
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <vfprintf+0x10c>
 a88:	88 36       	cpi	r24, 0x68	; 104
 a8a:	41 f4       	brne	.+16     	; 0xa9c <vfprintf+0x11c>
 a8c:	f7 01       	movw	r30, r14
 a8e:	93 fd       	sbrc	r25, 3
 a90:	85 91       	lpm	r24, Z+
 a92:	93 ff       	sbrs	r25, 3
 a94:	81 91       	ld	r24, Z+
 a96:	7f 01       	movw	r14, r30
 a98:	81 11       	cpse	r24, r1
 a9a:	b3 cf       	rjmp	.-154    	; 0xa02 <vfprintf+0x82>
 a9c:	98 2f       	mov	r25, r24
 a9e:	9f 7d       	andi	r25, 0xDF	; 223
 aa0:	95 54       	subi	r25, 0x45	; 69
 aa2:	93 30       	cpi	r25, 0x03	; 3
 aa4:	28 f4       	brcc	.+10     	; 0xab0 <vfprintf+0x130>
 aa6:	0c 5f       	subi	r16, 0xFC	; 252
 aa8:	1f 4f       	sbci	r17, 0xFF	; 255
 aaa:	9f e3       	ldi	r25, 0x3F	; 63
 aac:	99 83       	std	Y+1, r25	; 0x01
 aae:	0d c0       	rjmp	.+26     	; 0xaca <vfprintf+0x14a>
 ab0:	83 36       	cpi	r24, 0x63	; 99
 ab2:	31 f0       	breq	.+12     	; 0xac0 <vfprintf+0x140>
 ab4:	83 37       	cpi	r24, 0x73	; 115
 ab6:	71 f0       	breq	.+28     	; 0xad4 <vfprintf+0x154>
 ab8:	83 35       	cpi	r24, 0x53	; 83
 aba:	09 f0       	breq	.+2      	; 0xabe <vfprintf+0x13e>
 abc:	55 c0       	rjmp	.+170    	; 0xb68 <vfprintf+0x1e8>
 abe:	20 c0       	rjmp	.+64     	; 0xb00 <vfprintf+0x180>
 ac0:	f8 01       	movw	r30, r16
 ac2:	80 81       	ld	r24, Z
 ac4:	89 83       	std	Y+1, r24	; 0x01
 ac6:	0e 5f       	subi	r16, 0xFE	; 254
 ac8:	1f 4f       	sbci	r17, 0xFF	; 255
 aca:	88 24       	eor	r8, r8
 acc:	83 94       	inc	r8
 ace:	91 2c       	mov	r9, r1
 ad0:	53 01       	movw	r10, r6
 ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <vfprintf+0x178>
 ad4:	28 01       	movw	r4, r16
 ad6:	f2 e0       	ldi	r31, 0x02	; 2
 ad8:	4f 0e       	add	r4, r31
 ada:	51 1c       	adc	r5, r1
 adc:	f8 01       	movw	r30, r16
 ade:	a0 80       	ld	r10, Z
 ae0:	b1 80       	ldd	r11, Z+1	; 0x01
 ae2:	36 fe       	sbrs	r3, 6
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <vfprintf+0x16c>
 ae6:	69 2d       	mov	r22, r9
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <vfprintf+0x170>
 aec:	6f ef       	ldi	r22, 0xFF	; 255
 aee:	7f ef       	ldi	r23, 0xFF	; 255
 af0:	c5 01       	movw	r24, r10
 af2:	4e d1       	rcall	.+668    	; 0xd90 <strnlen>
 af4:	4c 01       	movw	r8, r24
 af6:	82 01       	movw	r16, r4
 af8:	f3 2d       	mov	r31, r3
 afa:	ff 77       	andi	r31, 0x7F	; 127
 afc:	3f 2e       	mov	r3, r31
 afe:	15 c0       	rjmp	.+42     	; 0xb2a <vfprintf+0x1aa>
 b00:	28 01       	movw	r4, r16
 b02:	22 e0       	ldi	r18, 0x02	; 2
 b04:	42 0e       	add	r4, r18
 b06:	51 1c       	adc	r5, r1
 b08:	f8 01       	movw	r30, r16
 b0a:	a0 80       	ld	r10, Z
 b0c:	b1 80       	ldd	r11, Z+1	; 0x01
 b0e:	36 fe       	sbrs	r3, 6
 b10:	03 c0       	rjmp	.+6      	; 0xb18 <vfprintf+0x198>
 b12:	69 2d       	mov	r22, r9
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <vfprintf+0x19c>
 b18:	6f ef       	ldi	r22, 0xFF	; 255
 b1a:	7f ef       	ldi	r23, 0xFF	; 255
 b1c:	c5 01       	movw	r24, r10
 b1e:	2d d1       	rcall	.+602    	; 0xd7a <strnlen_P>
 b20:	4c 01       	movw	r8, r24
 b22:	f3 2d       	mov	r31, r3
 b24:	f0 68       	ori	r31, 0x80	; 128
 b26:	3f 2e       	mov	r3, r31
 b28:	82 01       	movw	r16, r4
 b2a:	33 fc       	sbrc	r3, 3
 b2c:	19 c0       	rjmp	.+50     	; 0xb60 <vfprintf+0x1e0>
 b2e:	82 2d       	mov	r24, r2
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	88 16       	cp	r8, r24
 b34:	99 06       	cpc	r9, r25
 b36:	a0 f4       	brcc	.+40     	; 0xb60 <vfprintf+0x1e0>
 b38:	b6 01       	movw	r22, r12
 b3a:	80 e2       	ldi	r24, 0x20	; 32
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	33 d1       	rcall	.+614    	; 0xda6 <fputc>
 b40:	2a 94       	dec	r2
 b42:	f5 cf       	rjmp	.-22     	; 0xb2e <vfprintf+0x1ae>
 b44:	f5 01       	movw	r30, r10
 b46:	37 fc       	sbrc	r3, 7
 b48:	85 91       	lpm	r24, Z+
 b4a:	37 fe       	sbrs	r3, 7
 b4c:	81 91       	ld	r24, Z+
 b4e:	5f 01       	movw	r10, r30
 b50:	b6 01       	movw	r22, r12
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	28 d1       	rcall	.+592    	; 0xda6 <fputc>
 b56:	21 10       	cpse	r2, r1
 b58:	2a 94       	dec	r2
 b5a:	21 e0       	ldi	r18, 0x01	; 1
 b5c:	82 1a       	sub	r8, r18
 b5e:	91 08       	sbc	r9, r1
 b60:	81 14       	cp	r8, r1
 b62:	91 04       	cpc	r9, r1
 b64:	79 f7       	brne	.-34     	; 0xb44 <vfprintf+0x1c4>
 b66:	e1 c0       	rjmp	.+450    	; 0xd2a <vfprintf+0x3aa>
 b68:	84 36       	cpi	r24, 0x64	; 100
 b6a:	11 f0       	breq	.+4      	; 0xb70 <vfprintf+0x1f0>
 b6c:	89 36       	cpi	r24, 0x69	; 105
 b6e:	39 f5       	brne	.+78     	; 0xbbe <vfprintf+0x23e>
 b70:	f8 01       	movw	r30, r16
 b72:	37 fe       	sbrs	r3, 7
 b74:	07 c0       	rjmp	.+14     	; 0xb84 <vfprintf+0x204>
 b76:	60 81       	ld	r22, Z
 b78:	71 81       	ldd	r23, Z+1	; 0x01
 b7a:	82 81       	ldd	r24, Z+2	; 0x02
 b7c:	93 81       	ldd	r25, Z+3	; 0x03
 b7e:	0c 5f       	subi	r16, 0xFC	; 252
 b80:	1f 4f       	sbci	r17, 0xFF	; 255
 b82:	08 c0       	rjmp	.+16     	; 0xb94 <vfprintf+0x214>
 b84:	60 81       	ld	r22, Z
 b86:	71 81       	ldd	r23, Z+1	; 0x01
 b88:	07 2e       	mov	r0, r23
 b8a:	00 0c       	add	r0, r0
 b8c:	88 0b       	sbc	r24, r24
 b8e:	99 0b       	sbc	r25, r25
 b90:	0e 5f       	subi	r16, 0xFE	; 254
 b92:	1f 4f       	sbci	r17, 0xFF	; 255
 b94:	f3 2d       	mov	r31, r3
 b96:	ff 76       	andi	r31, 0x6F	; 111
 b98:	3f 2e       	mov	r3, r31
 b9a:	97 ff       	sbrs	r25, 7
 b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <vfprintf+0x230>
 b9e:	90 95       	com	r25
 ba0:	80 95       	com	r24
 ba2:	70 95       	com	r23
 ba4:	61 95       	neg	r22
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255
 ba8:	8f 4f       	sbci	r24, 0xFF	; 255
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	f0 68       	ori	r31, 0x80	; 128
 bae:	3f 2e       	mov	r3, r31
 bb0:	2a e0       	ldi	r18, 0x0A	; 10
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	a3 01       	movw	r20, r6
 bb6:	33 d1       	rcall	.+614    	; 0xe1e <__ultoa_invert>
 bb8:	88 2e       	mov	r8, r24
 bba:	86 18       	sub	r8, r6
 bbc:	44 c0       	rjmp	.+136    	; 0xc46 <vfprintf+0x2c6>
 bbe:	85 37       	cpi	r24, 0x75	; 117
 bc0:	31 f4       	brne	.+12     	; 0xbce <vfprintf+0x24e>
 bc2:	23 2d       	mov	r18, r3
 bc4:	2f 7e       	andi	r18, 0xEF	; 239
 bc6:	b2 2e       	mov	r11, r18
 bc8:	2a e0       	ldi	r18, 0x0A	; 10
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	25 c0       	rjmp	.+74     	; 0xc18 <vfprintf+0x298>
 bce:	93 2d       	mov	r25, r3
 bd0:	99 7f       	andi	r25, 0xF9	; 249
 bd2:	b9 2e       	mov	r11, r25
 bd4:	8f 36       	cpi	r24, 0x6F	; 111
 bd6:	c1 f0       	breq	.+48     	; 0xc08 <vfprintf+0x288>
 bd8:	18 f4       	brcc	.+6      	; 0xbe0 <vfprintf+0x260>
 bda:	88 35       	cpi	r24, 0x58	; 88
 bdc:	79 f0       	breq	.+30     	; 0xbfc <vfprintf+0x27c>
 bde:	ae c0       	rjmp	.+348    	; 0xd3c <vfprintf+0x3bc>
 be0:	80 37       	cpi	r24, 0x70	; 112
 be2:	19 f0       	breq	.+6      	; 0xbea <vfprintf+0x26a>
 be4:	88 37       	cpi	r24, 0x78	; 120
 be6:	21 f0       	breq	.+8      	; 0xbf0 <vfprintf+0x270>
 be8:	a9 c0       	rjmp	.+338    	; 0xd3c <vfprintf+0x3bc>
 bea:	e9 2f       	mov	r30, r25
 bec:	e0 61       	ori	r30, 0x10	; 16
 bee:	be 2e       	mov	r11, r30
 bf0:	b4 fe       	sbrs	r11, 4
 bf2:	0d c0       	rjmp	.+26     	; 0xc0e <vfprintf+0x28e>
 bf4:	fb 2d       	mov	r31, r11
 bf6:	f4 60       	ori	r31, 0x04	; 4
 bf8:	bf 2e       	mov	r11, r31
 bfa:	09 c0       	rjmp	.+18     	; 0xc0e <vfprintf+0x28e>
 bfc:	34 fe       	sbrs	r3, 4
 bfe:	0a c0       	rjmp	.+20     	; 0xc14 <vfprintf+0x294>
 c00:	29 2f       	mov	r18, r25
 c02:	26 60       	ori	r18, 0x06	; 6
 c04:	b2 2e       	mov	r11, r18
 c06:	06 c0       	rjmp	.+12     	; 0xc14 <vfprintf+0x294>
 c08:	28 e0       	ldi	r18, 0x08	; 8
 c0a:	30 e0       	ldi	r19, 0x00	; 0
 c0c:	05 c0       	rjmp	.+10     	; 0xc18 <vfprintf+0x298>
 c0e:	20 e1       	ldi	r18, 0x10	; 16
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	02 c0       	rjmp	.+4      	; 0xc18 <vfprintf+0x298>
 c14:	20 e1       	ldi	r18, 0x10	; 16
 c16:	32 e0       	ldi	r19, 0x02	; 2
 c18:	f8 01       	movw	r30, r16
 c1a:	b7 fe       	sbrs	r11, 7
 c1c:	07 c0       	rjmp	.+14     	; 0xc2c <vfprintf+0x2ac>
 c1e:	60 81       	ld	r22, Z
 c20:	71 81       	ldd	r23, Z+1	; 0x01
 c22:	82 81       	ldd	r24, Z+2	; 0x02
 c24:	93 81       	ldd	r25, Z+3	; 0x03
 c26:	0c 5f       	subi	r16, 0xFC	; 252
 c28:	1f 4f       	sbci	r17, 0xFF	; 255
 c2a:	06 c0       	rjmp	.+12     	; 0xc38 <vfprintf+0x2b8>
 c2c:	60 81       	ld	r22, Z
 c2e:	71 81       	ldd	r23, Z+1	; 0x01
 c30:	80 e0       	ldi	r24, 0x00	; 0
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	0e 5f       	subi	r16, 0xFE	; 254
 c36:	1f 4f       	sbci	r17, 0xFF	; 255
 c38:	a3 01       	movw	r20, r6
 c3a:	f1 d0       	rcall	.+482    	; 0xe1e <__ultoa_invert>
 c3c:	88 2e       	mov	r8, r24
 c3e:	86 18       	sub	r8, r6
 c40:	fb 2d       	mov	r31, r11
 c42:	ff 77       	andi	r31, 0x7F	; 127
 c44:	3f 2e       	mov	r3, r31
 c46:	36 fe       	sbrs	r3, 6
 c48:	0d c0       	rjmp	.+26     	; 0xc64 <vfprintf+0x2e4>
 c4a:	23 2d       	mov	r18, r3
 c4c:	2e 7f       	andi	r18, 0xFE	; 254
 c4e:	a2 2e       	mov	r10, r18
 c50:	89 14       	cp	r8, r9
 c52:	58 f4       	brcc	.+22     	; 0xc6a <vfprintf+0x2ea>
 c54:	34 fe       	sbrs	r3, 4
 c56:	0b c0       	rjmp	.+22     	; 0xc6e <vfprintf+0x2ee>
 c58:	32 fc       	sbrc	r3, 2
 c5a:	09 c0       	rjmp	.+18     	; 0xc6e <vfprintf+0x2ee>
 c5c:	83 2d       	mov	r24, r3
 c5e:	8e 7e       	andi	r24, 0xEE	; 238
 c60:	a8 2e       	mov	r10, r24
 c62:	05 c0       	rjmp	.+10     	; 0xc6e <vfprintf+0x2ee>
 c64:	b8 2c       	mov	r11, r8
 c66:	a3 2c       	mov	r10, r3
 c68:	03 c0       	rjmp	.+6      	; 0xc70 <vfprintf+0x2f0>
 c6a:	b8 2c       	mov	r11, r8
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <vfprintf+0x2f0>
 c6e:	b9 2c       	mov	r11, r9
 c70:	a4 fe       	sbrs	r10, 4
 c72:	0f c0       	rjmp	.+30     	; 0xc92 <vfprintf+0x312>
 c74:	fe 01       	movw	r30, r28
 c76:	e8 0d       	add	r30, r8
 c78:	f1 1d       	adc	r31, r1
 c7a:	80 81       	ld	r24, Z
 c7c:	80 33       	cpi	r24, 0x30	; 48
 c7e:	21 f4       	brne	.+8      	; 0xc88 <vfprintf+0x308>
 c80:	9a 2d       	mov	r25, r10
 c82:	99 7e       	andi	r25, 0xE9	; 233
 c84:	a9 2e       	mov	r10, r25
 c86:	09 c0       	rjmp	.+18     	; 0xc9a <vfprintf+0x31a>
 c88:	a2 fe       	sbrs	r10, 2
 c8a:	06 c0       	rjmp	.+12     	; 0xc98 <vfprintf+0x318>
 c8c:	b3 94       	inc	r11
 c8e:	b3 94       	inc	r11
 c90:	04 c0       	rjmp	.+8      	; 0xc9a <vfprintf+0x31a>
 c92:	8a 2d       	mov	r24, r10
 c94:	86 78       	andi	r24, 0x86	; 134
 c96:	09 f0       	breq	.+2      	; 0xc9a <vfprintf+0x31a>
 c98:	b3 94       	inc	r11
 c9a:	a3 fc       	sbrc	r10, 3
 c9c:	10 c0       	rjmp	.+32     	; 0xcbe <vfprintf+0x33e>
 c9e:	a0 fe       	sbrs	r10, 0
 ca0:	06 c0       	rjmp	.+12     	; 0xcae <vfprintf+0x32e>
 ca2:	b2 14       	cp	r11, r2
 ca4:	80 f4       	brcc	.+32     	; 0xcc6 <vfprintf+0x346>
 ca6:	28 0c       	add	r2, r8
 ca8:	92 2c       	mov	r9, r2
 caa:	9b 18       	sub	r9, r11
 cac:	0d c0       	rjmp	.+26     	; 0xcc8 <vfprintf+0x348>
 cae:	b2 14       	cp	r11, r2
 cb0:	58 f4       	brcc	.+22     	; 0xcc8 <vfprintf+0x348>
 cb2:	b6 01       	movw	r22, r12
 cb4:	80 e2       	ldi	r24, 0x20	; 32
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	76 d0       	rcall	.+236    	; 0xda6 <fputc>
 cba:	b3 94       	inc	r11
 cbc:	f8 cf       	rjmp	.-16     	; 0xcae <vfprintf+0x32e>
 cbe:	b2 14       	cp	r11, r2
 cc0:	18 f4       	brcc	.+6      	; 0xcc8 <vfprintf+0x348>
 cc2:	2b 18       	sub	r2, r11
 cc4:	02 c0       	rjmp	.+4      	; 0xcca <vfprintf+0x34a>
 cc6:	98 2c       	mov	r9, r8
 cc8:	21 2c       	mov	r2, r1
 cca:	a4 fe       	sbrs	r10, 4
 ccc:	0f c0       	rjmp	.+30     	; 0xcec <vfprintf+0x36c>
 cce:	b6 01       	movw	r22, r12
 cd0:	80 e3       	ldi	r24, 0x30	; 48
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	68 d0       	rcall	.+208    	; 0xda6 <fputc>
 cd6:	a2 fe       	sbrs	r10, 2
 cd8:	16 c0       	rjmp	.+44     	; 0xd06 <vfprintf+0x386>
 cda:	a1 fc       	sbrc	r10, 1
 cdc:	03 c0       	rjmp	.+6      	; 0xce4 <vfprintf+0x364>
 cde:	88 e7       	ldi	r24, 0x78	; 120
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	02 c0       	rjmp	.+4      	; 0xce8 <vfprintf+0x368>
 ce4:	88 e5       	ldi	r24, 0x58	; 88
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	b6 01       	movw	r22, r12
 cea:	0c c0       	rjmp	.+24     	; 0xd04 <vfprintf+0x384>
 cec:	8a 2d       	mov	r24, r10
 cee:	86 78       	andi	r24, 0x86	; 134
 cf0:	51 f0       	breq	.+20     	; 0xd06 <vfprintf+0x386>
 cf2:	a1 fe       	sbrs	r10, 1
 cf4:	02 c0       	rjmp	.+4      	; 0xcfa <vfprintf+0x37a>
 cf6:	8b e2       	ldi	r24, 0x2B	; 43
 cf8:	01 c0       	rjmp	.+2      	; 0xcfc <vfprintf+0x37c>
 cfa:	80 e2       	ldi	r24, 0x20	; 32
 cfc:	a7 fc       	sbrc	r10, 7
 cfe:	8d e2       	ldi	r24, 0x2D	; 45
 d00:	b6 01       	movw	r22, r12
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	50 d0       	rcall	.+160    	; 0xda6 <fputc>
 d06:	89 14       	cp	r8, r9
 d08:	30 f4       	brcc	.+12     	; 0xd16 <vfprintf+0x396>
 d0a:	b6 01       	movw	r22, r12
 d0c:	80 e3       	ldi	r24, 0x30	; 48
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	4a d0       	rcall	.+148    	; 0xda6 <fputc>
 d12:	9a 94       	dec	r9
 d14:	f8 cf       	rjmp	.-16     	; 0xd06 <vfprintf+0x386>
 d16:	8a 94       	dec	r8
 d18:	f3 01       	movw	r30, r6
 d1a:	e8 0d       	add	r30, r8
 d1c:	f1 1d       	adc	r31, r1
 d1e:	80 81       	ld	r24, Z
 d20:	b6 01       	movw	r22, r12
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	40 d0       	rcall	.+128    	; 0xda6 <fputc>
 d26:	81 10       	cpse	r8, r1
 d28:	f6 cf       	rjmp	.-20     	; 0xd16 <vfprintf+0x396>
 d2a:	22 20       	and	r2, r2
 d2c:	09 f4       	brne	.+2      	; 0xd30 <vfprintf+0x3b0>
 d2e:	4e ce       	rjmp	.-868    	; 0x9cc <vfprintf+0x4c>
 d30:	b6 01       	movw	r22, r12
 d32:	80 e2       	ldi	r24, 0x20	; 32
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	37 d0       	rcall	.+110    	; 0xda6 <fputc>
 d38:	2a 94       	dec	r2
 d3a:	f7 cf       	rjmp	.-18     	; 0xd2a <vfprintf+0x3aa>
 d3c:	f6 01       	movw	r30, r12
 d3e:	86 81       	ldd	r24, Z+6	; 0x06
 d40:	97 81       	ldd	r25, Z+7	; 0x07
 d42:	02 c0       	rjmp	.+4      	; 0xd48 <vfprintf+0x3c8>
 d44:	8f ef       	ldi	r24, 0xFF	; 255
 d46:	9f ef       	ldi	r25, 0xFF	; 255
 d48:	2b 96       	adiw	r28, 0x0b	; 11
 d4a:	0f b6       	in	r0, 0x3f	; 63
 d4c:	f8 94       	cli
 d4e:	de bf       	out	0x3e, r29	; 62
 d50:	0f be       	out	0x3f, r0	; 63
 d52:	cd bf       	out	0x3d, r28	; 61
 d54:	df 91       	pop	r29
 d56:	cf 91       	pop	r28
 d58:	1f 91       	pop	r17
 d5a:	0f 91       	pop	r16
 d5c:	ff 90       	pop	r15
 d5e:	ef 90       	pop	r14
 d60:	df 90       	pop	r13
 d62:	cf 90       	pop	r12
 d64:	bf 90       	pop	r11
 d66:	af 90       	pop	r10
 d68:	9f 90       	pop	r9
 d6a:	8f 90       	pop	r8
 d6c:	7f 90       	pop	r7
 d6e:	6f 90       	pop	r6
 d70:	5f 90       	pop	r5
 d72:	4f 90       	pop	r4
 d74:	3f 90       	pop	r3
 d76:	2f 90       	pop	r2
 d78:	08 95       	ret

00000d7a <strnlen_P>:
 d7a:	fc 01       	movw	r30, r24
 d7c:	05 90       	lpm	r0, Z+
 d7e:	61 50       	subi	r22, 0x01	; 1
 d80:	70 40       	sbci	r23, 0x00	; 0
 d82:	01 10       	cpse	r0, r1
 d84:	d8 f7       	brcc	.-10     	; 0xd7c <strnlen_P+0x2>
 d86:	80 95       	com	r24
 d88:	90 95       	com	r25
 d8a:	8e 0f       	add	r24, r30
 d8c:	9f 1f       	adc	r25, r31
 d8e:	08 95       	ret

00000d90 <strnlen>:
 d90:	fc 01       	movw	r30, r24
 d92:	61 50       	subi	r22, 0x01	; 1
 d94:	70 40       	sbci	r23, 0x00	; 0
 d96:	01 90       	ld	r0, Z+
 d98:	01 10       	cpse	r0, r1
 d9a:	d8 f7       	brcc	.-10     	; 0xd92 <strnlen+0x2>
 d9c:	80 95       	com	r24
 d9e:	90 95       	com	r25
 da0:	8e 0f       	add	r24, r30
 da2:	9f 1f       	adc	r25, r31
 da4:	08 95       	ret

00000da6 <fputc>:
 da6:	0f 93       	push	r16
 da8:	1f 93       	push	r17
 daa:	cf 93       	push	r28
 dac:	df 93       	push	r29
 dae:	fb 01       	movw	r30, r22
 db0:	23 81       	ldd	r18, Z+3	; 0x03
 db2:	21 fd       	sbrc	r18, 1
 db4:	03 c0       	rjmp	.+6      	; 0xdbc <fputc+0x16>
 db6:	8f ef       	ldi	r24, 0xFF	; 255
 db8:	9f ef       	ldi	r25, 0xFF	; 255
 dba:	2c c0       	rjmp	.+88     	; 0xe14 <fputc+0x6e>
 dbc:	22 ff       	sbrs	r18, 2
 dbe:	16 c0       	rjmp	.+44     	; 0xdec <fputc+0x46>
 dc0:	46 81       	ldd	r20, Z+6	; 0x06
 dc2:	57 81       	ldd	r21, Z+7	; 0x07
 dc4:	24 81       	ldd	r18, Z+4	; 0x04
 dc6:	35 81       	ldd	r19, Z+5	; 0x05
 dc8:	42 17       	cp	r20, r18
 dca:	53 07       	cpc	r21, r19
 dcc:	44 f4       	brge	.+16     	; 0xdde <fputc+0x38>
 dce:	a0 81       	ld	r26, Z
 dd0:	b1 81       	ldd	r27, Z+1	; 0x01
 dd2:	9d 01       	movw	r18, r26
 dd4:	2f 5f       	subi	r18, 0xFF	; 255
 dd6:	3f 4f       	sbci	r19, 0xFF	; 255
 dd8:	31 83       	std	Z+1, r19	; 0x01
 dda:	20 83       	st	Z, r18
 ddc:	8c 93       	st	X, r24
 dde:	26 81       	ldd	r18, Z+6	; 0x06
 de0:	37 81       	ldd	r19, Z+7	; 0x07
 de2:	2f 5f       	subi	r18, 0xFF	; 255
 de4:	3f 4f       	sbci	r19, 0xFF	; 255
 de6:	37 83       	std	Z+7, r19	; 0x07
 de8:	26 83       	std	Z+6, r18	; 0x06
 dea:	14 c0       	rjmp	.+40     	; 0xe14 <fputc+0x6e>
 dec:	8b 01       	movw	r16, r22
 dee:	ec 01       	movw	r28, r24
 df0:	fb 01       	movw	r30, r22
 df2:	00 84       	ldd	r0, Z+8	; 0x08
 df4:	f1 85       	ldd	r31, Z+9	; 0x09
 df6:	e0 2d       	mov	r30, r0
 df8:	19 95       	eicall
 dfa:	89 2b       	or	r24, r25
 dfc:	e1 f6       	brne	.-72     	; 0xdb6 <fputc+0x10>
 dfe:	d8 01       	movw	r26, r16
 e00:	16 96       	adiw	r26, 0x06	; 6
 e02:	8d 91       	ld	r24, X+
 e04:	9c 91       	ld	r25, X
 e06:	17 97       	sbiw	r26, 0x07	; 7
 e08:	01 96       	adiw	r24, 0x01	; 1
 e0a:	17 96       	adiw	r26, 0x07	; 7
 e0c:	9c 93       	st	X, r25
 e0e:	8e 93       	st	-X, r24
 e10:	16 97       	sbiw	r26, 0x06	; 6
 e12:	ce 01       	movw	r24, r28
 e14:	df 91       	pop	r29
 e16:	cf 91       	pop	r28
 e18:	1f 91       	pop	r17
 e1a:	0f 91       	pop	r16
 e1c:	08 95       	ret

00000e1e <__ultoa_invert>:
 e1e:	fa 01       	movw	r30, r20
 e20:	aa 27       	eor	r26, r26
 e22:	28 30       	cpi	r18, 0x08	; 8
 e24:	51 f1       	breq	.+84     	; 0xe7a <__ultoa_invert+0x5c>
 e26:	20 31       	cpi	r18, 0x10	; 16
 e28:	81 f1       	breq	.+96     	; 0xe8a <__ultoa_invert+0x6c>
 e2a:	e8 94       	clt
 e2c:	6f 93       	push	r22
 e2e:	6e 7f       	andi	r22, 0xFE	; 254
 e30:	6e 5f       	subi	r22, 0xFE	; 254
 e32:	7f 4f       	sbci	r23, 0xFF	; 255
 e34:	8f 4f       	sbci	r24, 0xFF	; 255
 e36:	9f 4f       	sbci	r25, 0xFF	; 255
 e38:	af 4f       	sbci	r26, 0xFF	; 255
 e3a:	b1 e0       	ldi	r27, 0x01	; 1
 e3c:	3e d0       	rcall	.+124    	; 0xeba <__ultoa_invert+0x9c>
 e3e:	b4 e0       	ldi	r27, 0x04	; 4
 e40:	3c d0       	rcall	.+120    	; 0xeba <__ultoa_invert+0x9c>
 e42:	67 0f       	add	r22, r23
 e44:	78 1f       	adc	r23, r24
 e46:	89 1f       	adc	r24, r25
 e48:	9a 1f       	adc	r25, r26
 e4a:	a1 1d       	adc	r26, r1
 e4c:	68 0f       	add	r22, r24
 e4e:	79 1f       	adc	r23, r25
 e50:	8a 1f       	adc	r24, r26
 e52:	91 1d       	adc	r25, r1
 e54:	a1 1d       	adc	r26, r1
 e56:	6a 0f       	add	r22, r26
 e58:	71 1d       	adc	r23, r1
 e5a:	81 1d       	adc	r24, r1
 e5c:	91 1d       	adc	r25, r1
 e5e:	a1 1d       	adc	r26, r1
 e60:	20 d0       	rcall	.+64     	; 0xea2 <__ultoa_invert+0x84>
 e62:	09 f4       	brne	.+2      	; 0xe66 <__ultoa_invert+0x48>
 e64:	68 94       	set
 e66:	3f 91       	pop	r19
 e68:	2a e0       	ldi	r18, 0x0A	; 10
 e6a:	26 9f       	mul	r18, r22
 e6c:	11 24       	eor	r1, r1
 e6e:	30 19       	sub	r19, r0
 e70:	30 5d       	subi	r19, 0xD0	; 208
 e72:	31 93       	st	Z+, r19
 e74:	de f6       	brtc	.-74     	; 0xe2c <__ultoa_invert+0xe>
 e76:	cf 01       	movw	r24, r30
 e78:	08 95       	ret
 e7a:	46 2f       	mov	r20, r22
 e7c:	47 70       	andi	r20, 0x07	; 7
 e7e:	40 5d       	subi	r20, 0xD0	; 208
 e80:	41 93       	st	Z+, r20
 e82:	b3 e0       	ldi	r27, 0x03	; 3
 e84:	0f d0       	rcall	.+30     	; 0xea4 <__ultoa_invert+0x86>
 e86:	c9 f7       	brne	.-14     	; 0xe7a <__ultoa_invert+0x5c>
 e88:	f6 cf       	rjmp	.-20     	; 0xe76 <__ultoa_invert+0x58>
 e8a:	46 2f       	mov	r20, r22
 e8c:	4f 70       	andi	r20, 0x0F	; 15
 e8e:	40 5d       	subi	r20, 0xD0	; 208
 e90:	4a 33       	cpi	r20, 0x3A	; 58
 e92:	18 f0       	brcs	.+6      	; 0xe9a <__ultoa_invert+0x7c>
 e94:	49 5d       	subi	r20, 0xD9	; 217
 e96:	31 fd       	sbrc	r19, 1
 e98:	40 52       	subi	r20, 0x20	; 32
 e9a:	41 93       	st	Z+, r20
 e9c:	02 d0       	rcall	.+4      	; 0xea2 <__ultoa_invert+0x84>
 e9e:	a9 f7       	brne	.-22     	; 0xe8a <__ultoa_invert+0x6c>
 ea0:	ea cf       	rjmp	.-44     	; 0xe76 <__ultoa_invert+0x58>
 ea2:	b4 e0       	ldi	r27, 0x04	; 4
 ea4:	a6 95       	lsr	r26
 ea6:	97 95       	ror	r25
 ea8:	87 95       	ror	r24
 eaa:	77 95       	ror	r23
 eac:	67 95       	ror	r22
 eae:	ba 95       	dec	r27
 eb0:	c9 f7       	brne	.-14     	; 0xea4 <__ultoa_invert+0x86>
 eb2:	00 97       	sbiw	r24, 0x00	; 0
 eb4:	61 05       	cpc	r22, r1
 eb6:	71 05       	cpc	r23, r1
 eb8:	08 95       	ret
 eba:	9b 01       	movw	r18, r22
 ebc:	ac 01       	movw	r20, r24
 ebe:	0a 2e       	mov	r0, r26
 ec0:	06 94       	lsr	r0
 ec2:	57 95       	ror	r21
 ec4:	47 95       	ror	r20
 ec6:	37 95       	ror	r19
 ec8:	27 95       	ror	r18
 eca:	ba 95       	dec	r27
 ecc:	c9 f7       	brne	.-14     	; 0xec0 <__ultoa_invert+0xa2>
 ece:	62 0f       	add	r22, r18
 ed0:	73 1f       	adc	r23, r19
 ed2:	84 1f       	adc	r24, r20
 ed4:	95 1f       	adc	r25, r21
 ed6:	a0 1d       	adc	r26, r0
 ed8:	08 95       	ret

00000eda <_exit>:
 eda:	f8 94       	cli

00000edc <__stop_program>:
 edc:	ff cf       	rjmp	.-2      	; 0xedc <__stop_program>
