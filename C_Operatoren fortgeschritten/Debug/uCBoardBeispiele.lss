
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000e04  00000e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00000f0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002496  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f92  00000000  00000000  0000361e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001477  00000000  00000000  000045b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  00005a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d2d  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b9c  00000000  00000000  00006dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00008959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	94 c3       	rjmp	.+1832   	; 0x786 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 37       	cpi	r26, 0x74	; 116
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e7       	ldi	r26, 0x74	; 116
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3f       	cpi	r26, 0xF2	; 242
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	6f c6       	rjmp	.+3294   	; 0xe00 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
    uint8_t S1_3 = 0;
    uint8_t S0_7 = 0;
    uint8_t S4_6 = 0;
    
    //Initialisieren
    initBoard(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	ac d1       	rcall	.+856    	; 0x480 <initBoard>
//Hauptprogramm
int main(void)
{
    //Variablen
    uint8_t schalter = 0;
    uint8_t leds = 0;
 128:	c0 e0       	ldi	r28, 0x00	; 0
        }
        else
        {leds = leds |(1<<4);
        }
         
      if (S0_7 % 17 )
 12a:	0f 2e       	mov	r0, r31
 12c:	f1 ef       	ldi	r31, 0xF1	; 241
 12e:	ef 2e       	mov	r14, r31
 130:	f0 2d       	mov	r31, r0
 132:	0f 2e       	mov	r0, r31
 134:	f1 e1       	ldi	r31, 0x11	; 17
 136:	ff 2e       	mov	r15, r31
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        schalter = switchReadAll();
 138:	f0 2d       	mov	r31, r0
 13a:	47 d0       	rcall	.+142    	; 0x1ca <switchReadAll>
        S4 = schalter & 0b00010000;
        S3 = schalter & 0b00001000;
        S2 = schalter & 0b00000100;
        S1 = schalter & 0b00000010;
        S0 = schalter & 0b00000001;
        S1_3 = switchReadAll() & 0b00001110;
 13c:	08 2f       	mov	r16, r24
 13e:	45 d0       	rcall	.+138    	; 0x1ca <switchReadAll>
        S1_3 = S1_3 >> 1;
 140:	8e 70       	andi	r24, 0x0E	; 14
        S0_7 = switchReadAll() & 0b11111111;
 142:	d8 2f       	mov	r29, r24
 144:	d6 95       	lsr	r29
 146:	41 d0       	rcall	.+130    	; 0x1ca <switchReadAll>
        S4_6 = switchReadAll() & 0b01110000;
 148:	18 2f       	mov	r17, r24
 14a:	3f d0       	rcall	.+126    	; 0x1ca <switchReadAll>
 14c:	80 77       	andi	r24, 0x70	; 112
        S4_6 = S4_6 >>4;
 14e:	82 95       	swap	r24
 150:	8f 70       	andi	r24, 0x0F	; 15
       
        
        //Verarbeitung-------------------------------------------------------------
        if (S7)
 152:	00 23       	and	r16, r16
 154:	14 f4       	brge	.+4      	; 0x15a <main+0x36>
        {   leds = leds | 0x01;         //Aufgabe 1.1 Schalter 7 wird an Led 0 angezeigt.
 156:	c1 60       	ori	r28, 0x01	; 1
 158:	01 c0       	rjmp	.+2      	; 0x15c <main+0x38>
        } 
        else
        {   leds = leds & 0xfffe;
 15a:	ce 7f       	andi	r28, 0xFE	; 254
        }
       if (S7 && S6 && !S5)
 15c:	90 2f       	mov	r25, r16
 15e:	90 7c       	andi	r25, 0xC0	; 192
 160:	90 3c       	cpi	r25, 0xC0	; 192
 162:	21 f4       	brne	.+8      	; 0x16c <main+0x48>
 164:	05 fd       	sbrc	r16, 5
 166:	02 c0       	rjmp	.+4      	; 0x16c <main+0x48>
       {    leds = leds | (1<<1);       //Aufgabe 1.2: Wenn Schalter 7 und Schalter 6 aber nicht Schalter 5 aktiv ist, leuchtet LED 1, sonst nicht.
 168:	c2 60       	ori	r28, 0x02	; 2
 16a:	01 c0       	rjmp	.+2      	; 0x16e <main+0x4a>
       } 
       else
       {    leds = leds & ~(1<<1);
 16c:	cd 7f       	andi	r28, 0xFD	; 253
       }
       if (S6 && S5 && S4)
 16e:	90 2f       	mov	r25, r16
 170:	90 76       	andi	r25, 0x60	; 96
 172:	90 36       	cpi	r25, 0x60	; 96
 174:	21 f4       	brne	.+8      	; 0x17e <main+0x5a>
 176:	04 ff       	sbrs	r16, 4
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0x5a>
       {    leds = leds & ~(1<<2);      //Aufgabe 1.3: Wenn Schalter 6, Schalter 5 oder Schalter 4 inaktiv ist, leuchtet LED 2, sonst nicht.
 17a:	cb 7f       	andi	r28, 0xFB	; 251
 17c:	01 c0       	rjmp	.+2      	; 0x180 <main+0x5c>
       } 
       else
       {    leds = leds | (1<<2);
 17e:	c4 60       	ori	r28, 0x04	; 4
       }
      if (S1_3 % 2)
 180:	d0 ff       	sbrs	r29, 0
 182:	03 c0       	rjmp	.+6      	; 0x18a <main+0x66>
 184:	cf 7e       	andi	r28, 0xEF	; 239
      } 
      else
      {     leds = leds & ~(1<<3);      
      }
        if (S1_3 % 2)
        {     leds = leds & ~ (1<<4);        //Aufgabe 1.5: Wenn der Wert von Schalter 1-3(Schalter 1 ist LSB, Schalter 3 ist MSB)
 186:	c8 60       	ori	r28, 0x08	; 8
 188:	02 c0       	rjmp	.+4      	; 0x18e <main+0x6a>
      if (S1_3 % 2)
      {     leds = leds | (1<<3);       //Aufgabe 1.4: Wenn der Wert von Schalter 1-3(Schalter 1 ist LSB, Schalter 3 ist MSB)
                                        //ungeradeist, leuchtet LED 3, sonst nicht.
      } 
      else
      {     leds = leds & ~(1<<3);      
 18a:	c7 7f       	andi	r28, 0xF7	; 247
        if (S1_3 % 2)
        {     leds = leds & ~ (1<<4);        //Aufgabe 1.5: Wenn der Wert von Schalter 1-3(Schalter 1 ist LSB, Schalter 3 ist MSB)
                                            //geradeist, leuchtet LED 4, sonst nicht
        }
        else
        {leds = leds |(1<<4);
 18c:	c0 61       	ori	r28, 0x10	; 16
        }
         
      if (S0_7 % 17 )
 18e:	1e 9d       	mul	r17, r14
 190:	91 2d       	mov	r25, r1
 192:	11 24       	eor	r1, r1
 194:	92 95       	swap	r25
 196:	9f 70       	andi	r25, 0x0F	; 15
 198:	9f 9d       	mul	r25, r15
 19a:	10 19       	sub	r17, r0
 19c:	11 24       	eor	r1, r1
 19e:	11 23       	and	r17, r17
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <main+0x82>
      {     leds = leds & ~(0x20);       //Aufgabe 1.6: Wenn der Wert an Schalter 0 bis 7 (Schalter 0 ist LSB, 
 1a2:	cf 7d       	andi	r28, 0xDF	; 223
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <main+0x84>
                                        //Schalter 7 ist MSB) durch 17 teilbar ist, leuchtet LED 5, sonst nicht.
      } 
      else
      {     leds = leds | (0x20);       //Aufgabe 1.7: der Wert der Schalter 1-3 grösser ist als der Wert an Schalter4-6
 1a6:	c0 62       	ori	r28, 0x20	; 32
      }                                 // leuchtet Led 6, sonst nicht.
      if (S1_3 > S4_6)
 1a8:	8d 17       	cp	r24, r29
 1aa:	10 f4       	brcc	.+4      	; 0x1b0 <main+0x8c>
      {     leds = leds | (0x40);
 1ac:	c0 64       	ori	r28, 0x40	; 64
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <main+0x8e>
      } 
      else
      {     leds = leds & ~(0x40);
 1b0:	cf 7b       	andi	r28, 0xBF	; 191
      }                                 //Falls die beiden Werte gleich gross sind, leuchtet Led 7, sonst nicht.
      if (S1_3 == S4_6)
 1b2:	d8 13       	cpse	r29, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <main+0x96>
      {     leds = leds | (0x80);
 1b6:	c0 68       	ori	r28, 0x80	; 128
      }
      else
      {     leds = leds & ~(0x80);
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <main+0x98>
      }
      
        //Ausgabe------------------------------------------------------------------
        ledWriteAll(leds);
 1ba:	cf 77       	andi	r28, 0x7F	; 127
 1bc:	8c 2f       	mov	r24, r28
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	01 d0       	rcall	.+2      	; 0x1c4 <ledWriteAll>
        
    }
 1c2:	bb cf       	rjmp	.-138    	; 0x13a <main+0x16>

000001c4 <ledWriteAll>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 1c4:	82 b9       	out	0x02, r24	; 2
 1c6:	95 b9       	out	0x05, r25	; 5
 1c8:	08 95       	ret

000001ca <switchReadAll>:
 1ca:	86 b1       	in	r24, 0x06	; 6
 1cc:	08 95       	ret

000001ce <startSystemTimeMs>:
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	84 bd       	out	0x24, r24	; 36
 1d2:	8b e0       	ldi	r24, 0x0B	; 11
 1d4:	85 bd       	out	0x25, r24	; 37
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 1dc:	89 ef       	ldi	r24, 0xF9	; 249
 1de:	87 bd       	out	0x27, r24	; 39
 1e0:	08 95       	ret

000001e2 <initAdc>:
 1e2:	11 ba       	out	0x11, r1	; 17
 1e4:	10 ba       	out	0x10, r1	; 16
 1e6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 1ea:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 1ee:	80 e4       	ldi	r24, 0x40	; 64
 1f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 200:	ea e7       	ldi	r30, 0x7A	; 122
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	87 ea       	ldi	r24, 0xA7	; 167
 206:	80 83       	st	Z, r24
 208:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 20c:	80 81       	ld	r24, Z
 20e:	80 64       	ori	r24, 0x40	; 64
 210:	80 83       	st	Z, r24
 212:	80 81       	ld	r24, Z
 214:	84 ff       	sbrs	r24, 4
 216:	fd cf       	rjmp	.-6      	; 0x212 <initAdc+0x30>
 218:	ea e7       	ldi	r30, 0x7A	; 122
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8f 7e       	andi	r24, 0xEF	; 239
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <rgbWrite>:
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	33 e0       	ldi	r19, 0x03	; 3
 228:	f9 01       	movw	r30, r18
 22a:	e8 1b       	sub	r30, r24
 22c:	f9 0b       	sbc	r31, r25
 22e:	c9 01       	movw	r24, r18
 230:	86 1b       	sub	r24, r22
 232:	97 0b       	sbc	r25, r23
 234:	24 1b       	sub	r18, r20
 236:	35 0b       	sbc	r19, r21
 238:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 23c:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 240:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 244:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 248:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 24c:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 250:	08 95       	ret

00000252 <initRgb>:
 252:	8e ef       	ldi	r24, 0xFE	; 254
 254:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 258:	8b e1       	ldi	r24, 0x1B	; 27
 25a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	d6 cf       	rjmp	.-84     	; 0x224 <rgbWrite>
 278:	08 95       	ret

0000027a <lcdSid>:
 27a:	88 23       	and	r24, r24
 27c:	11 f0       	breq	.+4      	; 0x282 <lcdSid+0x8>
 27e:	a0 9a       	sbi	0x14, 0	; 20
 280:	08 95       	ret
 282:	a0 98       	cbi	0x14, 0	; 20
 284:	08 95       	ret

00000286 <lcdSclk>:
 286:	88 23       	and	r24, r24
 288:	11 f0       	breq	.+4      	; 0x28e <lcdSclk+0x8>
 28a:	a1 9a       	sbi	0x14, 1	; 20
 28c:	08 95       	ret
 28e:	a1 98       	cbi	0x14, 1	; 20
 290:	08 95       	ret

00000292 <lcdLight>:
 292:	81 11       	cpse	r24, r1
 294:	04 c0       	rjmp	.+8      	; 0x29e <lcdLight+0xc>
 296:	84 b5       	in	r24, 0x24	; 36
 298:	8f 7d       	andi	r24, 0xDF	; 223
 29a:	84 bd       	out	0x24, r24	; 36
 29c:	08 95       	ret
 29e:	94 b5       	in	r25, 0x24	; 36
 2a0:	90 62       	ori	r25, 0x20	; 32
 2a2:	94 bd       	out	0x24, r25	; 36
 2a4:	88 bd       	out	0x28, r24	; 40
 2a6:	08 95       	ret

000002a8 <writeLcdF>:
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	7c 01       	movw	r14, r24
 2b6:	eb 01       	movw	r28, r22
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	df df       	rcall	.-66     	; 0x27a <lcdSid>
 2bc:	05 e0       	ldi	r16, 0x05	; 5
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	e1 df       	rcall	.-62     	; 0x286 <lcdSclk>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	df df       	rcall	.-66     	; 0x286 <lcdSclk>
 2c8:	01 50       	subi	r16, 0x01	; 1
 2ca:	11 09       	sbc	r17, r1
 2cc:	c9 f7       	brne	.-14     	; 0x2c0 <writeLcdF+0x18>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	d4 df       	rcall	.-88     	; 0x27a <lcdSid>
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	d8 df       	rcall	.-80     	; 0x286 <lcdSclk>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	d6 df       	rcall	.-84     	; 0x286 <lcdSclk>
 2da:	83 e4       	ldi	r24, 0x43	; 67
 2dc:	e8 16       	cp	r14, r24
 2de:	f1 04       	cpc	r15, r1
 2e0:	19 f4       	brne	.+6      	; 0x2e8 <writeLcdF+0x40>
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	ca df       	rcall	.-108    	; 0x27a <lcdSid>
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <writeLcdF+0x44>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	c7 df       	rcall	.-114    	; 0x27a <lcdSid>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	cb df       	rcall	.-106    	; 0x286 <lcdSclk>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	c9 df       	rcall	.-110    	; 0x286 <lcdSclk>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	c1 df       	rcall	.-126    	; 0x27a <lcdSid>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	c5 df       	rcall	.-118    	; 0x286 <lcdSclk>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	c3 df       	rcall	.-122    	; 0x286 <lcdSclk>
 300:	04 e0       	ldi	r16, 0x04	; 4
 302:	10 e0       	ldi	r17, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	bf df       	rcall	.-130    	; 0x286 <lcdSclk>
 308:	c0 ff       	sbrs	r28, 0
 30a:	03 c0       	rjmp	.+6      	; 0x312 <writeLcdF+0x6a>
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	b5 df       	rcall	.-150    	; 0x27a <lcdSid>
 310:	02 c0       	rjmp	.+4      	; 0x316 <writeLcdF+0x6e>
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	b2 df       	rcall	.-156    	; 0x27a <lcdSid>
 316:	d6 95       	lsr	r29
 318:	c7 95       	ror	r28
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	b4 df       	rcall	.-152    	; 0x286 <lcdSclk>
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	b2 df       	rcall	.-156    	; 0x286 <lcdSclk>
 322:	01 50       	subi	r16, 0x01	; 1
 324:	11 09       	sbc	r17, r1
 326:	71 f7       	brne	.-36     	; 0x304 <writeLcdF+0x5c>
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	a7 df       	rcall	.-178    	; 0x27a <lcdSid>
 32c:	04 e0       	ldi	r16, 0x04	; 4
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	a9 df       	rcall	.-174    	; 0x286 <lcdSclk>
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	a7 df       	rcall	.-178    	; 0x286 <lcdSclk>
 338:	01 50       	subi	r16, 0x01	; 1
 33a:	11 09       	sbc	r17, r1
 33c:	c9 f7       	brne	.-14     	; 0x330 <writeLcdF+0x88>
 33e:	04 e0       	ldi	r16, 0x04	; 4
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	a0 df       	rcall	.-192    	; 0x286 <lcdSclk>
 346:	c0 ff       	sbrs	r28, 0
 348:	03 c0       	rjmp	.+6      	; 0x350 <writeLcdF+0xa8>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	96 df       	rcall	.-212    	; 0x27a <lcdSid>
 34e:	02 c0       	rjmp	.+4      	; 0x354 <writeLcdF+0xac>
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	93 df       	rcall	.-218    	; 0x27a <lcdSid>
 354:	d6 95       	lsr	r29
 356:	c7 95       	ror	r28
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	95 df       	rcall	.-214    	; 0x286 <lcdSclk>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	93 df       	rcall	.-218    	; 0x286 <lcdSclk>
 360:	01 50       	subi	r16, 0x01	; 1
 362:	11 09       	sbc	r17, r1
 364:	71 f7       	brne	.-36     	; 0x342 <writeLcdF+0x9a>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	88 df       	rcall	.-240    	; 0x27a <lcdSid>
 36a:	c4 e0       	ldi	r28, 0x04	; 4
 36c:	d0 e0       	ldi	r29, 0x00	; 0
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	8a df       	rcall	.-236    	; 0x286 <lcdSclk>
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	88 df       	rcall	.-240    	; 0x286 <lcdSclk>
 376:	21 97       	sbiw	r28, 0x01	; 1
 378:	d1 f7       	brne	.-12     	; 0x36e <writeLcdF+0xc6>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	7e df       	rcall	.-260    	; 0x27a <lcdSid>
 37e:	87 ec       	ldi	r24, 0xC7	; 199
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <writeLcdF+0xda>
 386:	00 c0       	rjmp	.+0      	; 0x388 <writeLcdF+0xe0>
 388:	00 00       	nop
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	08 95       	ret

00000398 <lcdWriteText>:
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	65 97       	sbiw	r28, 0x15	; 21
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	de bf       	out	0x3e, r29	; 62
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	cd bf       	out	0x3d, r28	; 61
 3ae:	9e 01       	movw	r18, r28
 3b0:	20 5e       	subi	r18, 0xE0	; 224
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	4e 8d       	ldd	r20, Y+30	; 0x1e
 3b6:	5f 8d       	ldd	r21, Y+31	; 0x1f
 3b8:	65 e1       	ldi	r22, 0x15	; 21
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	ce 01       	movw	r24, r28
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	3a d2       	rcall	.+1140   	; 0x836 <vsnprintf>
 3c2:	6d 8d       	ldd	r22, Y+29	; 0x1d
 3c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3c6:	90 e2       	ldi	r25, 0x20	; 32
 3c8:	89 9f       	mul	r24, r25
 3ca:	60 0d       	add	r22, r0
 3cc:	11 24       	eor	r1, r1
 3ce:	60 68       	ori	r22, 0x80	; 128
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	83 e4       	ldi	r24, 0x43	; 67
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	68 df       	rcall	.-304    	; 0x2a8 <writeLcdF>
 3d8:	69 81       	ldd	r22, Y+1	; 0x01
 3da:	66 23       	and	r22, r22
 3dc:	79 f0       	breq	.+30     	; 0x3fc <lcdWriteText+0x64>
 3de:	10 e0       	ldi	r17, 0x00	; 0
 3e0:	1f 5f       	subi	r17, 0xFF	; 255
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	84 e4       	ldi	r24, 0x44	; 68
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	5f df       	rcall	.-322    	; 0x2a8 <writeLcdF>
 3ea:	e1 e0       	ldi	r30, 0x01	; 1
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	ec 0f       	add	r30, r28
 3f0:	fd 1f       	adc	r31, r29
 3f2:	e1 0f       	add	r30, r17
 3f4:	f1 1d       	adc	r31, r1
 3f6:	60 81       	ld	r22, Z
 3f8:	61 11       	cpse	r22, r1
 3fa:	f2 cf       	rjmp	.-28     	; 0x3e0 <lcdWriteText+0x48>
 3fc:	65 96       	adiw	r28, 0x15	; 21
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	08 95       	ret

00000410 <lcdClear>:
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	83 e4       	ldi	r24, 0x43	; 67
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	47 df       	rcall	.-370    	; 0x2a8 <writeLcdF>
 41a:	8f e3       	ldi	r24, 0x3F	; 63
 41c:	9f e1       	ldi	r25, 0x1F	; 31
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <lcdClear+0xe>
 422:	00 c0       	rjmp	.+0      	; 0x424 <lcdClear+0x14>
 424:	00 00       	nop
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	9f 93       	push	r25
 42c:	8f 93       	push	r24
 42e:	1f 92       	push	r1
 430:	1f 92       	push	r1
 432:	b2 df       	rcall	.-156    	; 0x398 <lcdWriteText>
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	08 95       	ret

0000043e <initLcd>:
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	22 df       	rcall	.-444    	; 0x286 <lcdSclk>
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	1a df       	rcall	.-460    	; 0x27a <lcdSid>
 446:	64 e3       	ldi	r22, 0x34	; 52
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	83 e4       	ldi	r24, 0x43	; 67
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	2c df       	rcall	.-424    	; 0x2a8 <writeLcdF>
 450:	69 e0       	ldi	r22, 0x09	; 9
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	83 e4       	ldi	r24, 0x43	; 67
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	27 df       	rcall	.-434    	; 0x2a8 <writeLcdF>
 45a:	60 e3       	ldi	r22, 0x30	; 48
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	83 e4       	ldi	r24, 0x43	; 67
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	22 df       	rcall	.-444    	; 0x2a8 <writeLcdF>
 464:	6c e0       	ldi	r22, 0x0C	; 12
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	83 e4       	ldi	r24, 0x43	; 67
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	1d df       	rcall	.-454    	; 0x2a8 <writeLcdF>
 46e:	d0 df       	rcall	.-96     	; 0x410 <lcdClear>
 470:	67 e0       	ldi	r22, 0x07	; 7
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	83 e4       	ldi	r24, 0x43	; 67
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	17 df       	rcall	.-466    	; 0x2a8 <writeLcdF>
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0a cf       	rjmp	.-492    	; 0x292 <lcdLight>
 47e:	08 95       	ret

00000480 <initBoard>:
 480:	4f 92       	push	r4
 482:	5f 92       	push	r5
 484:	6f 92       	push	r6
 486:	7f 92       	push	r7
 488:	8f 92       	push	r8
 48a:	9f 92       	push	r9
 48c:	af 92       	push	r10
 48e:	bf 92       	push	r11
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	c8 2f       	mov	r28, r24
 4a2:	85 b7       	in	r24, 0x35	; 53
 4a4:	85 bf       	out	0x35, r24	; 53
 4a6:	12 b8       	out	0x02, r1	; 2
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	81 b9       	out	0x01, r24	; 1
 4ac:	15 b8       	out	0x05, r1	; 5
 4ae:	84 b9       	out	0x04, r24	; 4
 4b0:	88 b9       	out	0x08, r24	; 8
 4b2:	17 b8       	out	0x07, r1	; 7
 4b4:	8b b9       	out	0x0b, r24	; 11
 4b6:	1a b8       	out	0x0a, r1	; 10
 4b8:	8e b9       	out	0x0e, r24	; 14
 4ba:	1d b8       	out	0x0d, r1	; 13
 4bc:	72 98       	cbi	0x0e, 2	; 14
 4be:	11 ba       	out	0x11, r1	; 17
 4c0:	10 ba       	out	0x10, r1	; 16
 4c2:	94 e0       	ldi	r25, 0x04	; 4
 4c4:	94 bb       	out	0x14, r25	; 20
 4c6:	93 b3       	in	r25, 0x13	; 19
 4c8:	93 60       	ori	r25, 0x03	; 3
 4ca:	93 bb       	out	0x13, r25	; 19
 4cc:	9d 9a       	sbi	0x13, 5	; 19
 4ce:	97 ec       	ldi	r25, 0xC7	; 199
 4d0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 4d4:	98 e3       	ldi	r25, 0x38	; 56
 4d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 4da:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 4de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 4e2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 4e6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 4ea:	8c e3       	ldi	r24, 0x3C	; 60
 4ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 4f0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 4f4:	78 94       	sei
 4f6:	6b de       	rcall	.-810    	; 0x1ce <startSystemTimeMs>
 4f8:	a2 df       	rcall	.-188    	; 0x43e <initLcd>
 4fa:	73 de       	rcall	.-794    	; 0x1e2 <initAdc>
 4fc:	aa de       	rcall	.-684    	; 0x252 <initRgb>
 4fe:	cc 23       	and	r28, r28
 500:	09 f4       	brne	.+2      	; 0x504 <initBoard+0x84>
 502:	b8 c0       	rjmp	.+368    	; 0x674 <initBoard+0x1f4>
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	c5 de       	rcall	.-630    	; 0x292 <lcdLight>
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	6f ef       	ldi	r22, 0xFF	; 255
 50e:	73 e0       	ldi	r23, 0x03	; 3
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	87 de       	rcall	.-754    	; 0x224 <rgbWrite>
 516:	8d e1       	ldi	r24, 0x1D	; 29
 518:	92 e0       	ldi	r25, 0x02	; 2
 51a:	9f 93       	push	r25
 51c:	8f 93       	push	r24
 51e:	1f 92       	push	r1
 520:	1f 92       	push	r1
 522:	3a df       	rcall	.-396    	; 0x398 <lcdWriteText>
 524:	82 e3       	ldi	r24, 0x32	; 50
 526:	92 e0       	ldi	r25, 0x02	; 2
 528:	9f 93       	push	r25
 52a:	8f 93       	push	r24
 52c:	1f 92       	push	r1
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	8f 93       	push	r24
 532:	32 df       	rcall	.-412    	; 0x398 <lcdWriteText>
 534:	88 e0       	ldi	r24, 0x08	; 8
 536:	92 e0       	ldi	r25, 0x02	; 2
 538:	9f 93       	push	r25
 53a:	8f 93       	push	r24
 53c:	1f 92       	push	r1
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	8f 93       	push	r24
 542:	2a df       	rcall	.-428    	; 0x398 <lcdWriteText>
 544:	87 e4       	ldi	r24, 0x47	; 71
 546:	92 e0       	ldi	r25, 0x02	; 2
 548:	9f 93       	push	r25
 54a:	8f 93       	push	r24
 54c:	1f 92       	push	r1
 54e:	83 e0       	ldi	r24, 0x03	; 3
 550:	8f 93       	push	r24
 552:	22 df       	rcall	.-444    	; 0x398 <lcdWriteText>
 554:	8d b7       	in	r24, 0x3d	; 61
 556:	9e b7       	in	r25, 0x3e	; 62
 558:	40 96       	adiw	r24, 0x10	; 16
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	9e bf       	out	0x3e, r25	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	8d bf       	out	0x3d, r24	; 61
 564:	88 24       	eor	r8, r8
 566:	83 94       	inc	r8
 568:	c0 e0       	ldi	r28, 0x00	; 0
 56a:	71 2c       	mov	r7, r1
 56c:	99 24       	eor	r9, r9
 56e:	93 94       	inc	r9
 570:	d0 e0       	ldi	r29, 0x00	; 0
 572:	cc 24       	eor	r12, r12
 574:	c3 94       	inc	r12
 576:	d1 2c       	mov	r13, r1
 578:	e1 2c       	mov	r14, r1
 57a:	68 94       	set
 57c:	ff 24       	eor	r15, r15
 57e:	f7 f8       	bld	r15, 7
 580:	66 24       	eor	r6, r6
 582:	63 94       	inc	r6
 584:	51 2c       	mov	r5, r1
 586:	09 e0       	ldi	r16, 0x09	; 9
 588:	11 e0       	ldi	r17, 0x01	; 1
 58a:	0f 2e       	mov	r0, r31
 58c:	fc e5       	ldi	r31, 0x5C	; 92
 58e:	af 2e       	mov	r10, r31
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	bf 2e       	mov	r11, r31
 594:	f0 2d       	mov	r31, r0
 596:	0f 2e       	mov	r0, r31
 598:	f3 e0       	ldi	r31, 0x03	; 3
 59a:	4f 2e       	mov	r4, r31
 59c:	f0 2d       	mov	r31, r0
 59e:	99 20       	and	r9, r9
 5a0:	49 f0       	breq	.+18     	; 0x5b4 <initBoard+0x134>
 5a2:	c7 01       	movw	r24, r14
 5a4:	0d 2e       	mov	r0, r29
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <initBoard+0x12c>
 5a8:	96 95       	lsr	r25
 5aa:	87 95       	ror	r24
 5ac:	0a 94       	dec	r0
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <initBoard+0x128>
 5b0:	09 de       	rcall	.-1006   	; 0x1c4 <ledWriteAll>
 5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <initBoard+0x144>
 5b4:	c6 01       	movw	r24, r12
 5b6:	0d 2e       	mov	r0, r29
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <initBoard+0x13e>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	0a 94       	dec	r0
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <initBoard+0x13a>
 5c2:	00 de       	rcall	.-1024   	; 0x1c4 <ledWriteAll>
 5c4:	df 5f       	subi	r29, 0xFF	; 255
 5c6:	d1 31       	cpi	r29, 0x11	; 17
 5c8:	28 f0       	brcs	.+10     	; 0x5d4 <initBoard+0x154>
 5ca:	86 2d       	mov	r24, r6
 5cc:	91 10       	cpse	r9, r1
 5ce:	85 2d       	mov	r24, r5
 5d0:	98 2e       	mov	r9, r24
 5d2:	d0 e0       	ldi	r29, 0x00	; 0
 5d4:	88 20       	and	r8, r8
 5d6:	11 f0       	breq	.+4      	; 0x5dc <initBoard+0x15c>
 5d8:	ce 5f       	subi	r28, 0xFE	; 254
 5da:	01 c0       	rjmp	.+2      	; 0x5de <initBoard+0x15e>
 5dc:	c2 50       	subi	r28, 0x02	; 2
 5de:	8c 2f       	mov	r24, r28
 5e0:	58 de       	rcall	.-848    	; 0x292 <lcdLight>
 5e2:	ce 3f       	cpi	r28, 0xFE	; 254
 5e4:	21 f0       	breq	.+8      	; 0x5ee <initBoard+0x16e>
 5e6:	c8 37       	cpi	r28, 0x78	; 120
 5e8:	19 f4       	brne	.+6      	; 0x5f0 <initBoard+0x170>
 5ea:	86 2c       	mov	r8, r6
 5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <initBoard+0x170>
 5ee:	85 2c       	mov	r8, r5
 5f0:	71 10       	cpse	r7, r1
 5f2:	3b c0       	rjmp	.+118    	; 0x66a <initBoard+0x1ea>
 5f4:	f8 01       	movw	r30, r16
 5f6:	80 81       	ld	r24, Z
 5f8:	83 7c       	andi	r24, 0xC3	; 195
 5fa:	91 f0       	breq	.+36     	; 0x620 <initBoard+0x1a0>
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	66 e2       	ldi	r22, 0x26	; 38
 602:	72 e0       	ldi	r23, 0x02	; 2
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	93 e0       	ldi	r25, 0x03	; 3
 608:	0d de       	rcall	.-998    	; 0x224 <rgbWrite>
 60a:	bf 92       	push	r11
 60c:	af 92       	push	r10
 60e:	1f 92       	push	r1
 610:	4f 92       	push	r4
 612:	c2 de       	rcall	.-636    	; 0x398 <lcdWriteText>
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	76 2c       	mov	r7, r6
 61e:	25 c0       	rjmp	.+74     	; 0x66a <initBoard+0x1ea>
 620:	8f ef       	ldi	r24, 0xFF	; 255
 622:	9c e7       	ldi	r25, 0x7C	; 124
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <initBoard+0x1a4>
 628:	00 c0       	rjmp	.+0      	; 0x62a <initBoard+0x1aa>
 62a:	00 00       	nop
 62c:	b8 cf       	rjmp	.-144    	; 0x59e <initBoard+0x11e>
 62e:	f0 de       	rcall	.-544    	; 0x410 <lcdClear>
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	2f de       	rcall	.-930    	; 0x292 <lcdLight>
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	c5 dd       	rcall	.-1142   	; 0x1c4 <ledWriteAll>
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	ee dd       	rcall	.-1060   	; 0x224 <rgbWrite>
 648:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
 64c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
 650:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
 654:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
 658:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
 65c:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
 660:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
 664:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
 668:	05 c0       	rjmp	.+10     	; 0x674 <initBoard+0x1f4>
 66a:	f8 01       	movw	r30, r16
 66c:	80 81       	ld	r24, Z
 66e:	83 7c       	andi	r24, 0xC3	; 195
 670:	b9 f6       	brne	.-82     	; 0x620 <initBoard+0x1a0>
 672:	dd cf       	rjmp	.-70     	; 0x62e <initBoard+0x1ae>
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	bf 90       	pop	r11
 686:	af 90       	pop	r10
 688:	9f 90       	pop	r9
 68a:	8f 90       	pop	r8
 68c:	7f 90       	pop	r7
 68e:	6f 90       	pop	r6
 690:	5f 90       	pop	r5
 692:	4f 90       	pop	r4
 694:	08 95       	ret

00000696 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
 69e:	28 97       	sbiw	r28, 0x08	; 8
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	f8 94       	cli
 6a4:	de bf       	out	0x3e, r29	; 62
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 6aa:	88 e0       	ldi	r24, 0x08	; 8
 6ac:	e0 e0       	ldi	r30, 0x00	; 0
 6ae:	f2 e0       	ldi	r31, 0x02	; 2
 6b0:	de 01       	movw	r26, r28
 6b2:	11 96       	adiw	r26, 0x01	; 1
 6b4:	01 90       	ld	r0, Z+
 6b6:	0d 92       	st	X+, r0
 6b8:	8a 95       	dec	r24
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 6bc:	e5 e0       	ldi	r30, 0x05	; 5
 6be:	f1 e0       	ldi	r31, 0x01	; 1
 6c0:	80 81       	ld	r24, Z
 6c2:	8f 7b       	andi	r24, 0xBF	; 191
 6c4:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 6c6:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2725>
 6ca:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2725+0x1>
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	8c 0f       	add	r24, r28
 6d4:	9d 1f       	adc	r25, r29
 6d6:	e8 0f       	add	r30, r24
 6d8:	f9 1f       	adc	r31, r25
 6da:	80 81       	ld	r24, Z
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
 6e2:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
 6e6:	a2 ef       	ldi	r26, 0xF2	; 242
 6e8:	b2 e0       	ldi	r27, 0x02	; 2
 6ea:	22 e8       	ldi	r18, 0x82	; 130
 6ec:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 6ee:	e5 e0       	ldi	r30, 0x05	; 5
 6f0:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 6f2:	5e 91       	ld	r21, -X
 6f4:	4e 91       	ld	r20, -X
 6f6:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
 6fa:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
 6fe:	84 23       	and	r24, r20
 700:	95 23       	and	r25, r21
 702:	89 2b       	or	r24, r25
 704:	21 f0       	breq	.+8      	; 0x70e <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 706:	80 81       	ld	r24, Z
 708:	80 62       	ori	r24, 0x20	; 32
 70a:	80 83       	st	Z, r24
 70c:	03 c0       	rjmp	.+6      	; 0x714 <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 70e:	80 81       	ld	r24, Z
 710:	8f 7d       	andi	r24, 0xDF	; 223
 712:	80 83       	st	Z, r24
        }
        CLOCK_1;
 714:	80 81       	ld	r24, Z
 716:	80 61       	ori	r24, 0x10	; 16
 718:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 71a:	80 81       	ld	r24, Z
 71c:	8f 7e       	andi	r24, 0xEF	; 239
 71e:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 720:	a2 17       	cp	r26, r18
 722:	b3 07       	cpc	r27, r19
 724:	31 f7       	brne	.-52     	; 0x6f2 <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 726:	e5 e0       	ldi	r30, 0x05	; 5
 728:	f1 e0       	ldi	r31, 0x01	; 1
 72a:	80 81       	ld	r24, Z
 72c:	87 7f       	andi	r24, 0xF7	; 247
 72e:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 730:	80 81       	ld	r24, Z
 732:	88 7f       	andi	r24, 0xF8	; 248
 734:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 736:	90 81       	ld	r25, Z
 738:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2725>
 73c:	89 2b       	or	r24, r25
 73e:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 740:	80 81       	ld	r24, Z
 742:	80 64       	ori	r24, 0x40	; 64
 744:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 746:	80 81       	ld	r24, Z
 748:	88 60       	ori	r24, 0x08	; 8
 74a:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 74c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2725>
 750:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2725+0x1>
 754:	87 30       	cpi	r24, 0x07	; 7
 756:	91 05       	cpc	r25, r1
 758:	30 f4       	brcc	.+12     	; 0x766 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2725+0x1>
 760:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2725>
 764:	07 c0       	rjmp	.+14     	; 0x774 <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
 766:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2725+0x1>
 76a:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2725>
        writeTextFinished = 1;
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
 774:	28 96       	adiw	r28, 0x08	; 8
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	f8 94       	cli
 77a:	de bf       	out	0x3e, r29	; 62
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	cd bf       	out	0x3d, r28	; 61
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	0b b6       	in	r0, 0x3b	; 59
 792:	0f 92       	push	r0
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	4f 93       	push	r20
 79a:	5f 93       	push	r21
 79c:	6f 93       	push	r22
 79e:	7f 93       	push	r23
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	af 93       	push	r26
 7a6:	bf 93       	push	r27
 7a8:	ef 93       	push	r30
 7aa:	ff 93       	push	r31
    systemTimeMs += 1;
 7ac:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
 7b0:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
 7b4:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
 7b8:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
 7bc:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
 7c0:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
 7c4:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
 7c8:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
 7cc:	a1 e0       	ldi	r26, 0x01	; 1
 7ce:	27 d0       	rcall	.+78     	; 0x81e <__adddi3_s8>
 7d0:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
 7d4:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
 7d8:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
 7dc:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
 7e0:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
 7e4:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
 7e8:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
 7ec:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 7f0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
 7f4:	81 11       	cpse	r24, r1
 7f6:	4f df       	rcall	.-354    	; 0x696 <matrixWriteNextLine>
}
 7f8:	ff 91       	pop	r31
 7fa:	ef 91       	pop	r30
 7fc:	bf 91       	pop	r27
 7fe:	af 91       	pop	r26
 800:	9f 91       	pop	r25
 802:	8f 91       	pop	r24
 804:	7f 91       	pop	r23
 806:	6f 91       	pop	r22
 808:	5f 91       	pop	r21
 80a:	4f 91       	pop	r20
 80c:	3f 91       	pop	r19
 80e:	2f 91       	pop	r18
 810:	0f 90       	pop	r0
 812:	0b be       	out	0x3b, r0	; 59
 814:	0f 90       	pop	r0
 816:	0f be       	out	0x3f, r0	; 63
 818:	0f 90       	pop	r0
 81a:	1f 90       	pop	r1
 81c:	18 95       	reti

0000081e <__adddi3_s8>:
 81e:	00 24       	eor	r0, r0
 820:	a7 fd       	sbrc	r26, 7
 822:	00 94       	com	r0
 824:	2a 0f       	add	r18, r26
 826:	30 1d       	adc	r19, r0
 828:	40 1d       	adc	r20, r0
 82a:	50 1d       	adc	r21, r0
 82c:	60 1d       	adc	r22, r0
 82e:	70 1d       	adc	r23, r0
 830:	80 1d       	adc	r24, r0
 832:	90 1d       	adc	r25, r0
 834:	08 95       	ret

00000836 <vsnprintf>:
 836:	0f 93       	push	r16
 838:	1f 93       	push	r17
 83a:	cf 93       	push	r28
 83c:	df 93       	push	r29
 83e:	cd b7       	in	r28, 0x3d	; 61
 840:	de b7       	in	r29, 0x3e	; 62
 842:	2e 97       	sbiw	r28, 0x0e	; 14
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	f8 94       	cli
 848:	de bf       	out	0x3e, r29	; 62
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	cd bf       	out	0x3d, r28	; 61
 84e:	8c 01       	movw	r16, r24
 850:	fa 01       	movw	r30, r20
 852:	86 e0       	ldi	r24, 0x06	; 6
 854:	8c 83       	std	Y+4, r24	; 0x04
 856:	1a 83       	std	Y+2, r17	; 0x02
 858:	09 83       	std	Y+1, r16	; 0x01
 85a:	77 ff       	sbrs	r23, 7
 85c:	02 c0       	rjmp	.+4      	; 0x862 <vsnprintf+0x2c>
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	70 e8       	ldi	r23, 0x80	; 128
 862:	cb 01       	movw	r24, r22
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	9e 83       	std	Y+6, r25	; 0x06
 868:	8d 83       	std	Y+5, r24	; 0x05
 86a:	a9 01       	movw	r20, r18
 86c:	bf 01       	movw	r22, r30
 86e:	ce 01       	movw	r24, r28
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	19 d0       	rcall	.+50     	; 0x8a6 <vfprintf>
 874:	4d 81       	ldd	r20, Y+5	; 0x05
 876:	5e 81       	ldd	r21, Y+6	; 0x06
 878:	57 fd       	sbrc	r21, 7
 87a:	0a c0       	rjmp	.+20     	; 0x890 <vsnprintf+0x5a>
 87c:	2f 81       	ldd	r18, Y+7	; 0x07
 87e:	38 85       	ldd	r19, Y+8	; 0x08
 880:	42 17       	cp	r20, r18
 882:	53 07       	cpc	r21, r19
 884:	0c f4       	brge	.+2      	; 0x888 <vsnprintf+0x52>
 886:	9a 01       	movw	r18, r20
 888:	f8 01       	movw	r30, r16
 88a:	e2 0f       	add	r30, r18
 88c:	f3 1f       	adc	r31, r19
 88e:	10 82       	st	Z, r1
 890:	2e 96       	adiw	r28, 0x0e	; 14
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	08 95       	ret

000008a6 <vfprintf>:
 8a6:	2f 92       	push	r2
 8a8:	3f 92       	push	r3
 8aa:	4f 92       	push	r4
 8ac:	5f 92       	push	r5
 8ae:	6f 92       	push	r6
 8b0:	7f 92       	push	r7
 8b2:	8f 92       	push	r8
 8b4:	9f 92       	push	r9
 8b6:	af 92       	push	r10
 8b8:	bf 92       	push	r11
 8ba:	cf 92       	push	r12
 8bc:	df 92       	push	r13
 8be:	ef 92       	push	r14
 8c0:	ff 92       	push	r15
 8c2:	0f 93       	push	r16
 8c4:	1f 93       	push	r17
 8c6:	cf 93       	push	r28
 8c8:	df 93       	push	r29
 8ca:	cd b7       	in	r28, 0x3d	; 61
 8cc:	de b7       	in	r29, 0x3e	; 62
 8ce:	2b 97       	sbiw	r28, 0x0b	; 11
 8d0:	0f b6       	in	r0, 0x3f	; 63
 8d2:	f8 94       	cli
 8d4:	de bf       	out	0x3e, r29	; 62
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	cd bf       	out	0x3d, r28	; 61
 8da:	6c 01       	movw	r12, r24
 8dc:	7b 01       	movw	r14, r22
 8de:	8a 01       	movw	r16, r20
 8e0:	fc 01       	movw	r30, r24
 8e2:	17 82       	std	Z+7, r1	; 0x07
 8e4:	16 82       	std	Z+6, r1	; 0x06
 8e6:	83 81       	ldd	r24, Z+3	; 0x03
 8e8:	81 ff       	sbrs	r24, 1
 8ea:	bf c1       	rjmp	.+894    	; 0xc6a <vfprintf+0x3c4>
 8ec:	ce 01       	movw	r24, r28
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	3c 01       	movw	r6, r24
 8f2:	f6 01       	movw	r30, r12
 8f4:	93 81       	ldd	r25, Z+3	; 0x03
 8f6:	f7 01       	movw	r30, r14
 8f8:	93 fd       	sbrc	r25, 3
 8fa:	85 91       	lpm	r24, Z+
 8fc:	93 ff       	sbrs	r25, 3
 8fe:	81 91       	ld	r24, Z+
 900:	7f 01       	movw	r14, r30
 902:	88 23       	and	r24, r24
 904:	09 f4       	brne	.+2      	; 0x908 <vfprintf+0x62>
 906:	ad c1       	rjmp	.+858    	; 0xc62 <vfprintf+0x3bc>
 908:	85 32       	cpi	r24, 0x25	; 37
 90a:	39 f4       	brne	.+14     	; 0x91a <vfprintf+0x74>
 90c:	93 fd       	sbrc	r25, 3
 90e:	85 91       	lpm	r24, Z+
 910:	93 ff       	sbrs	r25, 3
 912:	81 91       	ld	r24, Z+
 914:	7f 01       	movw	r14, r30
 916:	85 32       	cpi	r24, 0x25	; 37
 918:	21 f4       	brne	.+8      	; 0x922 <vfprintf+0x7c>
 91a:	b6 01       	movw	r22, r12
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	d6 d1       	rcall	.+940    	; 0xccc <fputc>
 920:	e8 cf       	rjmp	.-48     	; 0x8f2 <vfprintf+0x4c>
 922:	91 2c       	mov	r9, r1
 924:	21 2c       	mov	r2, r1
 926:	31 2c       	mov	r3, r1
 928:	ff e1       	ldi	r31, 0x1F	; 31
 92a:	f3 15       	cp	r31, r3
 92c:	d8 f0       	brcs	.+54     	; 0x964 <vfprintf+0xbe>
 92e:	8b 32       	cpi	r24, 0x2B	; 43
 930:	79 f0       	breq	.+30     	; 0x950 <vfprintf+0xaa>
 932:	38 f4       	brcc	.+14     	; 0x942 <vfprintf+0x9c>
 934:	80 32       	cpi	r24, 0x20	; 32
 936:	79 f0       	breq	.+30     	; 0x956 <vfprintf+0xb0>
 938:	83 32       	cpi	r24, 0x23	; 35
 93a:	a1 f4       	brne	.+40     	; 0x964 <vfprintf+0xbe>
 93c:	23 2d       	mov	r18, r3
 93e:	20 61       	ori	r18, 0x10	; 16
 940:	1d c0       	rjmp	.+58     	; 0x97c <vfprintf+0xd6>
 942:	8d 32       	cpi	r24, 0x2D	; 45
 944:	61 f0       	breq	.+24     	; 0x95e <vfprintf+0xb8>
 946:	80 33       	cpi	r24, 0x30	; 48
 948:	69 f4       	brne	.+26     	; 0x964 <vfprintf+0xbe>
 94a:	23 2d       	mov	r18, r3
 94c:	21 60       	ori	r18, 0x01	; 1
 94e:	16 c0       	rjmp	.+44     	; 0x97c <vfprintf+0xd6>
 950:	83 2d       	mov	r24, r3
 952:	82 60       	ori	r24, 0x02	; 2
 954:	38 2e       	mov	r3, r24
 956:	e3 2d       	mov	r30, r3
 958:	e4 60       	ori	r30, 0x04	; 4
 95a:	3e 2e       	mov	r3, r30
 95c:	2a c0       	rjmp	.+84     	; 0x9b2 <vfprintf+0x10c>
 95e:	f3 2d       	mov	r31, r3
 960:	f8 60       	ori	r31, 0x08	; 8
 962:	1d c0       	rjmp	.+58     	; 0x99e <vfprintf+0xf8>
 964:	37 fc       	sbrc	r3, 7
 966:	2d c0       	rjmp	.+90     	; 0x9c2 <vfprintf+0x11c>
 968:	20 ed       	ldi	r18, 0xD0	; 208
 96a:	28 0f       	add	r18, r24
 96c:	2a 30       	cpi	r18, 0x0A	; 10
 96e:	40 f0       	brcs	.+16     	; 0x980 <vfprintf+0xda>
 970:	8e 32       	cpi	r24, 0x2E	; 46
 972:	b9 f4       	brne	.+46     	; 0x9a2 <vfprintf+0xfc>
 974:	36 fc       	sbrc	r3, 6
 976:	75 c1       	rjmp	.+746    	; 0xc62 <vfprintf+0x3bc>
 978:	23 2d       	mov	r18, r3
 97a:	20 64       	ori	r18, 0x40	; 64
 97c:	32 2e       	mov	r3, r18
 97e:	19 c0       	rjmp	.+50     	; 0x9b2 <vfprintf+0x10c>
 980:	36 fe       	sbrs	r3, 6
 982:	06 c0       	rjmp	.+12     	; 0x990 <vfprintf+0xea>
 984:	8a e0       	ldi	r24, 0x0A	; 10
 986:	98 9e       	mul	r9, r24
 988:	20 0d       	add	r18, r0
 98a:	11 24       	eor	r1, r1
 98c:	92 2e       	mov	r9, r18
 98e:	11 c0       	rjmp	.+34     	; 0x9b2 <vfprintf+0x10c>
 990:	ea e0       	ldi	r30, 0x0A	; 10
 992:	2e 9e       	mul	r2, r30
 994:	20 0d       	add	r18, r0
 996:	11 24       	eor	r1, r1
 998:	22 2e       	mov	r2, r18
 99a:	f3 2d       	mov	r31, r3
 99c:	f0 62       	ori	r31, 0x20	; 32
 99e:	3f 2e       	mov	r3, r31
 9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <vfprintf+0x10c>
 9a2:	8c 36       	cpi	r24, 0x6C	; 108
 9a4:	21 f4       	brne	.+8      	; 0x9ae <vfprintf+0x108>
 9a6:	83 2d       	mov	r24, r3
 9a8:	80 68       	ori	r24, 0x80	; 128
 9aa:	38 2e       	mov	r3, r24
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <vfprintf+0x10c>
 9ae:	88 36       	cpi	r24, 0x68	; 104
 9b0:	41 f4       	brne	.+16     	; 0x9c2 <vfprintf+0x11c>
 9b2:	f7 01       	movw	r30, r14
 9b4:	93 fd       	sbrc	r25, 3
 9b6:	85 91       	lpm	r24, Z+
 9b8:	93 ff       	sbrs	r25, 3
 9ba:	81 91       	ld	r24, Z+
 9bc:	7f 01       	movw	r14, r30
 9be:	81 11       	cpse	r24, r1
 9c0:	b3 cf       	rjmp	.-154    	; 0x928 <vfprintf+0x82>
 9c2:	98 2f       	mov	r25, r24
 9c4:	9f 7d       	andi	r25, 0xDF	; 223
 9c6:	95 54       	subi	r25, 0x45	; 69
 9c8:	93 30       	cpi	r25, 0x03	; 3
 9ca:	28 f4       	brcc	.+10     	; 0x9d6 <vfprintf+0x130>
 9cc:	0c 5f       	subi	r16, 0xFC	; 252
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	9f e3       	ldi	r25, 0x3F	; 63
 9d2:	99 83       	std	Y+1, r25	; 0x01
 9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <vfprintf+0x14a>
 9d6:	83 36       	cpi	r24, 0x63	; 99
 9d8:	31 f0       	breq	.+12     	; 0x9e6 <vfprintf+0x140>
 9da:	83 37       	cpi	r24, 0x73	; 115
 9dc:	71 f0       	breq	.+28     	; 0x9fa <vfprintf+0x154>
 9de:	83 35       	cpi	r24, 0x53	; 83
 9e0:	09 f0       	breq	.+2      	; 0x9e4 <vfprintf+0x13e>
 9e2:	55 c0       	rjmp	.+170    	; 0xa8e <vfprintf+0x1e8>
 9e4:	20 c0       	rjmp	.+64     	; 0xa26 <vfprintf+0x180>
 9e6:	f8 01       	movw	r30, r16
 9e8:	80 81       	ld	r24, Z
 9ea:	89 83       	std	Y+1, r24	; 0x01
 9ec:	0e 5f       	subi	r16, 0xFE	; 254
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	88 24       	eor	r8, r8
 9f2:	83 94       	inc	r8
 9f4:	91 2c       	mov	r9, r1
 9f6:	53 01       	movw	r10, r6
 9f8:	12 c0       	rjmp	.+36     	; 0xa1e <vfprintf+0x178>
 9fa:	28 01       	movw	r4, r16
 9fc:	f2 e0       	ldi	r31, 0x02	; 2
 9fe:	4f 0e       	add	r4, r31
 a00:	51 1c       	adc	r5, r1
 a02:	f8 01       	movw	r30, r16
 a04:	a0 80       	ld	r10, Z
 a06:	b1 80       	ldd	r11, Z+1	; 0x01
 a08:	36 fe       	sbrs	r3, 6
 a0a:	03 c0       	rjmp	.+6      	; 0xa12 <vfprintf+0x16c>
 a0c:	69 2d       	mov	r22, r9
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <vfprintf+0x170>
 a12:	6f ef       	ldi	r22, 0xFF	; 255
 a14:	7f ef       	ldi	r23, 0xFF	; 255
 a16:	c5 01       	movw	r24, r10
 a18:	4e d1       	rcall	.+668    	; 0xcb6 <strnlen>
 a1a:	4c 01       	movw	r8, r24
 a1c:	82 01       	movw	r16, r4
 a1e:	f3 2d       	mov	r31, r3
 a20:	ff 77       	andi	r31, 0x7F	; 127
 a22:	3f 2e       	mov	r3, r31
 a24:	15 c0       	rjmp	.+42     	; 0xa50 <vfprintf+0x1aa>
 a26:	28 01       	movw	r4, r16
 a28:	22 e0       	ldi	r18, 0x02	; 2
 a2a:	42 0e       	add	r4, r18
 a2c:	51 1c       	adc	r5, r1
 a2e:	f8 01       	movw	r30, r16
 a30:	a0 80       	ld	r10, Z
 a32:	b1 80       	ldd	r11, Z+1	; 0x01
 a34:	36 fe       	sbrs	r3, 6
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <vfprintf+0x198>
 a38:	69 2d       	mov	r22, r9
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <vfprintf+0x19c>
 a3e:	6f ef       	ldi	r22, 0xFF	; 255
 a40:	7f ef       	ldi	r23, 0xFF	; 255
 a42:	c5 01       	movw	r24, r10
 a44:	2d d1       	rcall	.+602    	; 0xca0 <strnlen_P>
 a46:	4c 01       	movw	r8, r24
 a48:	f3 2d       	mov	r31, r3
 a4a:	f0 68       	ori	r31, 0x80	; 128
 a4c:	3f 2e       	mov	r3, r31
 a4e:	82 01       	movw	r16, r4
 a50:	33 fc       	sbrc	r3, 3
 a52:	19 c0       	rjmp	.+50     	; 0xa86 <vfprintf+0x1e0>
 a54:	82 2d       	mov	r24, r2
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	88 16       	cp	r8, r24
 a5a:	99 06       	cpc	r9, r25
 a5c:	a0 f4       	brcc	.+40     	; 0xa86 <vfprintf+0x1e0>
 a5e:	b6 01       	movw	r22, r12
 a60:	80 e2       	ldi	r24, 0x20	; 32
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	33 d1       	rcall	.+614    	; 0xccc <fputc>
 a66:	2a 94       	dec	r2
 a68:	f5 cf       	rjmp	.-22     	; 0xa54 <vfprintf+0x1ae>
 a6a:	f5 01       	movw	r30, r10
 a6c:	37 fc       	sbrc	r3, 7
 a6e:	85 91       	lpm	r24, Z+
 a70:	37 fe       	sbrs	r3, 7
 a72:	81 91       	ld	r24, Z+
 a74:	5f 01       	movw	r10, r30
 a76:	b6 01       	movw	r22, r12
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	28 d1       	rcall	.+592    	; 0xccc <fputc>
 a7c:	21 10       	cpse	r2, r1
 a7e:	2a 94       	dec	r2
 a80:	21 e0       	ldi	r18, 0x01	; 1
 a82:	82 1a       	sub	r8, r18
 a84:	91 08       	sbc	r9, r1
 a86:	81 14       	cp	r8, r1
 a88:	91 04       	cpc	r9, r1
 a8a:	79 f7       	brne	.-34     	; 0xa6a <vfprintf+0x1c4>
 a8c:	e1 c0       	rjmp	.+450    	; 0xc50 <vfprintf+0x3aa>
 a8e:	84 36       	cpi	r24, 0x64	; 100
 a90:	11 f0       	breq	.+4      	; 0xa96 <vfprintf+0x1f0>
 a92:	89 36       	cpi	r24, 0x69	; 105
 a94:	39 f5       	brne	.+78     	; 0xae4 <vfprintf+0x23e>
 a96:	f8 01       	movw	r30, r16
 a98:	37 fe       	sbrs	r3, 7
 a9a:	07 c0       	rjmp	.+14     	; 0xaaa <vfprintf+0x204>
 a9c:	60 81       	ld	r22, Z
 a9e:	71 81       	ldd	r23, Z+1	; 0x01
 aa0:	82 81       	ldd	r24, Z+2	; 0x02
 aa2:	93 81       	ldd	r25, Z+3	; 0x03
 aa4:	0c 5f       	subi	r16, 0xFC	; 252
 aa6:	1f 4f       	sbci	r17, 0xFF	; 255
 aa8:	08 c0       	rjmp	.+16     	; 0xaba <vfprintf+0x214>
 aaa:	60 81       	ld	r22, Z
 aac:	71 81       	ldd	r23, Z+1	; 0x01
 aae:	07 2e       	mov	r0, r23
 ab0:	00 0c       	add	r0, r0
 ab2:	88 0b       	sbc	r24, r24
 ab4:	99 0b       	sbc	r25, r25
 ab6:	0e 5f       	subi	r16, 0xFE	; 254
 ab8:	1f 4f       	sbci	r17, 0xFF	; 255
 aba:	f3 2d       	mov	r31, r3
 abc:	ff 76       	andi	r31, 0x6F	; 111
 abe:	3f 2e       	mov	r3, r31
 ac0:	97 ff       	sbrs	r25, 7
 ac2:	09 c0       	rjmp	.+18     	; 0xad6 <vfprintf+0x230>
 ac4:	90 95       	com	r25
 ac6:	80 95       	com	r24
 ac8:	70 95       	com	r23
 aca:	61 95       	neg	r22
 acc:	7f 4f       	sbci	r23, 0xFF	; 255
 ace:	8f 4f       	sbci	r24, 0xFF	; 255
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	f0 68       	ori	r31, 0x80	; 128
 ad4:	3f 2e       	mov	r3, r31
 ad6:	2a e0       	ldi	r18, 0x0A	; 10
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	a3 01       	movw	r20, r6
 adc:	33 d1       	rcall	.+614    	; 0xd44 <__ultoa_invert>
 ade:	88 2e       	mov	r8, r24
 ae0:	86 18       	sub	r8, r6
 ae2:	44 c0       	rjmp	.+136    	; 0xb6c <vfprintf+0x2c6>
 ae4:	85 37       	cpi	r24, 0x75	; 117
 ae6:	31 f4       	brne	.+12     	; 0xaf4 <vfprintf+0x24e>
 ae8:	23 2d       	mov	r18, r3
 aea:	2f 7e       	andi	r18, 0xEF	; 239
 aec:	b2 2e       	mov	r11, r18
 aee:	2a e0       	ldi	r18, 0x0A	; 10
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	25 c0       	rjmp	.+74     	; 0xb3e <vfprintf+0x298>
 af4:	93 2d       	mov	r25, r3
 af6:	99 7f       	andi	r25, 0xF9	; 249
 af8:	b9 2e       	mov	r11, r25
 afa:	8f 36       	cpi	r24, 0x6F	; 111
 afc:	c1 f0       	breq	.+48     	; 0xb2e <vfprintf+0x288>
 afe:	18 f4       	brcc	.+6      	; 0xb06 <vfprintf+0x260>
 b00:	88 35       	cpi	r24, 0x58	; 88
 b02:	79 f0       	breq	.+30     	; 0xb22 <vfprintf+0x27c>
 b04:	ae c0       	rjmp	.+348    	; 0xc62 <vfprintf+0x3bc>
 b06:	80 37       	cpi	r24, 0x70	; 112
 b08:	19 f0       	breq	.+6      	; 0xb10 <vfprintf+0x26a>
 b0a:	88 37       	cpi	r24, 0x78	; 120
 b0c:	21 f0       	breq	.+8      	; 0xb16 <vfprintf+0x270>
 b0e:	a9 c0       	rjmp	.+338    	; 0xc62 <vfprintf+0x3bc>
 b10:	e9 2f       	mov	r30, r25
 b12:	e0 61       	ori	r30, 0x10	; 16
 b14:	be 2e       	mov	r11, r30
 b16:	b4 fe       	sbrs	r11, 4
 b18:	0d c0       	rjmp	.+26     	; 0xb34 <vfprintf+0x28e>
 b1a:	fb 2d       	mov	r31, r11
 b1c:	f4 60       	ori	r31, 0x04	; 4
 b1e:	bf 2e       	mov	r11, r31
 b20:	09 c0       	rjmp	.+18     	; 0xb34 <vfprintf+0x28e>
 b22:	34 fe       	sbrs	r3, 4
 b24:	0a c0       	rjmp	.+20     	; 0xb3a <vfprintf+0x294>
 b26:	29 2f       	mov	r18, r25
 b28:	26 60       	ori	r18, 0x06	; 6
 b2a:	b2 2e       	mov	r11, r18
 b2c:	06 c0       	rjmp	.+12     	; 0xb3a <vfprintf+0x294>
 b2e:	28 e0       	ldi	r18, 0x08	; 8
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	05 c0       	rjmp	.+10     	; 0xb3e <vfprintf+0x298>
 b34:	20 e1       	ldi	r18, 0x10	; 16
 b36:	30 e0       	ldi	r19, 0x00	; 0
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <vfprintf+0x298>
 b3a:	20 e1       	ldi	r18, 0x10	; 16
 b3c:	32 e0       	ldi	r19, 0x02	; 2
 b3e:	f8 01       	movw	r30, r16
 b40:	b7 fe       	sbrs	r11, 7
 b42:	07 c0       	rjmp	.+14     	; 0xb52 <vfprintf+0x2ac>
 b44:	60 81       	ld	r22, Z
 b46:	71 81       	ldd	r23, Z+1	; 0x01
 b48:	82 81       	ldd	r24, Z+2	; 0x02
 b4a:	93 81       	ldd	r25, Z+3	; 0x03
 b4c:	0c 5f       	subi	r16, 0xFC	; 252
 b4e:	1f 4f       	sbci	r17, 0xFF	; 255
 b50:	06 c0       	rjmp	.+12     	; 0xb5e <vfprintf+0x2b8>
 b52:	60 81       	ld	r22, Z
 b54:	71 81       	ldd	r23, Z+1	; 0x01
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	0e 5f       	subi	r16, 0xFE	; 254
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	a3 01       	movw	r20, r6
 b60:	f1 d0       	rcall	.+482    	; 0xd44 <__ultoa_invert>
 b62:	88 2e       	mov	r8, r24
 b64:	86 18       	sub	r8, r6
 b66:	fb 2d       	mov	r31, r11
 b68:	ff 77       	andi	r31, 0x7F	; 127
 b6a:	3f 2e       	mov	r3, r31
 b6c:	36 fe       	sbrs	r3, 6
 b6e:	0d c0       	rjmp	.+26     	; 0xb8a <vfprintf+0x2e4>
 b70:	23 2d       	mov	r18, r3
 b72:	2e 7f       	andi	r18, 0xFE	; 254
 b74:	a2 2e       	mov	r10, r18
 b76:	89 14       	cp	r8, r9
 b78:	58 f4       	brcc	.+22     	; 0xb90 <vfprintf+0x2ea>
 b7a:	34 fe       	sbrs	r3, 4
 b7c:	0b c0       	rjmp	.+22     	; 0xb94 <vfprintf+0x2ee>
 b7e:	32 fc       	sbrc	r3, 2
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <vfprintf+0x2ee>
 b82:	83 2d       	mov	r24, r3
 b84:	8e 7e       	andi	r24, 0xEE	; 238
 b86:	a8 2e       	mov	r10, r24
 b88:	05 c0       	rjmp	.+10     	; 0xb94 <vfprintf+0x2ee>
 b8a:	b8 2c       	mov	r11, r8
 b8c:	a3 2c       	mov	r10, r3
 b8e:	03 c0       	rjmp	.+6      	; 0xb96 <vfprintf+0x2f0>
 b90:	b8 2c       	mov	r11, r8
 b92:	01 c0       	rjmp	.+2      	; 0xb96 <vfprintf+0x2f0>
 b94:	b9 2c       	mov	r11, r9
 b96:	a4 fe       	sbrs	r10, 4
 b98:	0f c0       	rjmp	.+30     	; 0xbb8 <vfprintf+0x312>
 b9a:	fe 01       	movw	r30, r28
 b9c:	e8 0d       	add	r30, r8
 b9e:	f1 1d       	adc	r31, r1
 ba0:	80 81       	ld	r24, Z
 ba2:	80 33       	cpi	r24, 0x30	; 48
 ba4:	21 f4       	brne	.+8      	; 0xbae <vfprintf+0x308>
 ba6:	9a 2d       	mov	r25, r10
 ba8:	99 7e       	andi	r25, 0xE9	; 233
 baa:	a9 2e       	mov	r10, r25
 bac:	09 c0       	rjmp	.+18     	; 0xbc0 <vfprintf+0x31a>
 bae:	a2 fe       	sbrs	r10, 2
 bb0:	06 c0       	rjmp	.+12     	; 0xbbe <vfprintf+0x318>
 bb2:	b3 94       	inc	r11
 bb4:	b3 94       	inc	r11
 bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <vfprintf+0x31a>
 bb8:	8a 2d       	mov	r24, r10
 bba:	86 78       	andi	r24, 0x86	; 134
 bbc:	09 f0       	breq	.+2      	; 0xbc0 <vfprintf+0x31a>
 bbe:	b3 94       	inc	r11
 bc0:	a3 fc       	sbrc	r10, 3
 bc2:	10 c0       	rjmp	.+32     	; 0xbe4 <vfprintf+0x33e>
 bc4:	a0 fe       	sbrs	r10, 0
 bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <vfprintf+0x32e>
 bc8:	b2 14       	cp	r11, r2
 bca:	80 f4       	brcc	.+32     	; 0xbec <vfprintf+0x346>
 bcc:	28 0c       	add	r2, r8
 bce:	92 2c       	mov	r9, r2
 bd0:	9b 18       	sub	r9, r11
 bd2:	0d c0       	rjmp	.+26     	; 0xbee <vfprintf+0x348>
 bd4:	b2 14       	cp	r11, r2
 bd6:	58 f4       	brcc	.+22     	; 0xbee <vfprintf+0x348>
 bd8:	b6 01       	movw	r22, r12
 bda:	80 e2       	ldi	r24, 0x20	; 32
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	76 d0       	rcall	.+236    	; 0xccc <fputc>
 be0:	b3 94       	inc	r11
 be2:	f8 cf       	rjmp	.-16     	; 0xbd4 <vfprintf+0x32e>
 be4:	b2 14       	cp	r11, r2
 be6:	18 f4       	brcc	.+6      	; 0xbee <vfprintf+0x348>
 be8:	2b 18       	sub	r2, r11
 bea:	02 c0       	rjmp	.+4      	; 0xbf0 <vfprintf+0x34a>
 bec:	98 2c       	mov	r9, r8
 bee:	21 2c       	mov	r2, r1
 bf0:	a4 fe       	sbrs	r10, 4
 bf2:	0f c0       	rjmp	.+30     	; 0xc12 <vfprintf+0x36c>
 bf4:	b6 01       	movw	r22, r12
 bf6:	80 e3       	ldi	r24, 0x30	; 48
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	68 d0       	rcall	.+208    	; 0xccc <fputc>
 bfc:	a2 fe       	sbrs	r10, 2
 bfe:	16 c0       	rjmp	.+44     	; 0xc2c <vfprintf+0x386>
 c00:	a1 fc       	sbrc	r10, 1
 c02:	03 c0       	rjmp	.+6      	; 0xc0a <vfprintf+0x364>
 c04:	88 e7       	ldi	r24, 0x78	; 120
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <vfprintf+0x368>
 c0a:	88 e5       	ldi	r24, 0x58	; 88
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	b6 01       	movw	r22, r12
 c10:	0c c0       	rjmp	.+24     	; 0xc2a <vfprintf+0x384>
 c12:	8a 2d       	mov	r24, r10
 c14:	86 78       	andi	r24, 0x86	; 134
 c16:	51 f0       	breq	.+20     	; 0xc2c <vfprintf+0x386>
 c18:	a1 fe       	sbrs	r10, 1
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <vfprintf+0x37a>
 c1c:	8b e2       	ldi	r24, 0x2B	; 43
 c1e:	01 c0       	rjmp	.+2      	; 0xc22 <vfprintf+0x37c>
 c20:	80 e2       	ldi	r24, 0x20	; 32
 c22:	a7 fc       	sbrc	r10, 7
 c24:	8d e2       	ldi	r24, 0x2D	; 45
 c26:	b6 01       	movw	r22, r12
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	50 d0       	rcall	.+160    	; 0xccc <fputc>
 c2c:	89 14       	cp	r8, r9
 c2e:	30 f4       	brcc	.+12     	; 0xc3c <vfprintf+0x396>
 c30:	b6 01       	movw	r22, r12
 c32:	80 e3       	ldi	r24, 0x30	; 48
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	4a d0       	rcall	.+148    	; 0xccc <fputc>
 c38:	9a 94       	dec	r9
 c3a:	f8 cf       	rjmp	.-16     	; 0xc2c <vfprintf+0x386>
 c3c:	8a 94       	dec	r8
 c3e:	f3 01       	movw	r30, r6
 c40:	e8 0d       	add	r30, r8
 c42:	f1 1d       	adc	r31, r1
 c44:	80 81       	ld	r24, Z
 c46:	b6 01       	movw	r22, r12
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	40 d0       	rcall	.+128    	; 0xccc <fputc>
 c4c:	81 10       	cpse	r8, r1
 c4e:	f6 cf       	rjmp	.-20     	; 0xc3c <vfprintf+0x396>
 c50:	22 20       	and	r2, r2
 c52:	09 f4       	brne	.+2      	; 0xc56 <vfprintf+0x3b0>
 c54:	4e ce       	rjmp	.-868    	; 0x8f2 <vfprintf+0x4c>
 c56:	b6 01       	movw	r22, r12
 c58:	80 e2       	ldi	r24, 0x20	; 32
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	37 d0       	rcall	.+110    	; 0xccc <fputc>
 c5e:	2a 94       	dec	r2
 c60:	f7 cf       	rjmp	.-18     	; 0xc50 <vfprintf+0x3aa>
 c62:	f6 01       	movw	r30, r12
 c64:	86 81       	ldd	r24, Z+6	; 0x06
 c66:	97 81       	ldd	r25, Z+7	; 0x07
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x3c8>
 c6a:	8f ef       	ldi	r24, 0xFF	; 255
 c6c:	9f ef       	ldi	r25, 0xFF	; 255
 c6e:	2b 96       	adiw	r28, 0x0b	; 11
 c70:	0f b6       	in	r0, 0x3f	; 63
 c72:	f8 94       	cli
 c74:	de bf       	out	0x3e, r29	; 62
 c76:	0f be       	out	0x3f, r0	; 63
 c78:	cd bf       	out	0x3d, r28	; 61
 c7a:	df 91       	pop	r29
 c7c:	cf 91       	pop	r28
 c7e:	1f 91       	pop	r17
 c80:	0f 91       	pop	r16
 c82:	ff 90       	pop	r15
 c84:	ef 90       	pop	r14
 c86:	df 90       	pop	r13
 c88:	cf 90       	pop	r12
 c8a:	bf 90       	pop	r11
 c8c:	af 90       	pop	r10
 c8e:	9f 90       	pop	r9
 c90:	8f 90       	pop	r8
 c92:	7f 90       	pop	r7
 c94:	6f 90       	pop	r6
 c96:	5f 90       	pop	r5
 c98:	4f 90       	pop	r4
 c9a:	3f 90       	pop	r3
 c9c:	2f 90       	pop	r2
 c9e:	08 95       	ret

00000ca0 <strnlen_P>:
 ca0:	fc 01       	movw	r30, r24
 ca2:	05 90       	lpm	r0, Z+
 ca4:	61 50       	subi	r22, 0x01	; 1
 ca6:	70 40       	sbci	r23, 0x00	; 0
 ca8:	01 10       	cpse	r0, r1
 caa:	d8 f7       	brcc	.-10     	; 0xca2 <strnlen_P+0x2>
 cac:	80 95       	com	r24
 cae:	90 95       	com	r25
 cb0:	8e 0f       	add	r24, r30
 cb2:	9f 1f       	adc	r25, r31
 cb4:	08 95       	ret

00000cb6 <strnlen>:
 cb6:	fc 01       	movw	r30, r24
 cb8:	61 50       	subi	r22, 0x01	; 1
 cba:	70 40       	sbci	r23, 0x00	; 0
 cbc:	01 90       	ld	r0, Z+
 cbe:	01 10       	cpse	r0, r1
 cc0:	d8 f7       	brcc	.-10     	; 0xcb8 <strnlen+0x2>
 cc2:	80 95       	com	r24
 cc4:	90 95       	com	r25
 cc6:	8e 0f       	add	r24, r30
 cc8:	9f 1f       	adc	r25, r31
 cca:	08 95       	ret

00000ccc <fputc>:
 ccc:	0f 93       	push	r16
 cce:	1f 93       	push	r17
 cd0:	cf 93       	push	r28
 cd2:	df 93       	push	r29
 cd4:	fb 01       	movw	r30, r22
 cd6:	23 81       	ldd	r18, Z+3	; 0x03
 cd8:	21 fd       	sbrc	r18, 1
 cda:	03 c0       	rjmp	.+6      	; 0xce2 <fputc+0x16>
 cdc:	8f ef       	ldi	r24, 0xFF	; 255
 cde:	9f ef       	ldi	r25, 0xFF	; 255
 ce0:	2c c0       	rjmp	.+88     	; 0xd3a <fputc+0x6e>
 ce2:	22 ff       	sbrs	r18, 2
 ce4:	16 c0       	rjmp	.+44     	; 0xd12 <fputc+0x46>
 ce6:	46 81       	ldd	r20, Z+6	; 0x06
 ce8:	57 81       	ldd	r21, Z+7	; 0x07
 cea:	24 81       	ldd	r18, Z+4	; 0x04
 cec:	35 81       	ldd	r19, Z+5	; 0x05
 cee:	42 17       	cp	r20, r18
 cf0:	53 07       	cpc	r21, r19
 cf2:	44 f4       	brge	.+16     	; 0xd04 <fputc+0x38>
 cf4:	a0 81       	ld	r26, Z
 cf6:	b1 81       	ldd	r27, Z+1	; 0x01
 cf8:	9d 01       	movw	r18, r26
 cfa:	2f 5f       	subi	r18, 0xFF	; 255
 cfc:	3f 4f       	sbci	r19, 0xFF	; 255
 cfe:	31 83       	std	Z+1, r19	; 0x01
 d00:	20 83       	st	Z, r18
 d02:	8c 93       	st	X, r24
 d04:	26 81       	ldd	r18, Z+6	; 0x06
 d06:	37 81       	ldd	r19, Z+7	; 0x07
 d08:	2f 5f       	subi	r18, 0xFF	; 255
 d0a:	3f 4f       	sbci	r19, 0xFF	; 255
 d0c:	37 83       	std	Z+7, r19	; 0x07
 d0e:	26 83       	std	Z+6, r18	; 0x06
 d10:	14 c0       	rjmp	.+40     	; 0xd3a <fputc+0x6e>
 d12:	8b 01       	movw	r16, r22
 d14:	ec 01       	movw	r28, r24
 d16:	fb 01       	movw	r30, r22
 d18:	00 84       	ldd	r0, Z+8	; 0x08
 d1a:	f1 85       	ldd	r31, Z+9	; 0x09
 d1c:	e0 2d       	mov	r30, r0
 d1e:	19 95       	eicall
 d20:	89 2b       	or	r24, r25
 d22:	e1 f6       	brne	.-72     	; 0xcdc <fputc+0x10>
 d24:	d8 01       	movw	r26, r16
 d26:	16 96       	adiw	r26, 0x06	; 6
 d28:	8d 91       	ld	r24, X+
 d2a:	9c 91       	ld	r25, X
 d2c:	17 97       	sbiw	r26, 0x07	; 7
 d2e:	01 96       	adiw	r24, 0x01	; 1
 d30:	17 96       	adiw	r26, 0x07	; 7
 d32:	9c 93       	st	X, r25
 d34:	8e 93       	st	-X, r24
 d36:	16 97       	sbiw	r26, 0x06	; 6
 d38:	ce 01       	movw	r24, r28
 d3a:	df 91       	pop	r29
 d3c:	cf 91       	pop	r28
 d3e:	1f 91       	pop	r17
 d40:	0f 91       	pop	r16
 d42:	08 95       	ret

00000d44 <__ultoa_invert>:
 d44:	fa 01       	movw	r30, r20
 d46:	aa 27       	eor	r26, r26
 d48:	28 30       	cpi	r18, 0x08	; 8
 d4a:	51 f1       	breq	.+84     	; 0xda0 <__ultoa_invert+0x5c>
 d4c:	20 31       	cpi	r18, 0x10	; 16
 d4e:	81 f1       	breq	.+96     	; 0xdb0 <__ultoa_invert+0x6c>
 d50:	e8 94       	clt
 d52:	6f 93       	push	r22
 d54:	6e 7f       	andi	r22, 0xFE	; 254
 d56:	6e 5f       	subi	r22, 0xFE	; 254
 d58:	7f 4f       	sbci	r23, 0xFF	; 255
 d5a:	8f 4f       	sbci	r24, 0xFF	; 255
 d5c:	9f 4f       	sbci	r25, 0xFF	; 255
 d5e:	af 4f       	sbci	r26, 0xFF	; 255
 d60:	b1 e0       	ldi	r27, 0x01	; 1
 d62:	3e d0       	rcall	.+124    	; 0xde0 <__ultoa_invert+0x9c>
 d64:	b4 e0       	ldi	r27, 0x04	; 4
 d66:	3c d0       	rcall	.+120    	; 0xde0 <__ultoa_invert+0x9c>
 d68:	67 0f       	add	r22, r23
 d6a:	78 1f       	adc	r23, r24
 d6c:	89 1f       	adc	r24, r25
 d6e:	9a 1f       	adc	r25, r26
 d70:	a1 1d       	adc	r26, r1
 d72:	68 0f       	add	r22, r24
 d74:	79 1f       	adc	r23, r25
 d76:	8a 1f       	adc	r24, r26
 d78:	91 1d       	adc	r25, r1
 d7a:	a1 1d       	adc	r26, r1
 d7c:	6a 0f       	add	r22, r26
 d7e:	71 1d       	adc	r23, r1
 d80:	81 1d       	adc	r24, r1
 d82:	91 1d       	adc	r25, r1
 d84:	a1 1d       	adc	r26, r1
 d86:	20 d0       	rcall	.+64     	; 0xdc8 <__ultoa_invert+0x84>
 d88:	09 f4       	brne	.+2      	; 0xd8c <__ultoa_invert+0x48>
 d8a:	68 94       	set
 d8c:	3f 91       	pop	r19
 d8e:	2a e0       	ldi	r18, 0x0A	; 10
 d90:	26 9f       	mul	r18, r22
 d92:	11 24       	eor	r1, r1
 d94:	30 19       	sub	r19, r0
 d96:	30 5d       	subi	r19, 0xD0	; 208
 d98:	31 93       	st	Z+, r19
 d9a:	de f6       	brtc	.-74     	; 0xd52 <__ultoa_invert+0xe>
 d9c:	cf 01       	movw	r24, r30
 d9e:	08 95       	ret
 da0:	46 2f       	mov	r20, r22
 da2:	47 70       	andi	r20, 0x07	; 7
 da4:	40 5d       	subi	r20, 0xD0	; 208
 da6:	41 93       	st	Z+, r20
 da8:	b3 e0       	ldi	r27, 0x03	; 3
 daa:	0f d0       	rcall	.+30     	; 0xdca <__ultoa_invert+0x86>
 dac:	c9 f7       	brne	.-14     	; 0xda0 <__ultoa_invert+0x5c>
 dae:	f6 cf       	rjmp	.-20     	; 0xd9c <__ultoa_invert+0x58>
 db0:	46 2f       	mov	r20, r22
 db2:	4f 70       	andi	r20, 0x0F	; 15
 db4:	40 5d       	subi	r20, 0xD0	; 208
 db6:	4a 33       	cpi	r20, 0x3A	; 58
 db8:	18 f0       	brcs	.+6      	; 0xdc0 <__ultoa_invert+0x7c>
 dba:	49 5d       	subi	r20, 0xD9	; 217
 dbc:	31 fd       	sbrc	r19, 1
 dbe:	40 52       	subi	r20, 0x20	; 32
 dc0:	41 93       	st	Z+, r20
 dc2:	02 d0       	rcall	.+4      	; 0xdc8 <__ultoa_invert+0x84>
 dc4:	a9 f7       	brne	.-22     	; 0xdb0 <__ultoa_invert+0x6c>
 dc6:	ea cf       	rjmp	.-44     	; 0xd9c <__ultoa_invert+0x58>
 dc8:	b4 e0       	ldi	r27, 0x04	; 4
 dca:	a6 95       	lsr	r26
 dcc:	97 95       	ror	r25
 dce:	87 95       	ror	r24
 dd0:	77 95       	ror	r23
 dd2:	67 95       	ror	r22
 dd4:	ba 95       	dec	r27
 dd6:	c9 f7       	brne	.-14     	; 0xdca <__ultoa_invert+0x86>
 dd8:	00 97       	sbiw	r24, 0x00	; 0
 dda:	61 05       	cpc	r22, r1
 ddc:	71 05       	cpc	r23, r1
 dde:	08 95       	ret
 de0:	9b 01       	movw	r18, r22
 de2:	ac 01       	movw	r20, r24
 de4:	0a 2e       	mov	r0, r26
 de6:	06 94       	lsr	r0
 de8:	57 95       	ror	r21
 dea:	47 95       	ror	r20
 dec:	37 95       	ror	r19
 dee:	27 95       	ror	r18
 df0:	ba 95       	dec	r27
 df2:	c9 f7       	brne	.-14     	; 0xde6 <__ultoa_invert+0xa2>
 df4:	62 0f       	add	r22, r18
 df6:	73 1f       	adc	r23, r19
 df8:	84 1f       	adc	r24, r20
 dfa:	95 1f       	adc	r25, r21
 dfc:	a0 1d       	adc	r26, r0
 dfe:	08 95       	ret

00000e00 <_exit>:
 e00:	f8 94       	cli

00000e02 <__stop_program>:
 e02:	ff cf       	rjmp	.-2      	; 0xe02 <__stop_program>
