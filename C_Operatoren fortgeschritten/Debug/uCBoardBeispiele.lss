
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000e1c  00000eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00000f24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024b0  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f92  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001484  00000000  00000000  000045e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  00005a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d38  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bc1  00000000  00000000  00006e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000089c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a0 c3       	rjmp	.+1856   	; 0x79e <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e1       	ldi	r30, 0x1C	; 28
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 37       	cpi	r26, 0x74	; 116
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e7       	ldi	r26, 0x74	; 116
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3f       	cpi	r26, 0xF2	; 242
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	7b c6       	rjmp	.+3318   	; 0xe18 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
    uint8_t S4_6 = 0;
    uint16_t LedAusgabe = 0;
    
    
    //Initialisieren
    initBoard(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	b8 d1       	rcall	.+880    	; 0x498 <initBoard>
//Hauptprogramm
int main(void)
{
    //Variablen
    uint8_t schalter = 0;
    uint8_t leds = 0;
 128:	c0 e0       	ldi	r28, 0x00	; 0
        }
        else
        {leds = leds |(1<<4);
        }
         
      if (S0_7 % 17 )
 12a:	0f 2e       	mov	r0, r31
 12c:	f1 ef       	ldi	r31, 0xF1	; 241
 12e:	ff 2e       	mov	r15, r31
 130:	f0 2d       	mov	r31, r0
 132:	01 e1       	ldi	r16, 0x11	; 17
      {    LedAusgabe = 0;
      }
    
      
        //Ausgabe------------------------------------------------------------------
        ledWriteAll(leds ^ LedAusgabe);
 134:	aa 24       	eor	r10, r10
 136:	a3 94       	inc	r10
 138:	c1 2c       	mov	r12, r1
 13a:	d1 2c       	mov	r13, r1
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        schalter = switchReadAll();
 13c:	e1 2c       	mov	r14, r1
 13e:	51 d0       	rcall	.+162    	; 0x1e2 <switchReadAll>
 140:	18 2f       	mov	r17, r24
        S5 = schalter & 0b00100000;
        S4 = schalter & 0b00010000;
        S3 = schalter & 0b00001000;
        S2 = schalter & 0b00000100;
        S1 = schalter & 0b00000010;
        S0 = schalter & 0b00000001;
 142:	d8 2f       	mov	r29, r24
        S1_3 = switchReadAll() & 0b00001110;
 144:	d1 70       	andi	r29, 0x01	; 1
 146:	4d d0       	rcall	.+154    	; 0x1e2 <switchReadAll>
        S1_3 = S1_3 >> 1;
 148:	8e 70       	andi	r24, 0x0E	; 14
        S0_7 = switchReadAll() & 0b11111111;
 14a:	b8 2e       	mov	r11, r24
 14c:	b6 94       	lsr	r11
 14e:	49 d0       	rcall	.+146    	; 0x1e2 <switchReadAll>
        S4_6 = switchReadAll() & 0b01110000;
 150:	98 2e       	mov	r9, r24
 152:	47 d0       	rcall	.+142    	; 0x1e2 <switchReadAll>
 154:	80 77       	andi	r24, 0x70	; 112
        S4_6 = S4_6 >>4;
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
       
        
        //Verarbeitung-------------------------------------------------------------
        if (S7)
 15a:	11 23       	and	r17, r17
 15c:	14 f4       	brge	.+4      	; 0x162 <main+0x3e>
        {   leds = leds | 0x01;         //Aufgabe 1.1 Schalter 7 wird an Led 0 angezeigt.
 15e:	c1 60       	ori	r28, 0x01	; 1
 160:	01 c0       	rjmp	.+2      	; 0x164 <main+0x40>
        } 
        else
        {   leds = leds & 0xfffe;
 162:	ce 7f       	andi	r28, 0xFE	; 254
        }
       if (S7 && S6 && !S5)
 164:	91 2f       	mov	r25, r17
 166:	90 7c       	andi	r25, 0xC0	; 192
 168:	90 3c       	cpi	r25, 0xC0	; 192
 16a:	21 f4       	brne	.+8      	; 0x174 <main+0x50>
 16c:	15 fd       	sbrc	r17, 5
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0x50>
       {    leds = leds | (1<<1);       //Aufgabe 1.2: Wenn Schalter 7 und Schalter 6 aber nicht Schalter 5 aktiv ist, leuchtet LED 1, sonst nicht.
 170:	c2 60       	ori	r28, 0x02	; 2
 172:	01 c0       	rjmp	.+2      	; 0x176 <main+0x52>
       } 
       else
       {    leds = leds & ~(1<<1);
 174:	cd 7f       	andi	r28, 0xFD	; 253
       }
       if (S6 && S5 && S4)
 176:	91 2f       	mov	r25, r17
 178:	90 76       	andi	r25, 0x60	; 96
 17a:	90 36       	cpi	r25, 0x60	; 96
 17c:	21 f4       	brne	.+8      	; 0x186 <main+0x62>
 17e:	14 ff       	sbrs	r17, 4
 180:	02 c0       	rjmp	.+4      	; 0x186 <main+0x62>
       {    leds = leds & ~(1<<2);      //Aufgabe 1.3: Wenn Schalter 6, Schalter 5 oder Schalter 4 inaktiv ist, leuchtet LED 2, sonst nicht.
 182:	cb 7f       	andi	r28, 0xFB	; 251
 184:	01 c0       	rjmp	.+2      	; 0x188 <main+0x64>
       } 
       else
       {    leds = leds | (1<<2);
 186:	c4 60       	ori	r28, 0x04	; 4
       }
      if (S1_3 % 2)
 188:	b0 fe       	sbrs	r11, 0
 18a:	03 c0       	rjmp	.+6      	; 0x192 <main+0x6e>
 18c:	cf 7e       	andi	r28, 0xEF	; 239
      } 
      else
      {     leds = leds & ~(1<<3);      
      }
        if (S1_3 % 2)
        {     leds = leds & ~ (1<<4);        //Aufgabe 1.5: Wenn der Wert von Schalter 1-3(Schalter 1 ist LSB, Schalter 3 ist MSB)
 18e:	c8 60       	ori	r28, 0x08	; 8
 190:	02 c0       	rjmp	.+4      	; 0x196 <main+0x72>
      if (S1_3 % 2)
      {     leds = leds | (1<<3);       //Aufgabe 1.4: Wenn der Wert von Schalter 1-3(Schalter 1 ist LSB, Schalter 3 ist MSB)
                                        //ungeradeist, leuchtet LED 3, sonst nicht.
      } 
      else
      {     leds = leds & ~(1<<3);      
 192:	c7 7f       	andi	r28, 0xF7	; 247
        if (S1_3 % 2)
        {     leds = leds & ~ (1<<4);        //Aufgabe 1.5: Wenn der Wert von Schalter 1-3(Schalter 1 ist LSB, Schalter 3 ist MSB)
                                            //geradeist, leuchtet LED 4, sonst nicht
        }
        else
        {leds = leds |(1<<4);
 194:	c0 61       	ori	r28, 0x10	; 16
        }
         
      if (S0_7 % 17 )
 196:	9f 9c       	mul	r9, r15
 198:	91 2d       	mov	r25, r1
 19a:	11 24       	eor	r1, r1
 19c:	92 95       	swap	r25
 19e:	9f 70       	andi	r25, 0x0F	; 15
 1a0:	90 9f       	mul	r25, r16
 1a2:	90 18       	sub	r9, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	99 20       	and	r9, r9
 1a8:	11 f0       	breq	.+4      	; 0x1ae <main+0x8a>
      {     leds = leds & ~(0x20);       //Aufgabe 1.6: Wenn der Wert an Schalter 0 bis 7 (Schalter 0 ist LSB, 
 1aa:	cf 7d       	andi	r28, 0xDF	; 223
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <main+0x8c>
                                        //Schalter 7 ist MSB) durch 17 teilbar ist, leuchtet LED 5, sonst nicht.
      } 
      else
      {     leds = leds | (0x20);       //Aufgabe 1.7: der Wert der Schalter 1-3 grösser ist als der Wert an Schalter4-6
 1ae:	c0 62       	ori	r28, 0x20	; 32
      }                                 // leuchtet Led 6, sonst nicht.
      if (S1_3 > S4_6)
 1b0:	8b 15       	cp	r24, r11
 1b2:	10 f4       	brcc	.+4      	; 0x1b8 <main+0x94>
      {     leds = leds | (0x40);
 1b4:	c0 64       	ori	r28, 0x40	; 64
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <main+0x96>
      } 
      else
      {     leds = leds & ~(0x40);
 1b8:	cf 7b       	andi	r28, 0xBF	; 191
      }                                 //Falls die beiden Werte gleich gross sind, leuchtet Led 7, sonst nicht.
      if (S1_3 == S4_6)
 1ba:	b8 12       	cpse	r11, r24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <main+0x9e>
      {     leds = leds | (0x80);
 1be:	c0 68       	ori	r28, 0x80	; 128
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <main+0xa0>
      }
      else
      {     leds = leds & ~(0x80);
 1c2:	cf 77       	andi	r28, 0x7F	; 127
      {    LedAusgabe = 0;
      }
    
      
        //Ausgabe------------------------------------------------------------------
        ledWriteAll(leds ^ LedAusgabe);
 1c4:	8a 2d       	mov	r24, r10
 1c6:	9c 2d       	mov	r25, r12
 1c8:	d1 11       	cpse	r29, r1
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <main+0xac>
 1cc:	8d 2d       	mov	r24, r13
 1ce:	9e 2d       	mov	r25, r14
 1d0:	91 95       	neg	r25
 1d2:	81 95       	neg	r24
 1d4:	91 09       	sbc	r25, r1
 1d6:	8c 27       	eor	r24, r28
 1d8:	01 d0       	rcall	.+2      	; 0x1dc <ledWriteAll>
        
        
        
    }
 1da:	b1 cf       	rjmp	.-158    	; 0x13e <main+0x1a>

000001dc <ledWriteAll>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 1dc:	82 b9       	out	0x02, r24	; 2
 1de:	95 b9       	out	0x05, r25	; 5
 1e0:	08 95       	ret

000001e2 <switchReadAll>:
 1e2:	86 b1       	in	r24, 0x06	; 6
 1e4:	08 95       	ret

000001e6 <startSystemTimeMs>:
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	84 bd       	out	0x24, r24	; 36
 1ea:	8b e0       	ldi	r24, 0x0B	; 11
 1ec:	85 bd       	out	0x25, r24	; 37
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 1f4:	89 ef       	ldi	r24, 0xF9	; 249
 1f6:	87 bd       	out	0x27, r24	; 39
 1f8:	08 95       	ret

000001fa <initAdc>:
 1fa:	11 ba       	out	0x11, r1	; 17
 1fc:	10 ba       	out	0x10, r1	; 16
 1fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 202:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 218:	ea e7       	ldi	r30, 0x7A	; 122
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	87 ea       	ldi	r24, 0xA7	; 167
 21e:	80 83       	st	Z, r24
 220:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 224:	80 81       	ld	r24, Z
 226:	80 64       	ori	r24, 0x40	; 64
 228:	80 83       	st	Z, r24
 22a:	80 81       	ld	r24, Z
 22c:	84 ff       	sbrs	r24, 4
 22e:	fd cf       	rjmp	.-6      	; 0x22a <initAdc+0x30>
 230:	ea e7       	ldi	r30, 0x7A	; 122
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8f 7e       	andi	r24, 0xEF	; 239
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <rgbWrite>:
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	33 e0       	ldi	r19, 0x03	; 3
 240:	f9 01       	movw	r30, r18
 242:	e8 1b       	sub	r30, r24
 244:	f9 0b       	sbc	r31, r25
 246:	c9 01       	movw	r24, r18
 248:	86 1b       	sub	r24, r22
 24a:	97 0b       	sbc	r25, r23
 24c:	24 1b       	sub	r18, r20
 24e:	35 0b       	sbc	r19, r21
 250:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 254:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 258:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 25c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 260:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 264:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 268:	08 95       	ret

0000026a <initRgb>:
 26a:	8e ef       	ldi	r24, 0xFE	; 254
 26c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 270:	8b e1       	ldi	r24, 0x1B	; 27
 272:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	d6 cf       	rjmp	.-84     	; 0x23c <rgbWrite>
 290:	08 95       	ret

00000292 <lcdSid>:
 292:	88 23       	and	r24, r24
 294:	11 f0       	breq	.+4      	; 0x29a <lcdSid+0x8>
 296:	a0 9a       	sbi	0x14, 0	; 20
 298:	08 95       	ret
 29a:	a0 98       	cbi	0x14, 0	; 20
 29c:	08 95       	ret

0000029e <lcdSclk>:
 29e:	88 23       	and	r24, r24
 2a0:	11 f0       	breq	.+4      	; 0x2a6 <lcdSclk+0x8>
 2a2:	a1 9a       	sbi	0x14, 1	; 20
 2a4:	08 95       	ret
 2a6:	a1 98       	cbi	0x14, 1	; 20
 2a8:	08 95       	ret

000002aa <lcdLight>:
 2aa:	81 11       	cpse	r24, r1
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <lcdLight+0xc>
 2ae:	84 b5       	in	r24, 0x24	; 36
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	84 bd       	out	0x24, r24	; 36
 2b4:	08 95       	ret
 2b6:	94 b5       	in	r25, 0x24	; 36
 2b8:	90 62       	ori	r25, 0x20	; 32
 2ba:	94 bd       	out	0x24, r25	; 36
 2bc:	88 bd       	out	0x28, r24	; 40
 2be:	08 95       	ret

000002c0 <writeLcdF>:
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	7c 01       	movw	r14, r24
 2ce:	eb 01       	movw	r28, r22
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	df df       	rcall	.-66     	; 0x292 <lcdSid>
 2d4:	05 e0       	ldi	r16, 0x05	; 5
 2d6:	10 e0       	ldi	r17, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	e1 df       	rcall	.-62     	; 0x29e <lcdSclk>
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	df df       	rcall	.-66     	; 0x29e <lcdSclk>
 2e0:	01 50       	subi	r16, 0x01	; 1
 2e2:	11 09       	sbc	r17, r1
 2e4:	c9 f7       	brne	.-14     	; 0x2d8 <writeLcdF+0x18>
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	d4 df       	rcall	.-88     	; 0x292 <lcdSid>
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	d8 df       	rcall	.-80     	; 0x29e <lcdSclk>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	d6 df       	rcall	.-84     	; 0x29e <lcdSclk>
 2f2:	83 e4       	ldi	r24, 0x43	; 67
 2f4:	e8 16       	cp	r14, r24
 2f6:	f1 04       	cpc	r15, r1
 2f8:	19 f4       	brne	.+6      	; 0x300 <writeLcdF+0x40>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	ca df       	rcall	.-108    	; 0x292 <lcdSid>
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <writeLcdF+0x44>
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	c7 df       	rcall	.-114    	; 0x292 <lcdSid>
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	cb df       	rcall	.-106    	; 0x29e <lcdSclk>
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	c9 df       	rcall	.-110    	; 0x29e <lcdSclk>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	c1 df       	rcall	.-126    	; 0x292 <lcdSid>
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	c5 df       	rcall	.-118    	; 0x29e <lcdSclk>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	c3 df       	rcall	.-122    	; 0x29e <lcdSclk>
 318:	04 e0       	ldi	r16, 0x04	; 4
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	bf df       	rcall	.-130    	; 0x29e <lcdSclk>
 320:	c0 ff       	sbrs	r28, 0
 322:	03 c0       	rjmp	.+6      	; 0x32a <writeLcdF+0x6a>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	b5 df       	rcall	.-150    	; 0x292 <lcdSid>
 328:	02 c0       	rjmp	.+4      	; 0x32e <writeLcdF+0x6e>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	b2 df       	rcall	.-156    	; 0x292 <lcdSid>
 32e:	d6 95       	lsr	r29
 330:	c7 95       	ror	r28
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	b4 df       	rcall	.-152    	; 0x29e <lcdSclk>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	b2 df       	rcall	.-156    	; 0x29e <lcdSclk>
 33a:	01 50       	subi	r16, 0x01	; 1
 33c:	11 09       	sbc	r17, r1
 33e:	71 f7       	brne	.-36     	; 0x31c <writeLcdF+0x5c>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	a7 df       	rcall	.-178    	; 0x292 <lcdSid>
 344:	04 e0       	ldi	r16, 0x04	; 4
 346:	10 e0       	ldi	r17, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	a9 df       	rcall	.-174    	; 0x29e <lcdSclk>
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	a7 df       	rcall	.-178    	; 0x29e <lcdSclk>
 350:	01 50       	subi	r16, 0x01	; 1
 352:	11 09       	sbc	r17, r1
 354:	c9 f7       	brne	.-14     	; 0x348 <writeLcdF+0x88>
 356:	04 e0       	ldi	r16, 0x04	; 4
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	a0 df       	rcall	.-192    	; 0x29e <lcdSclk>
 35e:	c0 ff       	sbrs	r28, 0
 360:	03 c0       	rjmp	.+6      	; 0x368 <writeLcdF+0xa8>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	96 df       	rcall	.-212    	; 0x292 <lcdSid>
 366:	02 c0       	rjmp	.+4      	; 0x36c <writeLcdF+0xac>
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	93 df       	rcall	.-218    	; 0x292 <lcdSid>
 36c:	d6 95       	lsr	r29
 36e:	c7 95       	ror	r28
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	95 df       	rcall	.-214    	; 0x29e <lcdSclk>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	93 df       	rcall	.-218    	; 0x29e <lcdSclk>
 378:	01 50       	subi	r16, 0x01	; 1
 37a:	11 09       	sbc	r17, r1
 37c:	71 f7       	brne	.-36     	; 0x35a <writeLcdF+0x9a>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	88 df       	rcall	.-240    	; 0x292 <lcdSid>
 382:	c4 e0       	ldi	r28, 0x04	; 4
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	8a df       	rcall	.-236    	; 0x29e <lcdSclk>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	88 df       	rcall	.-240    	; 0x29e <lcdSclk>
 38e:	21 97       	sbiw	r28, 0x01	; 1
 390:	d1 f7       	brne	.-12     	; 0x386 <writeLcdF+0xc6>
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	7e df       	rcall	.-260    	; 0x292 <lcdSid>
 396:	87 ec       	ldi	r24, 0xC7	; 199
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <writeLcdF+0xda>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <writeLcdF+0xe0>
 3a0:	00 00       	nop
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	08 95       	ret

000003b0 <lcdWriteText>:
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	65 97       	sbiw	r28, 0x15	; 21
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	9e 01       	movw	r18, r28
 3c8:	20 5e       	subi	r18, 0xE0	; 224
 3ca:	3f 4f       	sbci	r19, 0xFF	; 255
 3cc:	4e 8d       	ldd	r20, Y+30	; 0x1e
 3ce:	5f 8d       	ldd	r21, Y+31	; 0x1f
 3d0:	65 e1       	ldi	r22, 0x15	; 21
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	3a d2       	rcall	.+1140   	; 0x84e <vsnprintf>
 3da:	6d 8d       	ldd	r22, Y+29	; 0x1d
 3dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3de:	90 e2       	ldi	r25, 0x20	; 32
 3e0:	89 9f       	mul	r24, r25
 3e2:	60 0d       	add	r22, r0
 3e4:	11 24       	eor	r1, r1
 3e6:	60 68       	ori	r22, 0x80	; 128
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	83 e4       	ldi	r24, 0x43	; 67
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	68 df       	rcall	.-304    	; 0x2c0 <writeLcdF>
 3f0:	69 81       	ldd	r22, Y+1	; 0x01
 3f2:	66 23       	and	r22, r22
 3f4:	79 f0       	breq	.+30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f6:	10 e0       	ldi	r17, 0x00	; 0
 3f8:	1f 5f       	subi	r17, 0xFF	; 255
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	84 e4       	ldi	r24, 0x44	; 68
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	5f df       	rcall	.-322    	; 0x2c0 <writeLcdF>
 402:	e1 e0       	ldi	r30, 0x01	; 1
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ec 0f       	add	r30, r28
 408:	fd 1f       	adc	r31, r29
 40a:	e1 0f       	add	r30, r17
 40c:	f1 1d       	adc	r31, r1
 40e:	60 81       	ld	r22, Z
 410:	61 11       	cpse	r22, r1
 412:	f2 cf       	rjmp	.-28     	; 0x3f8 <lcdWriteText+0x48>
 414:	65 96       	adiw	r28, 0x15	; 21
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	08 95       	ret

00000428 <lcdClear>:
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	83 e4       	ldi	r24, 0x43	; 67
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	47 df       	rcall	.-370    	; 0x2c0 <writeLcdF>
 432:	8f e3       	ldi	r24, 0x3F	; 63
 434:	9f e1       	ldi	r25, 0x1F	; 31
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <lcdClear+0xe>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <lcdClear+0x14>
 43c:	00 00       	nop
 43e:	80 e3       	ldi	r24, 0x30	; 48
 440:	92 e0       	ldi	r25, 0x02	; 2
 442:	9f 93       	push	r25
 444:	8f 93       	push	r24
 446:	1f 92       	push	r1
 448:	1f 92       	push	r1
 44a:	b2 df       	rcall	.-156    	; 0x3b0 <lcdWriteText>
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	08 95       	ret

00000456 <initLcd>:
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	22 df       	rcall	.-444    	; 0x29e <lcdSclk>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	1a df       	rcall	.-460    	; 0x292 <lcdSid>
 45e:	64 e3       	ldi	r22, 0x34	; 52
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	83 e4       	ldi	r24, 0x43	; 67
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	2c df       	rcall	.-424    	; 0x2c0 <writeLcdF>
 468:	69 e0       	ldi	r22, 0x09	; 9
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	83 e4       	ldi	r24, 0x43	; 67
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	27 df       	rcall	.-434    	; 0x2c0 <writeLcdF>
 472:	60 e3       	ldi	r22, 0x30	; 48
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	83 e4       	ldi	r24, 0x43	; 67
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	22 df       	rcall	.-444    	; 0x2c0 <writeLcdF>
 47c:	6c e0       	ldi	r22, 0x0C	; 12
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	83 e4       	ldi	r24, 0x43	; 67
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	1d df       	rcall	.-454    	; 0x2c0 <writeLcdF>
 486:	d0 df       	rcall	.-96     	; 0x428 <lcdClear>
 488:	67 e0       	ldi	r22, 0x07	; 7
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	83 e4       	ldi	r24, 0x43	; 67
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	17 df       	rcall	.-466    	; 0x2c0 <writeLcdF>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0a cf       	rjmp	.-492    	; 0x2aa <lcdLight>
 496:	08 95       	ret

00000498 <initBoard>:
 498:	4f 92       	push	r4
 49a:	5f 92       	push	r5
 49c:	6f 92       	push	r6
 49e:	7f 92       	push	r7
 4a0:	8f 92       	push	r8
 4a2:	9f 92       	push	r9
 4a4:	af 92       	push	r10
 4a6:	bf 92       	push	r11
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ef 92       	push	r14
 4ae:	ff 92       	push	r15
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	c8 2f       	mov	r28, r24
 4ba:	85 b7       	in	r24, 0x35	; 53
 4bc:	85 bf       	out	0x35, r24	; 53
 4be:	12 b8       	out	0x02, r1	; 2
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	81 b9       	out	0x01, r24	; 1
 4c4:	15 b8       	out	0x05, r1	; 5
 4c6:	84 b9       	out	0x04, r24	; 4
 4c8:	88 b9       	out	0x08, r24	; 8
 4ca:	17 b8       	out	0x07, r1	; 7
 4cc:	8b b9       	out	0x0b, r24	; 11
 4ce:	1a b8       	out	0x0a, r1	; 10
 4d0:	8e b9       	out	0x0e, r24	; 14
 4d2:	1d b8       	out	0x0d, r1	; 13
 4d4:	72 98       	cbi	0x0e, 2	; 14
 4d6:	11 ba       	out	0x11, r1	; 17
 4d8:	10 ba       	out	0x10, r1	; 16
 4da:	94 e0       	ldi	r25, 0x04	; 4
 4dc:	94 bb       	out	0x14, r25	; 20
 4de:	93 b3       	in	r25, 0x13	; 19
 4e0:	93 60       	ori	r25, 0x03	; 3
 4e2:	93 bb       	out	0x13, r25	; 19
 4e4:	9d 9a       	sbi	0x13, 5	; 19
 4e6:	97 ec       	ldi	r25, 0xC7	; 199
 4e8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 4ec:	98 e3       	ldi	r25, 0x38	; 56
 4ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 4f2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 4f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 4fa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 4fe:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 502:	8c e3       	ldi	r24, 0x3C	; 60
 504:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 508:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 50c:	78 94       	sei
 50e:	6b de       	rcall	.-810    	; 0x1e6 <startSystemTimeMs>
 510:	a2 df       	rcall	.-188    	; 0x456 <initLcd>
 512:	73 de       	rcall	.-794    	; 0x1fa <initAdc>
 514:	aa de       	rcall	.-684    	; 0x26a <initRgb>
 516:	cc 23       	and	r28, r28
 518:	09 f4       	brne	.+2      	; 0x51c <initBoard+0x84>
 51a:	b8 c0       	rjmp	.+368    	; 0x68c <initBoard+0x1f4>
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	c5 de       	rcall	.-630    	; 0x2aa <lcdLight>
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	6f ef       	ldi	r22, 0xFF	; 255
 526:	73 e0       	ldi	r23, 0x03	; 3
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	87 de       	rcall	.-754    	; 0x23c <rgbWrite>
 52e:	8d e1       	ldi	r24, 0x1D	; 29
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	9f 93       	push	r25
 534:	8f 93       	push	r24
 536:	1f 92       	push	r1
 538:	1f 92       	push	r1
 53a:	3a df       	rcall	.-396    	; 0x3b0 <lcdWriteText>
 53c:	82 e3       	ldi	r24, 0x32	; 50
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	9f 93       	push	r25
 542:	8f 93       	push	r24
 544:	1f 92       	push	r1
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	8f 93       	push	r24
 54a:	32 df       	rcall	.-412    	; 0x3b0 <lcdWriteText>
 54c:	88 e0       	ldi	r24, 0x08	; 8
 54e:	92 e0       	ldi	r25, 0x02	; 2
 550:	9f 93       	push	r25
 552:	8f 93       	push	r24
 554:	1f 92       	push	r1
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	8f 93       	push	r24
 55a:	2a df       	rcall	.-428    	; 0x3b0 <lcdWriteText>
 55c:	87 e4       	ldi	r24, 0x47	; 71
 55e:	92 e0       	ldi	r25, 0x02	; 2
 560:	9f 93       	push	r25
 562:	8f 93       	push	r24
 564:	1f 92       	push	r1
 566:	83 e0       	ldi	r24, 0x03	; 3
 568:	8f 93       	push	r24
 56a:	22 df       	rcall	.-444    	; 0x3b0 <lcdWriteText>
 56c:	8d b7       	in	r24, 0x3d	; 61
 56e:	9e b7       	in	r25, 0x3e	; 62
 570:	40 96       	adiw	r24, 0x10	; 16
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	f8 94       	cli
 576:	9e bf       	out	0x3e, r25	; 62
 578:	0f be       	out	0x3f, r0	; 63
 57a:	8d bf       	out	0x3d, r24	; 61
 57c:	88 24       	eor	r8, r8
 57e:	83 94       	inc	r8
 580:	c0 e0       	ldi	r28, 0x00	; 0
 582:	71 2c       	mov	r7, r1
 584:	99 24       	eor	r9, r9
 586:	93 94       	inc	r9
 588:	d0 e0       	ldi	r29, 0x00	; 0
 58a:	cc 24       	eor	r12, r12
 58c:	c3 94       	inc	r12
 58e:	d1 2c       	mov	r13, r1
 590:	e1 2c       	mov	r14, r1
 592:	68 94       	set
 594:	ff 24       	eor	r15, r15
 596:	f7 f8       	bld	r15, 7
 598:	66 24       	eor	r6, r6
 59a:	63 94       	inc	r6
 59c:	51 2c       	mov	r5, r1
 59e:	09 e0       	ldi	r16, 0x09	; 9
 5a0:	11 e0       	ldi	r17, 0x01	; 1
 5a2:	0f 2e       	mov	r0, r31
 5a4:	fc e5       	ldi	r31, 0x5C	; 92
 5a6:	af 2e       	mov	r10, r31
 5a8:	f2 e0       	ldi	r31, 0x02	; 2
 5aa:	bf 2e       	mov	r11, r31
 5ac:	f0 2d       	mov	r31, r0
 5ae:	0f 2e       	mov	r0, r31
 5b0:	f3 e0       	ldi	r31, 0x03	; 3
 5b2:	4f 2e       	mov	r4, r31
 5b4:	f0 2d       	mov	r31, r0
 5b6:	99 20       	and	r9, r9
 5b8:	49 f0       	breq	.+18     	; 0x5cc <initBoard+0x134>
 5ba:	c7 01       	movw	r24, r14
 5bc:	0d 2e       	mov	r0, r29
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <initBoard+0x12c>
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	0a 94       	dec	r0
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <initBoard+0x128>
 5c8:	09 de       	rcall	.-1006   	; 0x1dc <ledWriteAll>
 5ca:	08 c0       	rjmp	.+16     	; 0x5dc <initBoard+0x144>
 5cc:	c6 01       	movw	r24, r12
 5ce:	0d 2e       	mov	r0, r29
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <initBoard+0x13e>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	0a 94       	dec	r0
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <initBoard+0x13a>
 5da:	00 de       	rcall	.-1024   	; 0x1dc <ledWriteAll>
 5dc:	df 5f       	subi	r29, 0xFF	; 255
 5de:	d1 31       	cpi	r29, 0x11	; 17
 5e0:	28 f0       	brcs	.+10     	; 0x5ec <initBoard+0x154>
 5e2:	86 2d       	mov	r24, r6
 5e4:	91 10       	cpse	r9, r1
 5e6:	85 2d       	mov	r24, r5
 5e8:	98 2e       	mov	r9, r24
 5ea:	d0 e0       	ldi	r29, 0x00	; 0
 5ec:	88 20       	and	r8, r8
 5ee:	11 f0       	breq	.+4      	; 0x5f4 <initBoard+0x15c>
 5f0:	ce 5f       	subi	r28, 0xFE	; 254
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <initBoard+0x15e>
 5f4:	c2 50       	subi	r28, 0x02	; 2
 5f6:	8c 2f       	mov	r24, r28
 5f8:	58 de       	rcall	.-848    	; 0x2aa <lcdLight>
 5fa:	ce 3f       	cpi	r28, 0xFE	; 254
 5fc:	21 f0       	breq	.+8      	; 0x606 <initBoard+0x16e>
 5fe:	c8 37       	cpi	r28, 0x78	; 120
 600:	19 f4       	brne	.+6      	; 0x608 <initBoard+0x170>
 602:	86 2c       	mov	r8, r6
 604:	01 c0       	rjmp	.+2      	; 0x608 <initBoard+0x170>
 606:	85 2c       	mov	r8, r5
 608:	71 10       	cpse	r7, r1
 60a:	3b c0       	rjmp	.+118    	; 0x682 <initBoard+0x1ea>
 60c:	f8 01       	movw	r30, r16
 60e:	80 81       	ld	r24, Z
 610:	83 7c       	andi	r24, 0xC3	; 195
 612:	91 f0       	breq	.+36     	; 0x638 <initBoard+0x1a0>
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	66 e2       	ldi	r22, 0x26	; 38
 61a:	72 e0       	ldi	r23, 0x02	; 2
 61c:	8f ef       	ldi	r24, 0xFF	; 255
 61e:	93 e0       	ldi	r25, 0x03	; 3
 620:	0d de       	rcall	.-998    	; 0x23c <rgbWrite>
 622:	bf 92       	push	r11
 624:	af 92       	push	r10
 626:	1f 92       	push	r1
 628:	4f 92       	push	r4
 62a:	c2 de       	rcall	.-636    	; 0x3b0 <lcdWriteText>
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	76 2c       	mov	r7, r6
 636:	25 c0       	rjmp	.+74     	; 0x682 <initBoard+0x1ea>
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	9c e7       	ldi	r25, 0x7C	; 124
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <initBoard+0x1a4>
 640:	00 c0       	rjmp	.+0      	; 0x642 <initBoard+0x1aa>
 642:	00 00       	nop
 644:	b8 cf       	rjmp	.-144    	; 0x5b6 <initBoard+0x11e>
 646:	f0 de       	rcall	.-544    	; 0x428 <lcdClear>
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	2f de       	rcall	.-930    	; 0x2aa <lcdLight>
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	c5 dd       	rcall	.-1142   	; 0x1dc <ledWriteAll>
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	50 e0       	ldi	r21, 0x00	; 0
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	ee dd       	rcall	.-1060   	; 0x23c <rgbWrite>
 660:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
 664:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
 668:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
 66c:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
 670:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
 674:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
 678:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
 67c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
 680:	05 c0       	rjmp	.+10     	; 0x68c <initBoard+0x1f4>
 682:	f8 01       	movw	r30, r16
 684:	80 81       	ld	r24, Z
 686:	83 7c       	andi	r24, 0xC3	; 195
 688:	b9 f6       	brne	.-82     	; 0x638 <initBoard+0x1a0>
 68a:	dd cf       	rjmp	.-70     	; 0x646 <initBoard+0x1ae>
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	df 90       	pop	r13
 69a:	cf 90       	pop	r12
 69c:	bf 90       	pop	r11
 69e:	af 90       	pop	r10
 6a0:	9f 90       	pop	r9
 6a2:	8f 90       	pop	r8
 6a4:	7f 90       	pop	r7
 6a6:	6f 90       	pop	r6
 6a8:	5f 90       	pop	r5
 6aa:	4f 90       	pop	r4
 6ac:	08 95       	ret

000006ae <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
 6b6:	28 97       	sbiw	r28, 0x08	; 8
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 6c2:	88 e0       	ldi	r24, 0x08	; 8
 6c4:	e0 e0       	ldi	r30, 0x00	; 0
 6c6:	f2 e0       	ldi	r31, 0x02	; 2
 6c8:	de 01       	movw	r26, r28
 6ca:	11 96       	adiw	r26, 0x01	; 1
 6cc:	01 90       	ld	r0, Z+
 6ce:	0d 92       	st	X+, r0
 6d0:	8a 95       	dec	r24
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 6d4:	e5 e0       	ldi	r30, 0x05	; 5
 6d6:	f1 e0       	ldi	r31, 0x01	; 1
 6d8:	80 81       	ld	r24, Z
 6da:	8f 7b       	andi	r24, 0xBF	; 191
 6dc:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 6de:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2725>
 6e2:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2725+0x1>
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	8c 0f       	add	r24, r28
 6ec:	9d 1f       	adc	r25, r29
 6ee:	e8 0f       	add	r30, r24
 6f0:	f9 1f       	adc	r31, r25
 6f2:	80 81       	ld	r24, Z
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
 6fa:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
 6fe:	a2 ef       	ldi	r26, 0xF2	; 242
 700:	b2 e0       	ldi	r27, 0x02	; 2
 702:	22 e8       	ldi	r18, 0x82	; 130
 704:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 706:	e5 e0       	ldi	r30, 0x05	; 5
 708:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 70a:	5e 91       	ld	r21, -X
 70c:	4e 91       	ld	r20, -X
 70e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
 712:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
 716:	84 23       	and	r24, r20
 718:	95 23       	and	r25, r21
 71a:	89 2b       	or	r24, r25
 71c:	21 f0       	breq	.+8      	; 0x726 <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 71e:	80 81       	ld	r24, Z
 720:	80 62       	ori	r24, 0x20	; 32
 722:	80 83       	st	Z, r24
 724:	03 c0       	rjmp	.+6      	; 0x72c <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 726:	80 81       	ld	r24, Z
 728:	8f 7d       	andi	r24, 0xDF	; 223
 72a:	80 83       	st	Z, r24
        }
        CLOCK_1;
 72c:	80 81       	ld	r24, Z
 72e:	80 61       	ori	r24, 0x10	; 16
 730:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 732:	80 81       	ld	r24, Z
 734:	8f 7e       	andi	r24, 0xEF	; 239
 736:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 738:	a2 17       	cp	r26, r18
 73a:	b3 07       	cpc	r27, r19
 73c:	31 f7       	brne	.-52     	; 0x70a <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 73e:	e5 e0       	ldi	r30, 0x05	; 5
 740:	f1 e0       	ldi	r31, 0x01	; 1
 742:	80 81       	ld	r24, Z
 744:	87 7f       	andi	r24, 0xF7	; 247
 746:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 748:	80 81       	ld	r24, Z
 74a:	88 7f       	andi	r24, 0xF8	; 248
 74c:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 74e:	90 81       	ld	r25, Z
 750:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2725>
 754:	89 2b       	or	r24, r25
 756:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 758:	80 81       	ld	r24, Z
 75a:	80 64       	ori	r24, 0x40	; 64
 75c:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 75e:	80 81       	ld	r24, Z
 760:	88 60       	ori	r24, 0x08	; 8
 762:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 764:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2725>
 768:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2725+0x1>
 76c:	87 30       	cpi	r24, 0x07	; 7
 76e:	91 05       	cpc	r25, r1
 770:	30 f4       	brcc	.+12     	; 0x77e <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2725+0x1>
 778:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2725>
 77c:	07 c0       	rjmp	.+14     	; 0x78c <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
 77e:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2725+0x1>
 782:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2725>
        writeTextFinished = 1;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
 78c:	28 96       	adiw	r28, 0x08	; 8
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

0000079e <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	0b b6       	in	r0, 0x3b	; 59
 7aa:	0f 92       	push	r0
 7ac:	2f 93       	push	r18
 7ae:	3f 93       	push	r19
 7b0:	4f 93       	push	r20
 7b2:	5f 93       	push	r21
 7b4:	6f 93       	push	r22
 7b6:	7f 93       	push	r23
 7b8:	8f 93       	push	r24
 7ba:	9f 93       	push	r25
 7bc:	af 93       	push	r26
 7be:	bf 93       	push	r27
 7c0:	ef 93       	push	r30
 7c2:	ff 93       	push	r31
    systemTimeMs += 1;
 7c4:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
 7c8:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
 7cc:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
 7d0:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
 7d4:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
 7d8:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
 7dc:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
 7e0:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
 7e4:	a1 e0       	ldi	r26, 0x01	; 1
 7e6:	27 d0       	rcall	.+78     	; 0x836 <__adddi3_s8>
 7e8:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
 7ec:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
 7f0:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
 7f4:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
 7f8:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
 7fc:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
 800:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
 804:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 808:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
 80c:	81 11       	cpse	r24, r1
 80e:	4f df       	rcall	.-354    	; 0x6ae <matrixWriteNextLine>
}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0b be       	out	0x3b, r0	; 59
 82c:	0f 90       	pop	r0
 82e:	0f be       	out	0x3f, r0	; 63
 830:	0f 90       	pop	r0
 832:	1f 90       	pop	r1
 834:	18 95       	reti

00000836 <__adddi3_s8>:
 836:	00 24       	eor	r0, r0
 838:	a7 fd       	sbrc	r26, 7
 83a:	00 94       	com	r0
 83c:	2a 0f       	add	r18, r26
 83e:	30 1d       	adc	r19, r0
 840:	40 1d       	adc	r20, r0
 842:	50 1d       	adc	r21, r0
 844:	60 1d       	adc	r22, r0
 846:	70 1d       	adc	r23, r0
 848:	80 1d       	adc	r24, r0
 84a:	90 1d       	adc	r25, r0
 84c:	08 95       	ret

0000084e <vsnprintf>:
 84e:	0f 93       	push	r16
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62
 85a:	2e 97       	sbiw	r28, 0x0e	; 14
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	8c 01       	movw	r16, r24
 868:	fa 01       	movw	r30, r20
 86a:	86 e0       	ldi	r24, 0x06	; 6
 86c:	8c 83       	std	Y+4, r24	; 0x04
 86e:	1a 83       	std	Y+2, r17	; 0x02
 870:	09 83       	std	Y+1, r16	; 0x01
 872:	77 ff       	sbrs	r23, 7
 874:	02 c0       	rjmp	.+4      	; 0x87a <vsnprintf+0x2c>
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	70 e8       	ldi	r23, 0x80	; 128
 87a:	cb 01       	movw	r24, r22
 87c:	01 97       	sbiw	r24, 0x01	; 1
 87e:	9e 83       	std	Y+6, r25	; 0x06
 880:	8d 83       	std	Y+5, r24	; 0x05
 882:	a9 01       	movw	r20, r18
 884:	bf 01       	movw	r22, r30
 886:	ce 01       	movw	r24, r28
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	19 d0       	rcall	.+50     	; 0x8be <vfprintf>
 88c:	4d 81       	ldd	r20, Y+5	; 0x05
 88e:	5e 81       	ldd	r21, Y+6	; 0x06
 890:	57 fd       	sbrc	r21, 7
 892:	0a c0       	rjmp	.+20     	; 0x8a8 <vsnprintf+0x5a>
 894:	2f 81       	ldd	r18, Y+7	; 0x07
 896:	38 85       	ldd	r19, Y+8	; 0x08
 898:	42 17       	cp	r20, r18
 89a:	53 07       	cpc	r21, r19
 89c:	0c f4       	brge	.+2      	; 0x8a0 <vsnprintf+0x52>
 89e:	9a 01       	movw	r18, r20
 8a0:	f8 01       	movw	r30, r16
 8a2:	e2 0f       	add	r30, r18
 8a4:	f3 1f       	adc	r31, r19
 8a6:	10 82       	st	Z, r1
 8a8:	2e 96       	adiw	r28, 0x0e	; 14
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	f8 94       	cli
 8ae:	de bf       	out	0x3e, r29	; 62
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	cd bf       	out	0x3d, r28	; 61
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	1f 91       	pop	r17
 8ba:	0f 91       	pop	r16
 8bc:	08 95       	ret

000008be <vfprintf>:
 8be:	2f 92       	push	r2
 8c0:	3f 92       	push	r3
 8c2:	4f 92       	push	r4
 8c4:	5f 92       	push	r5
 8c6:	6f 92       	push	r6
 8c8:	7f 92       	push	r7
 8ca:	8f 92       	push	r8
 8cc:	9f 92       	push	r9
 8ce:	af 92       	push	r10
 8d0:	bf 92       	push	r11
 8d2:	cf 92       	push	r12
 8d4:	df 92       	push	r13
 8d6:	ef 92       	push	r14
 8d8:	ff 92       	push	r15
 8da:	0f 93       	push	r16
 8dc:	1f 93       	push	r17
 8de:	cf 93       	push	r28
 8e0:	df 93       	push	r29
 8e2:	cd b7       	in	r28, 0x3d	; 61
 8e4:	de b7       	in	r29, 0x3e	; 62
 8e6:	2b 97       	sbiw	r28, 0x0b	; 11
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	f8 94       	cli
 8ec:	de bf       	out	0x3e, r29	; 62
 8ee:	0f be       	out	0x3f, r0	; 63
 8f0:	cd bf       	out	0x3d, r28	; 61
 8f2:	6c 01       	movw	r12, r24
 8f4:	7b 01       	movw	r14, r22
 8f6:	8a 01       	movw	r16, r20
 8f8:	fc 01       	movw	r30, r24
 8fa:	17 82       	std	Z+7, r1	; 0x07
 8fc:	16 82       	std	Z+6, r1	; 0x06
 8fe:	83 81       	ldd	r24, Z+3	; 0x03
 900:	81 ff       	sbrs	r24, 1
 902:	bf c1       	rjmp	.+894    	; 0xc82 <vfprintf+0x3c4>
 904:	ce 01       	movw	r24, r28
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	3c 01       	movw	r6, r24
 90a:	f6 01       	movw	r30, r12
 90c:	93 81       	ldd	r25, Z+3	; 0x03
 90e:	f7 01       	movw	r30, r14
 910:	93 fd       	sbrc	r25, 3
 912:	85 91       	lpm	r24, Z+
 914:	93 ff       	sbrs	r25, 3
 916:	81 91       	ld	r24, Z+
 918:	7f 01       	movw	r14, r30
 91a:	88 23       	and	r24, r24
 91c:	09 f4       	brne	.+2      	; 0x920 <vfprintf+0x62>
 91e:	ad c1       	rjmp	.+858    	; 0xc7a <vfprintf+0x3bc>
 920:	85 32       	cpi	r24, 0x25	; 37
 922:	39 f4       	brne	.+14     	; 0x932 <vfprintf+0x74>
 924:	93 fd       	sbrc	r25, 3
 926:	85 91       	lpm	r24, Z+
 928:	93 ff       	sbrs	r25, 3
 92a:	81 91       	ld	r24, Z+
 92c:	7f 01       	movw	r14, r30
 92e:	85 32       	cpi	r24, 0x25	; 37
 930:	21 f4       	brne	.+8      	; 0x93a <vfprintf+0x7c>
 932:	b6 01       	movw	r22, r12
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	d6 d1       	rcall	.+940    	; 0xce4 <fputc>
 938:	e8 cf       	rjmp	.-48     	; 0x90a <vfprintf+0x4c>
 93a:	91 2c       	mov	r9, r1
 93c:	21 2c       	mov	r2, r1
 93e:	31 2c       	mov	r3, r1
 940:	ff e1       	ldi	r31, 0x1F	; 31
 942:	f3 15       	cp	r31, r3
 944:	d8 f0       	brcs	.+54     	; 0x97c <vfprintf+0xbe>
 946:	8b 32       	cpi	r24, 0x2B	; 43
 948:	79 f0       	breq	.+30     	; 0x968 <vfprintf+0xaa>
 94a:	38 f4       	brcc	.+14     	; 0x95a <vfprintf+0x9c>
 94c:	80 32       	cpi	r24, 0x20	; 32
 94e:	79 f0       	breq	.+30     	; 0x96e <vfprintf+0xb0>
 950:	83 32       	cpi	r24, 0x23	; 35
 952:	a1 f4       	brne	.+40     	; 0x97c <vfprintf+0xbe>
 954:	23 2d       	mov	r18, r3
 956:	20 61       	ori	r18, 0x10	; 16
 958:	1d c0       	rjmp	.+58     	; 0x994 <vfprintf+0xd6>
 95a:	8d 32       	cpi	r24, 0x2D	; 45
 95c:	61 f0       	breq	.+24     	; 0x976 <vfprintf+0xb8>
 95e:	80 33       	cpi	r24, 0x30	; 48
 960:	69 f4       	brne	.+26     	; 0x97c <vfprintf+0xbe>
 962:	23 2d       	mov	r18, r3
 964:	21 60       	ori	r18, 0x01	; 1
 966:	16 c0       	rjmp	.+44     	; 0x994 <vfprintf+0xd6>
 968:	83 2d       	mov	r24, r3
 96a:	82 60       	ori	r24, 0x02	; 2
 96c:	38 2e       	mov	r3, r24
 96e:	e3 2d       	mov	r30, r3
 970:	e4 60       	ori	r30, 0x04	; 4
 972:	3e 2e       	mov	r3, r30
 974:	2a c0       	rjmp	.+84     	; 0x9ca <vfprintf+0x10c>
 976:	f3 2d       	mov	r31, r3
 978:	f8 60       	ori	r31, 0x08	; 8
 97a:	1d c0       	rjmp	.+58     	; 0x9b6 <vfprintf+0xf8>
 97c:	37 fc       	sbrc	r3, 7
 97e:	2d c0       	rjmp	.+90     	; 0x9da <vfprintf+0x11c>
 980:	20 ed       	ldi	r18, 0xD0	; 208
 982:	28 0f       	add	r18, r24
 984:	2a 30       	cpi	r18, 0x0A	; 10
 986:	40 f0       	brcs	.+16     	; 0x998 <vfprintf+0xda>
 988:	8e 32       	cpi	r24, 0x2E	; 46
 98a:	b9 f4       	brne	.+46     	; 0x9ba <vfprintf+0xfc>
 98c:	36 fc       	sbrc	r3, 6
 98e:	75 c1       	rjmp	.+746    	; 0xc7a <vfprintf+0x3bc>
 990:	23 2d       	mov	r18, r3
 992:	20 64       	ori	r18, 0x40	; 64
 994:	32 2e       	mov	r3, r18
 996:	19 c0       	rjmp	.+50     	; 0x9ca <vfprintf+0x10c>
 998:	36 fe       	sbrs	r3, 6
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <vfprintf+0xea>
 99c:	8a e0       	ldi	r24, 0x0A	; 10
 99e:	98 9e       	mul	r9, r24
 9a0:	20 0d       	add	r18, r0
 9a2:	11 24       	eor	r1, r1
 9a4:	92 2e       	mov	r9, r18
 9a6:	11 c0       	rjmp	.+34     	; 0x9ca <vfprintf+0x10c>
 9a8:	ea e0       	ldi	r30, 0x0A	; 10
 9aa:	2e 9e       	mul	r2, r30
 9ac:	20 0d       	add	r18, r0
 9ae:	11 24       	eor	r1, r1
 9b0:	22 2e       	mov	r2, r18
 9b2:	f3 2d       	mov	r31, r3
 9b4:	f0 62       	ori	r31, 0x20	; 32
 9b6:	3f 2e       	mov	r3, r31
 9b8:	08 c0       	rjmp	.+16     	; 0x9ca <vfprintf+0x10c>
 9ba:	8c 36       	cpi	r24, 0x6C	; 108
 9bc:	21 f4       	brne	.+8      	; 0x9c6 <vfprintf+0x108>
 9be:	83 2d       	mov	r24, r3
 9c0:	80 68       	ori	r24, 0x80	; 128
 9c2:	38 2e       	mov	r3, r24
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <vfprintf+0x10c>
 9c6:	88 36       	cpi	r24, 0x68	; 104
 9c8:	41 f4       	brne	.+16     	; 0x9da <vfprintf+0x11c>
 9ca:	f7 01       	movw	r30, r14
 9cc:	93 fd       	sbrc	r25, 3
 9ce:	85 91       	lpm	r24, Z+
 9d0:	93 ff       	sbrs	r25, 3
 9d2:	81 91       	ld	r24, Z+
 9d4:	7f 01       	movw	r14, r30
 9d6:	81 11       	cpse	r24, r1
 9d8:	b3 cf       	rjmp	.-154    	; 0x940 <vfprintf+0x82>
 9da:	98 2f       	mov	r25, r24
 9dc:	9f 7d       	andi	r25, 0xDF	; 223
 9de:	95 54       	subi	r25, 0x45	; 69
 9e0:	93 30       	cpi	r25, 0x03	; 3
 9e2:	28 f4       	brcc	.+10     	; 0x9ee <vfprintf+0x130>
 9e4:	0c 5f       	subi	r16, 0xFC	; 252
 9e6:	1f 4f       	sbci	r17, 0xFF	; 255
 9e8:	9f e3       	ldi	r25, 0x3F	; 63
 9ea:	99 83       	std	Y+1, r25	; 0x01
 9ec:	0d c0       	rjmp	.+26     	; 0xa08 <vfprintf+0x14a>
 9ee:	83 36       	cpi	r24, 0x63	; 99
 9f0:	31 f0       	breq	.+12     	; 0x9fe <vfprintf+0x140>
 9f2:	83 37       	cpi	r24, 0x73	; 115
 9f4:	71 f0       	breq	.+28     	; 0xa12 <vfprintf+0x154>
 9f6:	83 35       	cpi	r24, 0x53	; 83
 9f8:	09 f0       	breq	.+2      	; 0x9fc <vfprintf+0x13e>
 9fa:	55 c0       	rjmp	.+170    	; 0xaa6 <vfprintf+0x1e8>
 9fc:	20 c0       	rjmp	.+64     	; 0xa3e <vfprintf+0x180>
 9fe:	f8 01       	movw	r30, r16
 a00:	80 81       	ld	r24, Z
 a02:	89 83       	std	Y+1, r24	; 0x01
 a04:	0e 5f       	subi	r16, 0xFE	; 254
 a06:	1f 4f       	sbci	r17, 0xFF	; 255
 a08:	88 24       	eor	r8, r8
 a0a:	83 94       	inc	r8
 a0c:	91 2c       	mov	r9, r1
 a0e:	53 01       	movw	r10, r6
 a10:	12 c0       	rjmp	.+36     	; 0xa36 <vfprintf+0x178>
 a12:	28 01       	movw	r4, r16
 a14:	f2 e0       	ldi	r31, 0x02	; 2
 a16:	4f 0e       	add	r4, r31
 a18:	51 1c       	adc	r5, r1
 a1a:	f8 01       	movw	r30, r16
 a1c:	a0 80       	ld	r10, Z
 a1e:	b1 80       	ldd	r11, Z+1	; 0x01
 a20:	36 fe       	sbrs	r3, 6
 a22:	03 c0       	rjmp	.+6      	; 0xa2a <vfprintf+0x16c>
 a24:	69 2d       	mov	r22, r9
 a26:	70 e0       	ldi	r23, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <vfprintf+0x170>
 a2a:	6f ef       	ldi	r22, 0xFF	; 255
 a2c:	7f ef       	ldi	r23, 0xFF	; 255
 a2e:	c5 01       	movw	r24, r10
 a30:	4e d1       	rcall	.+668    	; 0xcce <strnlen>
 a32:	4c 01       	movw	r8, r24
 a34:	82 01       	movw	r16, r4
 a36:	f3 2d       	mov	r31, r3
 a38:	ff 77       	andi	r31, 0x7F	; 127
 a3a:	3f 2e       	mov	r3, r31
 a3c:	15 c0       	rjmp	.+42     	; 0xa68 <vfprintf+0x1aa>
 a3e:	28 01       	movw	r4, r16
 a40:	22 e0       	ldi	r18, 0x02	; 2
 a42:	42 0e       	add	r4, r18
 a44:	51 1c       	adc	r5, r1
 a46:	f8 01       	movw	r30, r16
 a48:	a0 80       	ld	r10, Z
 a4a:	b1 80       	ldd	r11, Z+1	; 0x01
 a4c:	36 fe       	sbrs	r3, 6
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <vfprintf+0x198>
 a50:	69 2d       	mov	r22, r9
 a52:	70 e0       	ldi	r23, 0x00	; 0
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <vfprintf+0x19c>
 a56:	6f ef       	ldi	r22, 0xFF	; 255
 a58:	7f ef       	ldi	r23, 0xFF	; 255
 a5a:	c5 01       	movw	r24, r10
 a5c:	2d d1       	rcall	.+602    	; 0xcb8 <strnlen_P>
 a5e:	4c 01       	movw	r8, r24
 a60:	f3 2d       	mov	r31, r3
 a62:	f0 68       	ori	r31, 0x80	; 128
 a64:	3f 2e       	mov	r3, r31
 a66:	82 01       	movw	r16, r4
 a68:	33 fc       	sbrc	r3, 3
 a6a:	19 c0       	rjmp	.+50     	; 0xa9e <vfprintf+0x1e0>
 a6c:	82 2d       	mov	r24, r2
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	88 16       	cp	r8, r24
 a72:	99 06       	cpc	r9, r25
 a74:	a0 f4       	brcc	.+40     	; 0xa9e <vfprintf+0x1e0>
 a76:	b6 01       	movw	r22, r12
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	33 d1       	rcall	.+614    	; 0xce4 <fputc>
 a7e:	2a 94       	dec	r2
 a80:	f5 cf       	rjmp	.-22     	; 0xa6c <vfprintf+0x1ae>
 a82:	f5 01       	movw	r30, r10
 a84:	37 fc       	sbrc	r3, 7
 a86:	85 91       	lpm	r24, Z+
 a88:	37 fe       	sbrs	r3, 7
 a8a:	81 91       	ld	r24, Z+
 a8c:	5f 01       	movw	r10, r30
 a8e:	b6 01       	movw	r22, r12
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	28 d1       	rcall	.+592    	; 0xce4 <fputc>
 a94:	21 10       	cpse	r2, r1
 a96:	2a 94       	dec	r2
 a98:	21 e0       	ldi	r18, 0x01	; 1
 a9a:	82 1a       	sub	r8, r18
 a9c:	91 08       	sbc	r9, r1
 a9e:	81 14       	cp	r8, r1
 aa0:	91 04       	cpc	r9, r1
 aa2:	79 f7       	brne	.-34     	; 0xa82 <vfprintf+0x1c4>
 aa4:	e1 c0       	rjmp	.+450    	; 0xc68 <vfprintf+0x3aa>
 aa6:	84 36       	cpi	r24, 0x64	; 100
 aa8:	11 f0       	breq	.+4      	; 0xaae <vfprintf+0x1f0>
 aaa:	89 36       	cpi	r24, 0x69	; 105
 aac:	39 f5       	brne	.+78     	; 0xafc <vfprintf+0x23e>
 aae:	f8 01       	movw	r30, r16
 ab0:	37 fe       	sbrs	r3, 7
 ab2:	07 c0       	rjmp	.+14     	; 0xac2 <vfprintf+0x204>
 ab4:	60 81       	ld	r22, Z
 ab6:	71 81       	ldd	r23, Z+1	; 0x01
 ab8:	82 81       	ldd	r24, Z+2	; 0x02
 aba:	93 81       	ldd	r25, Z+3	; 0x03
 abc:	0c 5f       	subi	r16, 0xFC	; 252
 abe:	1f 4f       	sbci	r17, 0xFF	; 255
 ac0:	08 c0       	rjmp	.+16     	; 0xad2 <vfprintf+0x214>
 ac2:	60 81       	ld	r22, Z
 ac4:	71 81       	ldd	r23, Z+1	; 0x01
 ac6:	07 2e       	mov	r0, r23
 ac8:	00 0c       	add	r0, r0
 aca:	88 0b       	sbc	r24, r24
 acc:	99 0b       	sbc	r25, r25
 ace:	0e 5f       	subi	r16, 0xFE	; 254
 ad0:	1f 4f       	sbci	r17, 0xFF	; 255
 ad2:	f3 2d       	mov	r31, r3
 ad4:	ff 76       	andi	r31, 0x6F	; 111
 ad6:	3f 2e       	mov	r3, r31
 ad8:	97 ff       	sbrs	r25, 7
 ada:	09 c0       	rjmp	.+18     	; 0xaee <vfprintf+0x230>
 adc:	90 95       	com	r25
 ade:	80 95       	com	r24
 ae0:	70 95       	com	r23
 ae2:	61 95       	neg	r22
 ae4:	7f 4f       	sbci	r23, 0xFF	; 255
 ae6:	8f 4f       	sbci	r24, 0xFF	; 255
 ae8:	9f 4f       	sbci	r25, 0xFF	; 255
 aea:	f0 68       	ori	r31, 0x80	; 128
 aec:	3f 2e       	mov	r3, r31
 aee:	2a e0       	ldi	r18, 0x0A	; 10
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	a3 01       	movw	r20, r6
 af4:	33 d1       	rcall	.+614    	; 0xd5c <__ultoa_invert>
 af6:	88 2e       	mov	r8, r24
 af8:	86 18       	sub	r8, r6
 afa:	44 c0       	rjmp	.+136    	; 0xb84 <vfprintf+0x2c6>
 afc:	85 37       	cpi	r24, 0x75	; 117
 afe:	31 f4       	brne	.+12     	; 0xb0c <vfprintf+0x24e>
 b00:	23 2d       	mov	r18, r3
 b02:	2f 7e       	andi	r18, 0xEF	; 239
 b04:	b2 2e       	mov	r11, r18
 b06:	2a e0       	ldi	r18, 0x0A	; 10
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	25 c0       	rjmp	.+74     	; 0xb56 <vfprintf+0x298>
 b0c:	93 2d       	mov	r25, r3
 b0e:	99 7f       	andi	r25, 0xF9	; 249
 b10:	b9 2e       	mov	r11, r25
 b12:	8f 36       	cpi	r24, 0x6F	; 111
 b14:	c1 f0       	breq	.+48     	; 0xb46 <vfprintf+0x288>
 b16:	18 f4       	brcc	.+6      	; 0xb1e <vfprintf+0x260>
 b18:	88 35       	cpi	r24, 0x58	; 88
 b1a:	79 f0       	breq	.+30     	; 0xb3a <vfprintf+0x27c>
 b1c:	ae c0       	rjmp	.+348    	; 0xc7a <vfprintf+0x3bc>
 b1e:	80 37       	cpi	r24, 0x70	; 112
 b20:	19 f0       	breq	.+6      	; 0xb28 <vfprintf+0x26a>
 b22:	88 37       	cpi	r24, 0x78	; 120
 b24:	21 f0       	breq	.+8      	; 0xb2e <vfprintf+0x270>
 b26:	a9 c0       	rjmp	.+338    	; 0xc7a <vfprintf+0x3bc>
 b28:	e9 2f       	mov	r30, r25
 b2a:	e0 61       	ori	r30, 0x10	; 16
 b2c:	be 2e       	mov	r11, r30
 b2e:	b4 fe       	sbrs	r11, 4
 b30:	0d c0       	rjmp	.+26     	; 0xb4c <vfprintf+0x28e>
 b32:	fb 2d       	mov	r31, r11
 b34:	f4 60       	ori	r31, 0x04	; 4
 b36:	bf 2e       	mov	r11, r31
 b38:	09 c0       	rjmp	.+18     	; 0xb4c <vfprintf+0x28e>
 b3a:	34 fe       	sbrs	r3, 4
 b3c:	0a c0       	rjmp	.+20     	; 0xb52 <vfprintf+0x294>
 b3e:	29 2f       	mov	r18, r25
 b40:	26 60       	ori	r18, 0x06	; 6
 b42:	b2 2e       	mov	r11, r18
 b44:	06 c0       	rjmp	.+12     	; 0xb52 <vfprintf+0x294>
 b46:	28 e0       	ldi	r18, 0x08	; 8
 b48:	30 e0       	ldi	r19, 0x00	; 0
 b4a:	05 c0       	rjmp	.+10     	; 0xb56 <vfprintf+0x298>
 b4c:	20 e1       	ldi	r18, 0x10	; 16
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <vfprintf+0x298>
 b52:	20 e1       	ldi	r18, 0x10	; 16
 b54:	32 e0       	ldi	r19, 0x02	; 2
 b56:	f8 01       	movw	r30, r16
 b58:	b7 fe       	sbrs	r11, 7
 b5a:	07 c0       	rjmp	.+14     	; 0xb6a <vfprintf+0x2ac>
 b5c:	60 81       	ld	r22, Z
 b5e:	71 81       	ldd	r23, Z+1	; 0x01
 b60:	82 81       	ldd	r24, Z+2	; 0x02
 b62:	93 81       	ldd	r25, Z+3	; 0x03
 b64:	0c 5f       	subi	r16, 0xFC	; 252
 b66:	1f 4f       	sbci	r17, 0xFF	; 255
 b68:	06 c0       	rjmp	.+12     	; 0xb76 <vfprintf+0x2b8>
 b6a:	60 81       	ld	r22, Z
 b6c:	71 81       	ldd	r23, Z+1	; 0x01
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	0e 5f       	subi	r16, 0xFE	; 254
 b74:	1f 4f       	sbci	r17, 0xFF	; 255
 b76:	a3 01       	movw	r20, r6
 b78:	f1 d0       	rcall	.+482    	; 0xd5c <__ultoa_invert>
 b7a:	88 2e       	mov	r8, r24
 b7c:	86 18       	sub	r8, r6
 b7e:	fb 2d       	mov	r31, r11
 b80:	ff 77       	andi	r31, 0x7F	; 127
 b82:	3f 2e       	mov	r3, r31
 b84:	36 fe       	sbrs	r3, 6
 b86:	0d c0       	rjmp	.+26     	; 0xba2 <vfprintf+0x2e4>
 b88:	23 2d       	mov	r18, r3
 b8a:	2e 7f       	andi	r18, 0xFE	; 254
 b8c:	a2 2e       	mov	r10, r18
 b8e:	89 14       	cp	r8, r9
 b90:	58 f4       	brcc	.+22     	; 0xba8 <vfprintf+0x2ea>
 b92:	34 fe       	sbrs	r3, 4
 b94:	0b c0       	rjmp	.+22     	; 0xbac <vfprintf+0x2ee>
 b96:	32 fc       	sbrc	r3, 2
 b98:	09 c0       	rjmp	.+18     	; 0xbac <vfprintf+0x2ee>
 b9a:	83 2d       	mov	r24, r3
 b9c:	8e 7e       	andi	r24, 0xEE	; 238
 b9e:	a8 2e       	mov	r10, r24
 ba0:	05 c0       	rjmp	.+10     	; 0xbac <vfprintf+0x2ee>
 ba2:	b8 2c       	mov	r11, r8
 ba4:	a3 2c       	mov	r10, r3
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <vfprintf+0x2f0>
 ba8:	b8 2c       	mov	r11, r8
 baa:	01 c0       	rjmp	.+2      	; 0xbae <vfprintf+0x2f0>
 bac:	b9 2c       	mov	r11, r9
 bae:	a4 fe       	sbrs	r10, 4
 bb0:	0f c0       	rjmp	.+30     	; 0xbd0 <vfprintf+0x312>
 bb2:	fe 01       	movw	r30, r28
 bb4:	e8 0d       	add	r30, r8
 bb6:	f1 1d       	adc	r31, r1
 bb8:	80 81       	ld	r24, Z
 bba:	80 33       	cpi	r24, 0x30	; 48
 bbc:	21 f4       	brne	.+8      	; 0xbc6 <vfprintf+0x308>
 bbe:	9a 2d       	mov	r25, r10
 bc0:	99 7e       	andi	r25, 0xE9	; 233
 bc2:	a9 2e       	mov	r10, r25
 bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <vfprintf+0x31a>
 bc6:	a2 fe       	sbrs	r10, 2
 bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <vfprintf+0x318>
 bca:	b3 94       	inc	r11
 bcc:	b3 94       	inc	r11
 bce:	04 c0       	rjmp	.+8      	; 0xbd8 <vfprintf+0x31a>
 bd0:	8a 2d       	mov	r24, r10
 bd2:	86 78       	andi	r24, 0x86	; 134
 bd4:	09 f0       	breq	.+2      	; 0xbd8 <vfprintf+0x31a>
 bd6:	b3 94       	inc	r11
 bd8:	a3 fc       	sbrc	r10, 3
 bda:	10 c0       	rjmp	.+32     	; 0xbfc <vfprintf+0x33e>
 bdc:	a0 fe       	sbrs	r10, 0
 bde:	06 c0       	rjmp	.+12     	; 0xbec <vfprintf+0x32e>
 be0:	b2 14       	cp	r11, r2
 be2:	80 f4       	brcc	.+32     	; 0xc04 <vfprintf+0x346>
 be4:	28 0c       	add	r2, r8
 be6:	92 2c       	mov	r9, r2
 be8:	9b 18       	sub	r9, r11
 bea:	0d c0       	rjmp	.+26     	; 0xc06 <vfprintf+0x348>
 bec:	b2 14       	cp	r11, r2
 bee:	58 f4       	brcc	.+22     	; 0xc06 <vfprintf+0x348>
 bf0:	b6 01       	movw	r22, r12
 bf2:	80 e2       	ldi	r24, 0x20	; 32
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	76 d0       	rcall	.+236    	; 0xce4 <fputc>
 bf8:	b3 94       	inc	r11
 bfa:	f8 cf       	rjmp	.-16     	; 0xbec <vfprintf+0x32e>
 bfc:	b2 14       	cp	r11, r2
 bfe:	18 f4       	brcc	.+6      	; 0xc06 <vfprintf+0x348>
 c00:	2b 18       	sub	r2, r11
 c02:	02 c0       	rjmp	.+4      	; 0xc08 <vfprintf+0x34a>
 c04:	98 2c       	mov	r9, r8
 c06:	21 2c       	mov	r2, r1
 c08:	a4 fe       	sbrs	r10, 4
 c0a:	0f c0       	rjmp	.+30     	; 0xc2a <vfprintf+0x36c>
 c0c:	b6 01       	movw	r22, r12
 c0e:	80 e3       	ldi	r24, 0x30	; 48
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	68 d0       	rcall	.+208    	; 0xce4 <fputc>
 c14:	a2 fe       	sbrs	r10, 2
 c16:	16 c0       	rjmp	.+44     	; 0xc44 <vfprintf+0x386>
 c18:	a1 fc       	sbrc	r10, 1
 c1a:	03 c0       	rjmp	.+6      	; 0xc22 <vfprintf+0x364>
 c1c:	88 e7       	ldi	r24, 0x78	; 120
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <vfprintf+0x368>
 c22:	88 e5       	ldi	r24, 0x58	; 88
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	b6 01       	movw	r22, r12
 c28:	0c c0       	rjmp	.+24     	; 0xc42 <vfprintf+0x384>
 c2a:	8a 2d       	mov	r24, r10
 c2c:	86 78       	andi	r24, 0x86	; 134
 c2e:	51 f0       	breq	.+20     	; 0xc44 <vfprintf+0x386>
 c30:	a1 fe       	sbrs	r10, 1
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <vfprintf+0x37a>
 c34:	8b e2       	ldi	r24, 0x2B	; 43
 c36:	01 c0       	rjmp	.+2      	; 0xc3a <vfprintf+0x37c>
 c38:	80 e2       	ldi	r24, 0x20	; 32
 c3a:	a7 fc       	sbrc	r10, 7
 c3c:	8d e2       	ldi	r24, 0x2D	; 45
 c3e:	b6 01       	movw	r22, r12
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	50 d0       	rcall	.+160    	; 0xce4 <fputc>
 c44:	89 14       	cp	r8, r9
 c46:	30 f4       	brcc	.+12     	; 0xc54 <vfprintf+0x396>
 c48:	b6 01       	movw	r22, r12
 c4a:	80 e3       	ldi	r24, 0x30	; 48
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	4a d0       	rcall	.+148    	; 0xce4 <fputc>
 c50:	9a 94       	dec	r9
 c52:	f8 cf       	rjmp	.-16     	; 0xc44 <vfprintf+0x386>
 c54:	8a 94       	dec	r8
 c56:	f3 01       	movw	r30, r6
 c58:	e8 0d       	add	r30, r8
 c5a:	f1 1d       	adc	r31, r1
 c5c:	80 81       	ld	r24, Z
 c5e:	b6 01       	movw	r22, r12
 c60:	90 e0       	ldi	r25, 0x00	; 0
 c62:	40 d0       	rcall	.+128    	; 0xce4 <fputc>
 c64:	81 10       	cpse	r8, r1
 c66:	f6 cf       	rjmp	.-20     	; 0xc54 <vfprintf+0x396>
 c68:	22 20       	and	r2, r2
 c6a:	09 f4       	brne	.+2      	; 0xc6e <vfprintf+0x3b0>
 c6c:	4e ce       	rjmp	.-868    	; 0x90a <vfprintf+0x4c>
 c6e:	b6 01       	movw	r22, r12
 c70:	80 e2       	ldi	r24, 0x20	; 32
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	37 d0       	rcall	.+110    	; 0xce4 <fputc>
 c76:	2a 94       	dec	r2
 c78:	f7 cf       	rjmp	.-18     	; 0xc68 <vfprintf+0x3aa>
 c7a:	f6 01       	movw	r30, r12
 c7c:	86 81       	ldd	r24, Z+6	; 0x06
 c7e:	97 81       	ldd	r25, Z+7	; 0x07
 c80:	02 c0       	rjmp	.+4      	; 0xc86 <vfprintf+0x3c8>
 c82:	8f ef       	ldi	r24, 0xFF	; 255
 c84:	9f ef       	ldi	r25, 0xFF	; 255
 c86:	2b 96       	adiw	r28, 0x0b	; 11
 c88:	0f b6       	in	r0, 0x3f	; 63
 c8a:	f8 94       	cli
 c8c:	de bf       	out	0x3e, r29	; 62
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	cd bf       	out	0x3d, r28	; 61
 c92:	df 91       	pop	r29
 c94:	cf 91       	pop	r28
 c96:	1f 91       	pop	r17
 c98:	0f 91       	pop	r16
 c9a:	ff 90       	pop	r15
 c9c:	ef 90       	pop	r14
 c9e:	df 90       	pop	r13
 ca0:	cf 90       	pop	r12
 ca2:	bf 90       	pop	r11
 ca4:	af 90       	pop	r10
 ca6:	9f 90       	pop	r9
 ca8:	8f 90       	pop	r8
 caa:	7f 90       	pop	r7
 cac:	6f 90       	pop	r6
 cae:	5f 90       	pop	r5
 cb0:	4f 90       	pop	r4
 cb2:	3f 90       	pop	r3
 cb4:	2f 90       	pop	r2
 cb6:	08 95       	ret

00000cb8 <strnlen_P>:
 cb8:	fc 01       	movw	r30, r24
 cba:	05 90       	lpm	r0, Z+
 cbc:	61 50       	subi	r22, 0x01	; 1
 cbe:	70 40       	sbci	r23, 0x00	; 0
 cc0:	01 10       	cpse	r0, r1
 cc2:	d8 f7       	brcc	.-10     	; 0xcba <strnlen_P+0x2>
 cc4:	80 95       	com	r24
 cc6:	90 95       	com	r25
 cc8:	8e 0f       	add	r24, r30
 cca:	9f 1f       	adc	r25, r31
 ccc:	08 95       	ret

00000cce <strnlen>:
 cce:	fc 01       	movw	r30, r24
 cd0:	61 50       	subi	r22, 0x01	; 1
 cd2:	70 40       	sbci	r23, 0x00	; 0
 cd4:	01 90       	ld	r0, Z+
 cd6:	01 10       	cpse	r0, r1
 cd8:	d8 f7       	brcc	.-10     	; 0xcd0 <strnlen+0x2>
 cda:	80 95       	com	r24
 cdc:	90 95       	com	r25
 cde:	8e 0f       	add	r24, r30
 ce0:	9f 1f       	adc	r25, r31
 ce2:	08 95       	ret

00000ce4 <fputc>:
 ce4:	0f 93       	push	r16
 ce6:	1f 93       	push	r17
 ce8:	cf 93       	push	r28
 cea:	df 93       	push	r29
 cec:	fb 01       	movw	r30, r22
 cee:	23 81       	ldd	r18, Z+3	; 0x03
 cf0:	21 fd       	sbrc	r18, 1
 cf2:	03 c0       	rjmp	.+6      	; 0xcfa <fputc+0x16>
 cf4:	8f ef       	ldi	r24, 0xFF	; 255
 cf6:	9f ef       	ldi	r25, 0xFF	; 255
 cf8:	2c c0       	rjmp	.+88     	; 0xd52 <fputc+0x6e>
 cfa:	22 ff       	sbrs	r18, 2
 cfc:	16 c0       	rjmp	.+44     	; 0xd2a <fputc+0x46>
 cfe:	46 81       	ldd	r20, Z+6	; 0x06
 d00:	57 81       	ldd	r21, Z+7	; 0x07
 d02:	24 81       	ldd	r18, Z+4	; 0x04
 d04:	35 81       	ldd	r19, Z+5	; 0x05
 d06:	42 17       	cp	r20, r18
 d08:	53 07       	cpc	r21, r19
 d0a:	44 f4       	brge	.+16     	; 0xd1c <fputc+0x38>
 d0c:	a0 81       	ld	r26, Z
 d0e:	b1 81       	ldd	r27, Z+1	; 0x01
 d10:	9d 01       	movw	r18, r26
 d12:	2f 5f       	subi	r18, 0xFF	; 255
 d14:	3f 4f       	sbci	r19, 0xFF	; 255
 d16:	31 83       	std	Z+1, r19	; 0x01
 d18:	20 83       	st	Z, r18
 d1a:	8c 93       	st	X, r24
 d1c:	26 81       	ldd	r18, Z+6	; 0x06
 d1e:	37 81       	ldd	r19, Z+7	; 0x07
 d20:	2f 5f       	subi	r18, 0xFF	; 255
 d22:	3f 4f       	sbci	r19, 0xFF	; 255
 d24:	37 83       	std	Z+7, r19	; 0x07
 d26:	26 83       	std	Z+6, r18	; 0x06
 d28:	14 c0       	rjmp	.+40     	; 0xd52 <fputc+0x6e>
 d2a:	8b 01       	movw	r16, r22
 d2c:	ec 01       	movw	r28, r24
 d2e:	fb 01       	movw	r30, r22
 d30:	00 84       	ldd	r0, Z+8	; 0x08
 d32:	f1 85       	ldd	r31, Z+9	; 0x09
 d34:	e0 2d       	mov	r30, r0
 d36:	19 95       	eicall
 d38:	89 2b       	or	r24, r25
 d3a:	e1 f6       	brne	.-72     	; 0xcf4 <fputc+0x10>
 d3c:	d8 01       	movw	r26, r16
 d3e:	16 96       	adiw	r26, 0x06	; 6
 d40:	8d 91       	ld	r24, X+
 d42:	9c 91       	ld	r25, X
 d44:	17 97       	sbiw	r26, 0x07	; 7
 d46:	01 96       	adiw	r24, 0x01	; 1
 d48:	17 96       	adiw	r26, 0x07	; 7
 d4a:	9c 93       	st	X, r25
 d4c:	8e 93       	st	-X, r24
 d4e:	16 97       	sbiw	r26, 0x06	; 6
 d50:	ce 01       	movw	r24, r28
 d52:	df 91       	pop	r29
 d54:	cf 91       	pop	r28
 d56:	1f 91       	pop	r17
 d58:	0f 91       	pop	r16
 d5a:	08 95       	ret

00000d5c <__ultoa_invert>:
 d5c:	fa 01       	movw	r30, r20
 d5e:	aa 27       	eor	r26, r26
 d60:	28 30       	cpi	r18, 0x08	; 8
 d62:	51 f1       	breq	.+84     	; 0xdb8 <__ultoa_invert+0x5c>
 d64:	20 31       	cpi	r18, 0x10	; 16
 d66:	81 f1       	breq	.+96     	; 0xdc8 <__ultoa_invert+0x6c>
 d68:	e8 94       	clt
 d6a:	6f 93       	push	r22
 d6c:	6e 7f       	andi	r22, 0xFE	; 254
 d6e:	6e 5f       	subi	r22, 0xFE	; 254
 d70:	7f 4f       	sbci	r23, 0xFF	; 255
 d72:	8f 4f       	sbci	r24, 0xFF	; 255
 d74:	9f 4f       	sbci	r25, 0xFF	; 255
 d76:	af 4f       	sbci	r26, 0xFF	; 255
 d78:	b1 e0       	ldi	r27, 0x01	; 1
 d7a:	3e d0       	rcall	.+124    	; 0xdf8 <__ultoa_invert+0x9c>
 d7c:	b4 e0       	ldi	r27, 0x04	; 4
 d7e:	3c d0       	rcall	.+120    	; 0xdf8 <__ultoa_invert+0x9c>
 d80:	67 0f       	add	r22, r23
 d82:	78 1f       	adc	r23, r24
 d84:	89 1f       	adc	r24, r25
 d86:	9a 1f       	adc	r25, r26
 d88:	a1 1d       	adc	r26, r1
 d8a:	68 0f       	add	r22, r24
 d8c:	79 1f       	adc	r23, r25
 d8e:	8a 1f       	adc	r24, r26
 d90:	91 1d       	adc	r25, r1
 d92:	a1 1d       	adc	r26, r1
 d94:	6a 0f       	add	r22, r26
 d96:	71 1d       	adc	r23, r1
 d98:	81 1d       	adc	r24, r1
 d9a:	91 1d       	adc	r25, r1
 d9c:	a1 1d       	adc	r26, r1
 d9e:	20 d0       	rcall	.+64     	; 0xde0 <__ultoa_invert+0x84>
 da0:	09 f4       	brne	.+2      	; 0xda4 <__ultoa_invert+0x48>
 da2:	68 94       	set
 da4:	3f 91       	pop	r19
 da6:	2a e0       	ldi	r18, 0x0A	; 10
 da8:	26 9f       	mul	r18, r22
 daa:	11 24       	eor	r1, r1
 dac:	30 19       	sub	r19, r0
 dae:	30 5d       	subi	r19, 0xD0	; 208
 db0:	31 93       	st	Z+, r19
 db2:	de f6       	brtc	.-74     	; 0xd6a <__ultoa_invert+0xe>
 db4:	cf 01       	movw	r24, r30
 db6:	08 95       	ret
 db8:	46 2f       	mov	r20, r22
 dba:	47 70       	andi	r20, 0x07	; 7
 dbc:	40 5d       	subi	r20, 0xD0	; 208
 dbe:	41 93       	st	Z+, r20
 dc0:	b3 e0       	ldi	r27, 0x03	; 3
 dc2:	0f d0       	rcall	.+30     	; 0xde2 <__ultoa_invert+0x86>
 dc4:	c9 f7       	brne	.-14     	; 0xdb8 <__ultoa_invert+0x5c>
 dc6:	f6 cf       	rjmp	.-20     	; 0xdb4 <__ultoa_invert+0x58>
 dc8:	46 2f       	mov	r20, r22
 dca:	4f 70       	andi	r20, 0x0F	; 15
 dcc:	40 5d       	subi	r20, 0xD0	; 208
 dce:	4a 33       	cpi	r20, 0x3A	; 58
 dd0:	18 f0       	brcs	.+6      	; 0xdd8 <__ultoa_invert+0x7c>
 dd2:	49 5d       	subi	r20, 0xD9	; 217
 dd4:	31 fd       	sbrc	r19, 1
 dd6:	40 52       	subi	r20, 0x20	; 32
 dd8:	41 93       	st	Z+, r20
 dda:	02 d0       	rcall	.+4      	; 0xde0 <__ultoa_invert+0x84>
 ddc:	a9 f7       	brne	.-22     	; 0xdc8 <__ultoa_invert+0x6c>
 dde:	ea cf       	rjmp	.-44     	; 0xdb4 <__ultoa_invert+0x58>
 de0:	b4 e0       	ldi	r27, 0x04	; 4
 de2:	a6 95       	lsr	r26
 de4:	97 95       	ror	r25
 de6:	87 95       	ror	r24
 de8:	77 95       	ror	r23
 dea:	67 95       	ror	r22
 dec:	ba 95       	dec	r27
 dee:	c9 f7       	brne	.-14     	; 0xde2 <__ultoa_invert+0x86>
 df0:	00 97       	sbiw	r24, 0x00	; 0
 df2:	61 05       	cpc	r22, r1
 df4:	71 05       	cpc	r23, r1
 df6:	08 95       	ret
 df8:	9b 01       	movw	r18, r22
 dfa:	ac 01       	movw	r20, r24
 dfc:	0a 2e       	mov	r0, r26
 dfe:	06 94       	lsr	r0
 e00:	57 95       	ror	r21
 e02:	47 95       	ror	r20
 e04:	37 95       	ror	r19
 e06:	27 95       	ror	r18
 e08:	ba 95       	dec	r27
 e0a:	c9 f7       	brne	.-14     	; 0xdfe <__ultoa_invert+0xa2>
 e0c:	62 0f       	add	r22, r18
 e0e:	73 1f       	adc	r23, r19
 e10:	84 1f       	adc	r24, r20
 e12:	95 1f       	adc	r25, r21
 e14:	a0 1d       	adc	r26, r0
 e16:	08 95       	ret

00000e18 <_exit>:
 e18:	f8 94       	cli

00000e1a <__stop_program>:
 e1a:	ff cf       	rjmp	.-2      	; 0xe1a <__stop_program>
