
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000e44  00000ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00000f4c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000245a  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f92  00000000  00000000  00003622  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000147c  00000000  00000000  000045b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  00005a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cd0  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c53  00000000  00000000  00006d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000089bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b4 c3       	rjmp	.+1896   	; 0x7c6 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e4       	ldi	r30, 0x44	; 68
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 37       	cpi	r26, 0x74	; 116
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e7       	ldi	r26, 0x74	; 116
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3f       	cpi	r26, 0xF2	; 242
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	8f c6       	rjmp	.+3358   	; 0xe40 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
    
    
   
    
    //Initialisieren
    initBoard(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	cc d1       	rcall	.+920    	; 0x4c0 <initBoard>
        
        
        //Verarbeitung-------------------------------------------------------------
        if (On)
        {
            OffLed = 1;
 128:	ee 24       	eor	r14, r14
 12a:	e3 94       	inc	r14
 12c:	f1 2c       	mov	r15, r1
 12e:	00 e0       	ldi	r16, 0x00	; 0
 130:	10 e0       	ldi	r17, 0x00	; 0
       }
         
        
       if ( strom && (inBattStatus < 15))
       {
         LedStrom = LedStrom | 0x4;
 132:	68 94       	set
 134:	aa 24       	eor	r10, r10
 136:	a2 f8       	bld	r10, 2
 138:	b1 2c       	mov	r11, r1
         {
             outBattLed = 0;
         }
         else if (On && inBattStatus < 5)
         {
             outBattLed = 0b10000000;
 13a:	68 94       	set
 13c:	88 24       	eor	r8, r8
 13e:	87 f8       	bld	r8, 7
 140:	91 2c       	mov	r9, r1
             
         }
         
        else if  (On &&(inBattStatus >= 5)  && (inBattStatus <= 11 )  )
         {
             outBattLed =  0b11000000;
 142:	0f 2e       	mov	r0, r31
 144:	f0 ec       	ldi	r31, 0xC0	; 192
 146:	6f 2e       	mov	r6, r31
 148:	f0 2d       	mov	r31, r0
 14a:	71 2c       	mov	r7, r1
             
         }
         else if (On &&(inBattStatus >=  12) && (inBattStatus <= 15) )
         {
             
             outBattLed = 0b11100000;
 14c:	0f 2e       	mov	r0, r31
 14e:	f0 ee       	ldi	r31, 0xE0	; 224
 150:	4f 2e       	mov	r4, r31
 152:	f0 2d       	mov	r31, r0
 154:	51 2c       	mov	r5, r1
        {
            OffLed = 0;
        }
        if (Laden && On)
        {
            LadenLed = LadenLed | (0x02);
 156:	68 94       	set
 158:	cc 24       	eor	r12, r12
 15a:	c1 f8       	bld	r12, 1
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        schalter = switchReadAll();
 15c:	d1 2c       	mov	r13, r1
 15e:	55 d0       	rcall	.+170    	; 0x20a <switchReadAll>
 160:	38 2e       	mov	r3, r24
        On = schalter & (1<<0);
 162:	81 70       	andi	r24, 0x01	; 1
 164:	c8 2f       	mov	r28, r24
 166:	80 e0       	ldi	r24, 0x00	; 0
        Laden = schalter & (1<<1);      
        inBattStatus = switchReadAll() & 0b00111100;
 168:	d8 2f       	mov	r29, r24
 16a:	4f d0       	rcall	.+158    	; 0x20a <switchReadAll>
 16c:	8c 73       	andi	r24, 0x3C	; 60
        inBattStatus = inBattStatus >> 2;
 16e:	28 2f       	mov	r18, r24
 170:	26 95       	lsr	r18
 172:	26 95       	lsr	r18
 174:	33 2d       	mov	r19, r3
 176:	30 78       	andi	r19, 0x80	; 128
        
        
        //Verarbeitung-------------------------------------------------------------
        if (On)
        {
            OffLed = 1;
 178:	9e 2d       	mov	r25, r14
 17a:	8f 2d       	mov	r24, r15
 17c:	20 97       	sbiw	r28, 0x00	; 0
 17e:	11 f4       	brne	.+4      	; 0x184 <main+0x60>
 180:	90 2f       	mov	r25, r16
 182:	81 2f       	mov	r24, r17
 184:	49 2f       	mov	r20, r25
 186:	58 2f       	mov	r21, r24
        } 
        else
        {
            OffLed = 0;
        }
        if (Laden && On)
 188:	31 fe       	sbrs	r3, 1
 18a:	07 c0       	rjmp	.+14     	; 0x19a <main+0x76>
 18c:	cd 2b       	or	r28, r29
 18e:	51 f4       	brne	.+20     	; 0x1a4 <main+0x80>
 190:	60 2f       	mov	r22, r16
 192:	71 2f       	mov	r23, r17
         }            

       } 
       else
       {
           outBattLed = 0;
 194:	80 2f       	mov	r24, r16
 196:	91 2f       	mov	r25, r17
 198:	1a c0       	rjmp	.+52     	; 0x1ce <main+0xaa>
        else
        {
            LadenLed = LadenLed & ~(0x02);
        }
                    
       if (On)
 19a:	cd 2b       	or	r28, r29
 19c:	71 f0       	breq	.+28     	; 0x1ba <main+0x96>
 19e:	60 2f       	mov	r22, r16
 1a0:	71 2f       	mov	r23, r17
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <main+0x84>
        {
            OffLed = 0;
        }
        if (Laden && On)
        {
            LadenLed = LadenLed | (0x02);
 1a4:	6c 2d       	mov	r22, r12
 1a6:	7d 2d       	mov	r23, r13
            LadenLed = LadenLed & ~(0x02);
        }
                    
       if (On)
       {
           if (On && inBattStatus == 0)
 1a8:	22 23       	and	r18, r18
 1aa:	39 f1       	breq	.+78     	; 0x1fa <main+0xd6>
         {
             outBattLed = 0;
         }
         else if (On && inBattStatus < 5)
 1ac:	25 30       	cpi	r18, 0x05	; 5
 1ae:	50 f0       	brcs	.+20     	; 0x1c4 <main+0xa0>
         {
             outBattLed = 0b10000000;
             
         }
         
        else if  (On &&(inBattStatus >= 5)  && (inBattStatus <= 11 )  )
 1b0:	2c 30       	cpi	r18, 0x0C	; 12
 1b2:	58 f0       	brcs	.+22     	; 0x1ca <main+0xa6>
             
         }
         else if (On &&(inBattStatus >=  12) && (inBattStatus <= 15) )
         {
             
             outBattLed = 0b11100000;
 1b4:	84 2d       	mov	r24, r4
 1b6:	95 2d       	mov	r25, r5
 1b8:	0a c0       	rjmp	.+20     	; 0x1ce <main+0xaa>
 1ba:	60 2f       	mov	r22, r16
 1bc:	71 2f       	mov	r23, r17
         }            

       } 
       else
       {
           outBattLed = 0;
 1be:	80 2f       	mov	r24, r16
 1c0:	91 2f       	mov	r25, r17
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <main+0xaa>
         {
             outBattLed = 0;
         }
         else if (On && inBattStatus < 5)
         {
             outBattLed = 0b10000000;
 1c4:	88 2d       	mov	r24, r8
 1c6:	99 2d       	mov	r25, r9
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <main+0xaa>
             
         }
         
        else if  (On &&(inBattStatus >= 5)  && (inBattStatus <= 11 )  )
         {
             outBattLed =  0b11000000;
 1ca:	86 2d       	mov	r24, r6
 1cc:	97 2d       	mov	r25, r7
       {
           outBattLed = 0;
       }
         
        
       if ( strom && (inBattStatus < 15))
 1ce:	33 23       	and	r19, r19
 1d0:	11 f0       	breq	.+4      	; 0x1d6 <main+0xb2>
 1d2:	2f 30       	cpi	r18, 0x0F	; 15
 1d4:	18 f0       	brcs	.+6      	; 0x1dc <main+0xb8>
       {
         LedStrom = LedStrom | 0x4;
       }
      else 
      {
          LedStrom = LedStrom  & ~(0x04);
 1d6:	20 2f       	mov	r18, r16
 1d8:	31 2f       	mov	r19, r17
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <main+0xc6>
       }
         
        
       if ( strom && (inBattStatus < 15))
       {
         LedStrom = LedStrom | 0x4;
 1dc:	2a 2d       	mov	r18, r10
 1de:	3b 2d       	mov	r19, r11
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <main+0xc6>
                    
       if (On)
       {
           if (On && inBattStatus == 0)
         {
             outBattLed = 0;
 1e2:	80 2f       	mov	r24, r16
 1e4:	91 2f       	mov	r25, r17
       }
         
        
       if ( strom && (inBattStatus < 15))
       {
         LedStrom = LedStrom | 0x4;
 1e6:	2a 2d       	mov	r18, r10
 1e8:	3b 2d       	mov	r19, r11
          
                
        
        //Ausgabe------------------------------------------------------------------
        
        ledWriteAll(OffLed | LadenLed |outBattLed | LedStrom);
 1ea:	26 2b       	or	r18, r22
 1ec:	37 2b       	or	r19, r23
 1ee:	24 2b       	or	r18, r20
 1f0:	35 2b       	or	r19, r21
 1f2:	82 2b       	or	r24, r18
 1f4:	93 2b       	or	r25, r19
 1f6:	06 d0       	rcall	.+12     	; 0x204 <ledWriteAll>
    }
 1f8:	b2 cf       	rjmp	.-156    	; 0x15e <main+0x3a>
       {
           outBattLed = 0;
       }
         
        
       if ( strom && (inBattStatus < 15))
 1fa:	31 11       	cpse	r19, r1
 1fc:	f2 cf       	rjmp	.-28     	; 0x1e2 <main+0xbe>
                    
       if (On)
       {
           if (On && inBattStatus == 0)
         {
             outBattLed = 0;
 1fe:	80 2f       	mov	r24, r16
 200:	91 2f       	mov	r25, r17
 202:	e9 cf       	rjmp	.-46     	; 0x1d6 <main+0xb2>

00000204 <ledWriteAll>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 204:	82 b9       	out	0x02, r24	; 2
 206:	95 b9       	out	0x05, r25	; 5
 208:	08 95       	ret

0000020a <switchReadAll>:
 20a:	86 b1       	in	r24, 0x06	; 6
 20c:	08 95       	ret

0000020e <startSystemTimeMs>:
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	84 bd       	out	0x24, r24	; 36
 212:	8b e0       	ldi	r24, 0x0B	; 11
 214:	85 bd       	out	0x25, r24	; 37
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 21c:	89 ef       	ldi	r24, 0xF9	; 249
 21e:	87 bd       	out	0x27, r24	; 39
 220:	08 95       	ret

00000222 <initAdc>:
 222:	11 ba       	out	0x11, r1	; 17
 224:	10 ba       	out	0x10, r1	; 16
 226:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 22a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 22e:	80 e4       	ldi	r24, 0x40	; 64
 230:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 234:	8f e0       	ldi	r24, 0x0F	; 15
 236:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 240:	ea e7       	ldi	r30, 0x7A	; 122
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	87 ea       	ldi	r24, 0xA7	; 167
 246:	80 83       	st	Z, r24
 248:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 24c:	80 81       	ld	r24, Z
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	80 83       	st	Z, r24
 252:	80 81       	ld	r24, Z
 254:	84 ff       	sbrs	r24, 4
 256:	fd cf       	rjmp	.-6      	; 0x252 <initAdc+0x30>
 258:	ea e7       	ldi	r30, 0x7A	; 122
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8f 7e       	andi	r24, 0xEF	; 239
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <rgbWrite>:
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	33 e0       	ldi	r19, 0x03	; 3
 268:	f9 01       	movw	r30, r18
 26a:	e8 1b       	sub	r30, r24
 26c:	f9 0b       	sbc	r31, r25
 26e:	c9 01       	movw	r24, r18
 270:	86 1b       	sub	r24, r22
 272:	97 0b       	sbc	r25, r23
 274:	24 1b       	sub	r18, r20
 276:	35 0b       	sbc	r19, r21
 278:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 27c:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 280:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 284:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 288:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 28c:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 290:	08 95       	ret

00000292 <initRgb>:
 292:	8e ef       	ldi	r24, 0xFE	; 254
 294:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 298:	8b e1       	ldi	r24, 0x1B	; 27
 29a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	d6 cf       	rjmp	.-84     	; 0x264 <rgbWrite>
 2b8:	08 95       	ret

000002ba <lcdSid>:
 2ba:	88 23       	and	r24, r24
 2bc:	11 f0       	breq	.+4      	; 0x2c2 <lcdSid+0x8>
 2be:	a0 9a       	sbi	0x14, 0	; 20
 2c0:	08 95       	ret
 2c2:	a0 98       	cbi	0x14, 0	; 20
 2c4:	08 95       	ret

000002c6 <lcdSclk>:
 2c6:	88 23       	and	r24, r24
 2c8:	11 f0       	breq	.+4      	; 0x2ce <lcdSclk+0x8>
 2ca:	a1 9a       	sbi	0x14, 1	; 20
 2cc:	08 95       	ret
 2ce:	a1 98       	cbi	0x14, 1	; 20
 2d0:	08 95       	ret

000002d2 <lcdLight>:
 2d2:	81 11       	cpse	r24, r1
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <lcdLight+0xc>
 2d6:	84 b5       	in	r24, 0x24	; 36
 2d8:	8f 7d       	andi	r24, 0xDF	; 223
 2da:	84 bd       	out	0x24, r24	; 36
 2dc:	08 95       	ret
 2de:	94 b5       	in	r25, 0x24	; 36
 2e0:	90 62       	ori	r25, 0x20	; 32
 2e2:	94 bd       	out	0x24, r25	; 36
 2e4:	88 bd       	out	0x28, r24	; 40
 2e6:	08 95       	ret

000002e8 <writeLcdF>:
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	7c 01       	movw	r14, r24
 2f6:	eb 01       	movw	r28, r22
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	df df       	rcall	.-66     	; 0x2ba <lcdSid>
 2fc:	05 e0       	ldi	r16, 0x05	; 5
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	e1 df       	rcall	.-62     	; 0x2c6 <lcdSclk>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	df df       	rcall	.-66     	; 0x2c6 <lcdSclk>
 308:	01 50       	subi	r16, 0x01	; 1
 30a:	11 09       	sbc	r17, r1
 30c:	c9 f7       	brne	.-14     	; 0x300 <writeLcdF+0x18>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	d4 df       	rcall	.-88     	; 0x2ba <lcdSid>
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	d8 df       	rcall	.-80     	; 0x2c6 <lcdSclk>
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	d6 df       	rcall	.-84     	; 0x2c6 <lcdSclk>
 31a:	83 e4       	ldi	r24, 0x43	; 67
 31c:	e8 16       	cp	r14, r24
 31e:	f1 04       	cpc	r15, r1
 320:	19 f4       	brne	.+6      	; 0x328 <writeLcdF+0x40>
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	ca df       	rcall	.-108    	; 0x2ba <lcdSid>
 326:	02 c0       	rjmp	.+4      	; 0x32c <writeLcdF+0x44>
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	c7 df       	rcall	.-114    	; 0x2ba <lcdSid>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	cb df       	rcall	.-106    	; 0x2c6 <lcdSclk>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	c9 df       	rcall	.-110    	; 0x2c6 <lcdSclk>
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	c1 df       	rcall	.-126    	; 0x2ba <lcdSid>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	c5 df       	rcall	.-118    	; 0x2c6 <lcdSclk>
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	c3 df       	rcall	.-122    	; 0x2c6 <lcdSclk>
 340:	04 e0       	ldi	r16, 0x04	; 4
 342:	10 e0       	ldi	r17, 0x00	; 0
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	bf df       	rcall	.-130    	; 0x2c6 <lcdSclk>
 348:	c0 ff       	sbrs	r28, 0
 34a:	03 c0       	rjmp	.+6      	; 0x352 <writeLcdF+0x6a>
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	b5 df       	rcall	.-150    	; 0x2ba <lcdSid>
 350:	02 c0       	rjmp	.+4      	; 0x356 <writeLcdF+0x6e>
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	b2 df       	rcall	.-156    	; 0x2ba <lcdSid>
 356:	d6 95       	lsr	r29
 358:	c7 95       	ror	r28
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	b4 df       	rcall	.-152    	; 0x2c6 <lcdSclk>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	b2 df       	rcall	.-156    	; 0x2c6 <lcdSclk>
 362:	01 50       	subi	r16, 0x01	; 1
 364:	11 09       	sbc	r17, r1
 366:	71 f7       	brne	.-36     	; 0x344 <writeLcdF+0x5c>
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	a7 df       	rcall	.-178    	; 0x2ba <lcdSid>
 36c:	04 e0       	ldi	r16, 0x04	; 4
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	a9 df       	rcall	.-174    	; 0x2c6 <lcdSclk>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	a7 df       	rcall	.-178    	; 0x2c6 <lcdSclk>
 378:	01 50       	subi	r16, 0x01	; 1
 37a:	11 09       	sbc	r17, r1
 37c:	c9 f7       	brne	.-14     	; 0x370 <writeLcdF+0x88>
 37e:	04 e0       	ldi	r16, 0x04	; 4
 380:	10 e0       	ldi	r17, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	a0 df       	rcall	.-192    	; 0x2c6 <lcdSclk>
 386:	c0 ff       	sbrs	r28, 0
 388:	03 c0       	rjmp	.+6      	; 0x390 <writeLcdF+0xa8>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	96 df       	rcall	.-212    	; 0x2ba <lcdSid>
 38e:	02 c0       	rjmp	.+4      	; 0x394 <writeLcdF+0xac>
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	93 df       	rcall	.-218    	; 0x2ba <lcdSid>
 394:	d6 95       	lsr	r29
 396:	c7 95       	ror	r28
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	95 df       	rcall	.-214    	; 0x2c6 <lcdSclk>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	93 df       	rcall	.-218    	; 0x2c6 <lcdSclk>
 3a0:	01 50       	subi	r16, 0x01	; 1
 3a2:	11 09       	sbc	r17, r1
 3a4:	71 f7       	brne	.-36     	; 0x382 <writeLcdF+0x9a>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	88 df       	rcall	.-240    	; 0x2ba <lcdSid>
 3aa:	c4 e0       	ldi	r28, 0x04	; 4
 3ac:	d0 e0       	ldi	r29, 0x00	; 0
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	8a df       	rcall	.-236    	; 0x2c6 <lcdSclk>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	88 df       	rcall	.-240    	; 0x2c6 <lcdSclk>
 3b6:	21 97       	sbiw	r28, 0x01	; 1
 3b8:	d1 f7       	brne	.-12     	; 0x3ae <writeLcdF+0xc6>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	7e df       	rcall	.-260    	; 0x2ba <lcdSid>
 3be:	87 ec       	ldi	r24, 0xC7	; 199
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <writeLcdF+0xda>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <writeLcdF+0xe0>
 3c8:	00 00       	nop
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <lcdWriteText>:
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	65 97       	sbiw	r28, 0x15	; 21
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	9e 01       	movw	r18, r28
 3f0:	20 5e       	subi	r18, 0xE0	; 224
 3f2:	3f 4f       	sbci	r19, 0xFF	; 255
 3f4:	4e 8d       	ldd	r20, Y+30	; 0x1e
 3f6:	5f 8d       	ldd	r21, Y+31	; 0x1f
 3f8:	65 e1       	ldi	r22, 0x15	; 21
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	ce 01       	movw	r24, r28
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	3a d2       	rcall	.+1140   	; 0x876 <vsnprintf>
 402:	6d 8d       	ldd	r22, Y+29	; 0x1d
 404:	8c 8d       	ldd	r24, Y+28	; 0x1c
 406:	90 e2       	ldi	r25, 0x20	; 32
 408:	89 9f       	mul	r24, r25
 40a:	60 0d       	add	r22, r0
 40c:	11 24       	eor	r1, r1
 40e:	60 68       	ori	r22, 0x80	; 128
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	83 e4       	ldi	r24, 0x43	; 67
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	68 df       	rcall	.-304    	; 0x2e8 <writeLcdF>
 418:	69 81       	ldd	r22, Y+1	; 0x01
 41a:	66 23       	and	r22, r22
 41c:	79 f0       	breq	.+30     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41e:	10 e0       	ldi	r17, 0x00	; 0
 420:	1f 5f       	subi	r17, 0xFF	; 255
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	84 e4       	ldi	r24, 0x44	; 68
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	5f df       	rcall	.-322    	; 0x2e8 <writeLcdF>
 42a:	e1 e0       	ldi	r30, 0x01	; 1
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	ec 0f       	add	r30, r28
 430:	fd 1f       	adc	r31, r29
 432:	e1 0f       	add	r30, r17
 434:	f1 1d       	adc	r31, r1
 436:	60 81       	ld	r22, Z
 438:	61 11       	cpse	r22, r1
 43a:	f2 cf       	rjmp	.-28     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 43c:	65 96       	adiw	r28, 0x15	; 21
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	08 95       	ret

00000450 <lcdClear>:
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	83 e4       	ldi	r24, 0x43	; 67
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	47 df       	rcall	.-370    	; 0x2e8 <writeLcdF>
 45a:	8f e3       	ldi	r24, 0x3F	; 63
 45c:	9f e1       	ldi	r25, 0x1F	; 31
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <lcdClear+0xe>
 462:	00 c0       	rjmp	.+0      	; 0x464 <lcdClear+0x14>
 464:	00 00       	nop
 466:	80 e3       	ldi	r24, 0x30	; 48
 468:	92 e0       	ldi	r25, 0x02	; 2
 46a:	9f 93       	push	r25
 46c:	8f 93       	push	r24
 46e:	1f 92       	push	r1
 470:	1f 92       	push	r1
 472:	b2 df       	rcall	.-156    	; 0x3d8 <lcdWriteText>
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	08 95       	ret

0000047e <initLcd>:
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	22 df       	rcall	.-444    	; 0x2c6 <lcdSclk>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	1a df       	rcall	.-460    	; 0x2ba <lcdSid>
 486:	64 e3       	ldi	r22, 0x34	; 52
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	83 e4       	ldi	r24, 0x43	; 67
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	2c df       	rcall	.-424    	; 0x2e8 <writeLcdF>
 490:	69 e0       	ldi	r22, 0x09	; 9
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	83 e4       	ldi	r24, 0x43	; 67
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	27 df       	rcall	.-434    	; 0x2e8 <writeLcdF>
 49a:	60 e3       	ldi	r22, 0x30	; 48
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	83 e4       	ldi	r24, 0x43	; 67
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	22 df       	rcall	.-444    	; 0x2e8 <writeLcdF>
 4a4:	6c e0       	ldi	r22, 0x0C	; 12
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	83 e4       	ldi	r24, 0x43	; 67
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	1d df       	rcall	.-454    	; 0x2e8 <writeLcdF>
 4ae:	d0 df       	rcall	.-96     	; 0x450 <lcdClear>
 4b0:	67 e0       	ldi	r22, 0x07	; 7
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	83 e4       	ldi	r24, 0x43	; 67
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	17 df       	rcall	.-466    	; 0x2e8 <writeLcdF>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0a cf       	rjmp	.-492    	; 0x2d2 <lcdLight>
 4be:	08 95       	ret

000004c0 <initBoard>:
 4c0:	4f 92       	push	r4
 4c2:	5f 92       	push	r5
 4c4:	6f 92       	push	r6
 4c6:	7f 92       	push	r7
 4c8:	8f 92       	push	r8
 4ca:	9f 92       	push	r9
 4cc:	af 92       	push	r10
 4ce:	bf 92       	push	r11
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	c8 2f       	mov	r28, r24
 4e2:	85 b7       	in	r24, 0x35	; 53
 4e4:	85 bf       	out	0x35, r24	; 53
 4e6:	12 b8       	out	0x02, r1	; 2
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	81 b9       	out	0x01, r24	; 1
 4ec:	15 b8       	out	0x05, r1	; 5
 4ee:	84 b9       	out	0x04, r24	; 4
 4f0:	88 b9       	out	0x08, r24	; 8
 4f2:	17 b8       	out	0x07, r1	; 7
 4f4:	8b b9       	out	0x0b, r24	; 11
 4f6:	1a b8       	out	0x0a, r1	; 10
 4f8:	8e b9       	out	0x0e, r24	; 14
 4fa:	1d b8       	out	0x0d, r1	; 13
 4fc:	72 98       	cbi	0x0e, 2	; 14
 4fe:	11 ba       	out	0x11, r1	; 17
 500:	10 ba       	out	0x10, r1	; 16
 502:	94 e0       	ldi	r25, 0x04	; 4
 504:	94 bb       	out	0x14, r25	; 20
 506:	93 b3       	in	r25, 0x13	; 19
 508:	93 60       	ori	r25, 0x03	; 3
 50a:	93 bb       	out	0x13, r25	; 19
 50c:	9d 9a       	sbi	0x13, 5	; 19
 50e:	97 ec       	ldi	r25, 0xC7	; 199
 510:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 514:	98 e3       	ldi	r25, 0x38	; 56
 516:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 51a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 51e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 522:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 526:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 52a:	8c e3       	ldi	r24, 0x3C	; 60
 52c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 530:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 534:	78 94       	sei
 536:	6b de       	rcall	.-810    	; 0x20e <startSystemTimeMs>
 538:	a2 df       	rcall	.-188    	; 0x47e <initLcd>
 53a:	73 de       	rcall	.-794    	; 0x222 <initAdc>
 53c:	aa de       	rcall	.-684    	; 0x292 <initRgb>
 53e:	cc 23       	and	r28, r28
 540:	09 f4       	brne	.+2      	; 0x544 <initBoard+0x84>
 542:	b8 c0       	rjmp	.+368    	; 0x6b4 <initBoard+0x1f4>
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	c5 de       	rcall	.-630    	; 0x2d2 <lcdLight>
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	6f ef       	ldi	r22, 0xFF	; 255
 54e:	73 e0       	ldi	r23, 0x03	; 3
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	87 de       	rcall	.-754    	; 0x264 <rgbWrite>
 556:	8d e1       	ldi	r24, 0x1D	; 29
 558:	92 e0       	ldi	r25, 0x02	; 2
 55a:	9f 93       	push	r25
 55c:	8f 93       	push	r24
 55e:	1f 92       	push	r1
 560:	1f 92       	push	r1
 562:	3a df       	rcall	.-396    	; 0x3d8 <lcdWriteText>
 564:	82 e3       	ldi	r24, 0x32	; 50
 566:	92 e0       	ldi	r25, 0x02	; 2
 568:	9f 93       	push	r25
 56a:	8f 93       	push	r24
 56c:	1f 92       	push	r1
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	8f 93       	push	r24
 572:	32 df       	rcall	.-412    	; 0x3d8 <lcdWriteText>
 574:	88 e0       	ldi	r24, 0x08	; 8
 576:	92 e0       	ldi	r25, 0x02	; 2
 578:	9f 93       	push	r25
 57a:	8f 93       	push	r24
 57c:	1f 92       	push	r1
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	8f 93       	push	r24
 582:	2a df       	rcall	.-428    	; 0x3d8 <lcdWriteText>
 584:	87 e4       	ldi	r24, 0x47	; 71
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	9f 93       	push	r25
 58a:	8f 93       	push	r24
 58c:	1f 92       	push	r1
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	8f 93       	push	r24
 592:	22 df       	rcall	.-444    	; 0x3d8 <lcdWriteText>
 594:	8d b7       	in	r24, 0x3d	; 61
 596:	9e b7       	in	r25, 0x3e	; 62
 598:	40 96       	adiw	r24, 0x10	; 16
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	9e bf       	out	0x3e, r25	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	8d bf       	out	0x3d, r24	; 61
 5a4:	88 24       	eor	r8, r8
 5a6:	83 94       	inc	r8
 5a8:	c0 e0       	ldi	r28, 0x00	; 0
 5aa:	71 2c       	mov	r7, r1
 5ac:	99 24       	eor	r9, r9
 5ae:	93 94       	inc	r9
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
 5b2:	cc 24       	eor	r12, r12
 5b4:	c3 94       	inc	r12
 5b6:	d1 2c       	mov	r13, r1
 5b8:	e1 2c       	mov	r14, r1
 5ba:	68 94       	set
 5bc:	ff 24       	eor	r15, r15
 5be:	f7 f8       	bld	r15, 7
 5c0:	66 24       	eor	r6, r6
 5c2:	63 94       	inc	r6
 5c4:	51 2c       	mov	r5, r1
 5c6:	09 e0       	ldi	r16, 0x09	; 9
 5c8:	11 e0       	ldi	r17, 0x01	; 1
 5ca:	0f 2e       	mov	r0, r31
 5cc:	fc e5       	ldi	r31, 0x5C	; 92
 5ce:	af 2e       	mov	r10, r31
 5d0:	f2 e0       	ldi	r31, 0x02	; 2
 5d2:	bf 2e       	mov	r11, r31
 5d4:	f0 2d       	mov	r31, r0
 5d6:	0f 2e       	mov	r0, r31
 5d8:	f3 e0       	ldi	r31, 0x03	; 3
 5da:	4f 2e       	mov	r4, r31
 5dc:	f0 2d       	mov	r31, r0
 5de:	99 20       	and	r9, r9
 5e0:	49 f0       	breq	.+18     	; 0x5f4 <initBoard+0x134>
 5e2:	c7 01       	movw	r24, r14
 5e4:	0d 2e       	mov	r0, r29
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <initBoard+0x12c>
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	0a 94       	dec	r0
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <initBoard+0x128>
 5f0:	09 de       	rcall	.-1006   	; 0x204 <ledWriteAll>
 5f2:	08 c0       	rjmp	.+16     	; 0x604 <initBoard+0x144>
 5f4:	c6 01       	movw	r24, r12
 5f6:	0d 2e       	mov	r0, r29
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <initBoard+0x13e>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	0a 94       	dec	r0
 600:	e2 f7       	brpl	.-8      	; 0x5fa <initBoard+0x13a>
 602:	00 de       	rcall	.-1024   	; 0x204 <ledWriteAll>
 604:	df 5f       	subi	r29, 0xFF	; 255
 606:	d1 31       	cpi	r29, 0x11	; 17
 608:	28 f0       	brcs	.+10     	; 0x614 <initBoard+0x154>
 60a:	86 2d       	mov	r24, r6
 60c:	91 10       	cpse	r9, r1
 60e:	85 2d       	mov	r24, r5
 610:	98 2e       	mov	r9, r24
 612:	d0 e0       	ldi	r29, 0x00	; 0
 614:	88 20       	and	r8, r8
 616:	11 f0       	breq	.+4      	; 0x61c <initBoard+0x15c>
 618:	ce 5f       	subi	r28, 0xFE	; 254
 61a:	01 c0       	rjmp	.+2      	; 0x61e <initBoard+0x15e>
 61c:	c2 50       	subi	r28, 0x02	; 2
 61e:	8c 2f       	mov	r24, r28
 620:	58 de       	rcall	.-848    	; 0x2d2 <lcdLight>
 622:	ce 3f       	cpi	r28, 0xFE	; 254
 624:	21 f0       	breq	.+8      	; 0x62e <initBoard+0x16e>
 626:	c8 37       	cpi	r28, 0x78	; 120
 628:	19 f4       	brne	.+6      	; 0x630 <initBoard+0x170>
 62a:	86 2c       	mov	r8, r6
 62c:	01 c0       	rjmp	.+2      	; 0x630 <initBoard+0x170>
 62e:	85 2c       	mov	r8, r5
 630:	71 10       	cpse	r7, r1
 632:	3b c0       	rjmp	.+118    	; 0x6aa <initBoard+0x1ea>
 634:	f8 01       	movw	r30, r16
 636:	80 81       	ld	r24, Z
 638:	83 7c       	andi	r24, 0xC3	; 195
 63a:	91 f0       	breq	.+36     	; 0x660 <initBoard+0x1a0>
 63c:	40 e0       	ldi	r20, 0x00	; 0
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	66 e2       	ldi	r22, 0x26	; 38
 642:	72 e0       	ldi	r23, 0x02	; 2
 644:	8f ef       	ldi	r24, 0xFF	; 255
 646:	93 e0       	ldi	r25, 0x03	; 3
 648:	0d de       	rcall	.-998    	; 0x264 <rgbWrite>
 64a:	bf 92       	push	r11
 64c:	af 92       	push	r10
 64e:	1f 92       	push	r1
 650:	4f 92       	push	r4
 652:	c2 de       	rcall	.-636    	; 0x3d8 <lcdWriteText>
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	76 2c       	mov	r7, r6
 65e:	25 c0       	rjmp	.+74     	; 0x6aa <initBoard+0x1ea>
 660:	8f ef       	ldi	r24, 0xFF	; 255
 662:	9c e7       	ldi	r25, 0x7C	; 124
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <initBoard+0x1a4>
 668:	00 c0       	rjmp	.+0      	; 0x66a <initBoard+0x1aa>
 66a:	00 00       	nop
 66c:	b8 cf       	rjmp	.-144    	; 0x5de <initBoard+0x11e>
 66e:	f0 de       	rcall	.-544    	; 0x450 <lcdClear>
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	2f de       	rcall	.-930    	; 0x2d2 <lcdLight>
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	c5 dd       	rcall	.-1142   	; 0x204 <ledWriteAll>
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	ee dd       	rcall	.-1060   	; 0x264 <rgbWrite>
 688:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
 68c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
 690:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
 694:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
 698:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
 69c:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
 6a0:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
 6a4:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <initBoard+0x1f4>
 6aa:	f8 01       	movw	r30, r16
 6ac:	80 81       	ld	r24, Z
 6ae:	83 7c       	andi	r24, 0xC3	; 195
 6b0:	b9 f6       	brne	.-82     	; 0x660 <initBoard+0x1a0>
 6b2:	dd cf       	rjmp	.-70     	; 0x66e <initBoard+0x1ae>
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	ff 90       	pop	r15
 6be:	ef 90       	pop	r14
 6c0:	df 90       	pop	r13
 6c2:	cf 90       	pop	r12
 6c4:	bf 90       	pop	r11
 6c6:	af 90       	pop	r10
 6c8:	9f 90       	pop	r9
 6ca:	8f 90       	pop	r8
 6cc:	7f 90       	pop	r7
 6ce:	6f 90       	pop	r6
 6d0:	5f 90       	pop	r5
 6d2:	4f 90       	pop	r4
 6d4:	08 95       	ret

000006d6 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
 6de:	28 97       	sbiw	r28, 0x08	; 8
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	f8 94       	cli
 6e4:	de bf       	out	0x3e, r29	; 62
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 6ea:	88 e0       	ldi	r24, 0x08	; 8
 6ec:	e0 e0       	ldi	r30, 0x00	; 0
 6ee:	f2 e0       	ldi	r31, 0x02	; 2
 6f0:	de 01       	movw	r26, r28
 6f2:	11 96       	adiw	r26, 0x01	; 1
 6f4:	01 90       	ld	r0, Z+
 6f6:	0d 92       	st	X+, r0
 6f8:	8a 95       	dec	r24
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 6fc:	e5 e0       	ldi	r30, 0x05	; 5
 6fe:	f1 e0       	ldi	r31, 0x01	; 1
 700:	80 81       	ld	r24, Z
 702:	8f 7b       	andi	r24, 0xBF	; 191
 704:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 706:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2725>
 70a:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2725+0x1>
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	8c 0f       	add	r24, r28
 714:	9d 1f       	adc	r25, r29
 716:	e8 0f       	add	r30, r24
 718:	f9 1f       	adc	r31, r25
 71a:	80 81       	ld	r24, Z
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
 722:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
 726:	a2 ef       	ldi	r26, 0xF2	; 242
 728:	b2 e0       	ldi	r27, 0x02	; 2
 72a:	22 e8       	ldi	r18, 0x82	; 130
 72c:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 72e:	e5 e0       	ldi	r30, 0x05	; 5
 730:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 732:	5e 91       	ld	r21, -X
 734:	4e 91       	ld	r20, -X
 736:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
 73a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
 73e:	84 23       	and	r24, r20
 740:	95 23       	and	r25, r21
 742:	89 2b       	or	r24, r25
 744:	21 f0       	breq	.+8      	; 0x74e <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 746:	80 81       	ld	r24, Z
 748:	80 62       	ori	r24, 0x20	; 32
 74a:	80 83       	st	Z, r24
 74c:	03 c0       	rjmp	.+6      	; 0x754 <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 74e:	80 81       	ld	r24, Z
 750:	8f 7d       	andi	r24, 0xDF	; 223
 752:	80 83       	st	Z, r24
        }
        CLOCK_1;
 754:	80 81       	ld	r24, Z
 756:	80 61       	ori	r24, 0x10	; 16
 758:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 75a:	80 81       	ld	r24, Z
 75c:	8f 7e       	andi	r24, 0xEF	; 239
 75e:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 760:	a2 17       	cp	r26, r18
 762:	b3 07       	cpc	r27, r19
 764:	31 f7       	brne	.-52     	; 0x732 <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 766:	e5 e0       	ldi	r30, 0x05	; 5
 768:	f1 e0       	ldi	r31, 0x01	; 1
 76a:	80 81       	ld	r24, Z
 76c:	87 7f       	andi	r24, 0xF7	; 247
 76e:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 770:	80 81       	ld	r24, Z
 772:	88 7f       	andi	r24, 0xF8	; 248
 774:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 776:	90 81       	ld	r25, Z
 778:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2725>
 77c:	89 2b       	or	r24, r25
 77e:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 780:	80 81       	ld	r24, Z
 782:	80 64       	ori	r24, 0x40	; 64
 784:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 786:	80 81       	ld	r24, Z
 788:	88 60       	ori	r24, 0x08	; 8
 78a:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 78c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2725>
 790:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2725+0x1>
 794:	87 30       	cpi	r24, 0x07	; 7
 796:	91 05       	cpc	r25, r1
 798:	30 f4       	brcc	.+12     	; 0x7a6 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2725+0x1>
 7a0:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2725>
 7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
 7a6:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2725+0x1>
 7aa:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2725>
        writeTextFinished = 1;
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
 7b4:	28 96       	adiw	r28, 0x08	; 8
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	f8 94       	cli
 7ba:	de bf       	out	0x3e, r29	; 62
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	cd bf       	out	0x3d, r28	; 61
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	08 95       	ret

000007c6 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 7c6:	1f 92       	push	r1
 7c8:	0f 92       	push	r0
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	0f 92       	push	r0
 7ce:	11 24       	eor	r1, r1
 7d0:	0b b6       	in	r0, 0x3b	; 59
 7d2:	0f 92       	push	r0
 7d4:	2f 93       	push	r18
 7d6:	3f 93       	push	r19
 7d8:	4f 93       	push	r20
 7da:	5f 93       	push	r21
 7dc:	6f 93       	push	r22
 7de:	7f 93       	push	r23
 7e0:	8f 93       	push	r24
 7e2:	9f 93       	push	r25
 7e4:	af 93       	push	r26
 7e6:	bf 93       	push	r27
 7e8:	ef 93       	push	r30
 7ea:	ff 93       	push	r31
    systemTimeMs += 1;
 7ec:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
 7f0:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
 7f4:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
 7f8:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
 7fc:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
 800:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
 804:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
 808:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
 80c:	a1 e0       	ldi	r26, 0x01	; 1
 80e:	27 d0       	rcall	.+78     	; 0x85e <__adddi3_s8>
 810:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
 814:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
 818:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
 81c:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
 820:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
 824:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
 828:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
 82c:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 830:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
 834:	81 11       	cpse	r24, r1
 836:	4f df       	rcall	.-354    	; 0x6d6 <matrixWriteNextLine>
}
 838:	ff 91       	pop	r31
 83a:	ef 91       	pop	r30
 83c:	bf 91       	pop	r27
 83e:	af 91       	pop	r26
 840:	9f 91       	pop	r25
 842:	8f 91       	pop	r24
 844:	7f 91       	pop	r23
 846:	6f 91       	pop	r22
 848:	5f 91       	pop	r21
 84a:	4f 91       	pop	r20
 84c:	3f 91       	pop	r19
 84e:	2f 91       	pop	r18
 850:	0f 90       	pop	r0
 852:	0b be       	out	0x3b, r0	; 59
 854:	0f 90       	pop	r0
 856:	0f be       	out	0x3f, r0	; 63
 858:	0f 90       	pop	r0
 85a:	1f 90       	pop	r1
 85c:	18 95       	reti

0000085e <__adddi3_s8>:
 85e:	00 24       	eor	r0, r0
 860:	a7 fd       	sbrc	r26, 7
 862:	00 94       	com	r0
 864:	2a 0f       	add	r18, r26
 866:	30 1d       	adc	r19, r0
 868:	40 1d       	adc	r20, r0
 86a:	50 1d       	adc	r21, r0
 86c:	60 1d       	adc	r22, r0
 86e:	70 1d       	adc	r23, r0
 870:	80 1d       	adc	r24, r0
 872:	90 1d       	adc	r25, r0
 874:	08 95       	ret

00000876 <vsnprintf>:
 876:	0f 93       	push	r16
 878:	1f 93       	push	r17
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	2e 97       	sbiw	r28, 0x0e	; 14
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	f8 94       	cli
 888:	de bf       	out	0x3e, r29	; 62
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	cd bf       	out	0x3d, r28	; 61
 88e:	8c 01       	movw	r16, r24
 890:	fa 01       	movw	r30, r20
 892:	86 e0       	ldi	r24, 0x06	; 6
 894:	8c 83       	std	Y+4, r24	; 0x04
 896:	1a 83       	std	Y+2, r17	; 0x02
 898:	09 83       	std	Y+1, r16	; 0x01
 89a:	77 ff       	sbrs	r23, 7
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <vsnprintf+0x2c>
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	70 e8       	ldi	r23, 0x80	; 128
 8a2:	cb 01       	movw	r24, r22
 8a4:	01 97       	sbiw	r24, 0x01	; 1
 8a6:	9e 83       	std	Y+6, r25	; 0x06
 8a8:	8d 83       	std	Y+5, r24	; 0x05
 8aa:	a9 01       	movw	r20, r18
 8ac:	bf 01       	movw	r22, r30
 8ae:	ce 01       	movw	r24, r28
 8b0:	01 96       	adiw	r24, 0x01	; 1
 8b2:	19 d0       	rcall	.+50     	; 0x8e6 <vfprintf>
 8b4:	4d 81       	ldd	r20, Y+5	; 0x05
 8b6:	5e 81       	ldd	r21, Y+6	; 0x06
 8b8:	57 fd       	sbrc	r21, 7
 8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <vsnprintf+0x5a>
 8bc:	2f 81       	ldd	r18, Y+7	; 0x07
 8be:	38 85       	ldd	r19, Y+8	; 0x08
 8c0:	42 17       	cp	r20, r18
 8c2:	53 07       	cpc	r21, r19
 8c4:	0c f4       	brge	.+2      	; 0x8c8 <vsnprintf+0x52>
 8c6:	9a 01       	movw	r18, r20
 8c8:	f8 01       	movw	r30, r16
 8ca:	e2 0f       	add	r30, r18
 8cc:	f3 1f       	adc	r31, r19
 8ce:	10 82       	st	Z, r1
 8d0:	2e 96       	adiw	r28, 0x0e	; 14
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	f8 94       	cli
 8d6:	de bf       	out	0x3e, r29	; 62
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	cd bf       	out	0x3d, r28	; 61
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	1f 91       	pop	r17
 8e2:	0f 91       	pop	r16
 8e4:	08 95       	ret

000008e6 <vfprintf>:
 8e6:	2f 92       	push	r2
 8e8:	3f 92       	push	r3
 8ea:	4f 92       	push	r4
 8ec:	5f 92       	push	r5
 8ee:	6f 92       	push	r6
 8f0:	7f 92       	push	r7
 8f2:	8f 92       	push	r8
 8f4:	9f 92       	push	r9
 8f6:	af 92       	push	r10
 8f8:	bf 92       	push	r11
 8fa:	cf 92       	push	r12
 8fc:	df 92       	push	r13
 8fe:	ef 92       	push	r14
 900:	ff 92       	push	r15
 902:	0f 93       	push	r16
 904:	1f 93       	push	r17
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
 90e:	2b 97       	sbiw	r28, 0x0b	; 11
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	f8 94       	cli
 914:	de bf       	out	0x3e, r29	; 62
 916:	0f be       	out	0x3f, r0	; 63
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	6c 01       	movw	r12, r24
 91c:	7b 01       	movw	r14, r22
 91e:	8a 01       	movw	r16, r20
 920:	fc 01       	movw	r30, r24
 922:	17 82       	std	Z+7, r1	; 0x07
 924:	16 82       	std	Z+6, r1	; 0x06
 926:	83 81       	ldd	r24, Z+3	; 0x03
 928:	81 ff       	sbrs	r24, 1
 92a:	bf c1       	rjmp	.+894    	; 0xcaa <vfprintf+0x3c4>
 92c:	ce 01       	movw	r24, r28
 92e:	01 96       	adiw	r24, 0x01	; 1
 930:	3c 01       	movw	r6, r24
 932:	f6 01       	movw	r30, r12
 934:	93 81       	ldd	r25, Z+3	; 0x03
 936:	f7 01       	movw	r30, r14
 938:	93 fd       	sbrc	r25, 3
 93a:	85 91       	lpm	r24, Z+
 93c:	93 ff       	sbrs	r25, 3
 93e:	81 91       	ld	r24, Z+
 940:	7f 01       	movw	r14, r30
 942:	88 23       	and	r24, r24
 944:	09 f4       	brne	.+2      	; 0x948 <vfprintf+0x62>
 946:	ad c1       	rjmp	.+858    	; 0xca2 <vfprintf+0x3bc>
 948:	85 32       	cpi	r24, 0x25	; 37
 94a:	39 f4       	brne	.+14     	; 0x95a <vfprintf+0x74>
 94c:	93 fd       	sbrc	r25, 3
 94e:	85 91       	lpm	r24, Z+
 950:	93 ff       	sbrs	r25, 3
 952:	81 91       	ld	r24, Z+
 954:	7f 01       	movw	r14, r30
 956:	85 32       	cpi	r24, 0x25	; 37
 958:	21 f4       	brne	.+8      	; 0x962 <vfprintf+0x7c>
 95a:	b6 01       	movw	r22, r12
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	d6 d1       	rcall	.+940    	; 0xd0c <fputc>
 960:	e8 cf       	rjmp	.-48     	; 0x932 <vfprintf+0x4c>
 962:	91 2c       	mov	r9, r1
 964:	21 2c       	mov	r2, r1
 966:	31 2c       	mov	r3, r1
 968:	ff e1       	ldi	r31, 0x1F	; 31
 96a:	f3 15       	cp	r31, r3
 96c:	d8 f0       	brcs	.+54     	; 0x9a4 <vfprintf+0xbe>
 96e:	8b 32       	cpi	r24, 0x2B	; 43
 970:	79 f0       	breq	.+30     	; 0x990 <vfprintf+0xaa>
 972:	38 f4       	brcc	.+14     	; 0x982 <vfprintf+0x9c>
 974:	80 32       	cpi	r24, 0x20	; 32
 976:	79 f0       	breq	.+30     	; 0x996 <vfprintf+0xb0>
 978:	83 32       	cpi	r24, 0x23	; 35
 97a:	a1 f4       	brne	.+40     	; 0x9a4 <vfprintf+0xbe>
 97c:	23 2d       	mov	r18, r3
 97e:	20 61       	ori	r18, 0x10	; 16
 980:	1d c0       	rjmp	.+58     	; 0x9bc <vfprintf+0xd6>
 982:	8d 32       	cpi	r24, 0x2D	; 45
 984:	61 f0       	breq	.+24     	; 0x99e <vfprintf+0xb8>
 986:	80 33       	cpi	r24, 0x30	; 48
 988:	69 f4       	brne	.+26     	; 0x9a4 <vfprintf+0xbe>
 98a:	23 2d       	mov	r18, r3
 98c:	21 60       	ori	r18, 0x01	; 1
 98e:	16 c0       	rjmp	.+44     	; 0x9bc <vfprintf+0xd6>
 990:	83 2d       	mov	r24, r3
 992:	82 60       	ori	r24, 0x02	; 2
 994:	38 2e       	mov	r3, r24
 996:	e3 2d       	mov	r30, r3
 998:	e4 60       	ori	r30, 0x04	; 4
 99a:	3e 2e       	mov	r3, r30
 99c:	2a c0       	rjmp	.+84     	; 0x9f2 <vfprintf+0x10c>
 99e:	f3 2d       	mov	r31, r3
 9a0:	f8 60       	ori	r31, 0x08	; 8
 9a2:	1d c0       	rjmp	.+58     	; 0x9de <vfprintf+0xf8>
 9a4:	37 fc       	sbrc	r3, 7
 9a6:	2d c0       	rjmp	.+90     	; 0xa02 <vfprintf+0x11c>
 9a8:	20 ed       	ldi	r18, 0xD0	; 208
 9aa:	28 0f       	add	r18, r24
 9ac:	2a 30       	cpi	r18, 0x0A	; 10
 9ae:	40 f0       	brcs	.+16     	; 0x9c0 <vfprintf+0xda>
 9b0:	8e 32       	cpi	r24, 0x2E	; 46
 9b2:	b9 f4       	brne	.+46     	; 0x9e2 <vfprintf+0xfc>
 9b4:	36 fc       	sbrc	r3, 6
 9b6:	75 c1       	rjmp	.+746    	; 0xca2 <vfprintf+0x3bc>
 9b8:	23 2d       	mov	r18, r3
 9ba:	20 64       	ori	r18, 0x40	; 64
 9bc:	32 2e       	mov	r3, r18
 9be:	19 c0       	rjmp	.+50     	; 0x9f2 <vfprintf+0x10c>
 9c0:	36 fe       	sbrs	r3, 6
 9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <vfprintf+0xea>
 9c4:	8a e0       	ldi	r24, 0x0A	; 10
 9c6:	98 9e       	mul	r9, r24
 9c8:	20 0d       	add	r18, r0
 9ca:	11 24       	eor	r1, r1
 9cc:	92 2e       	mov	r9, r18
 9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <vfprintf+0x10c>
 9d0:	ea e0       	ldi	r30, 0x0A	; 10
 9d2:	2e 9e       	mul	r2, r30
 9d4:	20 0d       	add	r18, r0
 9d6:	11 24       	eor	r1, r1
 9d8:	22 2e       	mov	r2, r18
 9da:	f3 2d       	mov	r31, r3
 9dc:	f0 62       	ori	r31, 0x20	; 32
 9de:	3f 2e       	mov	r3, r31
 9e0:	08 c0       	rjmp	.+16     	; 0x9f2 <vfprintf+0x10c>
 9e2:	8c 36       	cpi	r24, 0x6C	; 108
 9e4:	21 f4       	brne	.+8      	; 0x9ee <vfprintf+0x108>
 9e6:	83 2d       	mov	r24, r3
 9e8:	80 68       	ori	r24, 0x80	; 128
 9ea:	38 2e       	mov	r3, r24
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <vfprintf+0x10c>
 9ee:	88 36       	cpi	r24, 0x68	; 104
 9f0:	41 f4       	brne	.+16     	; 0xa02 <vfprintf+0x11c>
 9f2:	f7 01       	movw	r30, r14
 9f4:	93 fd       	sbrc	r25, 3
 9f6:	85 91       	lpm	r24, Z+
 9f8:	93 ff       	sbrs	r25, 3
 9fa:	81 91       	ld	r24, Z+
 9fc:	7f 01       	movw	r14, r30
 9fe:	81 11       	cpse	r24, r1
 a00:	b3 cf       	rjmp	.-154    	; 0x968 <vfprintf+0x82>
 a02:	98 2f       	mov	r25, r24
 a04:	9f 7d       	andi	r25, 0xDF	; 223
 a06:	95 54       	subi	r25, 0x45	; 69
 a08:	93 30       	cpi	r25, 0x03	; 3
 a0a:	28 f4       	brcc	.+10     	; 0xa16 <vfprintf+0x130>
 a0c:	0c 5f       	subi	r16, 0xFC	; 252
 a0e:	1f 4f       	sbci	r17, 0xFF	; 255
 a10:	9f e3       	ldi	r25, 0x3F	; 63
 a12:	99 83       	std	Y+1, r25	; 0x01
 a14:	0d c0       	rjmp	.+26     	; 0xa30 <vfprintf+0x14a>
 a16:	83 36       	cpi	r24, 0x63	; 99
 a18:	31 f0       	breq	.+12     	; 0xa26 <vfprintf+0x140>
 a1a:	83 37       	cpi	r24, 0x73	; 115
 a1c:	71 f0       	breq	.+28     	; 0xa3a <vfprintf+0x154>
 a1e:	83 35       	cpi	r24, 0x53	; 83
 a20:	09 f0       	breq	.+2      	; 0xa24 <vfprintf+0x13e>
 a22:	55 c0       	rjmp	.+170    	; 0xace <vfprintf+0x1e8>
 a24:	20 c0       	rjmp	.+64     	; 0xa66 <vfprintf+0x180>
 a26:	f8 01       	movw	r30, r16
 a28:	80 81       	ld	r24, Z
 a2a:	89 83       	std	Y+1, r24	; 0x01
 a2c:	0e 5f       	subi	r16, 0xFE	; 254
 a2e:	1f 4f       	sbci	r17, 0xFF	; 255
 a30:	88 24       	eor	r8, r8
 a32:	83 94       	inc	r8
 a34:	91 2c       	mov	r9, r1
 a36:	53 01       	movw	r10, r6
 a38:	12 c0       	rjmp	.+36     	; 0xa5e <vfprintf+0x178>
 a3a:	28 01       	movw	r4, r16
 a3c:	f2 e0       	ldi	r31, 0x02	; 2
 a3e:	4f 0e       	add	r4, r31
 a40:	51 1c       	adc	r5, r1
 a42:	f8 01       	movw	r30, r16
 a44:	a0 80       	ld	r10, Z
 a46:	b1 80       	ldd	r11, Z+1	; 0x01
 a48:	36 fe       	sbrs	r3, 6
 a4a:	03 c0       	rjmp	.+6      	; 0xa52 <vfprintf+0x16c>
 a4c:	69 2d       	mov	r22, r9
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <vfprintf+0x170>
 a52:	6f ef       	ldi	r22, 0xFF	; 255
 a54:	7f ef       	ldi	r23, 0xFF	; 255
 a56:	c5 01       	movw	r24, r10
 a58:	4e d1       	rcall	.+668    	; 0xcf6 <strnlen>
 a5a:	4c 01       	movw	r8, r24
 a5c:	82 01       	movw	r16, r4
 a5e:	f3 2d       	mov	r31, r3
 a60:	ff 77       	andi	r31, 0x7F	; 127
 a62:	3f 2e       	mov	r3, r31
 a64:	15 c0       	rjmp	.+42     	; 0xa90 <vfprintf+0x1aa>
 a66:	28 01       	movw	r4, r16
 a68:	22 e0       	ldi	r18, 0x02	; 2
 a6a:	42 0e       	add	r4, r18
 a6c:	51 1c       	adc	r5, r1
 a6e:	f8 01       	movw	r30, r16
 a70:	a0 80       	ld	r10, Z
 a72:	b1 80       	ldd	r11, Z+1	; 0x01
 a74:	36 fe       	sbrs	r3, 6
 a76:	03 c0       	rjmp	.+6      	; 0xa7e <vfprintf+0x198>
 a78:	69 2d       	mov	r22, r9
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <vfprintf+0x19c>
 a7e:	6f ef       	ldi	r22, 0xFF	; 255
 a80:	7f ef       	ldi	r23, 0xFF	; 255
 a82:	c5 01       	movw	r24, r10
 a84:	2d d1       	rcall	.+602    	; 0xce0 <strnlen_P>
 a86:	4c 01       	movw	r8, r24
 a88:	f3 2d       	mov	r31, r3
 a8a:	f0 68       	ori	r31, 0x80	; 128
 a8c:	3f 2e       	mov	r3, r31
 a8e:	82 01       	movw	r16, r4
 a90:	33 fc       	sbrc	r3, 3
 a92:	19 c0       	rjmp	.+50     	; 0xac6 <vfprintf+0x1e0>
 a94:	82 2d       	mov	r24, r2
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	88 16       	cp	r8, r24
 a9a:	99 06       	cpc	r9, r25
 a9c:	a0 f4       	brcc	.+40     	; 0xac6 <vfprintf+0x1e0>
 a9e:	b6 01       	movw	r22, r12
 aa0:	80 e2       	ldi	r24, 0x20	; 32
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	33 d1       	rcall	.+614    	; 0xd0c <fputc>
 aa6:	2a 94       	dec	r2
 aa8:	f5 cf       	rjmp	.-22     	; 0xa94 <vfprintf+0x1ae>
 aaa:	f5 01       	movw	r30, r10
 aac:	37 fc       	sbrc	r3, 7
 aae:	85 91       	lpm	r24, Z+
 ab0:	37 fe       	sbrs	r3, 7
 ab2:	81 91       	ld	r24, Z+
 ab4:	5f 01       	movw	r10, r30
 ab6:	b6 01       	movw	r22, r12
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	28 d1       	rcall	.+592    	; 0xd0c <fputc>
 abc:	21 10       	cpse	r2, r1
 abe:	2a 94       	dec	r2
 ac0:	21 e0       	ldi	r18, 0x01	; 1
 ac2:	82 1a       	sub	r8, r18
 ac4:	91 08       	sbc	r9, r1
 ac6:	81 14       	cp	r8, r1
 ac8:	91 04       	cpc	r9, r1
 aca:	79 f7       	brne	.-34     	; 0xaaa <vfprintf+0x1c4>
 acc:	e1 c0       	rjmp	.+450    	; 0xc90 <vfprintf+0x3aa>
 ace:	84 36       	cpi	r24, 0x64	; 100
 ad0:	11 f0       	breq	.+4      	; 0xad6 <vfprintf+0x1f0>
 ad2:	89 36       	cpi	r24, 0x69	; 105
 ad4:	39 f5       	brne	.+78     	; 0xb24 <vfprintf+0x23e>
 ad6:	f8 01       	movw	r30, r16
 ad8:	37 fe       	sbrs	r3, 7
 ada:	07 c0       	rjmp	.+14     	; 0xaea <vfprintf+0x204>
 adc:	60 81       	ld	r22, Z
 ade:	71 81       	ldd	r23, Z+1	; 0x01
 ae0:	82 81       	ldd	r24, Z+2	; 0x02
 ae2:	93 81       	ldd	r25, Z+3	; 0x03
 ae4:	0c 5f       	subi	r16, 0xFC	; 252
 ae6:	1f 4f       	sbci	r17, 0xFF	; 255
 ae8:	08 c0       	rjmp	.+16     	; 0xafa <vfprintf+0x214>
 aea:	60 81       	ld	r22, Z
 aec:	71 81       	ldd	r23, Z+1	; 0x01
 aee:	07 2e       	mov	r0, r23
 af0:	00 0c       	add	r0, r0
 af2:	88 0b       	sbc	r24, r24
 af4:	99 0b       	sbc	r25, r25
 af6:	0e 5f       	subi	r16, 0xFE	; 254
 af8:	1f 4f       	sbci	r17, 0xFF	; 255
 afa:	f3 2d       	mov	r31, r3
 afc:	ff 76       	andi	r31, 0x6F	; 111
 afe:	3f 2e       	mov	r3, r31
 b00:	97 ff       	sbrs	r25, 7
 b02:	09 c0       	rjmp	.+18     	; 0xb16 <vfprintf+0x230>
 b04:	90 95       	com	r25
 b06:	80 95       	com	r24
 b08:	70 95       	com	r23
 b0a:	61 95       	neg	r22
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8f 4f       	sbci	r24, 0xFF	; 255
 b10:	9f 4f       	sbci	r25, 0xFF	; 255
 b12:	f0 68       	ori	r31, 0x80	; 128
 b14:	3f 2e       	mov	r3, r31
 b16:	2a e0       	ldi	r18, 0x0A	; 10
 b18:	30 e0       	ldi	r19, 0x00	; 0
 b1a:	a3 01       	movw	r20, r6
 b1c:	33 d1       	rcall	.+614    	; 0xd84 <__ultoa_invert>
 b1e:	88 2e       	mov	r8, r24
 b20:	86 18       	sub	r8, r6
 b22:	44 c0       	rjmp	.+136    	; 0xbac <vfprintf+0x2c6>
 b24:	85 37       	cpi	r24, 0x75	; 117
 b26:	31 f4       	brne	.+12     	; 0xb34 <vfprintf+0x24e>
 b28:	23 2d       	mov	r18, r3
 b2a:	2f 7e       	andi	r18, 0xEF	; 239
 b2c:	b2 2e       	mov	r11, r18
 b2e:	2a e0       	ldi	r18, 0x0A	; 10
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	25 c0       	rjmp	.+74     	; 0xb7e <vfprintf+0x298>
 b34:	93 2d       	mov	r25, r3
 b36:	99 7f       	andi	r25, 0xF9	; 249
 b38:	b9 2e       	mov	r11, r25
 b3a:	8f 36       	cpi	r24, 0x6F	; 111
 b3c:	c1 f0       	breq	.+48     	; 0xb6e <vfprintf+0x288>
 b3e:	18 f4       	brcc	.+6      	; 0xb46 <vfprintf+0x260>
 b40:	88 35       	cpi	r24, 0x58	; 88
 b42:	79 f0       	breq	.+30     	; 0xb62 <vfprintf+0x27c>
 b44:	ae c0       	rjmp	.+348    	; 0xca2 <vfprintf+0x3bc>
 b46:	80 37       	cpi	r24, 0x70	; 112
 b48:	19 f0       	breq	.+6      	; 0xb50 <vfprintf+0x26a>
 b4a:	88 37       	cpi	r24, 0x78	; 120
 b4c:	21 f0       	breq	.+8      	; 0xb56 <vfprintf+0x270>
 b4e:	a9 c0       	rjmp	.+338    	; 0xca2 <vfprintf+0x3bc>
 b50:	e9 2f       	mov	r30, r25
 b52:	e0 61       	ori	r30, 0x10	; 16
 b54:	be 2e       	mov	r11, r30
 b56:	b4 fe       	sbrs	r11, 4
 b58:	0d c0       	rjmp	.+26     	; 0xb74 <vfprintf+0x28e>
 b5a:	fb 2d       	mov	r31, r11
 b5c:	f4 60       	ori	r31, 0x04	; 4
 b5e:	bf 2e       	mov	r11, r31
 b60:	09 c0       	rjmp	.+18     	; 0xb74 <vfprintf+0x28e>
 b62:	34 fe       	sbrs	r3, 4
 b64:	0a c0       	rjmp	.+20     	; 0xb7a <vfprintf+0x294>
 b66:	29 2f       	mov	r18, r25
 b68:	26 60       	ori	r18, 0x06	; 6
 b6a:	b2 2e       	mov	r11, r18
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <vfprintf+0x294>
 b6e:	28 e0       	ldi	r18, 0x08	; 8
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	05 c0       	rjmp	.+10     	; 0xb7e <vfprintf+0x298>
 b74:	20 e1       	ldi	r18, 0x10	; 16
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x298>
 b7a:	20 e1       	ldi	r18, 0x10	; 16
 b7c:	32 e0       	ldi	r19, 0x02	; 2
 b7e:	f8 01       	movw	r30, r16
 b80:	b7 fe       	sbrs	r11, 7
 b82:	07 c0       	rjmp	.+14     	; 0xb92 <vfprintf+0x2ac>
 b84:	60 81       	ld	r22, Z
 b86:	71 81       	ldd	r23, Z+1	; 0x01
 b88:	82 81       	ldd	r24, Z+2	; 0x02
 b8a:	93 81       	ldd	r25, Z+3	; 0x03
 b8c:	0c 5f       	subi	r16, 0xFC	; 252
 b8e:	1f 4f       	sbci	r17, 0xFF	; 255
 b90:	06 c0       	rjmp	.+12     	; 0xb9e <vfprintf+0x2b8>
 b92:	60 81       	ld	r22, Z
 b94:	71 81       	ldd	r23, Z+1	; 0x01
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	0e 5f       	subi	r16, 0xFE	; 254
 b9c:	1f 4f       	sbci	r17, 0xFF	; 255
 b9e:	a3 01       	movw	r20, r6
 ba0:	f1 d0       	rcall	.+482    	; 0xd84 <__ultoa_invert>
 ba2:	88 2e       	mov	r8, r24
 ba4:	86 18       	sub	r8, r6
 ba6:	fb 2d       	mov	r31, r11
 ba8:	ff 77       	andi	r31, 0x7F	; 127
 baa:	3f 2e       	mov	r3, r31
 bac:	36 fe       	sbrs	r3, 6
 bae:	0d c0       	rjmp	.+26     	; 0xbca <vfprintf+0x2e4>
 bb0:	23 2d       	mov	r18, r3
 bb2:	2e 7f       	andi	r18, 0xFE	; 254
 bb4:	a2 2e       	mov	r10, r18
 bb6:	89 14       	cp	r8, r9
 bb8:	58 f4       	brcc	.+22     	; 0xbd0 <vfprintf+0x2ea>
 bba:	34 fe       	sbrs	r3, 4
 bbc:	0b c0       	rjmp	.+22     	; 0xbd4 <vfprintf+0x2ee>
 bbe:	32 fc       	sbrc	r3, 2
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <vfprintf+0x2ee>
 bc2:	83 2d       	mov	r24, r3
 bc4:	8e 7e       	andi	r24, 0xEE	; 238
 bc6:	a8 2e       	mov	r10, r24
 bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <vfprintf+0x2ee>
 bca:	b8 2c       	mov	r11, r8
 bcc:	a3 2c       	mov	r10, r3
 bce:	03 c0       	rjmp	.+6      	; 0xbd6 <vfprintf+0x2f0>
 bd0:	b8 2c       	mov	r11, r8
 bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <vfprintf+0x2f0>
 bd4:	b9 2c       	mov	r11, r9
 bd6:	a4 fe       	sbrs	r10, 4
 bd8:	0f c0       	rjmp	.+30     	; 0xbf8 <vfprintf+0x312>
 bda:	fe 01       	movw	r30, r28
 bdc:	e8 0d       	add	r30, r8
 bde:	f1 1d       	adc	r31, r1
 be0:	80 81       	ld	r24, Z
 be2:	80 33       	cpi	r24, 0x30	; 48
 be4:	21 f4       	brne	.+8      	; 0xbee <vfprintf+0x308>
 be6:	9a 2d       	mov	r25, r10
 be8:	99 7e       	andi	r25, 0xE9	; 233
 bea:	a9 2e       	mov	r10, r25
 bec:	09 c0       	rjmp	.+18     	; 0xc00 <vfprintf+0x31a>
 bee:	a2 fe       	sbrs	r10, 2
 bf0:	06 c0       	rjmp	.+12     	; 0xbfe <vfprintf+0x318>
 bf2:	b3 94       	inc	r11
 bf4:	b3 94       	inc	r11
 bf6:	04 c0       	rjmp	.+8      	; 0xc00 <vfprintf+0x31a>
 bf8:	8a 2d       	mov	r24, r10
 bfa:	86 78       	andi	r24, 0x86	; 134
 bfc:	09 f0       	breq	.+2      	; 0xc00 <vfprintf+0x31a>
 bfe:	b3 94       	inc	r11
 c00:	a3 fc       	sbrc	r10, 3
 c02:	10 c0       	rjmp	.+32     	; 0xc24 <vfprintf+0x33e>
 c04:	a0 fe       	sbrs	r10, 0
 c06:	06 c0       	rjmp	.+12     	; 0xc14 <vfprintf+0x32e>
 c08:	b2 14       	cp	r11, r2
 c0a:	80 f4       	brcc	.+32     	; 0xc2c <vfprintf+0x346>
 c0c:	28 0c       	add	r2, r8
 c0e:	92 2c       	mov	r9, r2
 c10:	9b 18       	sub	r9, r11
 c12:	0d c0       	rjmp	.+26     	; 0xc2e <vfprintf+0x348>
 c14:	b2 14       	cp	r11, r2
 c16:	58 f4       	brcc	.+22     	; 0xc2e <vfprintf+0x348>
 c18:	b6 01       	movw	r22, r12
 c1a:	80 e2       	ldi	r24, 0x20	; 32
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	76 d0       	rcall	.+236    	; 0xd0c <fputc>
 c20:	b3 94       	inc	r11
 c22:	f8 cf       	rjmp	.-16     	; 0xc14 <vfprintf+0x32e>
 c24:	b2 14       	cp	r11, r2
 c26:	18 f4       	brcc	.+6      	; 0xc2e <vfprintf+0x348>
 c28:	2b 18       	sub	r2, r11
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <vfprintf+0x34a>
 c2c:	98 2c       	mov	r9, r8
 c2e:	21 2c       	mov	r2, r1
 c30:	a4 fe       	sbrs	r10, 4
 c32:	0f c0       	rjmp	.+30     	; 0xc52 <vfprintf+0x36c>
 c34:	b6 01       	movw	r22, r12
 c36:	80 e3       	ldi	r24, 0x30	; 48
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	68 d0       	rcall	.+208    	; 0xd0c <fputc>
 c3c:	a2 fe       	sbrs	r10, 2
 c3e:	16 c0       	rjmp	.+44     	; 0xc6c <vfprintf+0x386>
 c40:	a1 fc       	sbrc	r10, 1
 c42:	03 c0       	rjmp	.+6      	; 0xc4a <vfprintf+0x364>
 c44:	88 e7       	ldi	r24, 0x78	; 120
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <vfprintf+0x368>
 c4a:	88 e5       	ldi	r24, 0x58	; 88
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	b6 01       	movw	r22, r12
 c50:	0c c0       	rjmp	.+24     	; 0xc6a <vfprintf+0x384>
 c52:	8a 2d       	mov	r24, r10
 c54:	86 78       	andi	r24, 0x86	; 134
 c56:	51 f0       	breq	.+20     	; 0xc6c <vfprintf+0x386>
 c58:	a1 fe       	sbrs	r10, 1
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <vfprintf+0x37a>
 c5c:	8b e2       	ldi	r24, 0x2B	; 43
 c5e:	01 c0       	rjmp	.+2      	; 0xc62 <vfprintf+0x37c>
 c60:	80 e2       	ldi	r24, 0x20	; 32
 c62:	a7 fc       	sbrc	r10, 7
 c64:	8d e2       	ldi	r24, 0x2D	; 45
 c66:	b6 01       	movw	r22, r12
 c68:	90 e0       	ldi	r25, 0x00	; 0
 c6a:	50 d0       	rcall	.+160    	; 0xd0c <fputc>
 c6c:	89 14       	cp	r8, r9
 c6e:	30 f4       	brcc	.+12     	; 0xc7c <vfprintf+0x396>
 c70:	b6 01       	movw	r22, r12
 c72:	80 e3       	ldi	r24, 0x30	; 48
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	4a d0       	rcall	.+148    	; 0xd0c <fputc>
 c78:	9a 94       	dec	r9
 c7a:	f8 cf       	rjmp	.-16     	; 0xc6c <vfprintf+0x386>
 c7c:	8a 94       	dec	r8
 c7e:	f3 01       	movw	r30, r6
 c80:	e8 0d       	add	r30, r8
 c82:	f1 1d       	adc	r31, r1
 c84:	80 81       	ld	r24, Z
 c86:	b6 01       	movw	r22, r12
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	40 d0       	rcall	.+128    	; 0xd0c <fputc>
 c8c:	81 10       	cpse	r8, r1
 c8e:	f6 cf       	rjmp	.-20     	; 0xc7c <vfprintf+0x396>
 c90:	22 20       	and	r2, r2
 c92:	09 f4       	brne	.+2      	; 0xc96 <vfprintf+0x3b0>
 c94:	4e ce       	rjmp	.-868    	; 0x932 <vfprintf+0x4c>
 c96:	b6 01       	movw	r22, r12
 c98:	80 e2       	ldi	r24, 0x20	; 32
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	37 d0       	rcall	.+110    	; 0xd0c <fputc>
 c9e:	2a 94       	dec	r2
 ca0:	f7 cf       	rjmp	.-18     	; 0xc90 <vfprintf+0x3aa>
 ca2:	f6 01       	movw	r30, r12
 ca4:	86 81       	ldd	r24, Z+6	; 0x06
 ca6:	97 81       	ldd	r25, Z+7	; 0x07
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x3c8>
 caa:	8f ef       	ldi	r24, 0xFF	; 255
 cac:	9f ef       	ldi	r25, 0xFF	; 255
 cae:	2b 96       	adiw	r28, 0x0b	; 11
 cb0:	0f b6       	in	r0, 0x3f	; 63
 cb2:	f8 94       	cli
 cb4:	de bf       	out	0x3e, r29	; 62
 cb6:	0f be       	out	0x3f, r0	; 63
 cb8:	cd bf       	out	0x3d, r28	; 61
 cba:	df 91       	pop	r29
 cbc:	cf 91       	pop	r28
 cbe:	1f 91       	pop	r17
 cc0:	0f 91       	pop	r16
 cc2:	ff 90       	pop	r15
 cc4:	ef 90       	pop	r14
 cc6:	df 90       	pop	r13
 cc8:	cf 90       	pop	r12
 cca:	bf 90       	pop	r11
 ccc:	af 90       	pop	r10
 cce:	9f 90       	pop	r9
 cd0:	8f 90       	pop	r8
 cd2:	7f 90       	pop	r7
 cd4:	6f 90       	pop	r6
 cd6:	5f 90       	pop	r5
 cd8:	4f 90       	pop	r4
 cda:	3f 90       	pop	r3
 cdc:	2f 90       	pop	r2
 cde:	08 95       	ret

00000ce0 <strnlen_P>:
 ce0:	fc 01       	movw	r30, r24
 ce2:	05 90       	lpm	r0, Z+
 ce4:	61 50       	subi	r22, 0x01	; 1
 ce6:	70 40       	sbci	r23, 0x00	; 0
 ce8:	01 10       	cpse	r0, r1
 cea:	d8 f7       	brcc	.-10     	; 0xce2 <strnlen_P+0x2>
 cec:	80 95       	com	r24
 cee:	90 95       	com	r25
 cf0:	8e 0f       	add	r24, r30
 cf2:	9f 1f       	adc	r25, r31
 cf4:	08 95       	ret

00000cf6 <strnlen>:
 cf6:	fc 01       	movw	r30, r24
 cf8:	61 50       	subi	r22, 0x01	; 1
 cfa:	70 40       	sbci	r23, 0x00	; 0
 cfc:	01 90       	ld	r0, Z+
 cfe:	01 10       	cpse	r0, r1
 d00:	d8 f7       	brcc	.-10     	; 0xcf8 <strnlen+0x2>
 d02:	80 95       	com	r24
 d04:	90 95       	com	r25
 d06:	8e 0f       	add	r24, r30
 d08:	9f 1f       	adc	r25, r31
 d0a:	08 95       	ret

00000d0c <fputc>:
 d0c:	0f 93       	push	r16
 d0e:	1f 93       	push	r17
 d10:	cf 93       	push	r28
 d12:	df 93       	push	r29
 d14:	fb 01       	movw	r30, r22
 d16:	23 81       	ldd	r18, Z+3	; 0x03
 d18:	21 fd       	sbrc	r18, 1
 d1a:	03 c0       	rjmp	.+6      	; 0xd22 <fputc+0x16>
 d1c:	8f ef       	ldi	r24, 0xFF	; 255
 d1e:	9f ef       	ldi	r25, 0xFF	; 255
 d20:	2c c0       	rjmp	.+88     	; 0xd7a <fputc+0x6e>
 d22:	22 ff       	sbrs	r18, 2
 d24:	16 c0       	rjmp	.+44     	; 0xd52 <fputc+0x46>
 d26:	46 81       	ldd	r20, Z+6	; 0x06
 d28:	57 81       	ldd	r21, Z+7	; 0x07
 d2a:	24 81       	ldd	r18, Z+4	; 0x04
 d2c:	35 81       	ldd	r19, Z+5	; 0x05
 d2e:	42 17       	cp	r20, r18
 d30:	53 07       	cpc	r21, r19
 d32:	44 f4       	brge	.+16     	; 0xd44 <fputc+0x38>
 d34:	a0 81       	ld	r26, Z
 d36:	b1 81       	ldd	r27, Z+1	; 0x01
 d38:	9d 01       	movw	r18, r26
 d3a:	2f 5f       	subi	r18, 0xFF	; 255
 d3c:	3f 4f       	sbci	r19, 0xFF	; 255
 d3e:	31 83       	std	Z+1, r19	; 0x01
 d40:	20 83       	st	Z, r18
 d42:	8c 93       	st	X, r24
 d44:	26 81       	ldd	r18, Z+6	; 0x06
 d46:	37 81       	ldd	r19, Z+7	; 0x07
 d48:	2f 5f       	subi	r18, 0xFF	; 255
 d4a:	3f 4f       	sbci	r19, 0xFF	; 255
 d4c:	37 83       	std	Z+7, r19	; 0x07
 d4e:	26 83       	std	Z+6, r18	; 0x06
 d50:	14 c0       	rjmp	.+40     	; 0xd7a <fputc+0x6e>
 d52:	8b 01       	movw	r16, r22
 d54:	ec 01       	movw	r28, r24
 d56:	fb 01       	movw	r30, r22
 d58:	00 84       	ldd	r0, Z+8	; 0x08
 d5a:	f1 85       	ldd	r31, Z+9	; 0x09
 d5c:	e0 2d       	mov	r30, r0
 d5e:	19 95       	eicall
 d60:	89 2b       	or	r24, r25
 d62:	e1 f6       	brne	.-72     	; 0xd1c <fputc+0x10>
 d64:	d8 01       	movw	r26, r16
 d66:	16 96       	adiw	r26, 0x06	; 6
 d68:	8d 91       	ld	r24, X+
 d6a:	9c 91       	ld	r25, X
 d6c:	17 97       	sbiw	r26, 0x07	; 7
 d6e:	01 96       	adiw	r24, 0x01	; 1
 d70:	17 96       	adiw	r26, 0x07	; 7
 d72:	9c 93       	st	X, r25
 d74:	8e 93       	st	-X, r24
 d76:	16 97       	sbiw	r26, 0x06	; 6
 d78:	ce 01       	movw	r24, r28
 d7a:	df 91       	pop	r29
 d7c:	cf 91       	pop	r28
 d7e:	1f 91       	pop	r17
 d80:	0f 91       	pop	r16
 d82:	08 95       	ret

00000d84 <__ultoa_invert>:
 d84:	fa 01       	movw	r30, r20
 d86:	aa 27       	eor	r26, r26
 d88:	28 30       	cpi	r18, 0x08	; 8
 d8a:	51 f1       	breq	.+84     	; 0xde0 <__ultoa_invert+0x5c>
 d8c:	20 31       	cpi	r18, 0x10	; 16
 d8e:	81 f1       	breq	.+96     	; 0xdf0 <__ultoa_invert+0x6c>
 d90:	e8 94       	clt
 d92:	6f 93       	push	r22
 d94:	6e 7f       	andi	r22, 0xFE	; 254
 d96:	6e 5f       	subi	r22, 0xFE	; 254
 d98:	7f 4f       	sbci	r23, 0xFF	; 255
 d9a:	8f 4f       	sbci	r24, 0xFF	; 255
 d9c:	9f 4f       	sbci	r25, 0xFF	; 255
 d9e:	af 4f       	sbci	r26, 0xFF	; 255
 da0:	b1 e0       	ldi	r27, 0x01	; 1
 da2:	3e d0       	rcall	.+124    	; 0xe20 <__ultoa_invert+0x9c>
 da4:	b4 e0       	ldi	r27, 0x04	; 4
 da6:	3c d0       	rcall	.+120    	; 0xe20 <__ultoa_invert+0x9c>
 da8:	67 0f       	add	r22, r23
 daa:	78 1f       	adc	r23, r24
 dac:	89 1f       	adc	r24, r25
 dae:	9a 1f       	adc	r25, r26
 db0:	a1 1d       	adc	r26, r1
 db2:	68 0f       	add	r22, r24
 db4:	79 1f       	adc	r23, r25
 db6:	8a 1f       	adc	r24, r26
 db8:	91 1d       	adc	r25, r1
 dba:	a1 1d       	adc	r26, r1
 dbc:	6a 0f       	add	r22, r26
 dbe:	71 1d       	adc	r23, r1
 dc0:	81 1d       	adc	r24, r1
 dc2:	91 1d       	adc	r25, r1
 dc4:	a1 1d       	adc	r26, r1
 dc6:	20 d0       	rcall	.+64     	; 0xe08 <__ultoa_invert+0x84>
 dc8:	09 f4       	brne	.+2      	; 0xdcc <__ultoa_invert+0x48>
 dca:	68 94       	set
 dcc:	3f 91       	pop	r19
 dce:	2a e0       	ldi	r18, 0x0A	; 10
 dd0:	26 9f       	mul	r18, r22
 dd2:	11 24       	eor	r1, r1
 dd4:	30 19       	sub	r19, r0
 dd6:	30 5d       	subi	r19, 0xD0	; 208
 dd8:	31 93       	st	Z+, r19
 dda:	de f6       	brtc	.-74     	; 0xd92 <__ultoa_invert+0xe>
 ddc:	cf 01       	movw	r24, r30
 dde:	08 95       	ret
 de0:	46 2f       	mov	r20, r22
 de2:	47 70       	andi	r20, 0x07	; 7
 de4:	40 5d       	subi	r20, 0xD0	; 208
 de6:	41 93       	st	Z+, r20
 de8:	b3 e0       	ldi	r27, 0x03	; 3
 dea:	0f d0       	rcall	.+30     	; 0xe0a <__ultoa_invert+0x86>
 dec:	c9 f7       	brne	.-14     	; 0xde0 <__ultoa_invert+0x5c>
 dee:	f6 cf       	rjmp	.-20     	; 0xddc <__ultoa_invert+0x58>
 df0:	46 2f       	mov	r20, r22
 df2:	4f 70       	andi	r20, 0x0F	; 15
 df4:	40 5d       	subi	r20, 0xD0	; 208
 df6:	4a 33       	cpi	r20, 0x3A	; 58
 df8:	18 f0       	brcs	.+6      	; 0xe00 <__ultoa_invert+0x7c>
 dfa:	49 5d       	subi	r20, 0xD9	; 217
 dfc:	31 fd       	sbrc	r19, 1
 dfe:	40 52       	subi	r20, 0x20	; 32
 e00:	41 93       	st	Z+, r20
 e02:	02 d0       	rcall	.+4      	; 0xe08 <__ultoa_invert+0x84>
 e04:	a9 f7       	brne	.-22     	; 0xdf0 <__ultoa_invert+0x6c>
 e06:	ea cf       	rjmp	.-44     	; 0xddc <__ultoa_invert+0x58>
 e08:	b4 e0       	ldi	r27, 0x04	; 4
 e0a:	a6 95       	lsr	r26
 e0c:	97 95       	ror	r25
 e0e:	87 95       	ror	r24
 e10:	77 95       	ror	r23
 e12:	67 95       	ror	r22
 e14:	ba 95       	dec	r27
 e16:	c9 f7       	brne	.-14     	; 0xe0a <__ultoa_invert+0x86>
 e18:	00 97       	sbiw	r24, 0x00	; 0
 e1a:	61 05       	cpc	r22, r1
 e1c:	71 05       	cpc	r23, r1
 e1e:	08 95       	ret
 e20:	9b 01       	movw	r18, r22
 e22:	ac 01       	movw	r20, r24
 e24:	0a 2e       	mov	r0, r26
 e26:	06 94       	lsr	r0
 e28:	57 95       	ror	r21
 e2a:	47 95       	ror	r20
 e2c:	37 95       	ror	r19
 e2e:	27 95       	ror	r18
 e30:	ba 95       	dec	r27
 e32:	c9 f7       	brne	.-14     	; 0xe26 <__ultoa_invert+0xa2>
 e34:	62 0f       	add	r22, r18
 e36:	73 1f       	adc	r23, r19
 e38:	84 1f       	adc	r24, r20
 e3a:	95 1f       	adc	r25, r21
 e3c:	a0 1d       	adc	r26, r0
 e3e:	08 95       	ret

00000e40 <_exit>:
 e40:	f8 94       	cli

00000e42 <__stop_program>:
 e42:	ff cf       	rjmp	.-2      	; 0xe42 <__stop_program>
