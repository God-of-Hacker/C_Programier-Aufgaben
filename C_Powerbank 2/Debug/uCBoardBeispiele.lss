
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  0000113a  000011ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000113a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00001242  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002588  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001005  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015e9  00000000  00000000  00004a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00006040  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d87  00000000  00000000  000066c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002293  00000000  00000000  0000744f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000096e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	23 c5       	rjmp	.+2630   	; 0xaa4 <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e3       	ldi	r30, 0x3A	; 58
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 37       	cpi	r26, 0x74	; 116
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a4 e7       	ldi	r26, 0x74	; 116
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 3f       	cpi	r26, 0xF2	; 242
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	03 d0       	rcall	.+6      	; 0x126 <main>
     120:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <main>:
#define     ON_AKKU                    200
#define     OFF_AKKU                   800
#define     PERIOD_AKKU              (ON_AKKU+OFF_AKKU)
//Hauptprogramm
int main(void)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	67 97       	sbiw	r28, 0x17	; 23
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	f8 94       	cli
     134:	de bf       	out	0x3e, r29	; 62
     136:	0f be       	out	0x3f, r0	; 63
     138:	cd bf       	out	0x3d, r28	; 61
    uint64_t timerBlink_selber_ms = 0;
    uint64_t akkuBlinken = 0;
    uint64_t timerBlink_akku_ms = 0;
    
    //Initialisieren
    initBoard(1);
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	30 d3       	rcall	.+1632   	; 0x79e <initBoard>
    uint16_t ladenAnzeige_Led = 0;
    uint16_t akkuanzeige_Led = 0;
    uint64_t timerBlink_laden_ms = 0;
    uint64_t timerBlink_selber_ms = 0;
    uint64_t akkuBlinken = 0;
    uint64_t timerBlink_akku_ms = 0;
     13e:	1c 86       	std	Y+12, r1	; 0x0c
     140:	1d 86       	std	Y+13, r1	; 0x0d
     142:	1e 86       	std	Y+14, r1	; 0x0e
     144:	1f 86       	std	Y+15, r1	; 0x0f
     146:	18 8a       	std	Y+16, r1	; 0x10
     148:	19 8a       	std	Y+17, r1	; 0x11
     14a:	1a 8a       	std	Y+18, r1	; 0x12
     14c:	1b 8a       	std	Y+19, r1	; 0x13
    uint16_t ladenAnzeige_Blinken = 0;
    uint16_t selberLaden_blinken = 0;
    uint16_t ladenAnzeige_Led = 0;
    uint16_t akkuanzeige_Led = 0;
    uint64_t timerBlink_laden_ms = 0;
    uint64_t timerBlink_selber_ms = 0;
     14e:	d1 2c       	mov	r13, r1
     150:	e1 2c       	mov	r14, r1
     152:	f1 2c       	mov	r15, r1
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	10 e0       	ldi	r17, 0x00	; 0
     158:	b1 2c       	mov	r11, r1
     15a:	c1 2c       	mov	r12, r1
    uint16_t powerLed = 0;
    uint16_t ladenAnzeige_Blinken = 0;
    uint16_t selberLaden_blinken = 0;
    uint16_t ladenAnzeige_Led = 0;
    uint16_t akkuanzeige_Led = 0;
    uint64_t timerBlink_laden_ms = 0;
     15c:	1b 82       	std	Y+3, r1	; 0x03
     15e:	1c 82       	std	Y+4, r1	; 0x04
     160:	1d 82       	std	Y+5, r1	; 0x05
     162:	1e 82       	std	Y+6, r1	; 0x06
     164:	1f 82       	std	Y+7, r1	; 0x07
     166:	18 86       	std	Y+8, r1	; 0x08
     168:	19 86       	std	Y+9, r1	; 0x09
     16a:	71 2c       	mov	r7, r1
    uint8_t selber_laden = 0;
    uint16_t powerLed = 0;
    uint16_t ladenAnzeige_Blinken = 0;
    uint16_t selberLaden_blinken = 0;
    uint16_t ladenAnzeige_Led = 0;
    uint16_t akkuanzeige_Led = 0;
     16c:	1a 82       	std	Y+2, r1	; 0x02
     16e:	19 82       	std	Y+1, r1	; 0x01
    uint8_t geraet_Laden = 0;
    uint8_t selber_laden = 0;
    uint16_t powerLed = 0;
    uint16_t ladenAnzeige_Blinken = 0;
    uint16_t selberLaden_blinken = 0;
    uint16_t ladenAnzeige_Led = 0;
     170:	81 2c       	mov	r8, r1
     172:	91 2c       	mov	r9, r1
    //Variablen
    uint8_t inSpannungsmessung_schalter = 0;
    uint8_t On = 0;
    uint8_t geraet_Laden = 0;
    uint8_t selber_laden = 0;
    uint16_t powerLed = 0;
     174:	41 2c       	mov	r4, r1
     176:	51 2c       	mov	r5, r1
            ladenAnzeige_Blinken = 1;
        }
        else
        {
            ladenAnzeige_Blinken = 0;
            ladenAnzeige_Led = OFF;
     178:	21 2c       	mov	r2, r1
     17a:	31 2c       	mov	r3, r1
                {
                    ladenAnzeige_Led = OFF;
                }
                if (timerBlink_laden_ms >= PERIOD_LADEN)
                {
                    ladenAnzeige_Led = IN_LADE_GERAET;
     17c:	7a 86       	std	Y+10, r7	; 0x0a
     17e:	61 2c       	mov	r6, r1
     180:	71 2c       	mov	r7, r1
     182:	ad 2c       	mov	r10, r13
    
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        inSpannungsmessung_schalter = switchReadAll() & IN_SPANNUNGSMESSUNG;
     184:	19 83       	std	Y+1, r17	; 0x01
     186:	b0 d1       	rcall	.+864    	; 0x4e8 <switchReadAll>
        inSpannungsmessung_schalter = inSpannungsmessung_schalter >> IN_OFFSET_SPANNUNG;
     188:	82 95       	swap	r24
     18a:	86 95       	lsr	r24
     18c:	86 95       	lsr	r24
     18e:	83 70       	andi	r24, 0x03	; 3
        geraet_Laden = switchReadAll() & IN_LADE_GERAET;
     190:	8e 8b       	std	Y+22, r24	; 0x16
     192:	aa d1       	rcall	.+852    	; 0x4e8 <switchReadAll>
        selber_laden = switchReadAll() & IN_SELBER_LADE_GERAET;
     194:	8b 87       	std	Y+11, r24	; 0x0b
     196:	a8 d1       	rcall	.+848    	; 0x4e8 <switchReadAll>
     198:	18 2f       	mov	r17, r24
        On = switchReadAll() & ON_OFF_SCHALTER;
     19a:	14 70       	andi	r17, 0x04	; 4
     19c:	a5 d1       	rcall	.+842    	; 0x4e8 <switchReadAll>
     19e:	81 70       	andi	r24, 0x01	; 1
        
        //Verarbeitung-------------------------------------------------------------
        
        if (geraet_Laden)
     1a0:	2b 85       	ldd	r18, Y+11	; 0x0b
     1a2:	23 fd       	sbrc	r18, 3
     1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <main+0x8a>
            ladenAnzeige_Blinken = 1;
        }
        else
        {
            ladenAnzeige_Blinken = 0;
            ladenAnzeige_Led = OFF;
     1a6:	82 2c       	mov	r8, r2
     1a8:	93 2c       	mov	r9, r3
        {
            ladenAnzeige_Blinken = 1;
        }
        else
        {
            ladenAnzeige_Blinken = 0;
     1aa:	22 2d       	mov	r18, r2
     1ac:	33 2d       	mov	r19, r3
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x8e>
        
        //Verarbeitung-------------------------------------------------------------
        
        if (geraet_Laden)
        {
            ladenAnzeige_Blinken = 1;
     1b0:	21 e0       	ldi	r18, 0x01	; 1
     1b2:	30 e0       	ldi	r19, 0x00	; 0
        else
        {
            ladenAnzeige_Blinken = 0;
            ladenAnzeige_Led = OFF;
        }
        if (selber_laden)
     1b4:	11 11       	cpse	r17, r1
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <main+0x9c>
        {
            selberLaden_blinken = 1;
        }
        else
        {
            selberLaden_blinken = 0;
     1b8:	e2 2d       	mov	r30, r2
     1ba:	f3 2d       	mov	r31, r3
            powerLed = OFF;
     1bc:	42 2c       	mov	r4, r2
     1be:	53 2c       	mov	r5, r3
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <main+0xa0>
            ladenAnzeige_Blinken = 0;
            ladenAnzeige_Led = OFF;
        }
        if (selber_laden)
        {
            selberLaden_blinken = 1;
     1c2:	e1 e0       	ldi	r30, 0x01	; 1
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
        else
        {
            selberLaden_blinken = 0;
            powerLed = OFF;
        }
        if (inSpannungsmessung_schalter == 0)
     1c6:	9e 89       	ldd	r25, Y+22	; 0x16
     1c8:	99 23       	and	r25, r25
     1ca:	09 f4       	brne	.+2      	; 0x1ce <main+0xa8>
     1cc:	2f c1       	rjmp	.+606    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
        {
            akkuBlinken = 0;
            akkuanzeige_Led = OFF;
        }
        //Ausgabe------------------------------------------------------------------
        if (On)
     1ce:	88 23       	and	r24, r24
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <main+0xae>
     1d2:	9f c0       	rjmp	.+318    	; 0x312 <main+0x1ec>
        {
            powerLed = OUT_POWER_LED;
            
            if (ladenAnzeige_Blinken)
     1d4:	23 2b       	or	r18, r19
     1d6:	09 f4       	brne	.+2      	; 0x1da <main+0xb4>
     1d8:	45 c0       	rjmp	.+138    	; 0x264 <main+0x13e>
        {
            akkuBlinken = 1;
        }
        else
        {
            akkuBlinken = 0;
     1da:	41 2c       	mov	r4, r1
     1dc:	1b 86       	std	Y+11, r1	; 0x0b
     1de:	1c 8a       	std	Y+20, r1	; 0x14
     1e0:	51 2c       	mov	r5, r1
     1e2:	1f 8a       	std	Y+23, r1	; 0x17
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	1d 8a       	std	Y+21, r1	; 0x15
     1e8:	10 e0       	ldi	r17, 0x00	; 0
     1ea:	09 c0       	rjmp	.+18     	; 0x1fe <main+0xd8>
            selberLaden_blinken = 0;
            powerLed = OFF;
        }
        if (inSpannungsmessung_schalter == 0)
        {
            akkuBlinken = 1;
     1ec:	44 24       	eor	r4, r4
     1ee:	43 94       	inc	r4
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 8a       	std	Y+20, r1	; 0x14
     1f4:	51 2c       	mov	r5, r1
     1f6:	1f 8a       	std	Y+23, r1	; 0x17
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	1d 8a       	std	Y+21, r1	; 0x15
     1fc:	10 e0       	ldi	r17, 0x00	; 0
        {
            powerLed = OUT_POWER_LED;
            
            if (ladenAnzeige_Blinken)
            {
                if (timerBlink_laden_ms >= ON_TIME_LADEN)
     1fe:	2b 81       	ldd	r18, Y+3	; 0x03
     200:	3c 81       	ldd	r19, Y+4	; 0x04
     202:	4d 81       	ldd	r20, Y+5	; 0x05
     204:	5e 81       	ldd	r21, Y+6	; 0x06
     206:	6f 81       	ldd	r22, Y+7	; 0x07
     208:	78 85       	ldd	r23, Y+8	; 0x08
     20a:	89 85       	ldd	r24, Y+9	; 0x09
     20c:	9a 85       	ldd	r25, Y+10	; 0x0a
     20e:	29 3f       	cpi	r18, 0xF9	; 249
     210:	31 05       	cpc	r19, r1
     212:	41 05       	cpc	r20, r1
     214:	51 05       	cpc	r21, r1
     216:	61 05       	cpc	r22, r1
     218:	71 05       	cpc	r23, r1
     21a:	81 05       	cpc	r24, r1
     21c:	91 05       	cpc	r25, r1
     21e:	19 f0       	breq	.+6      	; 0x226 <main+0x100>
     220:	10 f0       	brcs	.+4      	; 0x226 <main+0x100>
                {
                    ladenAnzeige_Led = OFF;
     222:	82 2c       	mov	r8, r2
     224:	93 2c       	mov	r9, r3
                }
                if (timerBlink_laden_ms >= PERIOD_LADEN)
     226:	2b 81       	ldd	r18, Y+3	; 0x03
     228:	3c 81       	ldd	r19, Y+4	; 0x04
     22a:	4d 81       	ldd	r20, Y+5	; 0x05
     22c:	5e 81       	ldd	r21, Y+6	; 0x06
     22e:	6f 81       	ldd	r22, Y+7	; 0x07
     230:	78 85       	ldd	r23, Y+8	; 0x08
     232:	89 85       	ldd	r24, Y+9	; 0x09
     234:	9a 85       	ldd	r25, Y+10	; 0x0a
     236:	23 3f       	cpi	r18, 0xF3	; 243
     238:	31 40       	sbci	r19, 0x01	; 1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	61 05       	cpc	r22, r1
     240:	71 05       	cpc	r23, r1
     242:	81 05       	cpc	r24, r1
     244:	91 05       	cpc	r25, r1
     246:	01 f1       	breq	.+64     	; 0x288 <main+0x162>
     248:	f8 f0       	brcs	.+62     	; 0x288 <main+0x162>
                {
                    ladenAnzeige_Led = IN_LADE_GERAET;
                    timerBlink_laden_ms = 0;
     24a:	1b 82       	std	Y+3, r1	; 0x03
     24c:	1c 82       	std	Y+4, r1	; 0x04
     24e:	1d 82       	std	Y+5, r1	; 0x05
     250:	1e 82       	std	Y+6, r1	; 0x06
     252:	1f 82       	std	Y+7, r1	; 0x07
     254:	18 86       	std	Y+8, r1	; 0x08
     256:	19 86       	std	Y+9, r1	; 0x09
     258:	1a 86       	std	Y+10, r1	; 0x0a
                {
                    ladenAnzeige_Led = OFF;
                }
                if (timerBlink_laden_ms >= PERIOD_LADEN)
                {
                    ladenAnzeige_Led = IN_LADE_GERAET;
     25a:	68 94       	set
     25c:	88 24       	eor	r8, r8
     25e:	83 f8       	bld	r8, 3
     260:	91 2c       	mov	r9, r1
     262:	12 c0       	rjmp	.+36     	; 0x288 <main+0x162>
        {
            akkuBlinken = 1;
        }
        else
        {
            akkuBlinken = 0;
     264:	41 2c       	mov	r4, r1
     266:	1b 86       	std	Y+11, r1	; 0x0b
     268:	1c 8a       	std	Y+20, r1	; 0x14
     26a:	51 2c       	mov	r5, r1
     26c:	1f 8a       	std	Y+23, r1	; 0x17
     26e:	a0 e0       	ldi	r26, 0x00	; 0
     270:	1d 8a       	std	Y+21, r1	; 0x15
     272:	10 e0       	ldi	r17, 0x00	; 0
                    timerBlink_laden_ms = 0;
                }
            }
            else
            {
                timerBlink_laden_ms = PERIOD_LADEN;
     274:	24 ef       	ldi	r18, 0xF4	; 244
     276:	2b 83       	std	Y+3, r18	; 0x03
     278:	31 e0       	ldi	r19, 0x01	; 1
     27a:	3c 83       	std	Y+4, r19	; 0x04
     27c:	1d 82       	std	Y+5, r1	; 0x05
     27e:	1e 82       	std	Y+6, r1	; 0x06
     280:	1f 82       	std	Y+7, r1	; 0x07
     282:	18 86       	std	Y+8, r1	; 0x08
     284:	19 86       	std	Y+9, r1	; 0x09
     286:	1a 86       	std	Y+10, r1	; 0x0a
            }
            if (inSpannungsmessung_schalter == 3)
     288:	8e 89       	ldd	r24, Y+22	; 0x16
     28a:	83 30       	cpi	r24, 0x03	; 3
     28c:	09 f0       	breq	.+2      	; 0x290 <main+0x16a>
     28e:	d3 c0       	rjmp	.+422    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     290:	f7 c0       	rjmp	.+494    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
            akkuanzeige_Led =  (OUT_SPANNUG_LED_ANZEIGE>>(MAX_SPANNUG-inSpannungsmessung_schalter)) &      // mit dem schalter kann man auf LED binär zählen
            OUT_SPANNUG_LED_ANZEIGE;
            if (inSpannungsmessung_schalter == 0)
            {
                
                if (akkuBlinken)
     292:	24 2d       	mov	r18, r4
     294:	3b 85       	ldd	r19, Y+11	; 0x0b
     296:	4c 89       	ldd	r20, Y+20	; 0x14
     298:	55 2d       	mov	r21, r5
     29a:	6f 89       	ldd	r22, Y+23	; 0x17
     29c:	7a 2f       	mov	r23, r26
     29e:	8d 89       	ldd	r24, Y+21	; 0x15
     2a0:	91 2f       	mov	r25, r17
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	57 d4       	rcall	.+2222   	; 0xb54 <__cmpdi2_s8>
     2a6:	09 f4       	brne	.+2      	; 0x2aa <main+0x184>
     2a8:	dd c0       	rjmp	.+442    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
                {
                    if (timerBlink_akku_ms >= ON_AKKU)
     2aa:	2c 85       	ldd	r18, Y+12	; 0x0c
     2ac:	3d 85       	ldd	r19, Y+13	; 0x0d
     2ae:	4e 85       	ldd	r20, Y+14	; 0x0e
     2b0:	5f 85       	ldd	r21, Y+15	; 0x0f
     2b2:	68 89       	ldd	r22, Y+16	; 0x10
     2b4:	79 89       	ldd	r23, Y+17	; 0x11
     2b6:	8a 89       	ldd	r24, Y+18	; 0x12
     2b8:	9b 89       	ldd	r25, Y+19	; 0x13
     2ba:	27 3c       	cpi	r18, 0xC7	; 199
     2bc:	31 05       	cpc	r19, r1
     2be:	41 05       	cpc	r20, r1
     2c0:	51 05       	cpc	r21, r1
     2c2:	61 05       	cpc	r22, r1
     2c4:	71 05       	cpc	r23, r1
     2c6:	81 05       	cpc	r24, r1
     2c8:	91 05       	cpc	r25, r1
     2ca:	19 f0       	breq	.+6      	; 0x2d2 <main+0x1ac>
     2cc:	10 f0       	brcs	.+4      	; 0x2d2 <main+0x1ac>
                    {
                        
                        akkuanzeige_Led = OFF;
     2ce:	62 2c       	mov	r6, r2
     2d0:	73 2c       	mov	r7, r3
                    }
                    if (timerBlink_akku_ms >= PERIOD_AKKU)
     2d2:	2c 85       	ldd	r18, Y+12	; 0x0c
     2d4:	3d 85       	ldd	r19, Y+13	; 0x0d
     2d6:	4e 85       	ldd	r20, Y+14	; 0x0e
     2d8:	5f 85       	ldd	r21, Y+15	; 0x0f
     2da:	68 89       	ldd	r22, Y+16	; 0x10
     2dc:	79 89       	ldd	r23, Y+17	; 0x11
     2de:	8a 89       	ldd	r24, Y+18	; 0x12
     2e0:	9b 89       	ldd	r25, Y+19	; 0x13
     2e2:	27 3e       	cpi	r18, 0xE7	; 231
     2e4:	33 40       	sbci	r19, 0x03	; 3
     2e6:	41 05       	cpc	r20, r1
     2e8:	51 05       	cpc	r21, r1
     2ea:	61 05       	cpc	r22, r1
     2ec:	71 05       	cpc	r23, r1
     2ee:	81 05       	cpc	r24, r1
     2f0:	91 05       	cpc	r25, r1
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <main+0x1d0>
     2f4:	08 f4       	brcc	.+2      	; 0x2f8 <main+0x1d2>
     2f6:	c0 c0       	rjmp	.+384    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
                    {
                        
                        akkuanzeige_Led = OUT_AKKU_LED;
                        timerBlink_akku_ms = 0;
     2f8:	1c 86       	std	Y+12, r1	; 0x0c
     2fa:	1d 86       	std	Y+13, r1	; 0x0d
     2fc:	1e 86       	std	Y+14, r1	; 0x0e
     2fe:	1f 86       	std	Y+15, r1	; 0x0f
     300:	18 8a       	std	Y+16, r1	; 0x10
     302:	19 8a       	std	Y+17, r1	; 0x11
     304:	1a 8a       	std	Y+18, r1	; 0x12
     306:	1b 8a       	std	Y+19, r1	; 0x13
                        akkuanzeige_Led = OFF;
                    }
                    if (timerBlink_akku_ms >= PERIOD_AKKU)
                    {
                        
                        akkuanzeige_Led = OUT_AKKU_LED;
     308:	68 94       	set
     30a:	66 24       	eor	r6, r6
     30c:	65 f8       	bld	r6, 5
     30e:	71 2c       	mov	r7, r1
     310:	b3 c0       	rjmp	.+358    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
        {
            ladenAnzeige_Led = OFF;
            
            
        }
        if ((inSpannungsmessung_schalter == 3) && (selberLaden_blinken))
     312:	2e 89       	ldd	r18, Y+22	; 0x16
     314:	23 30       	cpi	r18, 0x03	; 3
     316:	59 f4       	brne	.+22     	; 0x32e <main+0x208>
     318:	ef 2b       	or	r30, r31
     31a:	09 f4       	brne	.+2      	; 0x31e <main+0x1f8>
     31c:	ba c0       	rjmp	.+372    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
            akkuBlinken = 1;
        }
        else
        {
            akkuBlinken = 0;
            akkuanzeige_Led = OFF;
     31e:	62 2c       	mov	r6, r2
     320:	73 2c       	mov	r7, r3
            }
            
        }
        else
        {
            ladenAnzeige_Led = OFF;
     322:	82 2c       	mov	r8, r2
     324:	93 2c       	mov	r9, r3
            
            
        }
        if ((inSpannungsmessung_schalter == 3) && (selberLaden_blinken))
        {
            powerLed = OUT_POWER_LED;
     326:	44 24       	eor	r4, r4
     328:	43 94       	inc	r4
     32a:	51 2c       	mov	r5, r1
     32c:	b6 c0       	rjmp	.+364    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
            akkuBlinken = 1;
        }
        else
        {
            akkuBlinken = 0;
            akkuanzeige_Led = OFF;
     32e:	62 2c       	mov	r6, r2
     330:	73 2c       	mov	r7, r3
            }
            
        }
        else
        {
            ladenAnzeige_Led = OFF;
     332:	82 2c       	mov	r8, r2
     334:	93 2c       	mov	r9, r3
        if ((inSpannungsmessung_schalter == 3) && (selberLaden_blinken))
        {
            powerLed = OUT_POWER_LED;
            selberLaden_blinken = 0;
        }
        if (selberLaden_blinken )
     336:	ef 2b       	or	r30, r31
     338:	61 f1       	breq	.+88     	; 0x392 <main+0x26c>
        {
            
            
            if (timerBlink_selber_ms >= ON_TIME_SELBER)
     33a:	2a 2d       	mov	r18, r10
     33c:	3e 2d       	mov	r19, r14
     33e:	4f 2d       	mov	r20, r15
     340:	50 2f       	mov	r21, r16
     342:	69 81       	ldd	r22, Y+1	; 0x01
     344:	7d 2d       	mov	r23, r13
     346:	8b 2d       	mov	r24, r11
     348:	9c 2d       	mov	r25, r12
     34a:	a3 e6       	ldi	r26, 0x63	; 99
     34c:	03 d4       	rcall	.+2054   	; 0xb54 <__cmpdi2_s8>
     34e:	19 f0       	breq	.+6      	; 0x356 <main+0x230>
     350:	10 f0       	brcs	.+4      	; 0x356 <main+0x230>
            {
                powerLed = OFF;
     352:	42 2c       	mov	r4, r2
     354:	53 2c       	mov	r5, r3
            }
            if (timerBlink_selber_ms >= PERIOD_SELBER)
     356:	2a 2d       	mov	r18, r10
     358:	3e 2d       	mov	r19, r14
     35a:	4f 2d       	mov	r20, r15
     35c:	50 2f       	mov	r21, r16
     35e:	69 81       	ldd	r22, Y+1	; 0x01
     360:	7d 2d       	mov	r23, r13
     362:	8b 2d       	mov	r24, r11
     364:	9c 2d       	mov	r25, r12
     366:	23 3f       	cpi	r18, 0xF3	; 243
     368:	31 40       	sbci	r19, 0x01	; 1
     36a:	41 05       	cpc	r20, r1
     36c:	51 05       	cpc	r21, r1
     36e:	61 05       	cpc	r22, r1
     370:	71 05       	cpc	r23, r1
     372:	81 05       	cpc	r24, r1
     374:	91 05       	cpc	r25, r1
     376:	c9 f0       	breq	.+50     	; 0x3aa <main+0x284>
     378:	c0 f0       	brcs	.+48     	; 0x3aa <main+0x284>
            {
                powerLed = OUT_POWER_LED;
                timerBlink_selber_ms = 0;
     37a:	a1 2c       	mov	r10, r1
     37c:	e1 2c       	mov	r14, r1
     37e:	f1 2c       	mov	r15, r1
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	19 82       	std	Y+1, r1	; 0x01
     384:	d1 2c       	mov	r13, r1
     386:	b1 2c       	mov	r11, r1
     388:	c1 2c       	mov	r12, r1
            {
                powerLed = OFF;
            }
            if (timerBlink_selber_ms >= PERIOD_SELBER)
            {
                powerLed = OUT_POWER_LED;
     38a:	44 24       	eor	r4, r4
     38c:	43 94       	inc	r4
     38e:	51 2c       	mov	r5, r1
     390:	0c c0       	rjmp	.+24     	; 0x3aa <main+0x284>
                
            }
        }
        else
        {
            timerBlink_selber_ms = PERIOD_SELBER;
     392:	0f 2e       	mov	r0, r31
     394:	f4 ef       	ldi	r31, 0xF4	; 244
     396:	af 2e       	mov	r10, r31
     398:	f0 2d       	mov	r31, r0
     39a:	ee 24       	eor	r14, r14
     39c:	e3 94       	inc	r14
     39e:	f1 2c       	mov	r15, r1
     3a0:	00 e0       	ldi	r16, 0x00	; 0
     3a2:	19 82       	std	Y+1, r1	; 0x01
     3a4:	d1 2c       	mov	r13, r1
     3a6:	b1 2c       	mov	r11, r1
        }
        
        
        
        ledWriteAll(powerLed | ladenAnzeige_Led | akkuanzeige_Led);
     3a8:	c1 2c       	mov	r12, r1
     3aa:	c2 01       	movw	r24, r4
     3ac:	88 29       	or	r24, r8
     3ae:	99 29       	or	r25, r9
     3b0:	86 29       	or	r24, r6
     3b2:	97 29       	or	r25, r7
     3b4:	96 d0       	rcall	.+300    	; 0x4e2 <ledWriteAll>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b6:	8f e3       	ldi	r24, 0x3F	; 63
     3b8:	9c e9       	ldi	r25, 0x9C	; 156
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x294>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x29a>
     3c0:	00 00       	nop
        
        //Warten-------------------------------------------------------------------
        _delay_ms(SYSTEM_TICK_MS);
        timerBlink_laden_ms = timerBlink_laden_ms + SYSTEM_TICK_MS;
     3c2:	2b 81       	ldd	r18, Y+3	; 0x03
     3c4:	3c 81       	ldd	r19, Y+4	; 0x04
     3c6:	4d 81       	ldd	r20, Y+5	; 0x05
     3c8:	5e 81       	ldd	r21, Y+6	; 0x06
     3ca:	6f 81       	ldd	r22, Y+7	; 0x07
     3cc:	78 85       	ldd	r23, Y+8	; 0x08
     3ce:	89 85       	ldd	r24, Y+9	; 0x09
     3d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3d2:	aa e0       	ldi	r26, 0x0A	; 10
     3d4:	b3 d3       	rcall	.+1894   	; 0xb3c <__adddi3_s8>
     3d6:	2b 83       	std	Y+3, r18	; 0x03
     3d8:	3c 83       	std	Y+4, r19	; 0x04
     3da:	4d 83       	std	Y+5, r20	; 0x05
     3dc:	5e 83       	std	Y+6, r21	; 0x06
     3de:	6f 83       	std	Y+7, r22	; 0x07
     3e0:	78 87       	std	Y+8, r23	; 0x08
     3e2:	89 87       	std	Y+9, r24	; 0x09
     3e4:	9a 87       	std	Y+10, r25	; 0x0a
        timerBlink_selber_ms = timerBlink_selber_ms + SYSTEM_TICK_MS;
     3e6:	2a 2d       	mov	r18, r10
     3e8:	3e 2d       	mov	r19, r14
     3ea:	4f 2d       	mov	r20, r15
     3ec:	50 2f       	mov	r21, r16
     3ee:	69 81       	ldd	r22, Y+1	; 0x01
     3f0:	7d 2d       	mov	r23, r13
     3f2:	8b 2d       	mov	r24, r11
     3f4:	9c 2d       	mov	r25, r12
     3f6:	a2 d3       	rcall	.+1860   	; 0xb3c <__adddi3_s8>
     3f8:	a2 2e       	mov	r10, r18
     3fa:	e3 2e       	mov	r14, r19
     3fc:	f4 2e       	mov	r15, r20
     3fe:	05 2f       	mov	r16, r21
     400:	69 83       	std	Y+1, r22	; 0x01
     402:	d7 2e       	mov	r13, r23
     404:	b8 2e       	mov	r11, r24
     406:	c9 2e       	mov	r12, r25
        timerBlink_akku_ms = timerBlink_akku_ms + SYSTEM_TICK_MS;
     408:	2c 85       	ldd	r18, Y+12	; 0x0c
     40a:	3d 85       	ldd	r19, Y+13	; 0x0d
     40c:	4e 85       	ldd	r20, Y+14	; 0x0e
     40e:	5f 85       	ldd	r21, Y+15	; 0x0f
     410:	68 89       	ldd	r22, Y+16	; 0x10
     412:	79 89       	ldd	r23, Y+17	; 0x11
     414:	8a 89       	ldd	r24, Y+18	; 0x12
     416:	9b 89       	ldd	r25, Y+19	; 0x13
     418:	91 d3       	rcall	.+1826   	; 0xb3c <__adddi3_s8>
     41a:	2c 87       	std	Y+12, r18	; 0x0c
     41c:	3d 87       	std	Y+13, r19	; 0x0d
     41e:	4e 87       	std	Y+14, r20	; 0x0e
     420:	5f 87       	std	Y+15, r21	; 0x0f
     422:	68 8b       	std	Y+16, r22	; 0x10
     424:	79 8b       	std	Y+17, r23	; 0x11
     426:	8a 8b       	std	Y+18, r24	; 0x12
     428:	9b 8b       	std	Y+19, r25	; 0x13
     42a:	ad ce       	rjmp	.-678    	; 0x186 <main+0x60>
    }
     42c:	81 11       	cpse	r24, r1
        {
            akkuBlinken = 0;
            akkuanzeige_Led = OFF;
        }
        //Ausgabe------------------------------------------------------------------
        if (On)
     42e:	42 c0       	rjmp	.+132    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     430:	82 2c       	mov	r8, r2
            }
            
        }
        else
        {
            ladenAnzeige_Led = OFF;
     432:	93 2c       	mov	r9, r3
     434:	80 cf       	rjmp	.-256    	; 0x336 <main+0x210>
     436:	83 e0       	ldi	r24, 0x03	; 3
                powerLed = OUT_POWER_LED;
                selberLaden_blinken = 0;
            }
            
            //Einzeiler      wo die LED angezeigt wärden (0b11100000) / welcher Schalter (0b11000000)
            akkuanzeige_Led =  (OUT_SPANNUG_LED_ANZEIGE>>(MAX_SPANNUG-inSpannungsmessung_schalter)) &      // mit dem schalter kann man auf LED binär zählen
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	be 89       	ldd	r27, Y+22	; 0x16
     43c:	8b 1b       	sub	r24, r27
     43e:	91 09       	sbc	r25, r1
     440:	20 ee       	ldi	r18, 0xE0	; 224
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     446:	35 95       	asr	r19
     448:	27 95       	ror	r18
     44a:	8a 95       	dec	r24
     44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44e:	39 01       	movw	r6, r18
     450:	30 ee       	ldi	r19, 0xE0	; 224
     452:	63 22       	and	r6, r19
     454:	77 24       	eor	r7, r7
     456:	bb 23       	and	r27, r27
            OUT_SPANNUG_LED_ANZEIGE;
            if (inSpannungsmessung_schalter == 0)
     458:	09 f4       	brne	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	1b cf       	rjmp	.-458    	; 0x292 <main+0x16c>
     45c:	44 24       	eor	r4, r4
     45e:	43 94       	inc	r4
     460:	51 2c       	mov	r5, r1
     462:	69 cf       	rjmp	.-302    	; 0x336 <main+0x210>
     464:	88 ee       	ldi	r24, 0xE8	; 232
                        timerBlink_akku_ms = 0;
                    }
                }
                else
                {
                    timerBlink_akku_ms = PERIOD_AKKU;
     466:	8c 87       	std	Y+12, r24	; 0x0c
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	9d 87       	std	Y+13, r25	; 0x0d
     46c:	1e 86       	std	Y+14, r1	; 0x0e
     46e:	1f 86       	std	Y+15, r1	; 0x0f
     470:	18 8a       	std	Y+16, r1	; 0x10
     472:	19 8a       	std	Y+17, r1	; 0x11
     474:	1a 8a       	std	Y+18, r1	; 0x12
     476:	1b 8a       	std	Y+19, r1	; 0x13
     478:	44 24       	eor	r4, r4
            }
            
            //Einzeiler      wo die LED angezeigt wärden (0b11100000) / welcher Schalter (0b11000000)
            akkuanzeige_Led =  (OUT_SPANNUG_LED_ANZEIGE>>(MAX_SPANNUG-inSpannungsmessung_schalter)) &      // mit dem schalter kann man auf LED binär zählen
            OUT_SPANNUG_LED_ANZEIGE;
            if (inSpannungsmessung_schalter == 0)
     47a:	43 94       	inc	r4
     47c:	51 2c       	mov	r5, r1
     47e:	5b cf       	rjmp	.-330    	; 0x336 <main+0x210>
     480:	0f 2e       	mov	r0, r31
                powerLed = OUT_POWER_LED;
                selberLaden_blinken = 0;
            }
            
            //Einzeiler      wo die LED angezeigt wärden (0b11100000) / welcher Schalter (0b11000000)
            akkuanzeige_Led =  (OUT_SPANNUG_LED_ANZEIGE>>(MAX_SPANNUG-inSpannungsmessung_schalter)) &      // mit dem schalter kann man auf LED binär zählen
     482:	f0 ee       	ldi	r31, 0xE0	; 224
     484:	6f 2e       	mov	r6, r31
     486:	71 2c       	mov	r7, r1
     488:	f0 2d       	mov	r31, r0
     48a:	44 24       	eor	r4, r4
     48c:	43 94       	inc	r4
     48e:	51 2c       	mov	r5, r1
     490:	04 c0       	rjmp	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     492:	62 2c       	mov	r6, r2
            akkuBlinken = 1;
        }
        else
        {
            akkuBlinken = 0;
            akkuanzeige_Led = OFF;
     494:	73 2c       	mov	r7, r3
     496:	82 2c       	mov	r8, r2
            }
            
        }
        else
        {
            ladenAnzeige_Led = OFF;
     498:	93 2c       	mov	r9, r3
     49a:	0f 2e       	mov	r0, r31
                
            }
        }
        else
        {
            timerBlink_selber_ms = PERIOD_SELBER;
     49c:	f4 ef       	ldi	r31, 0xF4	; 244
     49e:	af 2e       	mov	r10, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	ee 24       	eor	r14, r14
     4a4:	e3 94       	inc	r14
     4a6:	f1 2c       	mov	r15, r1
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	19 82       	std	Y+1, r1	; 0x01
     4ac:	d1 2c       	mov	r13, r1
     4ae:	b1 2c       	mov	r11, r1
     4b0:	c1 2c       	mov	r12, r1
     4b2:	7b cf       	rjmp	.-266    	; 0x3aa <main+0x284>
     4b4:	23 2b       	or	r18, r19
        //Ausgabe------------------------------------------------------------------
        if (On)
        {
            powerLed = OUT_POWER_LED;
            
            if (ladenAnzeige_Blinken)
     4b6:	09 f0       	breq	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	99 ce       	rjmp	.-718    	; 0x1ec <main+0xc6>
     4ba:	44 24       	eor	r4, r4
            selberLaden_blinken = 0;
            powerLed = OFF;
        }
        if (inSpannungsmessung_schalter == 0)
        {
            akkuBlinken = 1;
     4bc:	43 94       	inc	r4
     4be:	1b 86       	std	Y+11, r1	; 0x0b
     4c0:	1c 8a       	std	Y+20, r1	; 0x14
     4c2:	51 2c       	mov	r5, r1
     4c4:	1f 8a       	std	Y+23, r1	; 0x17
     4c6:	a0 e0       	ldi	r26, 0x00	; 0
     4c8:	1d 8a       	std	Y+21, r1	; 0x15
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	b4 ef       	ldi	r27, 0xF4	; 244
                    timerBlink_laden_ms = 0;
                }
            }
            else
            {
                timerBlink_laden_ms = PERIOD_LADEN;
     4ce:	bb 83       	std	Y+3, r27	; 0x03
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	2c 83       	std	Y+4, r18	; 0x04
     4d4:	1d 82       	std	Y+5, r1	; 0x05
     4d6:	1e 82       	std	Y+6, r1	; 0x06
     4d8:	1f 82       	std	Y+7, r1	; 0x07
     4da:	18 86       	std	Y+8, r1	; 0x08
     4dc:	19 86       	std	Y+9, r1	; 0x09
     4de:	1a 86       	std	Y+10, r1	; 0x0a
     4e0:	aa cf       	rjmp	.-172    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>

000004e2 <ledWriteAll>:
     4e2:	82 b9       	out	0x02, r24	; 2
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
     4e4:	95 b9       	out	0x05, r25	; 5
     4e6:	08 95       	ret

000004e8 <switchReadAll>:
     4e8:	86 b1       	in	r24, 0x06	; 6
     4ea:	08 95       	ret

000004ec <startSystemTimeMs>:
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	84 bd       	out	0x24, r24	; 36
     4f0:	8b e0       	ldi	r24, 0x0B	; 11
     4f2:	85 bd       	out	0x25, r24	; 37
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     4fa:	89 ef       	ldi	r24, 0xF9	; 249
     4fc:	87 bd       	out	0x27, r24	; 39
     4fe:	08 95       	ret

00000500 <initAdc>:
     500:	11 ba       	out	0x11, r1	; 17
     502:	10 ba       	out	0x10, r1	; 16
     504:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     508:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     50c:	80 e4       	ldi	r24, 0x40	; 64
     50e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     512:	8f e0       	ldi	r24, 0x0F	; 15
     514:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
     51e:	ea e7       	ldi	r30, 0x7A	; 122
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	87 ea       	ldi	r24, 0xA7	; 167
     524:	80 83       	st	Z, r24
     526:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     52a:	80 81       	ld	r24, Z
     52c:	80 64       	ori	r24, 0x40	; 64
     52e:	80 83       	st	Z, r24
     530:	80 81       	ld	r24, Z
     532:	84 ff       	sbrs	r24, 4
     534:	fd cf       	rjmp	.-6      	; 0x530 <initAdc+0x30>
     536:	ea e7       	ldi	r30, 0x7A	; 122
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	8f 7e       	andi	r24, 0xEF	; 239
     53e:	80 83       	st	Z, r24
     540:	08 95       	ret

00000542 <rgbWrite>:
     542:	2f ef       	ldi	r18, 0xFF	; 255
     544:	33 e0       	ldi	r19, 0x03	; 3
     546:	f9 01       	movw	r30, r18
     548:	e8 1b       	sub	r30, r24
     54a:	f9 0b       	sbc	r31, r25
     54c:	c9 01       	movw	r24, r18
     54e:	86 1b       	sub	r24, r22
     550:	97 0b       	sbc	r25, r23
     552:	24 1b       	sub	r18, r20
     554:	35 0b       	sbc	r19, r21
     556:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     55a:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     55e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     562:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
     566:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     56a:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
     56e:	08 95       	ret

00000570 <initRgb>:
     570:	8e ef       	ldi	r24, 0xFE	; 254
     572:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     576:	8b e1       	ldi	r24, 0x1B	; 27
     578:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	d6 cf       	rjmp	.-84     	; 0x542 <rgbWrite>
     596:	08 95       	ret

00000598 <lcdSid>:
     598:	88 23       	and	r24, r24
     59a:	11 f0       	breq	.+4      	; 0x5a0 <lcdSid+0x8>
     59c:	a0 9a       	sbi	0x14, 0	; 20
     59e:	08 95       	ret
     5a0:	a0 98       	cbi	0x14, 0	; 20
     5a2:	08 95       	ret

000005a4 <lcdSclk>:
     5a4:	88 23       	and	r24, r24
     5a6:	11 f0       	breq	.+4      	; 0x5ac <lcdSclk+0x8>
     5a8:	a1 9a       	sbi	0x14, 1	; 20
     5aa:	08 95       	ret
     5ac:	a1 98       	cbi	0x14, 1	; 20
     5ae:	08 95       	ret

000005b0 <lcdLight>:
     5b0:	81 11       	cpse	r24, r1
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <lcdLight+0xc>
     5b4:	84 b5       	in	r24, 0x24	; 36
     5b6:	8f 7d       	andi	r24, 0xDF	; 223
     5b8:	84 bd       	out	0x24, r24	; 36
     5ba:	08 95       	ret
     5bc:	94 b5       	in	r25, 0x24	; 36
     5be:	90 62       	ori	r25, 0x20	; 32
     5c0:	94 bd       	out	0x24, r25	; 36
     5c2:	88 bd       	out	0x28, r24	; 40
     5c4:	08 95       	ret

000005c6 <writeLcdF>:
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	7c 01       	movw	r14, r24
     5d4:	eb 01       	movw	r28, r22
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	df df       	rcall	.-66     	; 0x598 <lcdSid>
     5da:	05 e0       	ldi	r16, 0x05	; 5
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	e1 df       	rcall	.-62     	; 0x5a4 <lcdSclk>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	df df       	rcall	.-66     	; 0x5a4 <lcdSclk>
     5e6:	01 50       	subi	r16, 0x01	; 1
     5e8:	11 09       	sbc	r17, r1
     5ea:	c9 f7       	brne	.-14     	; 0x5de <writeLcdF+0x18>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	d4 df       	rcall	.-88     	; 0x598 <lcdSid>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	d8 df       	rcall	.-80     	; 0x5a4 <lcdSclk>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	d6 df       	rcall	.-84     	; 0x5a4 <lcdSclk>
     5f8:	83 e4       	ldi	r24, 0x43	; 67
     5fa:	e8 16       	cp	r14, r24
     5fc:	f1 04       	cpc	r15, r1
     5fe:	19 f4       	brne	.+6      	; 0x606 <writeLcdF+0x40>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	ca df       	rcall	.-108    	; 0x598 <lcdSid>
     604:	02 c0       	rjmp	.+4      	; 0x60a <writeLcdF+0x44>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	c7 df       	rcall	.-114    	; 0x598 <lcdSid>
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	cb df       	rcall	.-106    	; 0x5a4 <lcdSclk>
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	c9 df       	rcall	.-110    	; 0x5a4 <lcdSclk>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	c1 df       	rcall	.-126    	; 0x598 <lcdSid>
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	c5 df       	rcall	.-118    	; 0x5a4 <lcdSclk>
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	c3 df       	rcall	.-122    	; 0x5a4 <lcdSclk>
     61e:	04 e0       	ldi	r16, 0x04	; 4
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	bf df       	rcall	.-130    	; 0x5a4 <lcdSclk>
     626:	c0 ff       	sbrs	r28, 0
     628:	03 c0       	rjmp	.+6      	; 0x630 <writeLcdF+0x6a>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	b5 df       	rcall	.-150    	; 0x598 <lcdSid>
     62e:	02 c0       	rjmp	.+4      	; 0x634 <writeLcdF+0x6e>
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	b2 df       	rcall	.-156    	; 0x598 <lcdSid>
     634:	d6 95       	lsr	r29
     636:	c7 95       	ror	r28
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	b4 df       	rcall	.-152    	; 0x5a4 <lcdSclk>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	b2 df       	rcall	.-156    	; 0x5a4 <lcdSclk>
     640:	01 50       	subi	r16, 0x01	; 1
     642:	11 09       	sbc	r17, r1
     644:	71 f7       	brne	.-36     	; 0x622 <writeLcdF+0x5c>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	a7 df       	rcall	.-178    	; 0x598 <lcdSid>
     64a:	04 e0       	ldi	r16, 0x04	; 4
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	a9 df       	rcall	.-174    	; 0x5a4 <lcdSclk>
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	a7 df       	rcall	.-178    	; 0x5a4 <lcdSclk>
     656:	01 50       	subi	r16, 0x01	; 1
     658:	11 09       	sbc	r17, r1
     65a:	c9 f7       	brne	.-14     	; 0x64e <writeLcdF+0x88>
     65c:	04 e0       	ldi	r16, 0x04	; 4
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	a0 df       	rcall	.-192    	; 0x5a4 <lcdSclk>
     664:	c0 ff       	sbrs	r28, 0
     666:	03 c0       	rjmp	.+6      	; 0x66e <writeLcdF+0xa8>
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	96 df       	rcall	.-212    	; 0x598 <lcdSid>
     66c:	02 c0       	rjmp	.+4      	; 0x672 <writeLcdF+0xac>
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	93 df       	rcall	.-218    	; 0x598 <lcdSid>
     672:	d6 95       	lsr	r29
     674:	c7 95       	ror	r28
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	95 df       	rcall	.-214    	; 0x5a4 <lcdSclk>
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	93 df       	rcall	.-218    	; 0x5a4 <lcdSclk>
     67e:	01 50       	subi	r16, 0x01	; 1
     680:	11 09       	sbc	r17, r1
     682:	71 f7       	brne	.-36     	; 0x660 <writeLcdF+0x9a>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	88 df       	rcall	.-240    	; 0x598 <lcdSid>
     688:	c4 e0       	ldi	r28, 0x04	; 4
     68a:	d0 e0       	ldi	r29, 0x00	; 0
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	8a df       	rcall	.-236    	; 0x5a4 <lcdSclk>
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	88 df       	rcall	.-240    	; 0x5a4 <lcdSclk>
     694:	21 97       	sbiw	r28, 0x01	; 1
     696:	d1 f7       	brne	.-12     	; 0x68c <writeLcdF+0xc6>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	7e df       	rcall	.-260    	; 0x598 <lcdSid>
     69c:	87 ec       	ldi	r24, 0xC7	; 199
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <writeLcdF+0xda>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <writeLcdF+0xe0>
     6a6:	00 00       	nop
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	08 95       	ret

000006b6 <lcdWriteText>:
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	65 97       	sbiw	r28, 0x15	; 21
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	9e 01       	movw	r18, r28
     6ce:	20 5e       	subi	r18, 0xE0	; 224
     6d0:	3f 4f       	sbci	r19, 0xFF	; 255
     6d2:	4e 8d       	ldd	r20, Y+30	; 0x1e
     6d4:	5f 8d       	ldd	r21, Y+31	; 0x1f
     6d6:	65 e1       	ldi	r22, 0x15	; 21
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	ce 01       	movw	r24, r28
     6dc:	01 96       	adiw	r24, 0x01	; 1
     6de:	46 d2       	rcall	.+1164   	; 0xb6c <vsnprintf>
     6e0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6e4:	90 e2       	ldi	r25, 0x20	; 32
     6e6:	89 9f       	mul	r24, r25
     6e8:	60 0d       	add	r22, r0
     6ea:	11 24       	eor	r1, r1
     6ec:	60 68       	ori	r22, 0x80	; 128
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	83 e4       	ldi	r24, 0x43	; 67
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	68 df       	rcall	.-304    	; 0x5c6 <writeLcdF>
     6f6:	69 81       	ldd	r22, Y+1	; 0x01
     6f8:	66 23       	and	r22, r22
     6fa:	79 f0       	breq	.+30     	; 0x71a <lcdWriteText+0x64>
     6fc:	10 e0       	ldi	r17, 0x00	; 0
     6fe:	1f 5f       	subi	r17, 0xFF	; 255
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	84 e4       	ldi	r24, 0x44	; 68
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	5f df       	rcall	.-322    	; 0x5c6 <writeLcdF>
     708:	e1 e0       	ldi	r30, 0x01	; 1
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	ec 0f       	add	r30, r28
     70e:	fd 1f       	adc	r31, r29
     710:	e1 0f       	add	r30, r17
     712:	f1 1d       	adc	r31, r1
     714:	60 81       	ld	r22, Z
     716:	61 11       	cpse	r22, r1
     718:	f2 cf       	rjmp	.-28     	; 0x6fe <lcdWriteText+0x48>
     71a:	65 96       	adiw	r28, 0x15	; 21
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	08 95       	ret

0000072e <lcdClear>:
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	83 e4       	ldi	r24, 0x43	; 67
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	47 df       	rcall	.-370    	; 0x5c6 <writeLcdF>
     738:	8f e3       	ldi	r24, 0x3F	; 63
     73a:	9f e1       	ldi	r25, 0x1F	; 31
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <lcdClear+0xe>
     740:	00 c0       	rjmp	.+0      	; 0x742 <lcdClear+0x14>
     742:	00 00       	nop
     744:	80 e3       	ldi	r24, 0x30	; 48
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	1f 92       	push	r1
     74e:	1f 92       	push	r1
     750:	b2 df       	rcall	.-156    	; 0x6b6 <lcdWriteText>
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	08 95       	ret

0000075c <initLcd>:
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	22 df       	rcall	.-444    	; 0x5a4 <lcdSclk>
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	1a df       	rcall	.-460    	; 0x598 <lcdSid>
     764:	64 e3       	ldi	r22, 0x34	; 52
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	83 e4       	ldi	r24, 0x43	; 67
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	2c df       	rcall	.-424    	; 0x5c6 <writeLcdF>
     76e:	69 e0       	ldi	r22, 0x09	; 9
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	83 e4       	ldi	r24, 0x43	; 67
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	27 df       	rcall	.-434    	; 0x5c6 <writeLcdF>
     778:	60 e3       	ldi	r22, 0x30	; 48
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	83 e4       	ldi	r24, 0x43	; 67
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	22 df       	rcall	.-444    	; 0x5c6 <writeLcdF>
     782:	6c e0       	ldi	r22, 0x0C	; 12
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	83 e4       	ldi	r24, 0x43	; 67
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	1d df       	rcall	.-454    	; 0x5c6 <writeLcdF>
     78c:	d0 df       	rcall	.-96     	; 0x72e <lcdClear>
     78e:	67 e0       	ldi	r22, 0x07	; 7
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	83 e4       	ldi	r24, 0x43	; 67
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	17 df       	rcall	.-466    	; 0x5c6 <writeLcdF>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0a cf       	rjmp	.-492    	; 0x5b0 <lcdLight>
     79c:	08 95       	ret

0000079e <initBoard>:
     79e:	4f 92       	push	r4
     7a0:	5f 92       	push	r5
     7a2:	6f 92       	push	r6
     7a4:	7f 92       	push	r7
     7a6:	8f 92       	push	r8
     7a8:	9f 92       	push	r9
     7aa:	af 92       	push	r10
     7ac:	bf 92       	push	r11
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	c8 2f       	mov	r28, r24
     7c0:	85 b7       	in	r24, 0x35	; 53
     7c2:	85 bf       	out	0x35, r24	; 53
     7c4:	12 b8       	out	0x02, r1	; 2
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	81 b9       	out	0x01, r24	; 1
     7ca:	15 b8       	out	0x05, r1	; 5
     7cc:	84 b9       	out	0x04, r24	; 4
     7ce:	88 b9       	out	0x08, r24	; 8
     7d0:	17 b8       	out	0x07, r1	; 7
     7d2:	8b b9       	out	0x0b, r24	; 11
     7d4:	1a b8       	out	0x0a, r1	; 10
     7d6:	8e b9       	out	0x0e, r24	; 14
     7d8:	1d b8       	out	0x0d, r1	; 13
     7da:	72 98       	cbi	0x0e, 2	; 14
     7dc:	11 ba       	out	0x11, r1	; 17
     7de:	10 ba       	out	0x10, r1	; 16
     7e0:	94 e0       	ldi	r25, 0x04	; 4
     7e2:	94 bb       	out	0x14, r25	; 20
     7e4:	93 b3       	in	r25, 0x13	; 19
     7e6:	93 60       	ori	r25, 0x03	; 3
     7e8:	93 bb       	out	0x13, r25	; 19
     7ea:	9d 9a       	sbi	0x13, 5	; 19
     7ec:	97 ec       	ldi	r25, 0xC7	; 199
     7ee:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7f2:	98 e3       	ldi	r25, 0x38	; 56
     7f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     7f8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     7fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
     800:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     804:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     808:	8c e3       	ldi	r24, 0x3C	; 60
     80a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     80e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
     812:	78 94       	sei
     814:	6b de       	rcall	.-810    	; 0x4ec <startSystemTimeMs>
     816:	a2 df       	rcall	.-188    	; 0x75c <initLcd>
     818:	73 de       	rcall	.-794    	; 0x500 <initAdc>
     81a:	aa de       	rcall	.-684    	; 0x570 <initRgb>
     81c:	cc 23       	and	r28, r28
     81e:	09 f4       	brne	.+2      	; 0x822 <initBoard+0x84>
     820:	b8 c0       	rjmp	.+368    	; 0x992 <initBoard+0x1f4>
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	c5 de       	rcall	.-630    	; 0x5b0 <lcdLight>
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	6f ef       	ldi	r22, 0xFF	; 255
     82c:	73 e0       	ldi	r23, 0x03	; 3
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	87 de       	rcall	.-754    	; 0x542 <rgbWrite>
     834:	8d e1       	ldi	r24, 0x1D	; 29
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	1f 92       	push	r1
     83e:	1f 92       	push	r1
     840:	3a df       	rcall	.-396    	; 0x6b6 <lcdWriteText>
     842:	82 e3       	ldi	r24, 0x32	; 50
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	1f 92       	push	r1
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	8f 93       	push	r24
     850:	32 df       	rcall	.-412    	; 0x6b6 <lcdWriteText>
     852:	88 e0       	ldi	r24, 0x08	; 8
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	1f 92       	push	r1
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	8f 93       	push	r24
     860:	2a df       	rcall	.-428    	; 0x6b6 <lcdWriteText>
     862:	87 e4       	ldi	r24, 0x47	; 71
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	9f 93       	push	r25
     868:	8f 93       	push	r24
     86a:	1f 92       	push	r1
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	8f 93       	push	r24
     870:	22 df       	rcall	.-444    	; 0x6b6 <lcdWriteText>
     872:	8d b7       	in	r24, 0x3d	; 61
     874:	9e b7       	in	r25, 0x3e	; 62
     876:	40 96       	adiw	r24, 0x10	; 16
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	9e bf       	out	0x3e, r25	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	8d bf       	out	0x3d, r24	; 61
     882:	88 24       	eor	r8, r8
     884:	83 94       	inc	r8
     886:	c0 e0       	ldi	r28, 0x00	; 0
     888:	71 2c       	mov	r7, r1
     88a:	99 24       	eor	r9, r9
     88c:	93 94       	inc	r9
     88e:	d0 e0       	ldi	r29, 0x00	; 0
     890:	cc 24       	eor	r12, r12
     892:	c3 94       	inc	r12
     894:	d1 2c       	mov	r13, r1
     896:	e1 2c       	mov	r14, r1
     898:	68 94       	set
     89a:	ff 24       	eor	r15, r15
     89c:	f7 f8       	bld	r15, 7
     89e:	66 24       	eor	r6, r6
     8a0:	63 94       	inc	r6
     8a2:	51 2c       	mov	r5, r1
     8a4:	09 e0       	ldi	r16, 0x09	; 9
     8a6:	11 e0       	ldi	r17, 0x01	; 1
     8a8:	0f 2e       	mov	r0, r31
     8aa:	fc e5       	ldi	r31, 0x5C	; 92
     8ac:	af 2e       	mov	r10, r31
     8ae:	f2 e0       	ldi	r31, 0x02	; 2
     8b0:	bf 2e       	mov	r11, r31
     8b2:	f0 2d       	mov	r31, r0
     8b4:	0f 2e       	mov	r0, r31
     8b6:	f3 e0       	ldi	r31, 0x03	; 3
     8b8:	4f 2e       	mov	r4, r31
     8ba:	f0 2d       	mov	r31, r0
     8bc:	99 20       	and	r9, r9
     8be:	49 f0       	breq	.+18     	; 0x8d2 <initBoard+0x134>
     8c0:	c7 01       	movw	r24, r14
     8c2:	0d 2e       	mov	r0, r29
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <initBoard+0x12c>
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	0a 94       	dec	r0
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <initBoard+0x128>
     8ce:	09 de       	rcall	.-1006   	; 0x4e2 <ledWriteAll>
     8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <initBoard+0x144>
     8d2:	c6 01       	movw	r24, r12
     8d4:	0d 2e       	mov	r0, r29
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <initBoard+0x13e>
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	0a 94       	dec	r0
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <initBoard+0x13a>
     8e0:	00 de       	rcall	.-1024   	; 0x4e2 <ledWriteAll>
     8e2:	df 5f       	subi	r29, 0xFF	; 255
     8e4:	d1 31       	cpi	r29, 0x11	; 17
     8e6:	28 f0       	brcs	.+10     	; 0x8f2 <initBoard+0x154>
     8e8:	86 2d       	mov	r24, r6
     8ea:	91 10       	cpse	r9, r1
     8ec:	85 2d       	mov	r24, r5
     8ee:	98 2e       	mov	r9, r24
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
     8f2:	88 20       	and	r8, r8
     8f4:	11 f0       	breq	.+4      	; 0x8fa <initBoard+0x15c>
     8f6:	ce 5f       	subi	r28, 0xFE	; 254
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <initBoard+0x15e>
     8fa:	c2 50       	subi	r28, 0x02	; 2
     8fc:	8c 2f       	mov	r24, r28
     8fe:	58 de       	rcall	.-848    	; 0x5b0 <lcdLight>
     900:	ce 3f       	cpi	r28, 0xFE	; 254
     902:	21 f0       	breq	.+8      	; 0x90c <initBoard+0x16e>
     904:	c8 37       	cpi	r28, 0x78	; 120
     906:	19 f4       	brne	.+6      	; 0x90e <initBoard+0x170>
     908:	86 2c       	mov	r8, r6
     90a:	01 c0       	rjmp	.+2      	; 0x90e <initBoard+0x170>
     90c:	85 2c       	mov	r8, r5
     90e:	71 10       	cpse	r7, r1
     910:	3b c0       	rjmp	.+118    	; 0x988 <initBoard+0x1ea>
     912:	f8 01       	movw	r30, r16
     914:	80 81       	ld	r24, Z
     916:	83 7c       	andi	r24, 0xC3	; 195
     918:	91 f0       	breq	.+36     	; 0x93e <initBoard+0x1a0>
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	66 e2       	ldi	r22, 0x26	; 38
     920:	72 e0       	ldi	r23, 0x02	; 2
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	93 e0       	ldi	r25, 0x03	; 3
     926:	0d de       	rcall	.-998    	; 0x542 <rgbWrite>
     928:	bf 92       	push	r11
     92a:	af 92       	push	r10
     92c:	1f 92       	push	r1
     92e:	4f 92       	push	r4
     930:	c2 de       	rcall	.-636    	; 0x6b6 <lcdWriteText>
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	76 2c       	mov	r7, r6
     93c:	25 c0       	rjmp	.+74     	; 0x988 <initBoard+0x1ea>
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	9c e7       	ldi	r25, 0x7C	; 124
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <initBoard+0x1a4>
     946:	00 c0       	rjmp	.+0      	; 0x948 <initBoard+0x1aa>
     948:	00 00       	nop
     94a:	b8 cf       	rjmp	.-144    	; 0x8bc <initBoard+0x11e>
     94c:	f0 de       	rcall	.-544    	; 0x72e <lcdClear>
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	2f de       	rcall	.-930    	; 0x5b0 <lcdLight>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	c5 dd       	rcall	.-1142   	; 0x4e2 <ledWriteAll>
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	ee dd       	rcall	.-1060   	; 0x542 <rgbWrite>
     966:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
     96a:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
     96e:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
     972:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
     976:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
     97a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
     97e:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
     982:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
     986:	05 c0       	rjmp	.+10     	; 0x992 <initBoard+0x1f4>
     988:	f8 01       	movw	r30, r16
     98a:	80 81       	ld	r24, Z
     98c:	83 7c       	andi	r24, 0xC3	; 195
     98e:	b9 f6       	brne	.-82     	; 0x93e <initBoard+0x1a0>
     990:	dd cf       	rjmp	.-70     	; 0x94c <initBoard+0x1ae>
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	9f 90       	pop	r9
     9a8:	8f 90       	pop	r8
     9aa:	7f 90       	pop	r7
     9ac:	6f 90       	pop	r6
     9ae:	5f 90       	pop	r5
     9b0:	4f 90       	pop	r4
     9b2:	08 95       	ret

000009b4 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	28 97       	sbiw	r28, 0x08	; 8
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	e0 e0       	ldi	r30, 0x00	; 0
     9cc:	f2 e0       	ldi	r31, 0x02	; 2
     9ce:	de 01       	movw	r26, r28
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	01 90       	ld	r0, Z+
     9d4:	0d 92       	st	X+, r0
     9d6:	8a 95       	dec	r24
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
     9da:	e5 e0       	ldi	r30, 0x05	; 5
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	80 81       	ld	r24, Z
     9e0:	8f 7b       	andi	r24, 0xBF	; 191
     9e2:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
     9e4:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2731>
     9e8:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	8c 0f       	add	r24, r28
     9f2:	9d 1f       	adc	r25, r29
     9f4:	e8 0f       	add	r30, r24
     9f6:	f9 1f       	adc	r31, r25
     9f8:	80 81       	ld	r24, Z
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
     a00:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
     a04:	a2 ef       	ldi	r26, 0xF2	; 242
     a06:	b2 e0       	ldi	r27, 0x02	; 2
     a08:	22 e8       	ldi	r18, 0x82	; 130
     a0a:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
     a0c:	e5 e0       	ldi	r30, 0x05	; 5
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
     a10:	5e 91       	ld	r21, -X
     a12:	4e 91       	ld	r20, -X
     a14:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
     a18:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
     a1c:	84 23       	and	r24, r20
     a1e:	95 23       	and	r25, r21
     a20:	89 2b       	or	r24, r25
     a22:	21 f0       	breq	.+8      	; 0xa2c <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
     a24:	80 81       	ld	r24, Z
     a26:	80 62       	ori	r24, 0x20	; 32
     a28:	80 83       	st	Z, r24
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
     a2c:	80 81       	ld	r24, Z
     a2e:	8f 7d       	andi	r24, 0xDF	; 223
     a30:	80 83       	st	Z, r24
        }
        CLOCK_1;
     a32:	80 81       	ld	r24, Z
     a34:	80 61       	ori	r24, 0x10	; 16
     a36:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
     a38:	80 81       	ld	r24, Z
     a3a:	8f 7e       	andi	r24, 0xEF	; 239
     a3c:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
     a3e:	a2 17       	cp	r26, r18
     a40:	b3 07       	cpc	r27, r19
     a42:	31 f7       	brne	.-52     	; 0xa10 <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
     a44:	e5 e0       	ldi	r30, 0x05	; 5
     a46:	f1 e0       	ldi	r31, 0x01	; 1
     a48:	80 81       	ld	r24, Z
     a4a:	87 7f       	andi	r24, 0xF7	; 247
     a4c:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
     a4e:	80 81       	ld	r24, Z
     a50:	88 7f       	andi	r24, 0xF8	; 248
     a52:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
     a54:	90 81       	ld	r25, Z
     a56:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
     a5a:	89 2b       	or	r24, r25
     a5c:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
     a5e:	80 81       	ld	r24, Z
     a60:	80 64       	ori	r24, 0x40	; 64
     a62:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
     a64:	80 81       	ld	r24, Z
     a66:	88 60       	ori	r24, 0x08	; 8
     a68:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
     a6a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
     a6e:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
     a72:	87 30       	cpi	r24, 0x07	; 7
     a74:	91 05       	cpc	r25, r1
     a76:	30 f4       	brcc	.+12     	; 0xa84 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2731+0x1>
     a7e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2731>
     a82:	07 c0       	rjmp	.+14     	; 0xa92 <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
     a84:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2731+0x1>
     a88:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2731>
        writeTextFinished = 1;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
     a92:	28 96       	adiw	r28, 0x08	; 8
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
     aa4:	1f 92       	push	r1
     aa6:	0f 92       	push	r0
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	0b b6       	in	r0, 0x3b	; 59
     ab0:	0f 92       	push	r0
     ab2:	2f 93       	push	r18
     ab4:	3f 93       	push	r19
     ab6:	4f 93       	push	r20
     ab8:	5f 93       	push	r21
     aba:	6f 93       	push	r22
     abc:	7f 93       	push	r23
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	af 93       	push	r26
     ac4:	bf 93       	push	r27
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
    systemTimeMs += 1;
     aca:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
     ace:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
     ad2:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
     ad6:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
     ada:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
     ade:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
     ae2:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
     ae6:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
     aea:	a1 e0       	ldi	r26, 0x01	; 1
     aec:	27 d0       	rcall	.+78     	; 0xb3c <__adddi3_s8>
     aee:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
     af2:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
     af6:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
     afa:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
     afe:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
     b02:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
     b06:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
     b0a:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
     b0e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
     b12:	81 11       	cpse	r24, r1
     b14:	4f df       	rcall	.-354    	; 0x9b4 <matrixWriteNextLine>
}
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0b be       	out	0x3b, r0	; 59
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <__adddi3_s8>:
     b3c:	00 24       	eor	r0, r0
     b3e:	a7 fd       	sbrc	r26, 7
     b40:	00 94       	com	r0
     b42:	2a 0f       	add	r18, r26
     b44:	30 1d       	adc	r19, r0
     b46:	40 1d       	adc	r20, r0
     b48:	50 1d       	adc	r21, r0
     b4a:	60 1d       	adc	r22, r0
     b4c:	70 1d       	adc	r23, r0
     b4e:	80 1d       	adc	r24, r0
     b50:	90 1d       	adc	r25, r0
     b52:	08 95       	ret

00000b54 <__cmpdi2_s8>:
     b54:	00 24       	eor	r0, r0
     b56:	a7 fd       	sbrc	r26, 7
     b58:	00 94       	com	r0
     b5a:	2a 17       	cp	r18, r26
     b5c:	30 05       	cpc	r19, r0
     b5e:	40 05       	cpc	r20, r0
     b60:	50 05       	cpc	r21, r0
     b62:	60 05       	cpc	r22, r0
     b64:	70 05       	cpc	r23, r0
     b66:	80 05       	cpc	r24, r0
     b68:	90 05       	cpc	r25, r0
     b6a:	08 95       	ret

00000b6c <vsnprintf>:
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	2e 97       	sbiw	r28, 0x0e	; 14
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	8c 01       	movw	r16, r24
     b86:	fa 01       	movw	r30, r20
     b88:	86 e0       	ldi	r24, 0x06	; 6
     b8a:	8c 83       	std	Y+4, r24	; 0x04
     b8c:	1a 83       	std	Y+2, r17	; 0x02
     b8e:	09 83       	std	Y+1, r16	; 0x01
     b90:	77 ff       	sbrs	r23, 7
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <vsnprintf+0x2c>
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e8       	ldi	r23, 0x80	; 128
     b98:	cb 01       	movw	r24, r22
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	9e 83       	std	Y+6, r25	; 0x06
     b9e:	8d 83       	std	Y+5, r24	; 0x05
     ba0:	a9 01       	movw	r20, r18
     ba2:	bf 01       	movw	r22, r30
     ba4:	ce 01       	movw	r24, r28
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	19 d0       	rcall	.+50     	; 0xbdc <vfprintf>
     baa:	4d 81       	ldd	r20, Y+5	; 0x05
     bac:	5e 81       	ldd	r21, Y+6	; 0x06
     bae:	57 fd       	sbrc	r21, 7
     bb0:	0a c0       	rjmp	.+20     	; 0xbc6 <vsnprintf+0x5a>
     bb2:	2f 81       	ldd	r18, Y+7	; 0x07
     bb4:	38 85       	ldd	r19, Y+8	; 0x08
     bb6:	42 17       	cp	r20, r18
     bb8:	53 07       	cpc	r21, r19
     bba:	0c f4       	brge	.+2      	; 0xbbe <vsnprintf+0x52>
     bbc:	9a 01       	movw	r18, r20
     bbe:	f8 01       	movw	r30, r16
     bc0:	e2 0f       	add	r30, r18
     bc2:	f3 1f       	adc	r31, r19
     bc4:	10 82       	st	Z, r1
     bc6:	2e 96       	adiw	r28, 0x0e	; 14
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <vfprintf>:
     bdc:	2f 92       	push	r2
     bde:	3f 92       	push	r3
     be0:	4f 92       	push	r4
     be2:	5f 92       	push	r5
     be4:	6f 92       	push	r6
     be6:	7f 92       	push	r7
     be8:	8f 92       	push	r8
     bea:	9f 92       	push	r9
     bec:	af 92       	push	r10
     bee:	bf 92       	push	r11
     bf0:	cf 92       	push	r12
     bf2:	df 92       	push	r13
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	2b 97       	sbiw	r28, 0x0b	; 11
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	6c 01       	movw	r12, r24
     c12:	7b 01       	movw	r14, r22
     c14:	8a 01       	movw	r16, r20
     c16:	fc 01       	movw	r30, r24
     c18:	17 82       	std	Z+7, r1	; 0x07
     c1a:	16 82       	std	Z+6, r1	; 0x06
     c1c:	83 81       	ldd	r24, Z+3	; 0x03
     c1e:	81 ff       	sbrs	r24, 1
     c20:	bf c1       	rjmp	.+894    	; 0xfa0 <vfprintf+0x3c4>
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	3c 01       	movw	r6, r24
     c28:	f6 01       	movw	r30, r12
     c2a:	93 81       	ldd	r25, Z+3	; 0x03
     c2c:	f7 01       	movw	r30, r14
     c2e:	93 fd       	sbrc	r25, 3
     c30:	85 91       	lpm	r24, Z+
     c32:	93 ff       	sbrs	r25, 3
     c34:	81 91       	ld	r24, Z+
     c36:	7f 01       	movw	r14, r30
     c38:	88 23       	and	r24, r24
     c3a:	09 f4       	brne	.+2      	; 0xc3e <vfprintf+0x62>
     c3c:	ad c1       	rjmp	.+858    	; 0xf98 <vfprintf+0x3bc>
     c3e:	85 32       	cpi	r24, 0x25	; 37
     c40:	39 f4       	brne	.+14     	; 0xc50 <vfprintf+0x74>
     c42:	93 fd       	sbrc	r25, 3
     c44:	85 91       	lpm	r24, Z+
     c46:	93 ff       	sbrs	r25, 3
     c48:	81 91       	ld	r24, Z+
     c4a:	7f 01       	movw	r14, r30
     c4c:	85 32       	cpi	r24, 0x25	; 37
     c4e:	21 f4       	brne	.+8      	; 0xc58 <vfprintf+0x7c>
     c50:	b6 01       	movw	r22, r12
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	d6 d1       	rcall	.+940    	; 0x1002 <fputc>
     c56:	e8 cf       	rjmp	.-48     	; 0xc28 <vfprintf+0x4c>
     c58:	91 2c       	mov	r9, r1
     c5a:	21 2c       	mov	r2, r1
     c5c:	31 2c       	mov	r3, r1
     c5e:	ff e1       	ldi	r31, 0x1F	; 31
     c60:	f3 15       	cp	r31, r3
     c62:	d8 f0       	brcs	.+54     	; 0xc9a <vfprintf+0xbe>
     c64:	8b 32       	cpi	r24, 0x2B	; 43
     c66:	79 f0       	breq	.+30     	; 0xc86 <vfprintf+0xaa>
     c68:	38 f4       	brcc	.+14     	; 0xc78 <vfprintf+0x9c>
     c6a:	80 32       	cpi	r24, 0x20	; 32
     c6c:	79 f0       	breq	.+30     	; 0xc8c <vfprintf+0xb0>
     c6e:	83 32       	cpi	r24, 0x23	; 35
     c70:	a1 f4       	brne	.+40     	; 0xc9a <vfprintf+0xbe>
     c72:	23 2d       	mov	r18, r3
     c74:	20 61       	ori	r18, 0x10	; 16
     c76:	1d c0       	rjmp	.+58     	; 0xcb2 <vfprintf+0xd6>
     c78:	8d 32       	cpi	r24, 0x2D	; 45
     c7a:	61 f0       	breq	.+24     	; 0xc94 <vfprintf+0xb8>
     c7c:	80 33       	cpi	r24, 0x30	; 48
     c7e:	69 f4       	brne	.+26     	; 0xc9a <vfprintf+0xbe>
     c80:	23 2d       	mov	r18, r3
     c82:	21 60       	ori	r18, 0x01	; 1
     c84:	16 c0       	rjmp	.+44     	; 0xcb2 <vfprintf+0xd6>
     c86:	83 2d       	mov	r24, r3
     c88:	82 60       	ori	r24, 0x02	; 2
     c8a:	38 2e       	mov	r3, r24
     c8c:	e3 2d       	mov	r30, r3
     c8e:	e4 60       	ori	r30, 0x04	; 4
     c90:	3e 2e       	mov	r3, r30
     c92:	2a c0       	rjmp	.+84     	; 0xce8 <vfprintf+0x10c>
     c94:	f3 2d       	mov	r31, r3
     c96:	f8 60       	ori	r31, 0x08	; 8
     c98:	1d c0       	rjmp	.+58     	; 0xcd4 <vfprintf+0xf8>
     c9a:	37 fc       	sbrc	r3, 7
     c9c:	2d c0       	rjmp	.+90     	; 0xcf8 <vfprintf+0x11c>
     c9e:	20 ed       	ldi	r18, 0xD0	; 208
     ca0:	28 0f       	add	r18, r24
     ca2:	2a 30       	cpi	r18, 0x0A	; 10
     ca4:	40 f0       	brcs	.+16     	; 0xcb6 <vfprintf+0xda>
     ca6:	8e 32       	cpi	r24, 0x2E	; 46
     ca8:	b9 f4       	brne	.+46     	; 0xcd8 <vfprintf+0xfc>
     caa:	36 fc       	sbrc	r3, 6
     cac:	75 c1       	rjmp	.+746    	; 0xf98 <vfprintf+0x3bc>
     cae:	23 2d       	mov	r18, r3
     cb0:	20 64       	ori	r18, 0x40	; 64
     cb2:	32 2e       	mov	r3, r18
     cb4:	19 c0       	rjmp	.+50     	; 0xce8 <vfprintf+0x10c>
     cb6:	36 fe       	sbrs	r3, 6
     cb8:	06 c0       	rjmp	.+12     	; 0xcc6 <vfprintf+0xea>
     cba:	8a e0       	ldi	r24, 0x0A	; 10
     cbc:	98 9e       	mul	r9, r24
     cbe:	20 0d       	add	r18, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	92 2e       	mov	r9, r18
     cc4:	11 c0       	rjmp	.+34     	; 0xce8 <vfprintf+0x10c>
     cc6:	ea e0       	ldi	r30, 0x0A	; 10
     cc8:	2e 9e       	mul	r2, r30
     cca:	20 0d       	add	r18, r0
     ccc:	11 24       	eor	r1, r1
     cce:	22 2e       	mov	r2, r18
     cd0:	f3 2d       	mov	r31, r3
     cd2:	f0 62       	ori	r31, 0x20	; 32
     cd4:	3f 2e       	mov	r3, r31
     cd6:	08 c0       	rjmp	.+16     	; 0xce8 <vfprintf+0x10c>
     cd8:	8c 36       	cpi	r24, 0x6C	; 108
     cda:	21 f4       	brne	.+8      	; 0xce4 <vfprintf+0x108>
     cdc:	83 2d       	mov	r24, r3
     cde:	80 68       	ori	r24, 0x80	; 128
     ce0:	38 2e       	mov	r3, r24
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <vfprintf+0x10c>
     ce4:	88 36       	cpi	r24, 0x68	; 104
     ce6:	41 f4       	brne	.+16     	; 0xcf8 <vfprintf+0x11c>
     ce8:	f7 01       	movw	r30, r14
     cea:	93 fd       	sbrc	r25, 3
     cec:	85 91       	lpm	r24, Z+
     cee:	93 ff       	sbrs	r25, 3
     cf0:	81 91       	ld	r24, Z+
     cf2:	7f 01       	movw	r14, r30
     cf4:	81 11       	cpse	r24, r1
     cf6:	b3 cf       	rjmp	.-154    	; 0xc5e <vfprintf+0x82>
     cf8:	98 2f       	mov	r25, r24
     cfa:	9f 7d       	andi	r25, 0xDF	; 223
     cfc:	95 54       	subi	r25, 0x45	; 69
     cfe:	93 30       	cpi	r25, 0x03	; 3
     d00:	28 f4       	brcc	.+10     	; 0xd0c <vfprintf+0x130>
     d02:	0c 5f       	subi	r16, 0xFC	; 252
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	9f e3       	ldi	r25, 0x3F	; 63
     d08:	99 83       	std	Y+1, r25	; 0x01
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <vfprintf+0x14a>
     d0c:	83 36       	cpi	r24, 0x63	; 99
     d0e:	31 f0       	breq	.+12     	; 0xd1c <vfprintf+0x140>
     d10:	83 37       	cpi	r24, 0x73	; 115
     d12:	71 f0       	breq	.+28     	; 0xd30 <vfprintf+0x154>
     d14:	83 35       	cpi	r24, 0x53	; 83
     d16:	09 f0       	breq	.+2      	; 0xd1a <vfprintf+0x13e>
     d18:	55 c0       	rjmp	.+170    	; 0xdc4 <vfprintf+0x1e8>
     d1a:	20 c0       	rjmp	.+64     	; 0xd5c <vfprintf+0x180>
     d1c:	f8 01       	movw	r30, r16
     d1e:	80 81       	ld	r24, Z
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	0e 5f       	subi	r16, 0xFE	; 254
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	88 24       	eor	r8, r8
     d28:	83 94       	inc	r8
     d2a:	91 2c       	mov	r9, r1
     d2c:	53 01       	movw	r10, r6
     d2e:	12 c0       	rjmp	.+36     	; 0xd54 <vfprintf+0x178>
     d30:	28 01       	movw	r4, r16
     d32:	f2 e0       	ldi	r31, 0x02	; 2
     d34:	4f 0e       	add	r4, r31
     d36:	51 1c       	adc	r5, r1
     d38:	f8 01       	movw	r30, r16
     d3a:	a0 80       	ld	r10, Z
     d3c:	b1 80       	ldd	r11, Z+1	; 0x01
     d3e:	36 fe       	sbrs	r3, 6
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <vfprintf+0x16c>
     d42:	69 2d       	mov	r22, r9
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <vfprintf+0x170>
     d48:	6f ef       	ldi	r22, 0xFF	; 255
     d4a:	7f ef       	ldi	r23, 0xFF	; 255
     d4c:	c5 01       	movw	r24, r10
     d4e:	4e d1       	rcall	.+668    	; 0xfec <strnlen>
     d50:	4c 01       	movw	r8, r24
     d52:	82 01       	movw	r16, r4
     d54:	f3 2d       	mov	r31, r3
     d56:	ff 77       	andi	r31, 0x7F	; 127
     d58:	3f 2e       	mov	r3, r31
     d5a:	15 c0       	rjmp	.+42     	; 0xd86 <vfprintf+0x1aa>
     d5c:	28 01       	movw	r4, r16
     d5e:	22 e0       	ldi	r18, 0x02	; 2
     d60:	42 0e       	add	r4, r18
     d62:	51 1c       	adc	r5, r1
     d64:	f8 01       	movw	r30, r16
     d66:	a0 80       	ld	r10, Z
     d68:	b1 80       	ldd	r11, Z+1	; 0x01
     d6a:	36 fe       	sbrs	r3, 6
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <vfprintf+0x198>
     d6e:	69 2d       	mov	r22, r9
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0x19c>
     d74:	6f ef       	ldi	r22, 0xFF	; 255
     d76:	7f ef       	ldi	r23, 0xFF	; 255
     d78:	c5 01       	movw	r24, r10
     d7a:	2d d1       	rcall	.+602    	; 0xfd6 <strnlen_P>
     d7c:	4c 01       	movw	r8, r24
     d7e:	f3 2d       	mov	r31, r3
     d80:	f0 68       	ori	r31, 0x80	; 128
     d82:	3f 2e       	mov	r3, r31
     d84:	82 01       	movw	r16, r4
     d86:	33 fc       	sbrc	r3, 3
     d88:	19 c0       	rjmp	.+50     	; 0xdbc <vfprintf+0x1e0>
     d8a:	82 2d       	mov	r24, r2
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	88 16       	cp	r8, r24
     d90:	99 06       	cpc	r9, r25
     d92:	a0 f4       	brcc	.+40     	; 0xdbc <vfprintf+0x1e0>
     d94:	b6 01       	movw	r22, r12
     d96:	80 e2       	ldi	r24, 0x20	; 32
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	33 d1       	rcall	.+614    	; 0x1002 <fputc>
     d9c:	2a 94       	dec	r2
     d9e:	f5 cf       	rjmp	.-22     	; 0xd8a <vfprintf+0x1ae>
     da0:	f5 01       	movw	r30, r10
     da2:	37 fc       	sbrc	r3, 7
     da4:	85 91       	lpm	r24, Z+
     da6:	37 fe       	sbrs	r3, 7
     da8:	81 91       	ld	r24, Z+
     daa:	5f 01       	movw	r10, r30
     dac:	b6 01       	movw	r22, r12
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	28 d1       	rcall	.+592    	; 0x1002 <fputc>
     db2:	21 10       	cpse	r2, r1
     db4:	2a 94       	dec	r2
     db6:	21 e0       	ldi	r18, 0x01	; 1
     db8:	82 1a       	sub	r8, r18
     dba:	91 08       	sbc	r9, r1
     dbc:	81 14       	cp	r8, r1
     dbe:	91 04       	cpc	r9, r1
     dc0:	79 f7       	brne	.-34     	; 0xda0 <vfprintf+0x1c4>
     dc2:	e1 c0       	rjmp	.+450    	; 0xf86 <vfprintf+0x3aa>
     dc4:	84 36       	cpi	r24, 0x64	; 100
     dc6:	11 f0       	breq	.+4      	; 0xdcc <vfprintf+0x1f0>
     dc8:	89 36       	cpi	r24, 0x69	; 105
     dca:	39 f5       	brne	.+78     	; 0xe1a <vfprintf+0x23e>
     dcc:	f8 01       	movw	r30, r16
     dce:	37 fe       	sbrs	r3, 7
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <vfprintf+0x204>
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	0c 5f       	subi	r16, 0xFC	; 252
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <vfprintf+0x214>
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	07 2e       	mov	r0, r23
     de6:	00 0c       	add	r0, r0
     de8:	88 0b       	sbc	r24, r24
     dea:	99 0b       	sbc	r25, r25
     dec:	0e 5f       	subi	r16, 0xFE	; 254
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	f3 2d       	mov	r31, r3
     df2:	ff 76       	andi	r31, 0x6F	; 111
     df4:	3f 2e       	mov	r3, r31
     df6:	97 ff       	sbrs	r25, 7
     df8:	09 c0       	rjmp	.+18     	; 0xe0c <vfprintf+0x230>
     dfa:	90 95       	com	r25
     dfc:	80 95       	com	r24
     dfe:	70 95       	com	r23
     e00:	61 95       	neg	r22
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	8f 4f       	sbci	r24, 0xFF	; 255
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	f0 68       	ori	r31, 0x80	; 128
     e0a:	3f 2e       	mov	r3, r31
     e0c:	2a e0       	ldi	r18, 0x0A	; 10
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	a3 01       	movw	r20, r6
     e12:	33 d1       	rcall	.+614    	; 0x107a <__ultoa_invert>
     e14:	88 2e       	mov	r8, r24
     e16:	86 18       	sub	r8, r6
     e18:	44 c0       	rjmp	.+136    	; 0xea2 <vfprintf+0x2c6>
     e1a:	85 37       	cpi	r24, 0x75	; 117
     e1c:	31 f4       	brne	.+12     	; 0xe2a <vfprintf+0x24e>
     e1e:	23 2d       	mov	r18, r3
     e20:	2f 7e       	andi	r18, 0xEF	; 239
     e22:	b2 2e       	mov	r11, r18
     e24:	2a e0       	ldi	r18, 0x0A	; 10
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	25 c0       	rjmp	.+74     	; 0xe74 <vfprintf+0x298>
     e2a:	93 2d       	mov	r25, r3
     e2c:	99 7f       	andi	r25, 0xF9	; 249
     e2e:	b9 2e       	mov	r11, r25
     e30:	8f 36       	cpi	r24, 0x6F	; 111
     e32:	c1 f0       	breq	.+48     	; 0xe64 <vfprintf+0x288>
     e34:	18 f4       	brcc	.+6      	; 0xe3c <vfprintf+0x260>
     e36:	88 35       	cpi	r24, 0x58	; 88
     e38:	79 f0       	breq	.+30     	; 0xe58 <vfprintf+0x27c>
     e3a:	ae c0       	rjmp	.+348    	; 0xf98 <vfprintf+0x3bc>
     e3c:	80 37       	cpi	r24, 0x70	; 112
     e3e:	19 f0       	breq	.+6      	; 0xe46 <vfprintf+0x26a>
     e40:	88 37       	cpi	r24, 0x78	; 120
     e42:	21 f0       	breq	.+8      	; 0xe4c <vfprintf+0x270>
     e44:	a9 c0       	rjmp	.+338    	; 0xf98 <vfprintf+0x3bc>
     e46:	e9 2f       	mov	r30, r25
     e48:	e0 61       	ori	r30, 0x10	; 16
     e4a:	be 2e       	mov	r11, r30
     e4c:	b4 fe       	sbrs	r11, 4
     e4e:	0d c0       	rjmp	.+26     	; 0xe6a <vfprintf+0x28e>
     e50:	fb 2d       	mov	r31, r11
     e52:	f4 60       	ori	r31, 0x04	; 4
     e54:	bf 2e       	mov	r11, r31
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <vfprintf+0x28e>
     e58:	34 fe       	sbrs	r3, 4
     e5a:	0a c0       	rjmp	.+20     	; 0xe70 <vfprintf+0x294>
     e5c:	29 2f       	mov	r18, r25
     e5e:	26 60       	ori	r18, 0x06	; 6
     e60:	b2 2e       	mov	r11, r18
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <vfprintf+0x294>
     e64:	28 e0       	ldi	r18, 0x08	; 8
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <vfprintf+0x298>
     e6a:	20 e1       	ldi	r18, 0x10	; 16
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <vfprintf+0x298>
     e70:	20 e1       	ldi	r18, 0x10	; 16
     e72:	32 e0       	ldi	r19, 0x02	; 2
     e74:	f8 01       	movw	r30, r16
     e76:	b7 fe       	sbrs	r11, 7
     e78:	07 c0       	rjmp	.+14     	; 0xe88 <vfprintf+0x2ac>
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	93 81       	ldd	r25, Z+3	; 0x03
     e82:	0c 5f       	subi	r16, 0xFC	; 252
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <vfprintf+0x2b8>
     e88:	60 81       	ld	r22, Z
     e8a:	71 81       	ldd	r23, Z+1	; 0x01
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 5f       	subi	r16, 0xFE	; 254
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	a3 01       	movw	r20, r6
     e96:	f1 d0       	rcall	.+482    	; 0x107a <__ultoa_invert>
     e98:	88 2e       	mov	r8, r24
     e9a:	86 18       	sub	r8, r6
     e9c:	fb 2d       	mov	r31, r11
     e9e:	ff 77       	andi	r31, 0x7F	; 127
     ea0:	3f 2e       	mov	r3, r31
     ea2:	36 fe       	sbrs	r3, 6
     ea4:	0d c0       	rjmp	.+26     	; 0xec0 <vfprintf+0x2e4>
     ea6:	23 2d       	mov	r18, r3
     ea8:	2e 7f       	andi	r18, 0xFE	; 254
     eaa:	a2 2e       	mov	r10, r18
     eac:	89 14       	cp	r8, r9
     eae:	58 f4       	brcc	.+22     	; 0xec6 <vfprintf+0x2ea>
     eb0:	34 fe       	sbrs	r3, 4
     eb2:	0b c0       	rjmp	.+22     	; 0xeca <vfprintf+0x2ee>
     eb4:	32 fc       	sbrc	r3, 2
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <vfprintf+0x2ee>
     eb8:	83 2d       	mov	r24, r3
     eba:	8e 7e       	andi	r24, 0xEE	; 238
     ebc:	a8 2e       	mov	r10, r24
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <vfprintf+0x2ee>
     ec0:	b8 2c       	mov	r11, r8
     ec2:	a3 2c       	mov	r10, r3
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <vfprintf+0x2f0>
     ec6:	b8 2c       	mov	r11, r8
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <vfprintf+0x2f0>
     eca:	b9 2c       	mov	r11, r9
     ecc:	a4 fe       	sbrs	r10, 4
     ece:	0f c0       	rjmp	.+30     	; 0xeee <vfprintf+0x312>
     ed0:	fe 01       	movw	r30, r28
     ed2:	e8 0d       	add	r30, r8
     ed4:	f1 1d       	adc	r31, r1
     ed6:	80 81       	ld	r24, Z
     ed8:	80 33       	cpi	r24, 0x30	; 48
     eda:	21 f4       	brne	.+8      	; 0xee4 <vfprintf+0x308>
     edc:	9a 2d       	mov	r25, r10
     ede:	99 7e       	andi	r25, 0xE9	; 233
     ee0:	a9 2e       	mov	r10, r25
     ee2:	09 c0       	rjmp	.+18     	; 0xef6 <vfprintf+0x31a>
     ee4:	a2 fe       	sbrs	r10, 2
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <vfprintf+0x318>
     ee8:	b3 94       	inc	r11
     eea:	b3 94       	inc	r11
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <vfprintf+0x31a>
     eee:	8a 2d       	mov	r24, r10
     ef0:	86 78       	andi	r24, 0x86	; 134
     ef2:	09 f0       	breq	.+2      	; 0xef6 <vfprintf+0x31a>
     ef4:	b3 94       	inc	r11
     ef6:	a3 fc       	sbrc	r10, 3
     ef8:	10 c0       	rjmp	.+32     	; 0xf1a <vfprintf+0x33e>
     efa:	a0 fe       	sbrs	r10, 0
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <vfprintf+0x32e>
     efe:	b2 14       	cp	r11, r2
     f00:	80 f4       	brcc	.+32     	; 0xf22 <vfprintf+0x346>
     f02:	28 0c       	add	r2, r8
     f04:	92 2c       	mov	r9, r2
     f06:	9b 18       	sub	r9, r11
     f08:	0d c0       	rjmp	.+26     	; 0xf24 <vfprintf+0x348>
     f0a:	b2 14       	cp	r11, r2
     f0c:	58 f4       	brcc	.+22     	; 0xf24 <vfprintf+0x348>
     f0e:	b6 01       	movw	r22, r12
     f10:	80 e2       	ldi	r24, 0x20	; 32
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	76 d0       	rcall	.+236    	; 0x1002 <fputc>
     f16:	b3 94       	inc	r11
     f18:	f8 cf       	rjmp	.-16     	; 0xf0a <vfprintf+0x32e>
     f1a:	b2 14       	cp	r11, r2
     f1c:	18 f4       	brcc	.+6      	; 0xf24 <vfprintf+0x348>
     f1e:	2b 18       	sub	r2, r11
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <vfprintf+0x34a>
     f22:	98 2c       	mov	r9, r8
     f24:	21 2c       	mov	r2, r1
     f26:	a4 fe       	sbrs	r10, 4
     f28:	0f c0       	rjmp	.+30     	; 0xf48 <vfprintf+0x36c>
     f2a:	b6 01       	movw	r22, r12
     f2c:	80 e3       	ldi	r24, 0x30	; 48
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	68 d0       	rcall	.+208    	; 0x1002 <fputc>
     f32:	a2 fe       	sbrs	r10, 2
     f34:	16 c0       	rjmp	.+44     	; 0xf62 <vfprintf+0x386>
     f36:	a1 fc       	sbrc	r10, 1
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <vfprintf+0x364>
     f3a:	88 e7       	ldi	r24, 0x78	; 120
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <vfprintf+0x368>
     f40:	88 e5       	ldi	r24, 0x58	; 88
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	b6 01       	movw	r22, r12
     f46:	0c c0       	rjmp	.+24     	; 0xf60 <vfprintf+0x384>
     f48:	8a 2d       	mov	r24, r10
     f4a:	86 78       	andi	r24, 0x86	; 134
     f4c:	51 f0       	breq	.+20     	; 0xf62 <vfprintf+0x386>
     f4e:	a1 fe       	sbrs	r10, 1
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0x37a>
     f52:	8b e2       	ldi	r24, 0x2B	; 43
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <vfprintf+0x37c>
     f56:	80 e2       	ldi	r24, 0x20	; 32
     f58:	a7 fc       	sbrc	r10, 7
     f5a:	8d e2       	ldi	r24, 0x2D	; 45
     f5c:	b6 01       	movw	r22, r12
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	50 d0       	rcall	.+160    	; 0x1002 <fputc>
     f62:	89 14       	cp	r8, r9
     f64:	30 f4       	brcc	.+12     	; 0xf72 <vfprintf+0x396>
     f66:	b6 01       	movw	r22, r12
     f68:	80 e3       	ldi	r24, 0x30	; 48
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	4a d0       	rcall	.+148    	; 0x1002 <fputc>
     f6e:	9a 94       	dec	r9
     f70:	f8 cf       	rjmp	.-16     	; 0xf62 <vfprintf+0x386>
     f72:	8a 94       	dec	r8
     f74:	f3 01       	movw	r30, r6
     f76:	e8 0d       	add	r30, r8
     f78:	f1 1d       	adc	r31, r1
     f7a:	80 81       	ld	r24, Z
     f7c:	b6 01       	movw	r22, r12
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	40 d0       	rcall	.+128    	; 0x1002 <fputc>
     f82:	81 10       	cpse	r8, r1
     f84:	f6 cf       	rjmp	.-20     	; 0xf72 <vfprintf+0x396>
     f86:	22 20       	and	r2, r2
     f88:	09 f4       	brne	.+2      	; 0xf8c <vfprintf+0x3b0>
     f8a:	4e ce       	rjmp	.-868    	; 0xc28 <vfprintf+0x4c>
     f8c:	b6 01       	movw	r22, r12
     f8e:	80 e2       	ldi	r24, 0x20	; 32
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	37 d0       	rcall	.+110    	; 0x1002 <fputc>
     f94:	2a 94       	dec	r2
     f96:	f7 cf       	rjmp	.-18     	; 0xf86 <vfprintf+0x3aa>
     f98:	f6 01       	movw	r30, r12
     f9a:	86 81       	ldd	r24, Z+6	; 0x06
     f9c:	97 81       	ldd	r25, Z+7	; 0x07
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <vfprintf+0x3c8>
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	9f ef       	ldi	r25, 0xFF	; 255
     fa4:	2b 96       	adiw	r28, 0x0b	; 11
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	9f 90       	pop	r9
     fc6:	8f 90       	pop	r8
     fc8:	7f 90       	pop	r7
     fca:	6f 90       	pop	r6
     fcc:	5f 90       	pop	r5
     fce:	4f 90       	pop	r4
     fd0:	3f 90       	pop	r3
     fd2:	2f 90       	pop	r2
     fd4:	08 95       	ret

00000fd6 <strnlen_P>:
     fd6:	fc 01       	movw	r30, r24
     fd8:	05 90       	lpm	r0, Z+
     fda:	61 50       	subi	r22, 0x01	; 1
     fdc:	70 40       	sbci	r23, 0x00	; 0
     fde:	01 10       	cpse	r0, r1
     fe0:	d8 f7       	brcc	.-10     	; 0xfd8 <strnlen_P+0x2>
     fe2:	80 95       	com	r24
     fe4:	90 95       	com	r25
     fe6:	8e 0f       	add	r24, r30
     fe8:	9f 1f       	adc	r25, r31
     fea:	08 95       	ret

00000fec <strnlen>:
     fec:	fc 01       	movw	r30, r24
     fee:	61 50       	subi	r22, 0x01	; 1
     ff0:	70 40       	sbci	r23, 0x00	; 0
     ff2:	01 90       	ld	r0, Z+
     ff4:	01 10       	cpse	r0, r1
     ff6:	d8 f7       	brcc	.-10     	; 0xfee <strnlen+0x2>
     ff8:	80 95       	com	r24
     ffa:	90 95       	com	r25
     ffc:	8e 0f       	add	r24, r30
     ffe:	9f 1f       	adc	r25, r31
    1000:	08 95       	ret

00001002 <fputc>:
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	fb 01       	movw	r30, r22
    100c:	23 81       	ldd	r18, Z+3	; 0x03
    100e:	21 fd       	sbrc	r18, 1
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <fputc+0x16>
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	9f ef       	ldi	r25, 0xFF	; 255
    1016:	2c c0       	rjmp	.+88     	; 0x1070 <fputc+0x6e>
    1018:	22 ff       	sbrs	r18, 2
    101a:	16 c0       	rjmp	.+44     	; 0x1048 <fputc+0x46>
    101c:	46 81       	ldd	r20, Z+6	; 0x06
    101e:	57 81       	ldd	r21, Z+7	; 0x07
    1020:	24 81       	ldd	r18, Z+4	; 0x04
    1022:	35 81       	ldd	r19, Z+5	; 0x05
    1024:	42 17       	cp	r20, r18
    1026:	53 07       	cpc	r21, r19
    1028:	44 f4       	brge	.+16     	; 0x103a <fputc+0x38>
    102a:	a0 81       	ld	r26, Z
    102c:	b1 81       	ldd	r27, Z+1	; 0x01
    102e:	9d 01       	movw	r18, r26
    1030:	2f 5f       	subi	r18, 0xFF	; 255
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	31 83       	std	Z+1, r19	; 0x01
    1036:	20 83       	st	Z, r18
    1038:	8c 93       	st	X, r24
    103a:	26 81       	ldd	r18, Z+6	; 0x06
    103c:	37 81       	ldd	r19, Z+7	; 0x07
    103e:	2f 5f       	subi	r18, 0xFF	; 255
    1040:	3f 4f       	sbci	r19, 0xFF	; 255
    1042:	37 83       	std	Z+7, r19	; 0x07
    1044:	26 83       	std	Z+6, r18	; 0x06
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <fputc+0x6e>
    1048:	8b 01       	movw	r16, r22
    104a:	ec 01       	movw	r28, r24
    104c:	fb 01       	movw	r30, r22
    104e:	00 84       	ldd	r0, Z+8	; 0x08
    1050:	f1 85       	ldd	r31, Z+9	; 0x09
    1052:	e0 2d       	mov	r30, r0
    1054:	19 95       	eicall
    1056:	89 2b       	or	r24, r25
    1058:	e1 f6       	brne	.-72     	; 0x1012 <fputc+0x10>
    105a:	d8 01       	movw	r26, r16
    105c:	16 96       	adiw	r26, 0x06	; 6
    105e:	8d 91       	ld	r24, X+
    1060:	9c 91       	ld	r25, X
    1062:	17 97       	sbiw	r26, 0x07	; 7
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	17 96       	adiw	r26, 0x07	; 7
    1068:	9c 93       	st	X, r25
    106a:	8e 93       	st	-X, r24
    106c:	16 97       	sbiw	r26, 0x06	; 6
    106e:	ce 01       	movw	r24, r28
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	08 95       	ret

0000107a <__ultoa_invert>:
    107a:	fa 01       	movw	r30, r20
    107c:	aa 27       	eor	r26, r26
    107e:	28 30       	cpi	r18, 0x08	; 8
    1080:	51 f1       	breq	.+84     	; 0x10d6 <__ultoa_invert+0x5c>
    1082:	20 31       	cpi	r18, 0x10	; 16
    1084:	81 f1       	breq	.+96     	; 0x10e6 <__ultoa_invert+0x6c>
    1086:	e8 94       	clt
    1088:	6f 93       	push	r22
    108a:	6e 7f       	andi	r22, 0xFE	; 254
    108c:	6e 5f       	subi	r22, 0xFE	; 254
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	8f 4f       	sbci	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	af 4f       	sbci	r26, 0xFF	; 255
    1096:	b1 e0       	ldi	r27, 0x01	; 1
    1098:	3e d0       	rcall	.+124    	; 0x1116 <__ultoa_invert+0x9c>
    109a:	b4 e0       	ldi	r27, 0x04	; 4
    109c:	3c d0       	rcall	.+120    	; 0x1116 <__ultoa_invert+0x9c>
    109e:	67 0f       	add	r22, r23
    10a0:	78 1f       	adc	r23, r24
    10a2:	89 1f       	adc	r24, r25
    10a4:	9a 1f       	adc	r25, r26
    10a6:	a1 1d       	adc	r26, r1
    10a8:	68 0f       	add	r22, r24
    10aa:	79 1f       	adc	r23, r25
    10ac:	8a 1f       	adc	r24, r26
    10ae:	91 1d       	adc	r25, r1
    10b0:	a1 1d       	adc	r26, r1
    10b2:	6a 0f       	add	r22, r26
    10b4:	71 1d       	adc	r23, r1
    10b6:	81 1d       	adc	r24, r1
    10b8:	91 1d       	adc	r25, r1
    10ba:	a1 1d       	adc	r26, r1
    10bc:	20 d0       	rcall	.+64     	; 0x10fe <__ultoa_invert+0x84>
    10be:	09 f4       	brne	.+2      	; 0x10c2 <__ultoa_invert+0x48>
    10c0:	68 94       	set
    10c2:	3f 91       	pop	r19
    10c4:	2a e0       	ldi	r18, 0x0A	; 10
    10c6:	26 9f       	mul	r18, r22
    10c8:	11 24       	eor	r1, r1
    10ca:	30 19       	sub	r19, r0
    10cc:	30 5d       	subi	r19, 0xD0	; 208
    10ce:	31 93       	st	Z+, r19
    10d0:	de f6       	brtc	.-74     	; 0x1088 <__ultoa_invert+0xe>
    10d2:	cf 01       	movw	r24, r30
    10d4:	08 95       	ret
    10d6:	46 2f       	mov	r20, r22
    10d8:	47 70       	andi	r20, 0x07	; 7
    10da:	40 5d       	subi	r20, 0xD0	; 208
    10dc:	41 93       	st	Z+, r20
    10de:	b3 e0       	ldi	r27, 0x03	; 3
    10e0:	0f d0       	rcall	.+30     	; 0x1100 <__ultoa_invert+0x86>
    10e2:	c9 f7       	brne	.-14     	; 0x10d6 <__ultoa_invert+0x5c>
    10e4:	f6 cf       	rjmp	.-20     	; 0x10d2 <__ultoa_invert+0x58>
    10e6:	46 2f       	mov	r20, r22
    10e8:	4f 70       	andi	r20, 0x0F	; 15
    10ea:	40 5d       	subi	r20, 0xD0	; 208
    10ec:	4a 33       	cpi	r20, 0x3A	; 58
    10ee:	18 f0       	brcs	.+6      	; 0x10f6 <__ultoa_invert+0x7c>
    10f0:	49 5d       	subi	r20, 0xD9	; 217
    10f2:	31 fd       	sbrc	r19, 1
    10f4:	40 52       	subi	r20, 0x20	; 32
    10f6:	41 93       	st	Z+, r20
    10f8:	02 d0       	rcall	.+4      	; 0x10fe <__ultoa_invert+0x84>
    10fa:	a9 f7       	brne	.-22     	; 0x10e6 <__ultoa_invert+0x6c>
    10fc:	ea cf       	rjmp	.-44     	; 0x10d2 <__ultoa_invert+0x58>
    10fe:	b4 e0       	ldi	r27, 0x04	; 4
    1100:	a6 95       	lsr	r26
    1102:	97 95       	ror	r25
    1104:	87 95       	ror	r24
    1106:	77 95       	ror	r23
    1108:	67 95       	ror	r22
    110a:	ba 95       	dec	r27
    110c:	c9 f7       	brne	.-14     	; 0x1100 <__ultoa_invert+0x86>
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	61 05       	cpc	r22, r1
    1112:	71 05       	cpc	r23, r1
    1114:	08 95       	ret
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	0a 2e       	mov	r0, r26
    111c:	06 94       	lsr	r0
    111e:	57 95       	ror	r21
    1120:	47 95       	ror	r20
    1122:	37 95       	ror	r19
    1124:	27 95       	ror	r18
    1126:	ba 95       	dec	r27
    1128:	c9 f7       	brne	.-14     	; 0x111c <__ultoa_invert+0xa2>
    112a:	62 0f       	add	r22, r18
    112c:	73 1f       	adc	r23, r19
    112e:	84 1f       	adc	r24, r20
    1130:	95 1f       	adc	r25, r21
    1132:	a0 1d       	adc	r26, r0
    1134:	08 95       	ret

00001136 <_exit>:
    1136:	f8 94       	cli

00001138 <__stop_program>:
    1138:	ff cf       	rjmp	.-2      	; 0x1138 <__stop_program>
