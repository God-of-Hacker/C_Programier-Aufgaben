
uCBoardBeispiele.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000e64  00000ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800274  00800274  00000f6c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000254b  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001017  00000000  00000000  0000373b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155e  00000000  00000000  00004752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000678  00000000  00000000  00005cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d38  00000000  00000000  00006328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c52  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00008cb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	c4 c3       	rjmp	.+1928   	; 0x7e6 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e6       	ldi	r30, 0x64	; 100
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 37       	cpi	r26, 0x74	; 116
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e7       	ldi	r26, 0x74	; 116
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3f       	cpi	r26, 0xF2	; 242
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	9f c6       	rjmp	.+3390   	; 0xe60 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
    uint8_t posFlankePowerFarbwechsel = 0;
    
    zustand_t state = AUS;
    
    //Initialisieren
    initBoard(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	dc d1       	rcall	.+952    	; 0x4e0 <initBoard>
    
    uint8_t posFlanken=0;
    uint8_t posFlankePower = 0;
    uint8_t posFlankePowerFarbwechsel = 0;
    
    zustand_t state = AUS;
 128:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t inTaster=0;
    uint8_t inTasterAlt=0;

    uint16_t outRot=0;
    uint16_t outGruen=0;
    uint16_t outBlau=0;
 12a:	91 2c       	mov	r9, r1
 12c:	a1 2c       	mov	r10, r1
    //Variablen
    uint8_t inTaster=0;
    uint8_t inTasterAlt=0;

    uint16_t outRot=0;
    uint16_t outGruen=0;
 12e:	b1 2c       	mov	r11, r1
 130:	c1 2c       	mov	r12, r1
{
    //Variablen
    uint8_t inTaster=0;
    uint8_t inTasterAlt=0;

    uint16_t outRot=0;
 132:	d1 2c       	mov	r13, r1
 134:	e1 2c       	mov	r14, r1

//Hauptprogramm
int main(void)
{
    //Variablen
    uint8_t inTaster=0;
 136:	c0 e0       	ldi	r28, 0x00	; 0
            {
                state = AUS;
            }
            if (posFlankePowerFarbwechsel)
            {
                state = GRUEN;
 138:	68 94       	set
 13a:	33 24       	eor	r3, r3
 13c:	31 f8       	bld	r3, 1
            break;
            
            case ROT:
            outRot = 1023;
            outGruen= 0;
            outBlau = 0;
 13e:	f1 2c       	mov	r15, r1
 140:	00 e0       	ldi	r16, 0x00	; 0
            }
            
            break;
            
            case ROT:
            outRot = 1023;
 142:	77 24       	eor	r7, r7
 144:	7a 94       	dec	r7
 146:	0f 2e       	mov	r0, r31
 148:	f3 e0       	ldi	r31, 0x03	; 3
 14a:	8f 2e       	mov	r8, r31
 14c:	f0 2d       	mov	r31, r0
            outGruen= 0;
            outBlau = 0;
            if (posFlankePower)
            {
                state = AUS;
 14e:	66 24       	eor	r6, r6
 150:	63 94       	inc	r6
 152:	51 2c       	mov	r5, r1
            {
                state = AUS;
            }
            if (posFlankePowerFarbwechsel)
            {
                state = BLAU;
 154:	0f 2e       	mov	r0, r31
 156:	f3 e0       	ldi	r31, 0x03	; 3
 158:	4f 2e       	mov	r4, r31
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        inTasterAlt = inTaster;
        inTaster = buttonReadAllPL();
 15a:	f0 2d       	mov	r31, r0
 15c:	65 d0       	rcall	.+202    	; 0x228 <buttonReadAllPL>
 15e:	18 2f       	mov	r17, r24
        posFlanken = (inTaster ^ inTasterAlt) & inTaster;
 160:	8c 2f       	mov	r24, r28
 162:	80 95       	com	r24
 164:	81 23       	and	r24, r17
        posFlankePower = posFlanken & IN_MASKE_POWER;
 166:	98 2f       	mov	r25, r24
 168:	91 70       	andi	r25, 0x01	; 1
        posFlankePowerFarbwechsel = posFlanken & IN_MASKE_FARBWECHSEL;
 16a:	82 70       	andi	r24, 0x02	; 2
        //Verarbeitung-------------------------------------------------------------
        switch (state)
 16c:	d1 30       	cpi	r29, 0x01	; 1
 16e:	89 f0       	breq	.+34     	; 0x192 <main+0x6e>
 170:	28 f0       	brcs	.+10     	; 0x17c <main+0x58>
 172:	d2 30       	cpi	r29, 0x02	; 2
 174:	d1 f0       	breq	.+52     	; 0x1aa <main+0x86>
 176:	d3 30       	cpi	r29, 0x03	; 3
 178:	21 f1       	breq	.+72     	; 0x1c2 <main+0x9e>
 17a:	44 c0       	rjmp	.+136    	; 0x204 <main+0xe0>
            outGruen= 0;
            outBlau = 0;

            if (posFlankePower)
            {
                state = ROT;
 17c:	d6 2d       	mov	r29, r6
 17e:	91 11       	cpse	r25, r1
 180:	01 c0       	rjmp	.+2      	; 0x184 <main+0x60>
 182:	d5 2d       	mov	r29, r5
        switch (state)
        {
            case AUS:
            outRot = 0;
            outGruen= 0;
            outBlau = 0;
 184:	9f 2c       	mov	r9, r15
 186:	a0 2e       	mov	r10, r16
        //Verarbeitung-------------------------------------------------------------
        switch (state)
        {
            case AUS:
            outRot = 0;
            outGruen= 0;
 188:	bf 2c       	mov	r11, r15
 18a:	c0 2e       	mov	r12, r16
        posFlankePowerFarbwechsel = posFlanken & IN_MASKE_FARBWECHSEL;
        //Verarbeitung-------------------------------------------------------------
        switch (state)
        {
            case AUS:
            outRot = 0;
 18c:	df 2c       	mov	r13, r15
 18e:	e0 2e       	mov	r14, r16
 190:	39 c0       	rjmp	.+114    	; 0x204 <main+0xe0>
            outBlau = 0;
            if (posFlankePower)
            {
                state = AUS;
            }
            if (posFlankePowerFarbwechsel)
 192:	81 11       	cpse	r24, r1
 194:	22 c0       	rjmp	.+68     	; 0x1da <main+0xb6>
            outRot = 1023;
            outGruen= 0;
            outBlau = 0;
            if (posFlankePower)
            {
                state = AUS;
 196:	d6 2d       	mov	r29, r6
 198:	91 11       	cpse	r25, r1
 19a:	d5 2d       	mov	r29, r5
            break;
            
            case ROT:
            outRot = 1023;
            outGruen= 0;
            outBlau = 0;
 19c:	9f 2c       	mov	r9, r15
 19e:	a0 2e       	mov	r10, r16
            
            break;
            
            case ROT:
            outRot = 1023;
            outGruen= 0;
 1a0:	bf 2c       	mov	r11, r15
 1a2:	c0 2e       	mov	r12, r16
            }
            
            break;
            
            case ROT:
            outRot = 1023;
 1a4:	d7 2c       	mov	r13, r7
 1a6:	e8 2c       	mov	r14, r8
 1a8:	2d c0       	rjmp	.+90     	; 0x204 <main+0xe0>
            
            case GRUEN:
            outRot = 0;
            outGruen= 1023;
            outBlau = 0;
            if (posFlankePower)
 1aa:	91 11       	cpse	r25, r1
            {
                state = AUS;
 1ac:	d5 2d       	mov	r29, r5
            }
            if (posFlankePowerFarbwechsel)
 1ae:	88 23       	and	r24, r24
 1b0:	e1 f0       	breq	.+56     	; 0x1ea <main+0xc6>
            {
                state = BLAU;
 1b2:	d4 2d       	mov	r29, r4
            break;
            
            case GRUEN:
            outRot = 0;
            outGruen= 1023;
            outBlau = 0;
 1b4:	9f 2c       	mov	r9, r15
 1b6:	a0 2e       	mov	r10, r16
            }
            break;
            
            case GRUEN:
            outRot = 0;
            outGruen= 1023;
 1b8:	b7 2c       	mov	r11, r7
 1ba:	c8 2c       	mov	r12, r8
                state = GRUEN;
            }
            break;
            
            case GRUEN:
            outRot = 0;
 1bc:	df 2c       	mov	r13, r15
 1be:	e0 2e       	mov	r14, r16
 1c0:	21 c0       	rjmp	.+66     	; 0x204 <main+0xe0>
            
           case BLAU:
           outRot = 0;
           outGruen= 0;
           outBlau = 1023;
           if (posFlankePower)
 1c2:	91 11       	cpse	r25, r1
           {
               state = AUS;
 1c4:	d5 2d       	mov	r29, r5
           }
           if (posFlankePowerFarbwechsel)
 1c6:	88 23       	and	r24, r24
 1c8:	b9 f0       	breq	.+46     	; 0x1f8 <main+0xd4>
           {
               state = ROT;
 1ca:	d6 2d       	mov	r29, r6
            break;
            
           case BLAU:
           outRot = 0;
           outGruen= 0;
           outBlau = 1023;
 1cc:	97 2c       	mov	r9, r7
 1ce:	a8 2c       	mov	r10, r8
            }
            break;
            
           case BLAU:
           outRot = 0;
           outGruen= 0;
 1d0:	bf 2c       	mov	r11, r15
 1d2:	c0 2e       	mov	r12, r16
                state = BLAU;
            }
            break;
            
           case BLAU:
           outRot = 0;
 1d4:	df 2c       	mov	r13, r15
 1d6:	e0 2e       	mov	r14, r16
 1d8:	15 c0       	rjmp	.+42     	; 0x204 <main+0xe0>
            {
                state = AUS;
            }
            if (posFlankePowerFarbwechsel)
            {
                state = GRUEN;
 1da:	d3 2d       	mov	r29, r3
            break;
            
            case ROT:
            outRot = 1023;
            outGruen= 0;
            outBlau = 0;
 1dc:	9f 2c       	mov	r9, r15
 1de:	a0 2e       	mov	r10, r16
            
            break;
            
            case ROT:
            outRot = 1023;
            outGruen= 0;
 1e0:	bf 2c       	mov	r11, r15
 1e2:	c0 2e       	mov	r12, r16
            }
            
            break;
            
            case ROT:
            outRot = 1023;
 1e4:	d7 2c       	mov	r13, r7
 1e6:	e8 2c       	mov	r14, r8
 1e8:	0d c0       	rjmp	.+26     	; 0x204 <main+0xe0>
            break;
            
            case GRUEN:
            outRot = 0;
            outGruen= 1023;
            outBlau = 0;
 1ea:	9f 2c       	mov	r9, r15
 1ec:	a0 2e       	mov	r10, r16
            }
            break;
            
            case GRUEN:
            outRot = 0;
            outGruen= 1023;
 1ee:	b7 2c       	mov	r11, r7
 1f0:	c8 2c       	mov	r12, r8
                state = GRUEN;
            }
            break;
            
            case GRUEN:
            outRot = 0;
 1f2:	df 2c       	mov	r13, r15
 1f4:	e0 2e       	mov	r14, r16
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <main+0xe0>
            break;
            
           case BLAU:
           outRot = 0;
           outGruen= 0;
           outBlau = 1023;
 1f8:	97 2c       	mov	r9, r7
 1fa:	a8 2c       	mov	r10, r8
            }
            break;
            
           case BLAU:
           outRot = 0;
           outGruen= 0;
 1fc:	bf 2c       	mov	r11, r15
 1fe:	c0 2e       	mov	r12, r16
                state = BLAU;
            }
            break;
            
           case BLAU:
           outRot = 0;
 200:	df 2c       	mov	r13, r15
 202:	e0 2e       	mov	r14, r16
            //Wird nicht erreicht
            break;
        }
        
        //Ausgabe------------------------------------------------------------------
        rgbWrite(outRot,outGruen,outBlau);
 204:	49 2d       	mov	r20, r9
 206:	5a 2d       	mov	r21, r10
 208:	6b 2d       	mov	r22, r11
 20a:	7c 2d       	mov	r23, r12
 20c:	8d 2d       	mov	r24, r13
 20e:	9e 2d       	mov	r25, r14
 210:	39 d0       	rcall	.+114    	; 0x284 <rgbWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	9c e9       	ldi	r25, 0x9C	; 156
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0xf2>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0xf8>
 21c:	00 00       	nop
    //Unendlichschlaufe
    while(1)
    {
        //Eingabe------------------------------------------------------------------
        inTasterAlt = inTaster;
        inTaster = buttonReadAllPL();
 21e:	c1 2f       	mov	r28, r17
 220:	9d cf       	rjmp	.-198    	; 0x15c <main+0x38>

00000222 <ledWriteAll>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 222:	82 b9       	out	0x02, r24	; 2
 224:	95 b9       	out	0x05, r25	; 5
 226:	08 95       	ret

00000228 <buttonReadAllPL>:
 228:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 22c:	08 95       	ret

0000022e <startSystemTimeMs>:
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	84 bd       	out	0x24, r24	; 36
 232:	8b e0       	ldi	r24, 0x0B	; 11
 234:	85 bd       	out	0x25, r24	; 37
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 23c:	89 ef       	ldi	r24, 0xF9	; 249
 23e:	87 bd       	out	0x27, r24	; 39
 240:	08 95       	ret

00000242 <initAdc>:
 242:	11 ba       	out	0x11, r1	; 17
 244:	10 ba       	out	0x10, r1	; 16
 246:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 24a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 24e:	80 e4       	ldi	r24, 0x40	; 64
 250:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 254:	8f e0       	ldi	r24, 0x0F	; 15
 256:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 260:	ea e7       	ldi	r30, 0x7A	; 122
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	87 ea       	ldi	r24, 0xA7	; 167
 266:	80 83       	st	Z, r24
 268:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 26c:	80 81       	ld	r24, Z
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	80 83       	st	Z, r24
 272:	80 81       	ld	r24, Z
 274:	84 ff       	sbrs	r24, 4
 276:	fd cf       	rjmp	.-6      	; 0x272 <initAdc+0x30>
 278:	ea e7       	ldi	r30, 0x7A	; 122
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	8f 7e       	andi	r24, 0xEF	; 239
 280:	80 83       	st	Z, r24
 282:	08 95       	ret

00000284 <rgbWrite>:
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	33 e0       	ldi	r19, 0x03	; 3
 288:	f9 01       	movw	r30, r18
 28a:	e8 1b       	sub	r30, r24
 28c:	f9 0b       	sbc	r31, r25
 28e:	c9 01       	movw	r24, r18
 290:	86 1b       	sub	r24, r22
 292:	97 0b       	sbc	r25, r23
 294:	24 1b       	sub	r18, r20
 296:	35 0b       	sbc	r19, r21
 298:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 29c:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 2a0:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 2a4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 2a8:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 2ac:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 2b0:	08 95       	ret

000002b2 <initRgb>:
 2b2:	8e ef       	ldi	r24, 0xFE	; 254
 2b4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 2b8:	8b e1       	ldi	r24, 0x1B	; 27
 2ba:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	d6 cf       	rjmp	.-84     	; 0x284 <rgbWrite>
 2d8:	08 95       	ret

000002da <lcdSid>:
 2da:	88 23       	and	r24, r24
 2dc:	11 f0       	breq	.+4      	; 0x2e2 <lcdSid+0x8>
 2de:	a0 9a       	sbi	0x14, 0	; 20
 2e0:	08 95       	ret
 2e2:	a0 98       	cbi	0x14, 0	; 20
 2e4:	08 95       	ret

000002e6 <lcdSclk>:
 2e6:	88 23       	and	r24, r24
 2e8:	11 f0       	breq	.+4      	; 0x2ee <lcdSclk+0x8>
 2ea:	a1 9a       	sbi	0x14, 1	; 20
 2ec:	08 95       	ret
 2ee:	a1 98       	cbi	0x14, 1	; 20
 2f0:	08 95       	ret

000002f2 <lcdLight>:
 2f2:	81 11       	cpse	r24, r1
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <lcdLight+0xc>
 2f6:	84 b5       	in	r24, 0x24	; 36
 2f8:	8f 7d       	andi	r24, 0xDF	; 223
 2fa:	84 bd       	out	0x24, r24	; 36
 2fc:	08 95       	ret
 2fe:	94 b5       	in	r25, 0x24	; 36
 300:	90 62       	ori	r25, 0x20	; 32
 302:	94 bd       	out	0x24, r25	; 36
 304:	88 bd       	out	0x28, r24	; 40
 306:	08 95       	ret

00000308 <writeLcdF>:
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	7c 01       	movw	r14, r24
 316:	eb 01       	movw	r28, r22
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	df df       	rcall	.-66     	; 0x2da <lcdSid>
 31c:	05 e0       	ldi	r16, 0x05	; 5
 31e:	10 e0       	ldi	r17, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	e1 df       	rcall	.-62     	; 0x2e6 <lcdSclk>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	df df       	rcall	.-66     	; 0x2e6 <lcdSclk>
 328:	01 50       	subi	r16, 0x01	; 1
 32a:	11 09       	sbc	r17, r1
 32c:	c9 f7       	brne	.-14     	; 0x320 <writeLcdF+0x18>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	d4 df       	rcall	.-88     	; 0x2da <lcdSid>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	d8 df       	rcall	.-80     	; 0x2e6 <lcdSclk>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	d6 df       	rcall	.-84     	; 0x2e6 <lcdSclk>
 33a:	83 e4       	ldi	r24, 0x43	; 67
 33c:	e8 16       	cp	r14, r24
 33e:	f1 04       	cpc	r15, r1
 340:	19 f4       	brne	.+6      	; 0x348 <writeLcdF+0x40>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	ca df       	rcall	.-108    	; 0x2da <lcdSid>
 346:	02 c0       	rjmp	.+4      	; 0x34c <writeLcdF+0x44>
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	c7 df       	rcall	.-114    	; 0x2da <lcdSid>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	cb df       	rcall	.-106    	; 0x2e6 <lcdSclk>
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	c9 df       	rcall	.-110    	; 0x2e6 <lcdSclk>
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	c1 df       	rcall	.-126    	; 0x2da <lcdSid>
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	c5 df       	rcall	.-118    	; 0x2e6 <lcdSclk>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	c3 df       	rcall	.-122    	; 0x2e6 <lcdSclk>
 360:	04 e0       	ldi	r16, 0x04	; 4
 362:	10 e0       	ldi	r17, 0x00	; 0
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	bf df       	rcall	.-130    	; 0x2e6 <lcdSclk>
 368:	c0 ff       	sbrs	r28, 0
 36a:	03 c0       	rjmp	.+6      	; 0x372 <writeLcdF+0x6a>
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	b5 df       	rcall	.-150    	; 0x2da <lcdSid>
 370:	02 c0       	rjmp	.+4      	; 0x376 <writeLcdF+0x6e>
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	b2 df       	rcall	.-156    	; 0x2da <lcdSid>
 376:	d6 95       	lsr	r29
 378:	c7 95       	ror	r28
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	b4 df       	rcall	.-152    	; 0x2e6 <lcdSclk>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	b2 df       	rcall	.-156    	; 0x2e6 <lcdSclk>
 382:	01 50       	subi	r16, 0x01	; 1
 384:	11 09       	sbc	r17, r1
 386:	71 f7       	brne	.-36     	; 0x364 <writeLcdF+0x5c>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	a7 df       	rcall	.-178    	; 0x2da <lcdSid>
 38c:	04 e0       	ldi	r16, 0x04	; 4
 38e:	10 e0       	ldi	r17, 0x00	; 0
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	a9 df       	rcall	.-174    	; 0x2e6 <lcdSclk>
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	a7 df       	rcall	.-178    	; 0x2e6 <lcdSclk>
 398:	01 50       	subi	r16, 0x01	; 1
 39a:	11 09       	sbc	r17, r1
 39c:	c9 f7       	brne	.-14     	; 0x390 <writeLcdF+0x88>
 39e:	04 e0       	ldi	r16, 0x04	; 4
 3a0:	10 e0       	ldi	r17, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	a0 df       	rcall	.-192    	; 0x2e6 <lcdSclk>
 3a6:	c0 ff       	sbrs	r28, 0
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <writeLcdF+0xa8>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	96 df       	rcall	.-212    	; 0x2da <lcdSid>
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <writeLcdF+0xac>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	93 df       	rcall	.-218    	; 0x2da <lcdSid>
 3b4:	d6 95       	lsr	r29
 3b6:	c7 95       	ror	r28
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	95 df       	rcall	.-214    	; 0x2e6 <lcdSclk>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	93 df       	rcall	.-218    	; 0x2e6 <lcdSclk>
 3c0:	01 50       	subi	r16, 0x01	; 1
 3c2:	11 09       	sbc	r17, r1
 3c4:	71 f7       	brne	.-36     	; 0x3a2 <writeLcdF+0x9a>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	88 df       	rcall	.-240    	; 0x2da <lcdSid>
 3ca:	c4 e0       	ldi	r28, 0x04	; 4
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	8a df       	rcall	.-236    	; 0x2e6 <lcdSclk>
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	88 df       	rcall	.-240    	; 0x2e6 <lcdSclk>
 3d6:	21 97       	sbiw	r28, 0x01	; 1
 3d8:	d1 f7       	brne	.-12     	; 0x3ce <writeLcdF+0xc6>
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	7e df       	rcall	.-260    	; 0x2da <lcdSid>
 3de:	87 ec       	ldi	r24, 0xC7	; 199
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <writeLcdF+0xda>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <writeLcdF+0xe0>
 3e8:	00 00       	nop
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	ff 90       	pop	r15
 3f4:	ef 90       	pop	r14
 3f6:	08 95       	ret

000003f8 <lcdWriteText>:
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	65 97       	sbiw	r28, 0x15	; 21
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	9e 01       	movw	r18, r28
 410:	20 5e       	subi	r18, 0xE0	; 224
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	4e 8d       	ldd	r20, Y+30	; 0x1e
 416:	5f 8d       	ldd	r21, Y+31	; 0x1f
 418:	65 e1       	ldi	r22, 0x15	; 21
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	ce 01       	movw	r24, r28
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	3a d2       	rcall	.+1140   	; 0x896 <vsnprintf>
 422:	6d 8d       	ldd	r22, Y+29	; 0x1d
 424:	8c 8d       	ldd	r24, Y+28	; 0x1c
 426:	90 e2       	ldi	r25, 0x20	; 32
 428:	89 9f       	mul	r24, r25
 42a:	60 0d       	add	r22, r0
 42c:	11 24       	eor	r1, r1
 42e:	60 68       	ori	r22, 0x80	; 128
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	83 e4       	ldi	r24, 0x43	; 67
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	68 df       	rcall	.-304    	; 0x308 <writeLcdF>
 438:	69 81       	ldd	r22, Y+1	; 0x01
 43a:	66 23       	and	r22, r22
 43c:	79 f0       	breq	.+30     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 43e:	10 e0       	ldi	r17, 0x00	; 0
 440:	1f 5f       	subi	r17, 0xFF	; 255
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	84 e4       	ldi	r24, 0x44	; 68
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	5f df       	rcall	.-322    	; 0x308 <writeLcdF>
 44a:	e1 e0       	ldi	r30, 0x01	; 1
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	ec 0f       	add	r30, r28
 450:	fd 1f       	adc	r31, r29
 452:	e1 0f       	add	r30, r17
 454:	f1 1d       	adc	r31, r1
 456:	60 81       	ld	r22, Z
 458:	61 11       	cpse	r22, r1
 45a:	f2 cf       	rjmp	.-28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 45c:	65 96       	adiw	r28, 0x15	; 21
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	08 95       	ret

00000470 <lcdClear>:
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	83 e4       	ldi	r24, 0x43	; 67
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	47 df       	rcall	.-370    	; 0x308 <writeLcdF>
 47a:	8f e3       	ldi	r24, 0x3F	; 63
 47c:	9f e1       	ldi	r25, 0x1F	; 31
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <lcdClear+0xe>
 482:	00 c0       	rjmp	.+0      	; 0x484 <lcdClear+0x14>
 484:	00 00       	nop
 486:	80 e3       	ldi	r24, 0x30	; 48
 488:	92 e0       	ldi	r25, 0x02	; 2
 48a:	9f 93       	push	r25
 48c:	8f 93       	push	r24
 48e:	1f 92       	push	r1
 490:	1f 92       	push	r1
 492:	b2 df       	rcall	.-156    	; 0x3f8 <lcdWriteText>
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	08 95       	ret

0000049e <initLcd>:
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	22 df       	rcall	.-444    	; 0x2e6 <lcdSclk>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	1a df       	rcall	.-460    	; 0x2da <lcdSid>
 4a6:	64 e3       	ldi	r22, 0x34	; 52
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	83 e4       	ldi	r24, 0x43	; 67
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	2c df       	rcall	.-424    	; 0x308 <writeLcdF>
 4b0:	69 e0       	ldi	r22, 0x09	; 9
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	83 e4       	ldi	r24, 0x43	; 67
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	27 df       	rcall	.-434    	; 0x308 <writeLcdF>
 4ba:	60 e3       	ldi	r22, 0x30	; 48
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	83 e4       	ldi	r24, 0x43	; 67
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	22 df       	rcall	.-444    	; 0x308 <writeLcdF>
 4c4:	6c e0       	ldi	r22, 0x0C	; 12
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	83 e4       	ldi	r24, 0x43	; 67
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	1d df       	rcall	.-454    	; 0x308 <writeLcdF>
 4ce:	d0 df       	rcall	.-96     	; 0x470 <lcdClear>
 4d0:	67 e0       	ldi	r22, 0x07	; 7
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	83 e4       	ldi	r24, 0x43	; 67
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	17 df       	rcall	.-466    	; 0x308 <writeLcdF>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	0a cf       	rjmp	.-492    	; 0x2f2 <lcdLight>
 4de:	08 95       	ret

000004e0 <initBoard>:
 4e0:	4f 92       	push	r4
 4e2:	5f 92       	push	r5
 4e4:	6f 92       	push	r6
 4e6:	7f 92       	push	r7
 4e8:	8f 92       	push	r8
 4ea:	9f 92       	push	r9
 4ec:	af 92       	push	r10
 4ee:	bf 92       	push	r11
 4f0:	cf 92       	push	r12
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	c8 2f       	mov	r28, r24
 502:	85 b7       	in	r24, 0x35	; 53
 504:	85 bf       	out	0x35, r24	; 53
 506:	12 b8       	out	0x02, r1	; 2
 508:	8f ef       	ldi	r24, 0xFF	; 255
 50a:	81 b9       	out	0x01, r24	; 1
 50c:	15 b8       	out	0x05, r1	; 5
 50e:	84 b9       	out	0x04, r24	; 4
 510:	88 b9       	out	0x08, r24	; 8
 512:	17 b8       	out	0x07, r1	; 7
 514:	8b b9       	out	0x0b, r24	; 11
 516:	1a b8       	out	0x0a, r1	; 10
 518:	8e b9       	out	0x0e, r24	; 14
 51a:	1d b8       	out	0x0d, r1	; 13
 51c:	72 98       	cbi	0x0e, 2	; 14
 51e:	11 ba       	out	0x11, r1	; 17
 520:	10 ba       	out	0x10, r1	; 16
 522:	94 e0       	ldi	r25, 0x04	; 4
 524:	94 bb       	out	0x14, r25	; 20
 526:	93 b3       	in	r25, 0x13	; 19
 528:	93 60       	ori	r25, 0x03	; 3
 52a:	93 bb       	out	0x13, r25	; 19
 52c:	9d 9a       	sbi	0x13, 5	; 19
 52e:	97 ec       	ldi	r25, 0xC7	; 199
 530:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 534:	98 e3       	ldi	r25, 0x38	; 56
 536:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 53a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 53e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 542:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 546:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 54a:	8c e3       	ldi	r24, 0x3C	; 60
 54c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 550:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 554:	78 94       	sei
 556:	6b de       	rcall	.-810    	; 0x22e <startSystemTimeMs>
 558:	a2 df       	rcall	.-188    	; 0x49e <initLcd>
 55a:	73 de       	rcall	.-794    	; 0x242 <initAdc>
 55c:	aa de       	rcall	.-684    	; 0x2b2 <initRgb>
 55e:	cc 23       	and	r28, r28
 560:	09 f4       	brne	.+2      	; 0x564 <initBoard+0x84>
 562:	b8 c0       	rjmp	.+368    	; 0x6d4 <initBoard+0x1f4>
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	c5 de       	rcall	.-630    	; 0x2f2 <lcdLight>
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	6f ef       	ldi	r22, 0xFF	; 255
 56e:	73 e0       	ldi	r23, 0x03	; 3
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	87 de       	rcall	.-754    	; 0x284 <rgbWrite>
 576:	8d e1       	ldi	r24, 0x1D	; 29
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	9f 93       	push	r25
 57c:	8f 93       	push	r24
 57e:	1f 92       	push	r1
 580:	1f 92       	push	r1
 582:	3a df       	rcall	.-396    	; 0x3f8 <lcdWriteText>
 584:	82 e3       	ldi	r24, 0x32	; 50
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	9f 93       	push	r25
 58a:	8f 93       	push	r24
 58c:	1f 92       	push	r1
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	8f 93       	push	r24
 592:	32 df       	rcall	.-412    	; 0x3f8 <lcdWriteText>
 594:	88 e0       	ldi	r24, 0x08	; 8
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	9f 93       	push	r25
 59a:	8f 93       	push	r24
 59c:	1f 92       	push	r1
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	8f 93       	push	r24
 5a2:	2a df       	rcall	.-428    	; 0x3f8 <lcdWriteText>
 5a4:	87 e4       	ldi	r24, 0x47	; 71
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	9f 93       	push	r25
 5aa:	8f 93       	push	r24
 5ac:	1f 92       	push	r1
 5ae:	83 e0       	ldi	r24, 0x03	; 3
 5b0:	8f 93       	push	r24
 5b2:	22 df       	rcall	.-444    	; 0x3f8 <lcdWriteText>
 5b4:	8d b7       	in	r24, 0x3d	; 61
 5b6:	9e b7       	in	r25, 0x3e	; 62
 5b8:	40 96       	adiw	r24, 0x10	; 16
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	9e bf       	out	0x3e, r25	; 62
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	8d bf       	out	0x3d, r24	; 61
 5c4:	88 24       	eor	r8, r8
 5c6:	83 94       	inc	r8
 5c8:	c0 e0       	ldi	r28, 0x00	; 0
 5ca:	71 2c       	mov	r7, r1
 5cc:	99 24       	eor	r9, r9
 5ce:	93 94       	inc	r9
 5d0:	d0 e0       	ldi	r29, 0x00	; 0
 5d2:	cc 24       	eor	r12, r12
 5d4:	c3 94       	inc	r12
 5d6:	d1 2c       	mov	r13, r1
 5d8:	e1 2c       	mov	r14, r1
 5da:	68 94       	set
 5dc:	ff 24       	eor	r15, r15
 5de:	f7 f8       	bld	r15, 7
 5e0:	66 24       	eor	r6, r6
 5e2:	63 94       	inc	r6
 5e4:	51 2c       	mov	r5, r1
 5e6:	09 e0       	ldi	r16, 0x09	; 9
 5e8:	11 e0       	ldi	r17, 0x01	; 1
 5ea:	0f 2e       	mov	r0, r31
 5ec:	fc e5       	ldi	r31, 0x5C	; 92
 5ee:	af 2e       	mov	r10, r31
 5f0:	f2 e0       	ldi	r31, 0x02	; 2
 5f2:	bf 2e       	mov	r11, r31
 5f4:	f0 2d       	mov	r31, r0
 5f6:	0f 2e       	mov	r0, r31
 5f8:	f3 e0       	ldi	r31, 0x03	; 3
 5fa:	4f 2e       	mov	r4, r31
 5fc:	f0 2d       	mov	r31, r0
 5fe:	99 20       	and	r9, r9
 600:	49 f0       	breq	.+18     	; 0x614 <initBoard+0x134>
 602:	c7 01       	movw	r24, r14
 604:	0d 2e       	mov	r0, r29
 606:	02 c0       	rjmp	.+4      	; 0x60c <initBoard+0x12c>
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <initBoard+0x128>
 610:	08 de       	rcall	.-1008   	; 0x222 <ledWriteAll>
 612:	08 c0       	rjmp	.+16     	; 0x624 <initBoard+0x144>
 614:	c6 01       	movw	r24, r12
 616:	0d 2e       	mov	r0, r29
 618:	02 c0       	rjmp	.+4      	; 0x61e <initBoard+0x13e>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <initBoard+0x13a>
 622:	ff dd       	rcall	.-1026   	; 0x222 <ledWriteAll>
 624:	df 5f       	subi	r29, 0xFF	; 255
 626:	d1 31       	cpi	r29, 0x11	; 17
 628:	28 f0       	brcs	.+10     	; 0x634 <initBoard+0x154>
 62a:	86 2d       	mov	r24, r6
 62c:	91 10       	cpse	r9, r1
 62e:	85 2d       	mov	r24, r5
 630:	98 2e       	mov	r9, r24
 632:	d0 e0       	ldi	r29, 0x00	; 0
 634:	88 20       	and	r8, r8
 636:	11 f0       	breq	.+4      	; 0x63c <initBoard+0x15c>
 638:	ce 5f       	subi	r28, 0xFE	; 254
 63a:	01 c0       	rjmp	.+2      	; 0x63e <initBoard+0x15e>
 63c:	c2 50       	subi	r28, 0x02	; 2
 63e:	8c 2f       	mov	r24, r28
 640:	58 de       	rcall	.-848    	; 0x2f2 <lcdLight>
 642:	ce 3f       	cpi	r28, 0xFE	; 254
 644:	21 f0       	breq	.+8      	; 0x64e <initBoard+0x16e>
 646:	c8 37       	cpi	r28, 0x78	; 120
 648:	19 f4       	brne	.+6      	; 0x650 <initBoard+0x170>
 64a:	86 2c       	mov	r8, r6
 64c:	01 c0       	rjmp	.+2      	; 0x650 <initBoard+0x170>
 64e:	85 2c       	mov	r8, r5
 650:	71 10       	cpse	r7, r1
 652:	3b c0       	rjmp	.+118    	; 0x6ca <initBoard+0x1ea>
 654:	f8 01       	movw	r30, r16
 656:	80 81       	ld	r24, Z
 658:	83 7c       	andi	r24, 0xC3	; 195
 65a:	91 f0       	breq	.+36     	; 0x680 <initBoard+0x1a0>
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	66 e2       	ldi	r22, 0x26	; 38
 662:	72 e0       	ldi	r23, 0x02	; 2
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	93 e0       	ldi	r25, 0x03	; 3
 668:	0d de       	rcall	.-998    	; 0x284 <rgbWrite>
 66a:	bf 92       	push	r11
 66c:	af 92       	push	r10
 66e:	1f 92       	push	r1
 670:	4f 92       	push	r4
 672:	c2 de       	rcall	.-636    	; 0x3f8 <lcdWriteText>
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	76 2c       	mov	r7, r6
 67e:	25 c0       	rjmp	.+74     	; 0x6ca <initBoard+0x1ea>
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	9c e7       	ldi	r25, 0x7C	; 124
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <initBoard+0x1a4>
 688:	00 c0       	rjmp	.+0      	; 0x68a <initBoard+0x1aa>
 68a:	00 00       	nop
 68c:	b8 cf       	rjmp	.-144    	; 0x5fe <initBoard+0x11e>
 68e:	f0 de       	rcall	.-544    	; 0x470 <lcdClear>
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	2f de       	rcall	.-930    	; 0x2f2 <lcdLight>
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	c4 dd       	rcall	.-1144   	; 0x222 <ledWriteAll>
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	50 e0       	ldi	r21, 0x00	; 0
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	ee dd       	rcall	.-1060   	; 0x284 <rgbWrite>
 6a8:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <systemTimeMs>
 6ac:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <systemTimeMs+0x1>
 6b0:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <systemTimeMs+0x2>
 6b4:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <systemTimeMs+0x3>
 6b8:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <systemTimeMs+0x4>
 6bc:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <systemTimeMs+0x5>
 6c0:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <systemTimeMs+0x6>
 6c4:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <systemTimeMs+0x7>
 6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <initBoard+0x1f4>
 6ca:	f8 01       	movw	r30, r16
 6cc:	80 81       	ld	r24, Z
 6ce:	83 7c       	andi	r24, 0xC3	; 195
 6d0:	b9 f6       	brne	.-82     	; 0x680 <initBoard+0x1a0>
 6d2:	dd cf       	rjmp	.-70     	; 0x68e <initBoard+0x1ae>
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	1f 91       	pop	r17
 6da:	0f 91       	pop	r16
 6dc:	ff 90       	pop	r15
 6de:	ef 90       	pop	r14
 6e0:	df 90       	pop	r13
 6e2:	cf 90       	pop	r12
 6e4:	bf 90       	pop	r11
 6e6:	af 90       	pop	r10
 6e8:	9f 90       	pop	r9
 6ea:	8f 90       	pop	r8
 6ec:	7f 90       	pop	r7
 6ee:	6f 90       	pop	r6
 6f0:	5f 90       	pop	r5
 6f2:	4f 90       	pop	r4
 6f4:	08 95       	ret

000006f6 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	cd b7       	in	r28, 0x3d	; 61
 6fc:	de b7       	in	r29, 0x3e	; 62
 6fe:	28 97       	sbiw	r28, 0x08	; 8
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	de bf       	out	0x3e, r29	; 62
 706:	0f be       	out	0x3f, r0	; 63
 708:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 70a:	88 e0       	ldi	r24, 0x08	; 8
 70c:	e0 e0       	ldi	r30, 0x00	; 0
 70e:	f2 e0       	ldi	r31, 0x02	; 2
 710:	de 01       	movw	r26, r28
 712:	11 96       	adiw	r26, 0x01	; 1
 714:	01 90       	ld	r0, Z+
 716:	0d 92       	st	X+, r0
 718:	8a 95       	dec	r24
 71a:	e1 f7       	brne	.-8      	; 0x714 <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 71c:	e5 e0       	ldi	r30, 0x05	; 5
 71e:	f1 e0       	ldi	r31, 0x01	; 1
 720:	80 81       	ld	r24, Z
 722:	8f 7b       	andi	r24, 0xBF	; 191
 724:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 726:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 72a:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	8c 0f       	add	r24, r28
 734:	9d 1f       	adc	r25, r29
 736:	e8 0f       	add	r30, r24
 738:	f9 1f       	adc	r31, r25
 73a:	80 81       	ld	r24, Z
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
 742:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
 746:	a2 ef       	ldi	r26, 0xF2	; 242
 748:	b2 e0       	ldi	r27, 0x02	; 2
 74a:	22 e8       	ldi	r18, 0x82	; 130
 74c:	32 e0       	ldi	r19, 0x02	; 2
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 74e:	e5 e0       	ldi	r30, 0x05	; 5
 750:	f1 e0       	ldi	r31, 0x01	; 1
    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 752:	5e 91       	ld	r21, -X
 754:	4e 91       	ld	r20, -X
 756:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
 75a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x1>
 75e:	84 23       	and	r24, r20
 760:	95 23       	and	r25, r21
 762:	89 2b       	or	r24, r25
 764:	21 f0       	breq	.+8      	; 0x76e <matrixWriteNextLine+0x78>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 766:	80 81       	ld	r24, Z
 768:	80 62       	ori	r24, 0x20	; 32
 76a:	80 83       	st	Z, r24
 76c:	03 c0       	rjmp	.+6      	; 0x774 <matrixWriteNextLine+0x7e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 76e:	80 81       	ld	r24, Z
 770:	8f 7d       	andi	r24, 0xDF	; 223
 772:	80 83       	st	Z, r24
        }
        CLOCK_1;
 774:	80 81       	ld	r24, Z
 776:	80 61       	ori	r24, 0x10	; 16
 778:	80 83       	st	Z, r24
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 77a:	80 81       	ld	r24, Z
 77c:	8f 7e       	andi	r24, 0xEF	; 239
 77e:	80 83       	st	Z, r24
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 780:	a2 17       	cp	r26, r18
 782:	b3 07       	cpc	r27, r19
 784:	31 f7       	brne	.-52     	; 0x752 <matrixWriteNextLine+0x5c>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 786:	e5 e0       	ldi	r30, 0x05	; 5
 788:	f1 e0       	ldi	r31, 0x01	; 1
 78a:	80 81       	ld	r24, Z
 78c:	87 7f       	andi	r24, 0xF7	; 247
 78e:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 790:	80 81       	ld	r24, Z
 792:	88 7f       	andi	r24, 0xF8	; 248
 794:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 796:	90 81       	ld	r25, Z
 798:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 79c:	89 2b       	or	r24, r25
 79e:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 7a0:	80 81       	ld	r24, Z
 7a2:	80 64       	ori	r24, 0x40	; 64
 7a4:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 7a6:	80 81       	ld	r24, Z
 7a8:	88 60       	ori	r24, 0x08	; 8
 7aa:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 7ac:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Zeilen_Nr.2731>
 7b0:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Zeilen_Nr.2731+0x1>
 7b4:	87 30       	cpi	r24, 0x07	; 7
 7b6:	91 05       	cpc	r25, r1
 7b8:	30 f4       	brcc	.+12     	; 0x7c6 <matrixWriteNextLine+0xd0>
    {
        Zeilen_Nr++;
 7ba:	01 96       	adiw	r24, 0x01	; 1
 7bc:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Zeilen_Nr.2731+0x1>
 7c0:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Zeilen_Nr.2731>
 7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <matrixWriteNextLine+0xde>
    }
    else
    {
        Zeilen_Nr = 0;
 7c6:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Zeilen_Nr.2731+0x1>
 7ca:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Zeilen_Nr.2731>
        writeTextFinished = 1;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <writeTextFinished>
    }
    
 7d4:	28 96       	adiw	r28, 0x08	; 8
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	cd bf       	out	0x3d, r28	; 61
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
 7f0:	0b b6       	in	r0, 0x3b	; 59
 7f2:	0f 92       	push	r0
 7f4:	2f 93       	push	r18
 7f6:	3f 93       	push	r19
 7f8:	4f 93       	push	r20
 7fa:	5f 93       	push	r21
 7fc:	6f 93       	push	r22
 7fe:	7f 93       	push	r23
 800:	8f 93       	push	r24
 802:	9f 93       	push	r25
 804:	af 93       	push	r26
 806:	bf 93       	push	r27
 808:	ef 93       	push	r30
 80a:	ff 93       	push	r31
    systemTimeMs += 1;
 80c:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <systemTimeMs>
 810:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <systemTimeMs+0x1>
 814:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <systemTimeMs+0x2>
 818:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <systemTimeMs+0x3>
 81c:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <systemTimeMs+0x4>
 820:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <systemTimeMs+0x5>
 824:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <systemTimeMs+0x6>
 828:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <systemTimeMs+0x7>
 82c:	a1 e0       	ldi	r26, 0x01	; 1
 82e:	27 d0       	rcall	.+78     	; 0x87e <__adddi3_s8>
 830:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <systemTimeMs>
 834:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <systemTimeMs+0x1>
 838:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <systemTimeMs+0x2>
 83c:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <systemTimeMs+0x3>
 840:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <systemTimeMs+0x4>
 844:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <systemTimeMs+0x5>
 848:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <systemTimeMs+0x6>
 84c:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 850:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <matrixRunning>
 854:	81 11       	cpse	r24, r1
 856:	4f df       	rcall	.-354    	; 0x6f6 <matrixWriteNextLine>
}
 858:	ff 91       	pop	r31
 85a:	ef 91       	pop	r30
 85c:	bf 91       	pop	r27
 85e:	af 91       	pop	r26
 860:	9f 91       	pop	r25
 862:	8f 91       	pop	r24
 864:	7f 91       	pop	r23
 866:	6f 91       	pop	r22
 868:	5f 91       	pop	r21
 86a:	4f 91       	pop	r20
 86c:	3f 91       	pop	r19
 86e:	2f 91       	pop	r18
 870:	0f 90       	pop	r0
 872:	0b be       	out	0x3b, r0	; 59
 874:	0f 90       	pop	r0
 876:	0f be       	out	0x3f, r0	; 63
 878:	0f 90       	pop	r0
 87a:	1f 90       	pop	r1
 87c:	18 95       	reti

0000087e <__adddi3_s8>:
 87e:	00 24       	eor	r0, r0
 880:	a7 fd       	sbrc	r26, 7
 882:	00 94       	com	r0
 884:	2a 0f       	add	r18, r26
 886:	30 1d       	adc	r19, r0
 888:	40 1d       	adc	r20, r0
 88a:	50 1d       	adc	r21, r0
 88c:	60 1d       	adc	r22, r0
 88e:	70 1d       	adc	r23, r0
 890:	80 1d       	adc	r24, r0
 892:	90 1d       	adc	r25, r0
 894:	08 95       	ret

00000896 <vsnprintf>:
 896:	0f 93       	push	r16
 898:	1f 93       	push	r17
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
 89e:	cd b7       	in	r28, 0x3d	; 61
 8a0:	de b7       	in	r29, 0x3e	; 62
 8a2:	2e 97       	sbiw	r28, 0x0e	; 14
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	f8 94       	cli
 8a8:	de bf       	out	0x3e, r29	; 62
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	cd bf       	out	0x3d, r28	; 61
 8ae:	8c 01       	movw	r16, r24
 8b0:	fa 01       	movw	r30, r20
 8b2:	86 e0       	ldi	r24, 0x06	; 6
 8b4:	8c 83       	std	Y+4, r24	; 0x04
 8b6:	1a 83       	std	Y+2, r17	; 0x02
 8b8:	09 83       	std	Y+1, r16	; 0x01
 8ba:	77 ff       	sbrs	r23, 7
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <vsnprintf+0x2c>
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	70 e8       	ldi	r23, 0x80	; 128
 8c2:	cb 01       	movw	r24, r22
 8c4:	01 97       	sbiw	r24, 0x01	; 1
 8c6:	9e 83       	std	Y+6, r25	; 0x06
 8c8:	8d 83       	std	Y+5, r24	; 0x05
 8ca:	a9 01       	movw	r20, r18
 8cc:	bf 01       	movw	r22, r30
 8ce:	ce 01       	movw	r24, r28
 8d0:	01 96       	adiw	r24, 0x01	; 1
 8d2:	19 d0       	rcall	.+50     	; 0x906 <vfprintf>
 8d4:	4d 81       	ldd	r20, Y+5	; 0x05
 8d6:	5e 81       	ldd	r21, Y+6	; 0x06
 8d8:	57 fd       	sbrc	r21, 7
 8da:	0a c0       	rjmp	.+20     	; 0x8f0 <vsnprintf+0x5a>
 8dc:	2f 81       	ldd	r18, Y+7	; 0x07
 8de:	38 85       	ldd	r19, Y+8	; 0x08
 8e0:	42 17       	cp	r20, r18
 8e2:	53 07       	cpc	r21, r19
 8e4:	0c f4       	brge	.+2      	; 0x8e8 <vsnprintf+0x52>
 8e6:	9a 01       	movw	r18, r20
 8e8:	f8 01       	movw	r30, r16
 8ea:	e2 0f       	add	r30, r18
 8ec:	f3 1f       	adc	r31, r19
 8ee:	10 82       	st	Z, r1
 8f0:	2e 96       	adiw	r28, 0x0e	; 14
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	f8 94       	cli
 8f6:	de bf       	out	0x3e, r29	; 62
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	cd bf       	out	0x3d, r28	; 61
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	1f 91       	pop	r17
 902:	0f 91       	pop	r16
 904:	08 95       	ret

00000906 <vfprintf>:
 906:	2f 92       	push	r2
 908:	3f 92       	push	r3
 90a:	4f 92       	push	r4
 90c:	5f 92       	push	r5
 90e:	6f 92       	push	r6
 910:	7f 92       	push	r7
 912:	8f 92       	push	r8
 914:	9f 92       	push	r9
 916:	af 92       	push	r10
 918:	bf 92       	push	r11
 91a:	cf 92       	push	r12
 91c:	df 92       	push	r13
 91e:	ef 92       	push	r14
 920:	ff 92       	push	r15
 922:	0f 93       	push	r16
 924:	1f 93       	push	r17
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	2b 97       	sbiw	r28, 0x0b	; 11
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	f8 94       	cli
 934:	de bf       	out	0x3e, r29	; 62
 936:	0f be       	out	0x3f, r0	; 63
 938:	cd bf       	out	0x3d, r28	; 61
 93a:	6c 01       	movw	r12, r24
 93c:	7b 01       	movw	r14, r22
 93e:	8a 01       	movw	r16, r20
 940:	fc 01       	movw	r30, r24
 942:	17 82       	std	Z+7, r1	; 0x07
 944:	16 82       	std	Z+6, r1	; 0x06
 946:	83 81       	ldd	r24, Z+3	; 0x03
 948:	81 ff       	sbrs	r24, 1
 94a:	bf c1       	rjmp	.+894    	; 0xcca <vfprintf+0x3c4>
 94c:	ce 01       	movw	r24, r28
 94e:	01 96       	adiw	r24, 0x01	; 1
 950:	3c 01       	movw	r6, r24
 952:	f6 01       	movw	r30, r12
 954:	93 81       	ldd	r25, Z+3	; 0x03
 956:	f7 01       	movw	r30, r14
 958:	93 fd       	sbrc	r25, 3
 95a:	85 91       	lpm	r24, Z+
 95c:	93 ff       	sbrs	r25, 3
 95e:	81 91       	ld	r24, Z+
 960:	7f 01       	movw	r14, r30
 962:	88 23       	and	r24, r24
 964:	09 f4       	brne	.+2      	; 0x968 <vfprintf+0x62>
 966:	ad c1       	rjmp	.+858    	; 0xcc2 <vfprintf+0x3bc>
 968:	85 32       	cpi	r24, 0x25	; 37
 96a:	39 f4       	brne	.+14     	; 0x97a <vfprintf+0x74>
 96c:	93 fd       	sbrc	r25, 3
 96e:	85 91       	lpm	r24, Z+
 970:	93 ff       	sbrs	r25, 3
 972:	81 91       	ld	r24, Z+
 974:	7f 01       	movw	r14, r30
 976:	85 32       	cpi	r24, 0x25	; 37
 978:	21 f4       	brne	.+8      	; 0x982 <vfprintf+0x7c>
 97a:	b6 01       	movw	r22, r12
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	d6 d1       	rcall	.+940    	; 0xd2c <fputc>
 980:	e8 cf       	rjmp	.-48     	; 0x952 <vfprintf+0x4c>
 982:	91 2c       	mov	r9, r1
 984:	21 2c       	mov	r2, r1
 986:	31 2c       	mov	r3, r1
 988:	ff e1       	ldi	r31, 0x1F	; 31
 98a:	f3 15       	cp	r31, r3
 98c:	d8 f0       	brcs	.+54     	; 0x9c4 <vfprintf+0xbe>
 98e:	8b 32       	cpi	r24, 0x2B	; 43
 990:	79 f0       	breq	.+30     	; 0x9b0 <vfprintf+0xaa>
 992:	38 f4       	brcc	.+14     	; 0x9a2 <vfprintf+0x9c>
 994:	80 32       	cpi	r24, 0x20	; 32
 996:	79 f0       	breq	.+30     	; 0x9b6 <vfprintf+0xb0>
 998:	83 32       	cpi	r24, 0x23	; 35
 99a:	a1 f4       	brne	.+40     	; 0x9c4 <vfprintf+0xbe>
 99c:	23 2d       	mov	r18, r3
 99e:	20 61       	ori	r18, 0x10	; 16
 9a0:	1d c0       	rjmp	.+58     	; 0x9dc <vfprintf+0xd6>
 9a2:	8d 32       	cpi	r24, 0x2D	; 45
 9a4:	61 f0       	breq	.+24     	; 0x9be <vfprintf+0xb8>
 9a6:	80 33       	cpi	r24, 0x30	; 48
 9a8:	69 f4       	brne	.+26     	; 0x9c4 <vfprintf+0xbe>
 9aa:	23 2d       	mov	r18, r3
 9ac:	21 60       	ori	r18, 0x01	; 1
 9ae:	16 c0       	rjmp	.+44     	; 0x9dc <vfprintf+0xd6>
 9b0:	83 2d       	mov	r24, r3
 9b2:	82 60       	ori	r24, 0x02	; 2
 9b4:	38 2e       	mov	r3, r24
 9b6:	e3 2d       	mov	r30, r3
 9b8:	e4 60       	ori	r30, 0x04	; 4
 9ba:	3e 2e       	mov	r3, r30
 9bc:	2a c0       	rjmp	.+84     	; 0xa12 <vfprintf+0x10c>
 9be:	f3 2d       	mov	r31, r3
 9c0:	f8 60       	ori	r31, 0x08	; 8
 9c2:	1d c0       	rjmp	.+58     	; 0x9fe <vfprintf+0xf8>
 9c4:	37 fc       	sbrc	r3, 7
 9c6:	2d c0       	rjmp	.+90     	; 0xa22 <vfprintf+0x11c>
 9c8:	20 ed       	ldi	r18, 0xD0	; 208
 9ca:	28 0f       	add	r18, r24
 9cc:	2a 30       	cpi	r18, 0x0A	; 10
 9ce:	40 f0       	brcs	.+16     	; 0x9e0 <vfprintf+0xda>
 9d0:	8e 32       	cpi	r24, 0x2E	; 46
 9d2:	b9 f4       	brne	.+46     	; 0xa02 <vfprintf+0xfc>
 9d4:	36 fc       	sbrc	r3, 6
 9d6:	75 c1       	rjmp	.+746    	; 0xcc2 <vfprintf+0x3bc>
 9d8:	23 2d       	mov	r18, r3
 9da:	20 64       	ori	r18, 0x40	; 64
 9dc:	32 2e       	mov	r3, r18
 9de:	19 c0       	rjmp	.+50     	; 0xa12 <vfprintf+0x10c>
 9e0:	36 fe       	sbrs	r3, 6
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <vfprintf+0xea>
 9e4:	8a e0       	ldi	r24, 0x0A	; 10
 9e6:	98 9e       	mul	r9, r24
 9e8:	20 0d       	add	r18, r0
 9ea:	11 24       	eor	r1, r1
 9ec:	92 2e       	mov	r9, r18
 9ee:	11 c0       	rjmp	.+34     	; 0xa12 <vfprintf+0x10c>
 9f0:	ea e0       	ldi	r30, 0x0A	; 10
 9f2:	2e 9e       	mul	r2, r30
 9f4:	20 0d       	add	r18, r0
 9f6:	11 24       	eor	r1, r1
 9f8:	22 2e       	mov	r2, r18
 9fa:	f3 2d       	mov	r31, r3
 9fc:	f0 62       	ori	r31, 0x20	; 32
 9fe:	3f 2e       	mov	r3, r31
 a00:	08 c0       	rjmp	.+16     	; 0xa12 <vfprintf+0x10c>
 a02:	8c 36       	cpi	r24, 0x6C	; 108
 a04:	21 f4       	brne	.+8      	; 0xa0e <vfprintf+0x108>
 a06:	83 2d       	mov	r24, r3
 a08:	80 68       	ori	r24, 0x80	; 128
 a0a:	38 2e       	mov	r3, r24
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <vfprintf+0x10c>
 a0e:	88 36       	cpi	r24, 0x68	; 104
 a10:	41 f4       	brne	.+16     	; 0xa22 <vfprintf+0x11c>
 a12:	f7 01       	movw	r30, r14
 a14:	93 fd       	sbrc	r25, 3
 a16:	85 91       	lpm	r24, Z+
 a18:	93 ff       	sbrs	r25, 3
 a1a:	81 91       	ld	r24, Z+
 a1c:	7f 01       	movw	r14, r30
 a1e:	81 11       	cpse	r24, r1
 a20:	b3 cf       	rjmp	.-154    	; 0x988 <vfprintf+0x82>
 a22:	98 2f       	mov	r25, r24
 a24:	9f 7d       	andi	r25, 0xDF	; 223
 a26:	95 54       	subi	r25, 0x45	; 69
 a28:	93 30       	cpi	r25, 0x03	; 3
 a2a:	28 f4       	brcc	.+10     	; 0xa36 <vfprintf+0x130>
 a2c:	0c 5f       	subi	r16, 0xFC	; 252
 a2e:	1f 4f       	sbci	r17, 0xFF	; 255
 a30:	9f e3       	ldi	r25, 0x3F	; 63
 a32:	99 83       	std	Y+1, r25	; 0x01
 a34:	0d c0       	rjmp	.+26     	; 0xa50 <vfprintf+0x14a>
 a36:	83 36       	cpi	r24, 0x63	; 99
 a38:	31 f0       	breq	.+12     	; 0xa46 <vfprintf+0x140>
 a3a:	83 37       	cpi	r24, 0x73	; 115
 a3c:	71 f0       	breq	.+28     	; 0xa5a <vfprintf+0x154>
 a3e:	83 35       	cpi	r24, 0x53	; 83
 a40:	09 f0       	breq	.+2      	; 0xa44 <vfprintf+0x13e>
 a42:	55 c0       	rjmp	.+170    	; 0xaee <vfprintf+0x1e8>
 a44:	20 c0       	rjmp	.+64     	; 0xa86 <vfprintf+0x180>
 a46:	f8 01       	movw	r30, r16
 a48:	80 81       	ld	r24, Z
 a4a:	89 83       	std	Y+1, r24	; 0x01
 a4c:	0e 5f       	subi	r16, 0xFE	; 254
 a4e:	1f 4f       	sbci	r17, 0xFF	; 255
 a50:	88 24       	eor	r8, r8
 a52:	83 94       	inc	r8
 a54:	91 2c       	mov	r9, r1
 a56:	53 01       	movw	r10, r6
 a58:	12 c0       	rjmp	.+36     	; 0xa7e <vfprintf+0x178>
 a5a:	28 01       	movw	r4, r16
 a5c:	f2 e0       	ldi	r31, 0x02	; 2
 a5e:	4f 0e       	add	r4, r31
 a60:	51 1c       	adc	r5, r1
 a62:	f8 01       	movw	r30, r16
 a64:	a0 80       	ld	r10, Z
 a66:	b1 80       	ldd	r11, Z+1	; 0x01
 a68:	36 fe       	sbrs	r3, 6
 a6a:	03 c0       	rjmp	.+6      	; 0xa72 <vfprintf+0x16c>
 a6c:	69 2d       	mov	r22, r9
 a6e:	70 e0       	ldi	r23, 0x00	; 0
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <vfprintf+0x170>
 a72:	6f ef       	ldi	r22, 0xFF	; 255
 a74:	7f ef       	ldi	r23, 0xFF	; 255
 a76:	c5 01       	movw	r24, r10
 a78:	4e d1       	rcall	.+668    	; 0xd16 <strnlen>
 a7a:	4c 01       	movw	r8, r24
 a7c:	82 01       	movw	r16, r4
 a7e:	f3 2d       	mov	r31, r3
 a80:	ff 77       	andi	r31, 0x7F	; 127
 a82:	3f 2e       	mov	r3, r31
 a84:	15 c0       	rjmp	.+42     	; 0xab0 <vfprintf+0x1aa>
 a86:	28 01       	movw	r4, r16
 a88:	22 e0       	ldi	r18, 0x02	; 2
 a8a:	42 0e       	add	r4, r18
 a8c:	51 1c       	adc	r5, r1
 a8e:	f8 01       	movw	r30, r16
 a90:	a0 80       	ld	r10, Z
 a92:	b1 80       	ldd	r11, Z+1	; 0x01
 a94:	36 fe       	sbrs	r3, 6
 a96:	03 c0       	rjmp	.+6      	; 0xa9e <vfprintf+0x198>
 a98:	69 2d       	mov	r22, r9
 a9a:	70 e0       	ldi	r23, 0x00	; 0
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <vfprintf+0x19c>
 a9e:	6f ef       	ldi	r22, 0xFF	; 255
 aa0:	7f ef       	ldi	r23, 0xFF	; 255
 aa2:	c5 01       	movw	r24, r10
 aa4:	2d d1       	rcall	.+602    	; 0xd00 <strnlen_P>
 aa6:	4c 01       	movw	r8, r24
 aa8:	f3 2d       	mov	r31, r3
 aaa:	f0 68       	ori	r31, 0x80	; 128
 aac:	3f 2e       	mov	r3, r31
 aae:	82 01       	movw	r16, r4
 ab0:	33 fc       	sbrc	r3, 3
 ab2:	19 c0       	rjmp	.+50     	; 0xae6 <vfprintf+0x1e0>
 ab4:	82 2d       	mov	r24, r2
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	88 16       	cp	r8, r24
 aba:	99 06       	cpc	r9, r25
 abc:	a0 f4       	brcc	.+40     	; 0xae6 <vfprintf+0x1e0>
 abe:	b6 01       	movw	r22, r12
 ac0:	80 e2       	ldi	r24, 0x20	; 32
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	33 d1       	rcall	.+614    	; 0xd2c <fputc>
 ac6:	2a 94       	dec	r2
 ac8:	f5 cf       	rjmp	.-22     	; 0xab4 <vfprintf+0x1ae>
 aca:	f5 01       	movw	r30, r10
 acc:	37 fc       	sbrc	r3, 7
 ace:	85 91       	lpm	r24, Z+
 ad0:	37 fe       	sbrs	r3, 7
 ad2:	81 91       	ld	r24, Z+
 ad4:	5f 01       	movw	r10, r30
 ad6:	b6 01       	movw	r22, r12
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	28 d1       	rcall	.+592    	; 0xd2c <fputc>
 adc:	21 10       	cpse	r2, r1
 ade:	2a 94       	dec	r2
 ae0:	21 e0       	ldi	r18, 0x01	; 1
 ae2:	82 1a       	sub	r8, r18
 ae4:	91 08       	sbc	r9, r1
 ae6:	81 14       	cp	r8, r1
 ae8:	91 04       	cpc	r9, r1
 aea:	79 f7       	brne	.-34     	; 0xaca <vfprintf+0x1c4>
 aec:	e1 c0       	rjmp	.+450    	; 0xcb0 <vfprintf+0x3aa>
 aee:	84 36       	cpi	r24, 0x64	; 100
 af0:	11 f0       	breq	.+4      	; 0xaf6 <vfprintf+0x1f0>
 af2:	89 36       	cpi	r24, 0x69	; 105
 af4:	39 f5       	brne	.+78     	; 0xb44 <vfprintf+0x23e>
 af6:	f8 01       	movw	r30, r16
 af8:	37 fe       	sbrs	r3, 7
 afa:	07 c0       	rjmp	.+14     	; 0xb0a <vfprintf+0x204>
 afc:	60 81       	ld	r22, Z
 afe:	71 81       	ldd	r23, Z+1	; 0x01
 b00:	82 81       	ldd	r24, Z+2	; 0x02
 b02:	93 81       	ldd	r25, Z+3	; 0x03
 b04:	0c 5f       	subi	r16, 0xFC	; 252
 b06:	1f 4f       	sbci	r17, 0xFF	; 255
 b08:	08 c0       	rjmp	.+16     	; 0xb1a <vfprintf+0x214>
 b0a:	60 81       	ld	r22, Z
 b0c:	71 81       	ldd	r23, Z+1	; 0x01
 b0e:	07 2e       	mov	r0, r23
 b10:	00 0c       	add	r0, r0
 b12:	88 0b       	sbc	r24, r24
 b14:	99 0b       	sbc	r25, r25
 b16:	0e 5f       	subi	r16, 0xFE	; 254
 b18:	1f 4f       	sbci	r17, 0xFF	; 255
 b1a:	f3 2d       	mov	r31, r3
 b1c:	ff 76       	andi	r31, 0x6F	; 111
 b1e:	3f 2e       	mov	r3, r31
 b20:	97 ff       	sbrs	r25, 7
 b22:	09 c0       	rjmp	.+18     	; 0xb36 <vfprintf+0x230>
 b24:	90 95       	com	r25
 b26:	80 95       	com	r24
 b28:	70 95       	com	r23
 b2a:	61 95       	neg	r22
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255
 b2e:	8f 4f       	sbci	r24, 0xFF	; 255
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	f0 68       	ori	r31, 0x80	; 128
 b34:	3f 2e       	mov	r3, r31
 b36:	2a e0       	ldi	r18, 0x0A	; 10
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	a3 01       	movw	r20, r6
 b3c:	33 d1       	rcall	.+614    	; 0xda4 <__ultoa_invert>
 b3e:	88 2e       	mov	r8, r24
 b40:	86 18       	sub	r8, r6
 b42:	44 c0       	rjmp	.+136    	; 0xbcc <vfprintf+0x2c6>
 b44:	85 37       	cpi	r24, 0x75	; 117
 b46:	31 f4       	brne	.+12     	; 0xb54 <vfprintf+0x24e>
 b48:	23 2d       	mov	r18, r3
 b4a:	2f 7e       	andi	r18, 0xEF	; 239
 b4c:	b2 2e       	mov	r11, r18
 b4e:	2a e0       	ldi	r18, 0x0A	; 10
 b50:	30 e0       	ldi	r19, 0x00	; 0
 b52:	25 c0       	rjmp	.+74     	; 0xb9e <vfprintf+0x298>
 b54:	93 2d       	mov	r25, r3
 b56:	99 7f       	andi	r25, 0xF9	; 249
 b58:	b9 2e       	mov	r11, r25
 b5a:	8f 36       	cpi	r24, 0x6F	; 111
 b5c:	c1 f0       	breq	.+48     	; 0xb8e <vfprintf+0x288>
 b5e:	18 f4       	brcc	.+6      	; 0xb66 <vfprintf+0x260>
 b60:	88 35       	cpi	r24, 0x58	; 88
 b62:	79 f0       	breq	.+30     	; 0xb82 <vfprintf+0x27c>
 b64:	ae c0       	rjmp	.+348    	; 0xcc2 <vfprintf+0x3bc>
 b66:	80 37       	cpi	r24, 0x70	; 112
 b68:	19 f0       	breq	.+6      	; 0xb70 <vfprintf+0x26a>
 b6a:	88 37       	cpi	r24, 0x78	; 120
 b6c:	21 f0       	breq	.+8      	; 0xb76 <vfprintf+0x270>
 b6e:	a9 c0       	rjmp	.+338    	; 0xcc2 <vfprintf+0x3bc>
 b70:	e9 2f       	mov	r30, r25
 b72:	e0 61       	ori	r30, 0x10	; 16
 b74:	be 2e       	mov	r11, r30
 b76:	b4 fe       	sbrs	r11, 4
 b78:	0d c0       	rjmp	.+26     	; 0xb94 <vfprintf+0x28e>
 b7a:	fb 2d       	mov	r31, r11
 b7c:	f4 60       	ori	r31, 0x04	; 4
 b7e:	bf 2e       	mov	r11, r31
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <vfprintf+0x28e>
 b82:	34 fe       	sbrs	r3, 4
 b84:	0a c0       	rjmp	.+20     	; 0xb9a <vfprintf+0x294>
 b86:	29 2f       	mov	r18, r25
 b88:	26 60       	ori	r18, 0x06	; 6
 b8a:	b2 2e       	mov	r11, r18
 b8c:	06 c0       	rjmp	.+12     	; 0xb9a <vfprintf+0x294>
 b8e:	28 e0       	ldi	r18, 0x08	; 8
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	05 c0       	rjmp	.+10     	; 0xb9e <vfprintf+0x298>
 b94:	20 e1       	ldi	r18, 0x10	; 16
 b96:	30 e0       	ldi	r19, 0x00	; 0
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <vfprintf+0x298>
 b9a:	20 e1       	ldi	r18, 0x10	; 16
 b9c:	32 e0       	ldi	r19, 0x02	; 2
 b9e:	f8 01       	movw	r30, r16
 ba0:	b7 fe       	sbrs	r11, 7
 ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <vfprintf+0x2ac>
 ba4:	60 81       	ld	r22, Z
 ba6:	71 81       	ldd	r23, Z+1	; 0x01
 ba8:	82 81       	ldd	r24, Z+2	; 0x02
 baa:	93 81       	ldd	r25, Z+3	; 0x03
 bac:	0c 5f       	subi	r16, 0xFC	; 252
 bae:	1f 4f       	sbci	r17, 0xFF	; 255
 bb0:	06 c0       	rjmp	.+12     	; 0xbbe <vfprintf+0x2b8>
 bb2:	60 81       	ld	r22, Z
 bb4:	71 81       	ldd	r23, Z+1	; 0x01
 bb6:	80 e0       	ldi	r24, 0x00	; 0
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 5f       	subi	r16, 0xFE	; 254
 bbc:	1f 4f       	sbci	r17, 0xFF	; 255
 bbe:	a3 01       	movw	r20, r6
 bc0:	f1 d0       	rcall	.+482    	; 0xda4 <__ultoa_invert>
 bc2:	88 2e       	mov	r8, r24
 bc4:	86 18       	sub	r8, r6
 bc6:	fb 2d       	mov	r31, r11
 bc8:	ff 77       	andi	r31, 0x7F	; 127
 bca:	3f 2e       	mov	r3, r31
 bcc:	36 fe       	sbrs	r3, 6
 bce:	0d c0       	rjmp	.+26     	; 0xbea <vfprintf+0x2e4>
 bd0:	23 2d       	mov	r18, r3
 bd2:	2e 7f       	andi	r18, 0xFE	; 254
 bd4:	a2 2e       	mov	r10, r18
 bd6:	89 14       	cp	r8, r9
 bd8:	58 f4       	brcc	.+22     	; 0xbf0 <vfprintf+0x2ea>
 bda:	34 fe       	sbrs	r3, 4
 bdc:	0b c0       	rjmp	.+22     	; 0xbf4 <vfprintf+0x2ee>
 bde:	32 fc       	sbrc	r3, 2
 be0:	09 c0       	rjmp	.+18     	; 0xbf4 <vfprintf+0x2ee>
 be2:	83 2d       	mov	r24, r3
 be4:	8e 7e       	andi	r24, 0xEE	; 238
 be6:	a8 2e       	mov	r10, r24
 be8:	05 c0       	rjmp	.+10     	; 0xbf4 <vfprintf+0x2ee>
 bea:	b8 2c       	mov	r11, r8
 bec:	a3 2c       	mov	r10, r3
 bee:	03 c0       	rjmp	.+6      	; 0xbf6 <vfprintf+0x2f0>
 bf0:	b8 2c       	mov	r11, r8
 bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <vfprintf+0x2f0>
 bf4:	b9 2c       	mov	r11, r9
 bf6:	a4 fe       	sbrs	r10, 4
 bf8:	0f c0       	rjmp	.+30     	; 0xc18 <vfprintf+0x312>
 bfa:	fe 01       	movw	r30, r28
 bfc:	e8 0d       	add	r30, r8
 bfe:	f1 1d       	adc	r31, r1
 c00:	80 81       	ld	r24, Z
 c02:	80 33       	cpi	r24, 0x30	; 48
 c04:	21 f4       	brne	.+8      	; 0xc0e <vfprintf+0x308>
 c06:	9a 2d       	mov	r25, r10
 c08:	99 7e       	andi	r25, 0xE9	; 233
 c0a:	a9 2e       	mov	r10, r25
 c0c:	09 c0       	rjmp	.+18     	; 0xc20 <vfprintf+0x31a>
 c0e:	a2 fe       	sbrs	r10, 2
 c10:	06 c0       	rjmp	.+12     	; 0xc1e <vfprintf+0x318>
 c12:	b3 94       	inc	r11
 c14:	b3 94       	inc	r11
 c16:	04 c0       	rjmp	.+8      	; 0xc20 <vfprintf+0x31a>
 c18:	8a 2d       	mov	r24, r10
 c1a:	86 78       	andi	r24, 0x86	; 134
 c1c:	09 f0       	breq	.+2      	; 0xc20 <vfprintf+0x31a>
 c1e:	b3 94       	inc	r11
 c20:	a3 fc       	sbrc	r10, 3
 c22:	10 c0       	rjmp	.+32     	; 0xc44 <vfprintf+0x33e>
 c24:	a0 fe       	sbrs	r10, 0
 c26:	06 c0       	rjmp	.+12     	; 0xc34 <vfprintf+0x32e>
 c28:	b2 14       	cp	r11, r2
 c2a:	80 f4       	brcc	.+32     	; 0xc4c <vfprintf+0x346>
 c2c:	28 0c       	add	r2, r8
 c2e:	92 2c       	mov	r9, r2
 c30:	9b 18       	sub	r9, r11
 c32:	0d c0       	rjmp	.+26     	; 0xc4e <vfprintf+0x348>
 c34:	b2 14       	cp	r11, r2
 c36:	58 f4       	brcc	.+22     	; 0xc4e <vfprintf+0x348>
 c38:	b6 01       	movw	r22, r12
 c3a:	80 e2       	ldi	r24, 0x20	; 32
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	76 d0       	rcall	.+236    	; 0xd2c <fputc>
 c40:	b3 94       	inc	r11
 c42:	f8 cf       	rjmp	.-16     	; 0xc34 <vfprintf+0x32e>
 c44:	b2 14       	cp	r11, r2
 c46:	18 f4       	brcc	.+6      	; 0xc4e <vfprintf+0x348>
 c48:	2b 18       	sub	r2, r11
 c4a:	02 c0       	rjmp	.+4      	; 0xc50 <vfprintf+0x34a>
 c4c:	98 2c       	mov	r9, r8
 c4e:	21 2c       	mov	r2, r1
 c50:	a4 fe       	sbrs	r10, 4
 c52:	0f c0       	rjmp	.+30     	; 0xc72 <vfprintf+0x36c>
 c54:	b6 01       	movw	r22, r12
 c56:	80 e3       	ldi	r24, 0x30	; 48
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	68 d0       	rcall	.+208    	; 0xd2c <fputc>
 c5c:	a2 fe       	sbrs	r10, 2
 c5e:	16 c0       	rjmp	.+44     	; 0xc8c <vfprintf+0x386>
 c60:	a1 fc       	sbrc	r10, 1
 c62:	03 c0       	rjmp	.+6      	; 0xc6a <vfprintf+0x364>
 c64:	88 e7       	ldi	r24, 0x78	; 120
 c66:	90 e0       	ldi	r25, 0x00	; 0
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x368>
 c6a:	88 e5       	ldi	r24, 0x58	; 88
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	b6 01       	movw	r22, r12
 c70:	0c c0       	rjmp	.+24     	; 0xc8a <vfprintf+0x384>
 c72:	8a 2d       	mov	r24, r10
 c74:	86 78       	andi	r24, 0x86	; 134
 c76:	51 f0       	breq	.+20     	; 0xc8c <vfprintf+0x386>
 c78:	a1 fe       	sbrs	r10, 1
 c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0x37a>
 c7c:	8b e2       	ldi	r24, 0x2B	; 43
 c7e:	01 c0       	rjmp	.+2      	; 0xc82 <vfprintf+0x37c>
 c80:	80 e2       	ldi	r24, 0x20	; 32
 c82:	a7 fc       	sbrc	r10, 7
 c84:	8d e2       	ldi	r24, 0x2D	; 45
 c86:	b6 01       	movw	r22, r12
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	50 d0       	rcall	.+160    	; 0xd2c <fputc>
 c8c:	89 14       	cp	r8, r9
 c8e:	30 f4       	brcc	.+12     	; 0xc9c <vfprintf+0x396>
 c90:	b6 01       	movw	r22, r12
 c92:	80 e3       	ldi	r24, 0x30	; 48
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	4a d0       	rcall	.+148    	; 0xd2c <fputc>
 c98:	9a 94       	dec	r9
 c9a:	f8 cf       	rjmp	.-16     	; 0xc8c <vfprintf+0x386>
 c9c:	8a 94       	dec	r8
 c9e:	f3 01       	movw	r30, r6
 ca0:	e8 0d       	add	r30, r8
 ca2:	f1 1d       	adc	r31, r1
 ca4:	80 81       	ld	r24, Z
 ca6:	b6 01       	movw	r22, r12
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	40 d0       	rcall	.+128    	; 0xd2c <fputc>
 cac:	81 10       	cpse	r8, r1
 cae:	f6 cf       	rjmp	.-20     	; 0xc9c <vfprintf+0x396>
 cb0:	22 20       	and	r2, r2
 cb2:	09 f4       	brne	.+2      	; 0xcb6 <vfprintf+0x3b0>
 cb4:	4e ce       	rjmp	.-868    	; 0x952 <vfprintf+0x4c>
 cb6:	b6 01       	movw	r22, r12
 cb8:	80 e2       	ldi	r24, 0x20	; 32
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	37 d0       	rcall	.+110    	; 0xd2c <fputc>
 cbe:	2a 94       	dec	r2
 cc0:	f7 cf       	rjmp	.-18     	; 0xcb0 <vfprintf+0x3aa>
 cc2:	f6 01       	movw	r30, r12
 cc4:	86 81       	ldd	r24, Z+6	; 0x06
 cc6:	97 81       	ldd	r25, Z+7	; 0x07
 cc8:	02 c0       	rjmp	.+4      	; 0xcce <vfprintf+0x3c8>
 cca:	8f ef       	ldi	r24, 0xFF	; 255
 ccc:	9f ef       	ldi	r25, 0xFF	; 255
 cce:	2b 96       	adiw	r28, 0x0b	; 11
 cd0:	0f b6       	in	r0, 0x3f	; 63
 cd2:	f8 94       	cli
 cd4:	de bf       	out	0x3e, r29	; 62
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	cd bf       	out	0x3d, r28	; 61
 cda:	df 91       	pop	r29
 cdc:	cf 91       	pop	r28
 cde:	1f 91       	pop	r17
 ce0:	0f 91       	pop	r16
 ce2:	ff 90       	pop	r15
 ce4:	ef 90       	pop	r14
 ce6:	df 90       	pop	r13
 ce8:	cf 90       	pop	r12
 cea:	bf 90       	pop	r11
 cec:	af 90       	pop	r10
 cee:	9f 90       	pop	r9
 cf0:	8f 90       	pop	r8
 cf2:	7f 90       	pop	r7
 cf4:	6f 90       	pop	r6
 cf6:	5f 90       	pop	r5
 cf8:	4f 90       	pop	r4
 cfa:	3f 90       	pop	r3
 cfc:	2f 90       	pop	r2
 cfe:	08 95       	ret

00000d00 <strnlen_P>:
 d00:	fc 01       	movw	r30, r24
 d02:	05 90       	lpm	r0, Z+
 d04:	61 50       	subi	r22, 0x01	; 1
 d06:	70 40       	sbci	r23, 0x00	; 0
 d08:	01 10       	cpse	r0, r1
 d0a:	d8 f7       	brcc	.-10     	; 0xd02 <strnlen_P+0x2>
 d0c:	80 95       	com	r24
 d0e:	90 95       	com	r25
 d10:	8e 0f       	add	r24, r30
 d12:	9f 1f       	adc	r25, r31
 d14:	08 95       	ret

00000d16 <strnlen>:
 d16:	fc 01       	movw	r30, r24
 d18:	61 50       	subi	r22, 0x01	; 1
 d1a:	70 40       	sbci	r23, 0x00	; 0
 d1c:	01 90       	ld	r0, Z+
 d1e:	01 10       	cpse	r0, r1
 d20:	d8 f7       	brcc	.-10     	; 0xd18 <strnlen+0x2>
 d22:	80 95       	com	r24
 d24:	90 95       	com	r25
 d26:	8e 0f       	add	r24, r30
 d28:	9f 1f       	adc	r25, r31
 d2a:	08 95       	ret

00000d2c <fputc>:
 d2c:	0f 93       	push	r16
 d2e:	1f 93       	push	r17
 d30:	cf 93       	push	r28
 d32:	df 93       	push	r29
 d34:	fb 01       	movw	r30, r22
 d36:	23 81       	ldd	r18, Z+3	; 0x03
 d38:	21 fd       	sbrc	r18, 1
 d3a:	03 c0       	rjmp	.+6      	; 0xd42 <fputc+0x16>
 d3c:	8f ef       	ldi	r24, 0xFF	; 255
 d3e:	9f ef       	ldi	r25, 0xFF	; 255
 d40:	2c c0       	rjmp	.+88     	; 0xd9a <fputc+0x6e>
 d42:	22 ff       	sbrs	r18, 2
 d44:	16 c0       	rjmp	.+44     	; 0xd72 <fputc+0x46>
 d46:	46 81       	ldd	r20, Z+6	; 0x06
 d48:	57 81       	ldd	r21, Z+7	; 0x07
 d4a:	24 81       	ldd	r18, Z+4	; 0x04
 d4c:	35 81       	ldd	r19, Z+5	; 0x05
 d4e:	42 17       	cp	r20, r18
 d50:	53 07       	cpc	r21, r19
 d52:	44 f4       	brge	.+16     	; 0xd64 <fputc+0x38>
 d54:	a0 81       	ld	r26, Z
 d56:	b1 81       	ldd	r27, Z+1	; 0x01
 d58:	9d 01       	movw	r18, r26
 d5a:	2f 5f       	subi	r18, 0xFF	; 255
 d5c:	3f 4f       	sbci	r19, 0xFF	; 255
 d5e:	31 83       	std	Z+1, r19	; 0x01
 d60:	20 83       	st	Z, r18
 d62:	8c 93       	st	X, r24
 d64:	26 81       	ldd	r18, Z+6	; 0x06
 d66:	37 81       	ldd	r19, Z+7	; 0x07
 d68:	2f 5f       	subi	r18, 0xFF	; 255
 d6a:	3f 4f       	sbci	r19, 0xFF	; 255
 d6c:	37 83       	std	Z+7, r19	; 0x07
 d6e:	26 83       	std	Z+6, r18	; 0x06
 d70:	14 c0       	rjmp	.+40     	; 0xd9a <fputc+0x6e>
 d72:	8b 01       	movw	r16, r22
 d74:	ec 01       	movw	r28, r24
 d76:	fb 01       	movw	r30, r22
 d78:	00 84       	ldd	r0, Z+8	; 0x08
 d7a:	f1 85       	ldd	r31, Z+9	; 0x09
 d7c:	e0 2d       	mov	r30, r0
 d7e:	19 95       	eicall
 d80:	89 2b       	or	r24, r25
 d82:	e1 f6       	brne	.-72     	; 0xd3c <fputc+0x10>
 d84:	d8 01       	movw	r26, r16
 d86:	16 96       	adiw	r26, 0x06	; 6
 d88:	8d 91       	ld	r24, X+
 d8a:	9c 91       	ld	r25, X
 d8c:	17 97       	sbiw	r26, 0x07	; 7
 d8e:	01 96       	adiw	r24, 0x01	; 1
 d90:	17 96       	adiw	r26, 0x07	; 7
 d92:	9c 93       	st	X, r25
 d94:	8e 93       	st	-X, r24
 d96:	16 97       	sbiw	r26, 0x06	; 6
 d98:	ce 01       	movw	r24, r28
 d9a:	df 91       	pop	r29
 d9c:	cf 91       	pop	r28
 d9e:	1f 91       	pop	r17
 da0:	0f 91       	pop	r16
 da2:	08 95       	ret

00000da4 <__ultoa_invert>:
 da4:	fa 01       	movw	r30, r20
 da6:	aa 27       	eor	r26, r26
 da8:	28 30       	cpi	r18, 0x08	; 8
 daa:	51 f1       	breq	.+84     	; 0xe00 <__ultoa_invert+0x5c>
 dac:	20 31       	cpi	r18, 0x10	; 16
 dae:	81 f1       	breq	.+96     	; 0xe10 <__ultoa_invert+0x6c>
 db0:	e8 94       	clt
 db2:	6f 93       	push	r22
 db4:	6e 7f       	andi	r22, 0xFE	; 254
 db6:	6e 5f       	subi	r22, 0xFE	; 254
 db8:	7f 4f       	sbci	r23, 0xFF	; 255
 dba:	8f 4f       	sbci	r24, 0xFF	; 255
 dbc:	9f 4f       	sbci	r25, 0xFF	; 255
 dbe:	af 4f       	sbci	r26, 0xFF	; 255
 dc0:	b1 e0       	ldi	r27, 0x01	; 1
 dc2:	3e d0       	rcall	.+124    	; 0xe40 <__ultoa_invert+0x9c>
 dc4:	b4 e0       	ldi	r27, 0x04	; 4
 dc6:	3c d0       	rcall	.+120    	; 0xe40 <__ultoa_invert+0x9c>
 dc8:	67 0f       	add	r22, r23
 dca:	78 1f       	adc	r23, r24
 dcc:	89 1f       	adc	r24, r25
 dce:	9a 1f       	adc	r25, r26
 dd0:	a1 1d       	adc	r26, r1
 dd2:	68 0f       	add	r22, r24
 dd4:	79 1f       	adc	r23, r25
 dd6:	8a 1f       	adc	r24, r26
 dd8:	91 1d       	adc	r25, r1
 dda:	a1 1d       	adc	r26, r1
 ddc:	6a 0f       	add	r22, r26
 dde:	71 1d       	adc	r23, r1
 de0:	81 1d       	adc	r24, r1
 de2:	91 1d       	adc	r25, r1
 de4:	a1 1d       	adc	r26, r1
 de6:	20 d0       	rcall	.+64     	; 0xe28 <__ultoa_invert+0x84>
 de8:	09 f4       	brne	.+2      	; 0xdec <__ultoa_invert+0x48>
 dea:	68 94       	set
 dec:	3f 91       	pop	r19
 dee:	2a e0       	ldi	r18, 0x0A	; 10
 df0:	26 9f       	mul	r18, r22
 df2:	11 24       	eor	r1, r1
 df4:	30 19       	sub	r19, r0
 df6:	30 5d       	subi	r19, 0xD0	; 208
 df8:	31 93       	st	Z+, r19
 dfa:	de f6       	brtc	.-74     	; 0xdb2 <__ultoa_invert+0xe>
 dfc:	cf 01       	movw	r24, r30
 dfe:	08 95       	ret
 e00:	46 2f       	mov	r20, r22
 e02:	47 70       	andi	r20, 0x07	; 7
 e04:	40 5d       	subi	r20, 0xD0	; 208
 e06:	41 93       	st	Z+, r20
 e08:	b3 e0       	ldi	r27, 0x03	; 3
 e0a:	0f d0       	rcall	.+30     	; 0xe2a <__ultoa_invert+0x86>
 e0c:	c9 f7       	brne	.-14     	; 0xe00 <__ultoa_invert+0x5c>
 e0e:	f6 cf       	rjmp	.-20     	; 0xdfc <__ultoa_invert+0x58>
 e10:	46 2f       	mov	r20, r22
 e12:	4f 70       	andi	r20, 0x0F	; 15
 e14:	40 5d       	subi	r20, 0xD0	; 208
 e16:	4a 33       	cpi	r20, 0x3A	; 58
 e18:	18 f0       	brcs	.+6      	; 0xe20 <__ultoa_invert+0x7c>
 e1a:	49 5d       	subi	r20, 0xD9	; 217
 e1c:	31 fd       	sbrc	r19, 1
 e1e:	40 52       	subi	r20, 0x20	; 32
 e20:	41 93       	st	Z+, r20
 e22:	02 d0       	rcall	.+4      	; 0xe28 <__ultoa_invert+0x84>
 e24:	a9 f7       	brne	.-22     	; 0xe10 <__ultoa_invert+0x6c>
 e26:	ea cf       	rjmp	.-44     	; 0xdfc <__ultoa_invert+0x58>
 e28:	b4 e0       	ldi	r27, 0x04	; 4
 e2a:	a6 95       	lsr	r26
 e2c:	97 95       	ror	r25
 e2e:	87 95       	ror	r24
 e30:	77 95       	ror	r23
 e32:	67 95       	ror	r22
 e34:	ba 95       	dec	r27
 e36:	c9 f7       	brne	.-14     	; 0xe2a <__ultoa_invert+0x86>
 e38:	00 97       	sbiw	r24, 0x00	; 0
 e3a:	61 05       	cpc	r22, r1
 e3c:	71 05       	cpc	r23, r1
 e3e:	08 95       	ret
 e40:	9b 01       	movw	r18, r22
 e42:	ac 01       	movw	r20, r24
 e44:	0a 2e       	mov	r0, r26
 e46:	06 94       	lsr	r0
 e48:	57 95       	ror	r21
 e4a:	47 95       	ror	r20
 e4c:	37 95       	ror	r19
 e4e:	27 95       	ror	r18
 e50:	ba 95       	dec	r27
 e52:	c9 f7       	brne	.-14     	; 0xe46 <__ultoa_invert+0xa2>
 e54:	62 0f       	add	r22, r18
 e56:	73 1f       	adc	r23, r19
 e58:	84 1f       	adc	r24, r20
 e5a:	95 1f       	adc	r25, r21
 e5c:	a0 1d       	adc	r26, r0
 e5e:	08 95       	ret

00000e60 <_exit>:
 e60:	f8 94       	cli

00000e62 <__stop_program>:
 e62:	ff cf       	rjmp	.-2      	; 0xe62 <__stop_program>
